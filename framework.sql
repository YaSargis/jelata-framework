--
-- PostgreSQL database dump
--

-- Dumped from database version 9.5.10
-- Dumped by pg_dump version 9.5.1

-- Started on 2020-05-21 16:57:31

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- TOC entry 8 (class 2615 OID 227204)
-- Name: framework; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA framework;


ALTER SCHEMA framework OWNER TO postgres;

--
-- TOC entry 3321 (class 0 OID 0)
-- Dependencies: 8
-- Name: SCHEMA framework; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA framework IS 'framework major tables and functions';


--
-- TOC entry 9 (class 2615 OID 227205)
-- Name: reports; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA reports;


ALTER SCHEMA reports OWNER TO postgres;

--
-- TOC entry 3324 (class 0 OID 0)
-- Dependencies: 9
-- Name: SCHEMA reports; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA reports IS 'reports';


--
-- TOC entry 10 (class 2615 OID 227206)
-- Name: sqlmanager; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA sqlmanager;


ALTER SCHEMA sqlmanager OWNER TO postgres;

--
-- TOC entry 3325 (class 0 OID 0)
-- Dependencies: 10
-- Name: SCHEMA sqlmanager; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA sqlmanager IS 'sql manager';


--
-- TOC entry 11 (class 2615 OID 227207)
-- Name: test; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA test;


ALTER SCHEMA test OWNER TO postgres;

--
-- TOC entry 3326 (class 0 OID 0)
-- Dependencies: 11
-- Name: SCHEMA test; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA test IS 'for tests';


--
-- TOC entry 1 (class 3079 OID 12355)
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- TOC entry 3327 (class 0 OID 0)
-- Dependencies: 1
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- TOC entry 2 (class 3079 OID 227208)
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;


--
-- TOC entry 3328 (class 0 OID 0)
-- Dependencies: 2
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


SET search_path = framework, pg_catalog;

--
-- TOC entry 353 (class 1255 OID 227245)
-- Name: fn_action_add_untitle(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_action_add_untitle(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _viewid int;
  _id int;
BEGIN
	-- add untitle action in actions table
	
    _viewid = injson->>'viewid';
    
    IF _viewid is NULL THEN
    	PERFORM raiserror('viewid is null');
    END IF;
    
    _id = nextval('framework.actions_id_seq'::regclass);
    INSERT INTO framework.actions (
      id, column_order, 
      title, viewid, icon, 
      act_url, act_type
    )
    VALUES (
      _id, COALESCE((
      	SELECT max(column_order) 
       	FROM framework.actions 
        WHERE viewid = _viewid
      ),0) + 1, 
      concat('untitled_',_id::varchar), _viewid, 'default', 
      '/', 'Link'
    );
    
    
END;
$$;


ALTER FUNCTION framework.fn_action_add_untitle(injson json) OWNER TO postgres;

--
-- TOC entry 3329 (class 0 OID 0)
-- Dependencies: 353
-- Name: FUNCTION fn_action_add_untitle(injson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_action_add_untitle(injson json) IS 'add untitle action in actions table';


--
-- TOC entry 354 (class 1255 OID 227246)
-- Name: fn_action_copy(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_action_copy(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _id int;
  action_id int;
BEGIN

  -- COPY ACTION IN VIEW
  _id = injson->>'id';
  
  action_id = nextval('framework.actions_id_seq'::regclass);
  
  
  INSERT INTO framework.actions (
      id, title, act_type,
      act_url, api_method, api_type,
	  ask_confirm, classname, column_order,
	  forevery, icon, main_action,
	  refresh_data, roles, viewid
  )
  SELECT
      action_id, concat(a.title,'_',action_id::varchar), a.act_type,
	  a.act_url, a.api_method, a.api_type,
	  a.ask_confirm, a.classname, COALESCE((
	    SELECT max(aa.column_order)
		FROM framework.actions as aa
		WHERE aa.viewid = a.viewid			 
	  ),0) + 1,
	  a.forevery, a.icon, a.main_action,
	  a.refresh_data, a.roles, a.viewid
  FROM framework.actions as a
  WHERE a.id = _id;
  
  INSERT INTO framework.act_parametrs(
  	actionid, paramtitle, paramt,
	paramconst, paraminput, paramcolumn,
	val_desc, query_type
  )
  SELECT
	action_id, paramtitle, paramt,
	paramconst, paraminput, paramcolumn,
	val_desc, query_type
  FROM framework.act_parametrs
  WHERE actionid = _id;
  
  INSERT INTO framework.act_visible_condions (
	actionid, val_desc, col,
	title, operation, value
  ) 
  SELECT
    action_id, val_desc, col,
	title, operation, value
  FROM framework.act_visible_condions
  WHERE actionid = _id;
  
  
END;
$$;


ALTER FUNCTION framework.fn_action_copy(injson json) OWNER TO postgres;

--
-- TOC entry 3330 (class 0 OID 0)
-- Dependencies: 354
-- Name: FUNCTION fn_action_copy(injson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_action_copy(injson json) IS 'COPY ACTION IN VIEW';


--
-- TOC entry 355 (class 1255 OID 227247)
-- Name: fn_allviews_sel(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_allviews_sel(injson json, OUT outjson json, OUT foundcount bigint) RETURNS record
    LANGUAGE plpgsql
    AS $$
-- USING IN COMPOSITIONS
DECLARE
  --pagenum smallint;
 -- pagesize smallint;
  substr varchar(50);
 -- _off smallint;
BEGIN
 -- pagenum = injson->>'pagenum';
  --pagesize = injson->>'pagesize';
  substr = injson->>'substr';
  
 -- pagenum = coalesce(pagenum,'1');
  --pagesize = coalesce(pagesize,'15');
  substr = upper(concat('%',coalesce(substr,'%'),'%')); 
 --_off=(pagenum*pagesize)-pagesize;
  foundcount = (
	SELECT count(v.id)
	FROM framework.views as v
	WHERE upper(v.title) like substr or upper(v.tablename) like substr or 
	      upper(v.path) like substr
  );
  
  SELECT 
  	array_to_json(array_agg(row_to_json(d)))
  FROM (
	  SELECT 
		  ROW_NUMBER() over ( order by v.id ) as rownum,
		  v.id, v.title, v.viewtype,
		  v.descr, v.tablename, v.path,
		  v.subscrible, '' as viewlink
	  FROM framework.views as v
	  WHERE upper(v.title) like substr or upper(v.tablename) like substr or 
	        upper(v.path) like substr
	  ORDER BY v.id
    ) as d
  INTO outjson;
  
  outjson = COALESCE(outjson,'[]');
END;
$$;


ALTER FUNCTION framework.fn_allviews_sel(injson json, OUT outjson json, OUT foundcount bigint) OWNER TO postgres;

--
-- TOC entry 3331 (class 0 OID 0)
-- Dependencies: 355
-- Name: FUNCTION fn_allviews_sel(injson json, OUT outjson json, OUT foundcount bigint); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_allviews_sel(injson json, OUT outjson json, OUT foundcount bigint) IS 'USING IN COMPOSITIONS
GET ALL VIEWS';


--
-- TOC entry 356 (class 1255 OID 227248)
-- Name: fn_apimethods(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_apimethods(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
BEGIN
	-- API method list
	SELECT 
    	array_to_json(array_agg(row_to_json(d)))
    FROM (
	  SELECT
		  a.val as label,
		  a.val as value
	  FROM framework.apimethods as a
	) as d
    INTO outjson;
    
    outjson = coalesce(outjson,'[]');
    

END;
$$;


ALTER FUNCTION framework.fn_apimethods(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3332 (class 0 OID 0)
-- Dependencies: 356
-- Name: FUNCTION fn_apimethods(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_apimethods(injson json, OUT outjson json) IS 'API Methods list';


--
-- TOC entry 357 (class 1255 OID 227249)
-- Name: fn_autocomplete(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_autocomplete(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $_$
DECLARE
  col varchar;
 -- val varchar;
  _table varchar;
  squery varchar;
  _val varchar;
BEGIN
	-- FORM AUTOCOMPLETE METHOD
	col = injson->>'col';
    _val = injson->>'val';
    _table = injson->>'table';
    --perform raiserror(val);
    IF _val is not null and length(_val) > 0 THEN
    	_val = concat('%',upper(_val),'%');
    	squery = concat(
		    squery, 'SELECT array_to_json(array_agg(row_to_json(d))) FROM (
            SELECT distinct ' , 
            col , ' as value, ' , col , ' 
        	as label FROM ' , _table , ' WHERE upper(' , 
            col , ')::varchar like $1::varchar LIMIT 500) as d'
		);
            	
       EXECUTE format(squery) USING _val INTO outjson;
       
       outjson = coalesce(
	      outjson, (
		     SELECT 
		         array_to_json(array_agg(row_to_json(d))) 
			 FROM (    
			     SELECT 
				  injson ->> 'val' as value, 
				  injson ->> 'val' as label          
			 ) as d
	      )
	  );
    END IF;        

	outjson = coalesce(outjson,'[]');
    outjson = '{"label":"","value":null}'::jsonb||outjson::jsonb; 

END;
$_$;


ALTER FUNCTION framework.fn_autocomplete(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3333 (class 0 OID 0)
-- Dependencies: 357
-- Name: FUNCTION fn_autocomplete(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_autocomplete(injson json, OUT outjson json) IS 'FORM AUTOCOMPLETE METHOD';


--
-- TOC entry 358 (class 1255 OID 227250)
-- Name: fn_branchestree_recurs(integer, integer); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_branchestree_recurs(_parentid integer, _treesid integer, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
BEGIN
	-- TREES BRANCHES RECURS FUNCTION
	SELECT
    	array_to_json(array_agg(row_to_json(d))) 
    FROM ( 
	  SELECT
          tb.id as key, tb.icon,
          tb.parentid, tb.treesid,
          tb.title as label, tb.ismain,
          framework.fn_branchestree_recurs(tb.id,tb.treesid) as children
      FROM framework.treesbranches as tb
      WHERE tb.treesid = _treesid and tb.title is not null and 
            coalesce(tb.parentid,0) = coalesce(_parentid,0)
      ORDER BY coalesce(tb.orderby,0)
    ) as d
    INTO outjson;
      
     -- outjson = coalesce(outjson,'[]');
END;
$$;


ALTER FUNCTION framework.fn_branchestree_recurs(_parentid integer, _treesid integer, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3334 (class 0 OID 0)
-- Dependencies: 358
-- Name: FUNCTION fn_branchestree_recurs(_parentid integer, _treesid integer, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_branchestree_recurs(_parentid integer, _treesid integer, OUT outjson json) IS 'TREES BRANCHES RECURS FUNCTION';


--
-- TOC entry 359 (class 1255 OID 227251)
-- Name: fn_col_add_select_condition(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_col_add_select_condition(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
	_conf_id int;
    _operation varchar(30);
    _value varchar(150);
    _const varchar(350);
    _col varchar(350);
    _title varchar(350);
BEGIN
	-- add select_condition for config
    
    _conf_id = injson->>'confid';
    _operation = '=';
    _const = 'CONST';
	
	IF _conf_id is null THEN
    	PERFORM raiserror('configid is null');
    END IF;
    
    INSERT INTO framework.select_condition (
      configid, col, title,
      operation, const, value
    ) VALUES (
      _conf_id, _col, _title,
      _operation, _const, _value
    );
	

END;
$$;


ALTER FUNCTION framework.fn_col_add_select_condition(injson json) OWNER TO postgres;

--
-- TOC entry 3335 (class 0 OID 0)
-- Dependencies: 359
-- Name: FUNCTION fn_col_add_select_condition(injson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_col_add_select_condition(injson json) IS 'add select_condition for config';


--
-- TOC entry 360 (class 1255 OID 227252)
-- Name: fn_compo(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_compo(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  _id int;
BEGIN
	-- GET COMPO
    
	_id = injson->>'id';
    
    SELECT row_to_json(d)
    FROM (
     	SELECT *
     	FROM framework.compos as c
     	WHERE c.id = _id
    ) as d
    INTO outjson;
    
	outjson = coalesce(outjson,'{}');

END;
$$;


ALTER FUNCTION framework.fn_compo(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3336 (class 0 OID 0)
-- Dependencies: 360
-- Name: FUNCTION fn_compo(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_compo(injson json, OUT outjson json) IS 'GET COMPO';


--
-- TOC entry 361 (class 1255 OID 227253)
-- Name: fn_compo_bypath(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_compo_bypath(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  _path varchar(350);
BEGIN
	-- GET COMPO SETTINGS BY PATH
	_path = injson->>'path';
    
    SELECT row_to_json(d)
    FROM (
	   SELECT *
       FROM framework.compos as c
       WHERE c.path = _path
	) as d
    INTO outjson;


	outjson = coalesce(outjson,'{}');

END;
$$;


ALTER FUNCTION framework.fn_compo_bypath(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3337 (class 0 OID 0)
-- Dependencies: 361
-- Name: FUNCTION fn_compo_bypath(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_compo_bypath(injson json, OUT outjson json) IS 'GET COMPO SETTINGS BY PATH';


--
-- TOC entry 362 (class 1255 OID 227254)
-- Name: fn_compo_save(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_compo_save(injson json, OUT _id integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  _config json;
  _title varchar(350);
  _path varchar(350);
  _userid int;
  _newdata json;
BEGIN
  -- INSERT/UPDATE COMPOSITION

  _config = injson->>'config';
  _title = injson->>'title';
  _path = injson->>'path';
  _id = injson->>'id';
  _userid = injson->>'userid';
  
  IF _id is null THEN
  	IF _config is null THEN
    	perform raiserror('config is null');
    END IF;

  	IF _title is null THEN
    	perform raiserror('title is null'); 
    END IF;

  	IF _path is null THEN
        perform raiserror('path is null');
    END IF;
    
    _id = nextval('framework.compos_id_seq'::regclass);
    
    INSERT INTO framework.compos (
      id, title,
      path, config
    )
    VALUES (
      _id, _title,
      _path, _config
    );
    
    
    SELECT row_to_json(d)
    FROM (
	  SELECT
		  *
	  FROM framework.compos
	) as d
    WHERE id = _id
    INTO _newdata;
    
  	INSERT INTO framework.logtable (
      tablename, tableid,
      opertype, userid,
      newdata
    ) VALUES (
      'framework.compos', _id::varchar(150),
      '1', _userid ,
     _newdata   
    );    
  ELSE
    SELECT row_to_json(d)
    FROM ( 
	  SELECT
		  *
	  FROM framework.compos
	) as d
    WHERE id = _id
    INTO _newdata;
    
  	UPDATE framework.compos
    SET
      title = coalesce(_title,title),
      path = coalesce(_path,path),
      config = coalesce(_config,config )  	
    WHERE id = _id;
    
  	INSERT INTO framework.logtable (
      tablename, tableid,
      opertype, userid,
      newdata
    ) VALUES (
      'framework.compos', _id::varchar(150),
      '2', _userid,
     _newdata   
    ); 
  END IF;    
END;
$$;


ALTER FUNCTION framework.fn_compo_save(injson json, OUT _id integer) OWNER TO postgres;

--
-- TOC entry 3338 (class 0 OID 0)
-- Dependencies: 362
-- Name: FUNCTION fn_compo_save(injson json, OUT _id integer); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_compo_save(injson json, OUT _id integer) IS 'INSERT/UPDATE COMPOSITION';


--
-- TOC entry 363 (class 1255 OID 227255)
-- Name: fn_config_fncol_add(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_config_fncol_add(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
	-- add fn column in config


	IF (injson->>'title') IS NULL THEN
    	PERFORM raiserror('title is null');
    END IF;
    
	IF (injson->>'fn') IS NULL THEN
    	PERFORM raiserror('fn is null');
    END IF;
    
    IF (injson->'fncols') IS NULL THEN
    	PERFORM raiserror('fncols is null');
    END IF;
    
	INSERT INTO framework.config (
  	  viewid, col, title,
      column_order, fn, fncolumns 
    )
    VALUES (
   	 (injson->>'viewid')::INT, substring(injson->>'title',1,15), injson->>'title', (
	   SELECT
		  max(column_id)
	   FROM framework.config
	   WHERE viewid = (injson->>'viewid')::INT
     ) + 1, injson->>'fn',
    injson->'fncols'
    );
END;
$$;


ALTER FUNCTION framework.fn_config_fncol_add(injson json) OWNER TO postgres;

--
-- TOC entry 3339 (class 0 OID 0)
-- Dependencies: 363
-- Name: FUNCTION fn_config_fncol_add(injson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_config_fncol_add(injson json) IS 'ADD fn COLUMN IN CONFIG';


--
-- TOC entry 365 (class 1255 OID 227256)
-- Name: fn_config_inscol(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_config_inscol(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
	_col varchar(150);
    _viewid int;
    _conf JSON;
    _tabname varchar(350);
    _val json;
    _title varchar(500);
BEGIN
	-- add fn column in config
    _col = injson->>'col'; -- this is title
    _viewid = injson->>'viewid';
    
    IF _col is null OR _viewid is null THEN
    	PERFORM raiserror('col or view is null');
    END IF;

    SELECT
    	v.tablename
    FROM framework.views as v
    WHERE v.id = _viewid
    INTO _tabname;
    
    IF _tabname is null THEN
    	PERFORM raiserror('tabname is null');
    END IF;
    
    /*SELECT outjson 
    FROM framework.fn_createconfig(json_build_object('tabname',_tabname,'colname',_col))
    INTO _conf;*/
    
    
   /* SELECT
    	value
    FROM json_array_elements(_conf)
    WHERE (value->>'title') = _col
    LIMIT 1
    INTO _val;
    
    _title = _val->>'title';
    
    IF (SELECT 
    		count(id) 
    	FROM framework.config 
    	WHERE viewid = _viewid and title = _title) > 0
    THEN
    	_title = concat(_title,'_', 
            (SELECT 
                count(id) 
          	FROM framework.config 
          	WHERE viewid = _viewid)::varchar);
    END IF;*/

    
    INSERT INTO framework.config (
      viewid, t, col, column_id,
      title, relation, relcol,
      depency, column_order,
      depencycol
    )
    SELECT
           _viewid,	pz.t, pz.col, pz.column_id,
           concat(pz.title, '_', (
             SELECT 
               count(id) 
             FROM framework.config 
             WHERE viewid = _viewid)::varchar) as title,
                COALESCE(pz.relation,(
                	SELECT 
                    	concat(y.table_schema, '.', y.table_name)
                    FROM information_schema.table_constraints as c
                    	JOIN information_schema.key_column_usage AS x ON
                        	c.constraint_name = x.constraint_name and
                            x.column_name = pz.column_name
                        JOIN information_schema.constraint_column_usage AS y ON 
                        	y.constraint_name = c.constraint_name and
                            y.constraint_schema = c.constraint_schema
                    WHERE c.table_name = pz.table_name and
                          c.table_schema = pz.table_schema and
                          c.constraint_type = 'FOREIGN KEY'
                    LIMIT 1
                )) as relation,
                (
                	SELECT 
                    	concat(y.column_name)
                    FROM information_schema.table_constraints as c
                    	JOIN information_schema.key_column_usage AS x ON
                             c.constraint_name = x.constraint_name and
                             x.column_name = pz.column_name
                        JOIN information_schema.constraint_column_usage AS y ON 
                        	y.constraint_name = c.constraint_name and
                            y.constraint_schema = c.constraint_schema
                    WHERE c.table_name = pz.table_name and
                     	  c.table_schema = pz.table_schema and
                          c.constraint_type = 'FOREIGN KEY'
                    LIMIT 1
                ) as relcol,
             pz.depency, COALESCE((
               SELECT 
                  max(column_order) 
               FROM framework.config 
               WHERE viewid = _viewid),0) + 1,
             pz.depencycol	
    FROM (
	    SELECT 
           	ROW_NUMBER() OVER(order by f.column_id) as t,  
            f.*  
        FROM (
        	SELECT 
            	DISTINCT 
            	t.column_name as col,
                coalesce(pgd.description, t.column_name) as title,                         
                null as relation, null as depencycol,
                t.ordinal_position as column_id, false as depency,
                t.column_name, t.table_schema, t.table_name
            FROM information_schema.columns as t
            	LEFT JOIN pg_catalog.pg_statio_all_tables as st on
                         st.schemaname = t.table_schema and st.relname =
                         t.table_name
            	LEFT JOIN pg_catalog.pg_description pgd on pgd.objoid =
                         st.relid and pgd.objsubid = t.ordinal_position
            WHERE concat(t.table_schema, '.', t.table_name) = _tabname
            	--AND coalesce(pgd.description, t.column_name) = COALESCE(_colname, coalesce(pgd.description, t.column_name))
            UNION ALL
            SELECT 
            	x.table_name as col,       
                x.table_name as title,
                concat(x.table_schema, '.', x.table_name) as relation,
                x.column_name as depencycol,
                (
                 	SELECT count(t.*)
                    FROM information_schema.columns as t
                    WHERE concat(t.table_schema, '.', t.table_name) = _tabname
                ) + 1 as column_id,
                true as depency,
                '' as column_name,
                '' as table_schema,
                '' as table_name
            FROM information_schema.key_column_usage as x
                 LEFT JOIN information_schema.referential_constraints as c on
                         c.constraint_name = x.constraint_name and
                         c.constraint_schema = x.constraint_schema
                 LEFT JOIN information_schema.key_column_usage y on
                         y.ordinal_position = x.position_in_unique_constraint and
                         y.constraint_name = c.unique_constraint_name
        	WHERE concat(y.table_schema, '.', y.table_name) = _tabname and
                  y.table_name is not null
        ) as f
       
        ORDER BY 
        	f.column_id) as pz
         WHERE pz.title = _col;

    
END;
$$;


ALTER FUNCTION framework.fn_config_inscol(injson json) OWNER TO postgres;

--
-- TOC entry 3340 (class 0 OID 0)
-- Dependencies: 365
-- Name: FUNCTION fn_config_inscol(injson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_config_inscol(injson json) IS 'add fn column in config';


--
-- TOC entry 366 (class 1255 OID 227257)
-- Name: fn_config_relation(integer); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_config_relation(_id integer, OUT _relation character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
/*DECLARE
  variable_name datatype;*/
BEGIN
	-- FOR CONFIG RELATION COLUMN
	
    SELECT
    	CASE WHEN 
        	c.type like '%_api'
        THEN
        	c.select_api
        WHEN c.type like 'multi%' and 
        	 c.type not like '%_api'
        THEN
        	c.multiselecttable
        ELSE
          COALESCE(
            c.relation,c.select_api,c.multiselecttable
          )
        END
    FROM framework.config as c
    WHERE c.id = _id
    INTO _relation;


END;
$$;


ALTER FUNCTION framework.fn_config_relation(_id integer, OUT _relation character varying) OWNER TO postgres;

--
-- TOC entry 3341 (class 0 OID 0)
-- Dependencies: 366
-- Name: FUNCTION fn_config_relation(_id integer, OUT _relation character varying); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_config_relation(_id integer, OUT _relation character varying) IS 'FOR CONFIG RELATION COLUMN';


--
-- TOC entry 367 (class 1255 OID 227258)
-- Name: fn_config_relationcolumns(integer); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_config_relationcolumns(_id integer, OUT relation_columns character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE 
	_relationcolums JSON;
    _multicolums JSON;
    
BEGIN
	-- FOR CONFIG RELATIONCOLUMNS COLUMN

	SELECT
    	c.relationcolums,
        c.multicolums
    FROM framework.config as c
    WHERE c.id = _id
    INTO _relationcolums, _multicolums;
    
    IF coalesce(_relationcolums::varchar,'[]') <> '[]'
    THEN
    	SELECT
        	string_agg((value->>'label'),', ')
        FROM json_array_elements(_relationcolums)
        INTO relation_columns;
    ELSE
    	IF coalesce(_multicolums::varchar,'[]') <> '[]'
        THEN
          SELECT
              string_agg((value->>'label'),', ')
          FROM json_array_elements(_multicolums)
          INTO relation_columns;
        END IF;
    END IF;

END;
$$;


ALTER FUNCTION framework.fn_config_relationcolumns(_id integer, OUT relation_columns character varying) OWNER TO postgres;

--
-- TOC entry 3342 (class 0 OID 0)
-- Dependencies: 367
-- Name: FUNCTION fn_config_relationcolumns(_id integer, OUT relation_columns character varying); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_config_relationcolumns(_id integer, OUT relation_columns character varying) IS 'FOR CONFIG RELATIONCOLUMNS COLUMN';


--
-- TOC entry 368 (class 1255 OID 227259)
-- Name: fn_config_selectapi(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_config_selectapi(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  _viewid int;
  tabname varchar(350);
BEGIN
	-- select_api for column add in config
	_viewid = (injson->'inputs')->>'id';
    
    IF _viewid is null THEN
    	PERFORM raiserror('viewid is null, can not find out table name');
    END IF;
	
    SELECT 
    	v.tablename
    FROM framework.views as v
    WHERE v.id = _viewid 
    INTO tabname; 
        
    SELECT 
    	array_to_json(array_agg(row_to_json(d)))
    FROM (
    	SELECT 
           	DISTINCT 
           	t.column_name as label,
            coalesce(pgd.description, t.column_name) as value
        FROM information_schema.columns as t
           	LEFT JOIN pg_catalog.pg_statio_all_tables as st on
				st.schemaname = t.table_schema and 
                st.relname = t.table_name
          	LEFT JOIN pg_catalog.pg_description pgd on 
            	pgd.objoid = st.relid and 
                pgd.objsubid = t.ordinal_position
        WHERE concat(t.table_schema, '.', t.table_name) = tabname
            UNION ALL
        SELECT 
           	x.table_name as label,       
            x.table_name as value
        FROM information_schema.key_column_usage as x
             LEFT JOIN information_schema.referential_constraints as c on
                  c.constraint_name = x.constraint_name and
        	      c.constraint_schema = x.constraint_schema
             LEFT JOIN information_schema.key_column_usage y on
             	y.ordinal_position = x.position_in_unique_constraint and
                y.constraint_name = c.unique_constraint_name
        WHERE concat(y.table_schema, '.', y.table_name) = tabname and
        	  y.table_name is not null
    ) as d
    INTO outjson;
 	
    outjson = coalesce(outjson,'[]');
END;
$$;


ALTER FUNCTION framework.fn_config_selectapi(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3343 (class 0 OID 0)
-- Dependencies: 368
-- Name: FUNCTION fn_config_selectapi(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_config_selectapi(injson json, OUT outjson json) IS 'select_api for column add in config';


--
-- TOC entry 369 (class 1255 OID 227260)
-- Name: fn_config_settings_apply(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_config_settings_apply(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _col varchar(150);
  _setting varchar(150);
  _selected json;
  _viewid int;
BEGIN
	-- apply all columns settings in config by chosed column
  _col = injson->>'col';
  _setting = injson->>'setting';
  _viewid = injson->>'viewid';
  
  -- mock yet
  
END;
$$;


ALTER FUNCTION framework.fn_config_settings_apply(injson json) OWNER TO postgres;

--
-- TOC entry 3344 (class 0 OID 0)
-- Dependencies: 369
-- Name: FUNCTION fn_config_settings_apply(injson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_config_settings_apply(injson json) IS 'apply all columns settings in config by chosed column';


--
-- TOC entry 370 (class 1255 OID 227261)
-- Name: fn_config_to_json(integer); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_config_to_json(_viewid integer, OUT _config json) RETURNS json
    LANGUAGE plpgsql
    AS $$
BEGIN
	-- CONFIG FROM TABLE TO JSON BY VIEW ID

  SELECT
     array_to_json(array_agg(row_to_json(d)))
  FROM
      (SELECT 
      	c.id,
        concat(c.col,'_',c.id::varchar) as key,
        c.col,
        c.title,
        c.column_id,
        c.classname,
        c.depency,
        c.depencycol,
        c.relcol,
        c.column_order,
        c."join",
        c.updatable,
        c.required,
        c.orderby,
        c.orderbydesc,
        c.related,
        c."table",
        c.width,
        c.visible,
        c."type",
        c.multiselecttable,
        c.editable,
        c.tpath,
        c.relation,
        CASE WHEN c.fn is not null
        THEN
        	json_build_object('value', c.fn, 'label', c.fn, 'functype', f.functype) 
        ELSE 
        	null
        END as fn,
        c.select_api,
        c.t,
        c.relatecolumn,
        c.roles,
        COALESCE((
         SELECT
            array_to_json(array_agg(row_to_json(d)))
          FROM(
           SELECT
            value as label,
            value as value
           FROM json_array_elements_text(c.relationcolums) as r
			) as d
         ),'[]') as relationcolums,
         (SELECT
          	array_to_json(array_agg(row_to_json(d)))
          FROM
           (SELECT
                m.value::varchar as value, 
                m.value::varchar as label
            FROM json_array_elements_text(c.multicolums) as m) as d) as multicolums,
          CASE WHEN c.fn is not null
          THEN
          COALESCE((
            SELECT
              array_to_json(array_agg(row_to_json(d)))
            FROM
              (
                SELECT * FROM (
                  SELECT (
                        CASE 
                        WHEN value::varchar not in ('_userid_', '_orgid_', '_orgs_') 
                        THEN cc.col 
                        ELSE value::varchar
                        END 
                      ) as label, (
                        CASE 
                        WHEN value::varchar not in ('_userid_', '_orgid_', '_orgs_') 
                        THEN cc.title
                        ELSE value::varchar
                        END 
                      ) as value, (
                        CASE 
                        WHEN value::varchar not in ('_userid_', '_orgid_', '_orgs_') 
                        THEN concat(cc.col,'_',cc.id::varchar)
                        ELSE value::varchar
                        END 
                      ) as key,
                      CASE WHEN cc.related THEN cc.t
                      ELSE '1'
                      END as t
                  FROM (
                    SELECT
                        row_number() over (order by 0) as r,
                        value as value
                    FROM json_array_elements_text(c.fncolumns) as f 
                    --WHERE value::varchar not in ('_userid_', '_orgid_', '_orgs_')
                ) as  ff
                    LEFT JOIN framework.config as cc on cc.viewid = _viewid and cc.id::varchar = ff.value::varchar
                ORDER BY ff.r ) as dd
              
                             
               /* SELECT
                    cc.col as label,
                    cc.title as value,
                    concat(cc.col,'_',cc.id::varchar) as key,
                    CASE WHEN cc.related THEN cc.t
                    ELSE '1'
                    END as t
                FROM json_array_elements_text(c.fncolumns) as ff
                    LEFT JOIN framework.config as cc on cc.viewid = _viewid and cc.title = ff.value::varchar*/
              ) as d),'[]')
          ELSE
          	null
          END as fncolumns,
              
          (SELECT
            array_to_json(array_agg(row_to_json(d)))
           FROM
           (
            SELECT 
                json_build_object('label',df.act,'value',df.act) as act,
                json_build_object('label',df.bool,'value',df.bool) as bool,
                df.value
            FROM framework.defaultval as df
            WHERE df.configid = c.id) as d) as defaultval,
          (SELECT
            array_to_json(array_agg(row_to_json(d)))
           FROM
            (
            SELECT
                vs.value,
                json_build_object('value',op.value,'js',op.js) as operation,
                json_build_object(
                    'value',cc.title,
                    'label',cc.title,
                    't', cc.t,
                    'key',concat(cc.col,'_',cc.id::varchar)
                ) as col
            FROM framework.visible_condition as vs
                LEFT JOIN framework.operations as op on op.value = vs.operation
                LEFT JOIN framework.config as cc on /*cc.viewid = _viewid and*/ cc.id = vs.val_desc
            WHERE vs.configid = c.id
            ) as d) as visible_condition,
          (SELECT
            array_to_json(array_agg(row_to_json(d)))
           FROM
            (SELECT
                  json_build_object('label',sc.col,'value', sc.col) as col,
                  sc.const,
                  json_build_object(
                      'value', op.value,
                      'js', op.js,
                      'python', op.python,
                      'sql', op.sql
                  ) as operation,
                  json_build_object(
                      'value',cc.title,
                      'label',cc.title,
                      't', cc.t,
                      'key',concat(cc.col,'_',cc.id::varchar)
                  ) as value
              FROM framework.select_condition as sc
                  LEFT JOIN framework.operations as op on op.value = sc.operation
                  LEFT JOIN framework.config as cc on cc.viewid = _viewid and cc.id = sc.val_desc
              WHERE sc.configid = c.id      
            ) as d) as select_condition 
  FROM framework.config as c
    LEFT JOIN framework.functions as f on f.funcname = c.fn
  WHERE c.viewid = _viewid
  ORDER BY c.column_order) as d
  INTO _config;
  
  _config = COALESCE(_config,'[]');
END;
$$;


ALTER FUNCTION framework.fn_config_to_json(_viewid integer, OUT _config json) OWNER TO postgres;

--
-- TOC entry 3345 (class 0 OID 0)
-- Dependencies: 370
-- Name: FUNCTION fn_config_to_json(_viewid integer, OUT _config json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_config_to_json(_viewid integer, OUT _config json) IS 'CONFIG FROM TABLE TO JSON BY VIEW ID';


--
-- TOC entry 371 (class 1255 OID 227262)
-- Name: fn_configsettings_selectapi(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_configsettings_selectapi(insjon json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
BEGIN
	-- SELECT CONFIG SETTINGS DIC
	SELECT
    	array_to_json(array_agg(row_to_json(d)))
    FROM (
	  SELECT
		  c.sname as label,
		  c.sname as value
	  FROM framework.configsettings as c
	) as d
    INTO outjson;
    
    outjson = coalesce(outjson,'[]');
    


END;
$$;


ALTER FUNCTION framework.fn_configsettings_selectapi(insjon json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3346 (class 0 OID 0)
-- Dependencies: 371
-- Name: FUNCTION fn_configsettings_selectapi(insjon json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_configsettings_selectapi(insjon json, OUT outjson json) IS 'SELECT CONFIG SETTINGS DIC';


--
-- TOC entry 372 (class 1255 OID 227263)
-- Name: fn_copyview(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_copyview(injson json, OUT _newid integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	_id int;  
    _title varchar(150);
    _path varchar(150);
BEGIN
	-- COPY VIEW 


	_id = injson->>'id';
    
    SELECT 
    	v.title,
        v."path"
    FROM framework.views as v
    WHERE v.id = _id
    INTO _title, _path;
    
    _newid = nextval('framework.views_id_seq'::regclass);
    
    _title = concat(_title,'_copy_',_newid);
    _path = concat(_path,'_copy_',_newid);
    
    INSERT INTO framework.views (
      id, title, descr, tablename,
      viewtype, pagination, config,
      "path", groupby, filters,
      acts, roles, classname,
      orderby, ispagesize, pagecount,
      foundcount, subscrible, checker,
      "copy"
    )
    SELECT 
    	_newid, _title, descr, tablename,
        viewtype, pagination, config,
        _path, groupby, filters,
        acts, roles, classname,
        orderby, ispagesize, pagecount, 
        foundcount, subscrible, checker,
        true 
    FROM framework.views  
    WHERE id = _id;
    
    
    INSERT INTO framework.config (
      viewid, t, col, column_id,
      title, type, roles,
      visible, required, width,
      "join", classname, updatable,
      relation, select_api, multiselecttable,
      orderby, orderbydesc, relcol,
      depency, relationcolums, multicolums,
      depencycol, column_order, fn,
      fncolumns, relatecolumn, "table",
      related, tpath, copy
   )
   SELECT
      _newid, t, col, column_id,
      title, type, roles,
      visible, required, width,
      "join", classname, updatable,
      relation, select_api, multiselecttable,
      orderby, orderbydesc, relcol,
      depency, relationcolums, multicolums,
      depencycol, column_order, fn,
      fncolumns, relatecolumn, "table" ,
      related, tpath, true
   FROM framework.config
   WHERE viewid =_id and fn is null;
   
    INSERT INTO framework.config (
      viewid, t, col, column_id,
      title, type, roles,
      visible, required, width,
      "join", classname, updatable,
      relation, select_api, multiselecttable,
      orderby, orderbydesc, relcol,
      depency, relationcolums, multicolums,
      depencycol, column_order, fn,
      fncolumns, relatecolumn, "table",
      related, tpath, copy
   )
   SELECT
      _newid, cv.t, cv.col, cv.column_id,
      cv.title, cv.type, cv.roles,
      cv.visible, cv.required, cv.width,
      cv."join", cv.classname, cv.updatable,
      cv.relation, cv.select_api, cv.multiselecttable,
      cv.orderby, cv.orderbydesc, cv.relcol,
      cv.depency, cv.relationcolums, cv.multicolums,
      cv.depencycol, cv.column_order, cv.fn, (array_to_json(ARRAY(
        SELECT cc.id
        FROM framework.config as cc  
            JOIN framework.config as c on c.viewid = _id and cc.title = c.title
            JOIN json_array_elements_text(cv.fncolumns) as j on j.value::varchar::int = c.id 
        WHERE  cc.viewid = _newid 
      ))), cv.relatecolumn, cv."table" ,
      cv.related, cv.tpath, true
   FROM framework.config as cv
   WHERE cv.viewid =_id and cv.fn is not null;
  
   INSERT INTO framework.visible_condition (
    configid,
    val_desc,
    col, title,
    operation, value 
  ) 
  SELECT
    cc.id,
    (
     SELECT 
     	cccc.id
     FROM framework.config as ccc 
     JOIN framework.config as cccc on cccc.viewid = _newid and cccc.title = ccc.title
     WHERE  ccc.id = vs.val_desc
    ),
    vs.col, vs.title,
    vs.operation, vs.value 
  FROM framework.visible_condition as vs
  	JOIN framework.config as c on c.viewid = _id and c.id = vs.configid
    JOIN framework.config as cc on cc.viewid = _newid and cc.title = c.title;
    
  INSERT INTO framework.select_condition (
    configid, col,
    operation, const,
    value, val_desc 
  )
  SELECT
  	DISTINCT
    cc.id, sc.col,
    sc.operation, sc.const,
    sc.value, sc.val_desc 
  FROM framework.select_condition as sc
  	JOIN framework.config as c on c.viewid = _id and c.id = sc.configid
    JOIN framework.config as cc on cc.viewid = _newid and cc.title = c.title;
  
  
  INSERT INTO framework.defaultval (
    configid, bool,
    act, value 
  )
  SELECT 
  	DISTINCT
      cc.id, df.bool,
      df.act, df.value 
  FROM framework.defaultval as df
      JOIN framework.config as c on c.viewid = _id and c.id = df.configid
      JOIN framework.config as cc on cc.viewid = _newid and cc.title = c.title;
    
  
  INSERT INTO framework.actions (
    column_order, title,viewid,
    icon,classname, act_url, api_method,
    api_type, refresh_data, ask_confirm,
    roles, forevery, main_action, act_type
  ) 
  SELECT
    a.column_order, a.title,_newid,
    a.icon, a.classname, a.act_url, a.api_method,
    a.api_type, a.refresh_data, a.ask_confirm,
    a.roles, a.forevery,
    a.main_action,
    a.act_type
  FROM framework.actions as a
  WHERE a.viewid = _id;
  
  INSERT INTO framework.act_visible_condions (
    actionid, val_desc, col,
    title, operation, value
  ) 
  SELECT
  	DISTINCT
    ac2.id, a.val_desc, a.col,
    a.title, a.operation, a.value
  FROM framework.act_visible_condions as a
  	JOIN framework.actions as ac on ac.id = a.actionid and ac.viewid = _id
    JOIN framework.actions as ac2 on ac2.viewid = _newid and ac2.title = ac.title;
  
  INSERT INTO framework.act_parametrs (
    actionid, paramtitle, paramt,
    paramconst, paraminput, paramcolumn,
    val_desc, query_type
  )
  SELECT
  	DISTINCT
  	ac2.id, paramtitle, paramt,
    paramconst, paraminput, paramcolumn,
    val_desc, query_type
  FROM framework.act_parametrs as a
  	JOIN framework.actions as ac on ac.id = a.actionid and ac.viewid = _id
    JOIN framework.actions as ac2 on ac2.viewid = _newid and ac2.title = ac.title;
  
  INSERT INTO framework.filters (
    column_order, viewid, title,
    type, classname, "column",
    columns, roles, t, "table" 
  )
  SELECT
    column_order, _newid, title,
    type, classname, "column",
    columns, roles, t, "table" 
  FROM framework.filters
  WHERE viewid = _id;
  
  UPDATE framework.views
  SET copy = FALSE
  WHERE id = _id;
  
  UPDATE framework.config
  SET copy = FALSE
  WHERE viewid = _id;
  
  UPDATE framework.config
  SET copy = FALSE
  WHERE viewid = _newid;
END;
$$;


ALTER FUNCTION framework.fn_copyview(injson json, OUT _newid integer) OWNER TO postgres;

--
-- TOC entry 3347 (class 0 OID 0)
-- Dependencies: 372
-- Name: FUNCTION fn_copyview(injson json, OUT _newid integer); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_copyview(injson json, OUT _newid integer) IS 'COPY VIEW ';


--
-- TOC entry 373 (class 1255 OID 227265)
-- Name: fn_createconfig(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_createconfig(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  tabname varchar(350);
	_colname varchar(200);
BEGIN
	-- CREATE VIEW's CONFIG
	tabname = injson->>'tabname';
    --_colname = injson->>'colname';
        
    SELECT 
    	array_to_json(array_agg(row_to_json(d)))
    FROM (
    	SELECT 
           ROW_NUMBER() OVER(order by f.column_id) as t,
           f.*
        FROM (
        	SELECT 
            	DISTINCT 
            	t.column_name as col,
                coalesce(pgd.description, t.column_name)::varchar(300) as title,                         
                'label' as type,
                true as visible,
                concat(
                	t.column_name,'_',
                    SUBSTRING((uuid_in(md5(random()::text || now()::text)::cstring)::CHAR(36)),1,5)
                ) as key,
                (
                	SELECT 
                    	concat(y.table_schema, '.', y.table_name)
                    FROM information_schema.table_constraints as c
                    	JOIN information_schema.key_column_usage AS x ON
                        	c.constraint_name = x.constraint_name and
                            x.column_name = t.column_name
                        JOIN information_schema.constraint_column_usage AS y ON 
                        	y.constraint_name = c.constraint_name and
                            y.constraint_schema = c.constraint_schema
                    WHERE c.table_name = t.table_name and
                          c.table_schema = t.table_schema and
                          c.constraint_type = 'FOREIGN KEY'
                    LIMIT 1
                ) as relation,
                (
                	SELECT 
                    	concat(y.column_name)
                    FROM information_schema.table_constraints as c
                    	JOIN information_schema.key_column_usage AS x ON
                             c.constraint_name = x.constraint_name and
                             x.column_name = t.column_name
                        JOIN information_schema.constraint_column_usage AS y ON 
                        	y.constraint_name = c.constraint_name and
                            y.constraint_schema = c.constraint_schema
                    WHERE c.table_name = t.table_name and
                     	  c.table_schema = t.table_schema and
                          c.constraint_type = 'FOREIGN KEY'
                    LIMIT 1
                ) as relcol,
                '[]' as relationcolums,
                false as "join",
                false as onetomany,
                false as required,
                null as defaultval,
                '' as width,
                t.ordinal_position as column_id,
                false as depency,
                null as depencycol,
                '[]' as roles,
                '' as classname
            FROM information_schema.columns as t
            	LEFT JOIN pg_catalog.pg_statio_all_tables as st on
                         st.schemaname = t.table_schema and st.relname =
                         t.table_name
            	LEFT JOIN pg_catalog.pg_description pgd on pgd.objoid =
                         st.relid and pgd.objsubid = t.ordinal_position
            WHERE concat(t.table_schema, '.', t.table_name) = tabname
            	--AND coalesce(pgd.description, t.column_name) = COALESCE(_colname, coalesce(pgd.description, t.column_name))
           /* UNION ALL
            SELECT 
            	x.table_name as col,       
                x.table_name as title,
                'array' as type,
                false as visible,
                concat(
                	x.table_name, '_',
                    SUBSTRING((uuid_in(md5(random()::text || now()::text)::cstring)::CHAR(36)),1,5)
                ) as key,
                concat(x.table_schema, '.', x.table_name) as relation,
                null as relcol,
                '[]' as relationcolums,
                false as join,
                true as onetomany,
                false as required,
                null as defaultval,
                '' as width,
                (
                 	SELECT count(t.*)
                    FROM information_schema.columns as t
                    WHERE concat(t.table_schema, '.', t.table_name) = tabname
                ) + 1 as column_id,
                true as depency,
                x.column_name as depencycol,
                '[]' as roles,
                '' as classname
            FROM information_schema.key_column_usage as x
                 LEFT JOIN information_schema.referential_constraints as c on
                         c.constraint_name = x.constraint_name and
                         c.constraint_schema = x.constraint_schema
                 LEFT JOIN information_schema.key_column_usage y on
                         y.ordinal_position = x.position_in_unique_constraint and
                         y.constraint_name = c.unique_constraint_name
        	WHERE concat(y.table_schema, '.', y.table_name) = tabname and
                  y.table_name is not null*/
        ) as f
        ORDER BY 
        	f.column_id,
        	relation
    ) as d
    INTO outjson;
 	
    outjson = coalesce(outjson,'[]');
END;
$$;


ALTER FUNCTION framework.fn_createconfig(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3348 (class 0 OID 0)
-- Dependencies: 373
-- Name: FUNCTION fn_createconfig(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_createconfig(injson json, OUT outjson json) IS 'CREATE VIEW''s CONFIG';


--
-- TOC entry 374 (class 1255 OID 227266)
-- Name: fn_createconfig_new(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_createconfig_new(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  tabname varchar(350);
BEGIN
 --dont used
  tabname = injson->>'tabname';
  SELECT array_to_json(array_agg(row_to_json(d)))
  FROM (
         SELECT ROW_NUMBER() OVER(
         order by f.column_id) as t,
                  *,
                  '[]'::JSON as relationcolums,
                  '[]'::JSON as roles
         FROM (
                SELECT distinct t.column_name as col,
                       substring(coalesce(pgd.description, t.column_name), 1, 62) as title,
                       framework.fn_htmldatatype(t.data_type) as type,
                       true as visible, 
                       (
                         SELECT concat(y.table_schema, '.', y.table_name)
                         FROM information_schema.table_constraints as c
                              JOIN information_schema.key_column_usage AS x ON
                                c.constraint_name = x.constraint_name and
                                x.column_name = t.column_name
                              JOIN information_schema.constraint_column_usage AS
                                y ON y.constraint_name = c.constraint_name and
                                y.column_name = t.column_name
                         WHERE c.table_name = t.table_name and
                               c.table_schema = t.table_schema and
                               c.constraint_type = 'FOREIGN KEY'
                         LIMIT 1
                       ) as relation,
                       (
                         SELECT concat(y.column_name)
                         FROM information_schema.table_constraints as c
                              JOIN information_schema.key_column_usage AS x ON
                                c.constraint_name = x.constraint_name and
                                x.column_name = t.column_name
                              JOIN information_schema.constraint_column_usage AS
                                y ON y.constraint_name = c.constraint_name and
                                y.column_name = t.column_name
                         WHERE c.table_name = t.table_name and
                               c.table_schema = t.table_schema and
                               c.constraint_type = 'FOREIGN KEY'
                         LIMIT 1
                       ) as relcol,
                       false as "join",
                       false as onetomany,
                       null as defaultval,
                       ''                       as width,
                       t.ordinal_position as column_id,
                       false as depency,
                       null as depencycol,
                       ''                       as classname
                FROM information_schema.columns as t
                     left join pg_catalog.pg_statio_all_tables as st on
                       st.schemaname = t.table_schema and st.relname =
                       t.table_name
                     left join pg_catalog.pg_description pgd on pgd.objoid =
                       st.relid and pgd.objsubid = t.ordinal_position 
                WHERE concat(t.table_schema, '.', t.table_name) = tabname
                UNION ALL
                SELECT x.table_name as col,
                       --,        
                       x.table_name as title,
                       'array'                       as type,
                       false as visible,
                       concat(x.table_schema, '.', x.table_name) as relation,
                       null as relcol,
                       --'[]'::JSON as relationcolums,
                       false as join,
                       true as onetomany,
                       null as defaultval,
                       ''                       as width,
                       (
                         SELECT count(t.*)
                         FROM information_schema.columns as t
                         WHERE concat(t.table_schema, '.', t.table_name) =
                           tabname
                       ) + 1 as column_id,
                       true as depency,
                       x.column_name as depencycol,
                       --'[]'::JSON as roles,
                       ''                       as classname
                FROM information_schema.key_column_usage as x
                     --  and t.column_name = x.column_name
                     left join information_schema.referential_constraints as c
                       on c.constraint_name = x.constraint_name and
                       c.constraint_schema = x.constraint_schema
                     left join information_schema.key_column_usage y on
                       y.ordinal_position = x.position_in_unique_constraint and
                       y.constraint_name = c.unique_constraint_name
                WHERE concat(y.table_schema, '.', y.table_name) = tabname and
                      y.table_name is not null
              ) as f
         ORDER BY f.column_id,
                  relation
       ) as d
  INTO outjson;

  outjson = coalesce(outjson,'[]');
END;
$$;


ALTER FUNCTION framework.fn_createconfig_new(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 375 (class 1255 OID 227267)
-- Name: fn_cryptosess(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_cryptosess(injson json, OUT sessid character) RETURNS character
    LANGUAGE plpgsql
    AS $$
DECLARE
  user_id int;
  _orgid int;
  _created timestamp;
  
  _thumbprint varchar(200);
BEGIN
	-- AUTH IN WITH CRYPTOKEY
    
    _thumbprint = injson->>'thumbprint';
    
    IF _thumbprint is null THEN
        PERFORM raiserror('No Certificate');
    END IF;
    
    SELECT 
        u.id,
        u.orgs->0
    FROM framework.users as u
    WHERE u.isactive and u.thumbprint = _thumbprint
    INTO user_id, _orgid;
    
    IF user_id is null THEN
        perform raiserror('User not active or not found. Check your certificate');
    END IF;
     
    sessid = uuid_in(md5(random()::text || now()::text)::cstring)::CHAR(36);
    
    INSERT INTO framework.sess
    (
        id,
        userid
    )
    VALUES 
    (
        sessid,
        user_id
    );
    
    UPDATE framework.users
    SET orgid = _orgid
    WHERE orgid is null and id = user_id;
    
END;
$$;


ALTER FUNCTION framework.fn_cryptosess(injson json, OUT sessid character) OWNER TO postgres;

--
-- TOC entry 3349 (class 0 OID 0)
-- Dependencies: 375
-- Name: FUNCTION fn_cryptosess(injson json, OUT sessid character); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_cryptosess(injson json, OUT sessid character) IS 'AUTH IN WITH CRYPTOKEY';


--
-- TOC entry 376 (class 1255 OID 227268)
-- Name: fn_deleteconfig_checked(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_deleteconfig_checked(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _checked json;
  _userid int;
  _od json;
  _id int;
BEGIN
  _userid = injson->>'userid';
  _checked = injson->>'items';

  
  FOR _id in (
      SELECT
	      value::varchar::int
	  FROM json_array_elements_text(_checked)
  ) 
  LOOP
      SELECT
	       row_to_json(d)
	  FROM (
	      SELECT
		      *
		  FROM framework.config
		  WHERE id = _id
	  ) as d
	  INTO _od;
	  
	  DELETE FROM framework.config
	  WHERE id = _id;
	  
	  INSERT INTO framework.logtable (
		tablename, tableid, opertype,
		oldata, newdata, userid
	  ) VALUES (
	    'framework.config', _id::varchar, '3',
		_od, '{}'::json, _userid
	  );
  END LOOP;

  
   
END;
$$;


ALTER FUNCTION framework.fn_deleteconfig_checked(injson json) OWNER TO postgres;

--
-- TOC entry 3350 (class 0 OID 0)
-- Dependencies: 376
-- Name: FUNCTION fn_deleteconfig_checked(injson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_deleteconfig_checked(injson json) IS 'DELETE CHECKED CONFIG';


--
-- TOC entry 377 (class 1255 OID 227269)
-- Name: fn_deleterow(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_deleterow(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $_$
DECLARE
  _tablename varchar(350);
  _id varchar;
  _squery varchar;
  _oldata json;
  _userid varchar(150);
_viewid int;
_userroles json;
_viewroles json;
BEGIN
	-- DELETE ROW IN LIST COMPONENT (FROM TABLE)

  -- = injson->>'tablename';	
  _id = trim(injson->>'id');
  _userid = injson->>'userid';
  _viewid = injson->>'viewid';
  
    IF _viewid is NULL
    THEN
      perform raiserror('view id is null');
    END IF; 
    
    SELECT 
    	roles,
        tablename
    FROM framework.views 
    WHERE id = _viewid
    INTO _viewroles, _tablename;
    IF _viewroles is null THEN
    	perform raiserror('view is not found');
    END IF;
    SELECT 
    	roles
    FROM framework.users 
    WHERE id::varchar = _userid
    INTO _userroles;
    
    IF (SELECT count(*) FROM json_array_elements_text(_viewroles)) > 0 and 
    (SELECT count(*) 
     FROM json_array_elements_text(_viewroles) as v
     	JOIN json_array_elements_text(_userroles) as r on 
        	((v.value::json->>'value')::varchar = r.value::varchar
            	OR
             v.value::varchar = r.value::varchar
            )
     ) = 0 THEN
    	PERFORM raiserror('m403err');
    END IF;
    
    IF _tablename is NULL
    THEN
      perform raiserror('table is null');
    END IF; 
    
    

   
   IF (SELECT count(*)
   FROM information_schema.columns as t
   WHERE concat(t.table_schema,'.',t.table_name) = _tablename ) = 0 THEN
   	 perform raiserror('can not find out the column type. check table and column names');
   END IF;
  
  IF coalesce(_id,'') = '' THEN
	perform raiserror('id is null');
  END IF;
  

 _squery = concat('
   SELECT row_to_json(d)
   FROM (
    SELECT * 
    FROM ',_tablename,'  
    WHERE upper(id::varchar) = upper($1)
  ) as d');
  
    EXECUTE format(_squery) USING _id::varchar INTO _oldata; 
  	INSERT INTO framework.logtable (
      tablename, tableid, opertype,
      userid, oldata
    ) VALUES (
      _tablename, _id, '3',
      _userid::int, _oldata  
    );
 
  _squery = concat('DELETE FROM ', _tablename, ' WHERE upper(id::varchar) = $1; ');
  EXECUTE format(_squery) USING upper(_id);
END;
$_$;


ALTER FUNCTION framework.fn_deleterow(injson json) OWNER TO postgres;

--
-- TOC entry 3351 (class 0 OID 0)
-- Dependencies: 377
-- Name: FUNCTION fn_deleterow(injson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_deleterow(injson json) IS 'DELETE ROW IN LIST COMPONENT (FROM TABLE)';


--
-- TOC entry 379 (class 1255 OID 227270)
-- Name: fn_dialog_addadmin(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_dialog_addadmin(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
  _user_to_add int;
  _dialogid int;
  _dtype smallint;
  _admins json;
  _od json;
  _users JSON;
  _nw JSON;
BEGIN
	_userid = injson->>'userid';
    _dialogid = injson->>'id';
    _user_to_add = injson->>'user_to_add';


	IF _dialogid IS NULL 
    THEN
    	PERFORM raiserror('id is null');
    END IF;
    
    IF _user_to_add is null 
    THEN 
  	  PERFORM raiserror('user_to_add is null');
    END IF;
    
    SELECT 
    	d.dialog_admins, d.dtype, d.users
    FROM framework.dialogs as d
    WHERE d.id = _dialogid
    INTO _admins, _dtype, _users; 

    IF _dtype = '1'
    THEN 
        RETURN;
    END IF;
    
    IF _user_to_add not in (
    	SELECT
        	value::varchar::int
    	FROM json_array_elements_text(_users)
    )
    THEN
    	PERFORM raiserror('User not in dialog');
    END IF;
    
    IF _user_to_add in (
    	SELECT
        	value::varchar::int
    	FROM json_array_elements_text(_admins)
    )
    THEN
    	PERFORM raiserror('User already admin');
    END IF;
    
    
    IF (
        SELECT
            count(*)
        FROM json_array_elements_text(_admins)
        WHERE value::varchar::int = _userid
    ) = 0
    THEN
        PERFORM raiserror('ACCESS DENIED');
    END IF;
    
    SELECT
        row_to_json(z)
    FROM (
         SELECT
                d.*
         FROM framework.dialogs as d
         WHERE d.id = _dialogid
    ) as z
    INTO _od;
    
    UPDATE framework.dialogs
    SET    
		dialog_admins = _admins::jsonb||concat('[',_user_to_add::varchar,']')::jsonb
    WHERE id = _dialogid;


    SELECT
        row_to_json(z)
    FROM (
         SELECT
                d.*
         FROM framework.dialogs as d
         WHERE d.id = _dialogid
    ) as z
    INTO _nw;
    
    INSERT INTO framework.logtable (
      tablename, tableid,
      opertype, oldata, newdata,
      userid
    ) VALUES (
      'framework.dialogs', _dialogid::VARCHAR,
      '2',_od,_nw,
      _userid
     );
END;
$$;


ALTER FUNCTION framework.fn_dialog_addadmin(injson json) OWNER TO postgres;

--
-- TOC entry 3352 (class 0 OID 0)
-- Dependencies: 379
-- Name: FUNCTION fn_dialog_addadmin(injson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_dialog_addadmin(injson json) IS 'ADD USER TO ADMINS';


--
-- TOC entry 380 (class 1255 OID 227271)
-- Name: fn_dialog_adduser(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_dialog_adduser(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
  _user_to_add int;
  _dialogid int;
  _dtype smallint;
  _admins json;
  _od json;
  _users JSON;
  _nw JSON;
BEGIN
	_userid = injson->>'userid';
    _dialogid = injson->>'id';
    _user_to_add = injson->>'user_to_add';


	IF _dialogid IS NULL 
    THEN
    	PERFORM raiserror('id is null');
    END IF;
    
    IF _user_to_add is null 
    THEN 
  	  PERFORM raiserror('user_to_add is null');
    END IF;
    
    SELECT 
    	d.dialog_admins, d.dtype, d.users
    FROM framework.dialogs as d
    WHERE d.id = _dialogid
    INTO _admins, _dtype, _users; 

    IF _dtype = '1'
    THEN 
        RETURN;
    END IF;
    
    IF _user_to_add in (
    	SELECT
        	value::varchar::int
    	FROM json_array_elements_text(_users)
    )
    THEN
    	PERFORM raiserror('User already in dialog');
    END IF;
    
    
    
    IF (
        SELECT
            count(*)
        FROM json_array_elements_text(_admins)
        WHERE value::varchar::int = _userid
    ) = 0
    THEN
        PERFORM raiserror('ACCESS DENIED');
    END IF;
    
    SELECT
        row_to_json(z)
    FROM (
         SELECT
                d.*
         FROM framework.dialogs as d
         WHERE d.id = _dialogid
    ) as z
    INTO _od;
    
    UPDATE framework.dialogs
    SET    
		users = users::jsonb||concat('[',_user_to_add::varchar,']')::jsonb
    WHERE id = _dialogid;


    SELECT
        row_to_json(z)
    FROM (
         SELECT
                d.*
         FROM framework.dialogs as d
         WHERE d.id = _dialogid
    ) as z
    INTO _nw;
    
    INSERT INTO framework.logtable (
      tablename, tableid,
      opertype, oldata, newdata,
      userid
    ) VALUES (
      'framework.dialogs', _dialogid::VARCHAR,
      '2',_od,_nw,
      _userid
     );
END;
$$;


ALTER FUNCTION framework.fn_dialog_adduser(injson json) OWNER TO postgres;

--
-- TOC entry 3353 (class 0 OID 0)
-- Dependencies: 380
-- Name: FUNCTION fn_dialog_adduser(injson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_dialog_adduser(injson json) IS 'ADD USER IN DIALOG';


--
-- TOC entry 381 (class 1255 OID 227272)
-- Name: fn_dialog_edit(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_dialog_edit(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
  _id int;
  _title varchar(150);
  _photo json;
  _admins json;
  _dialog_admins json;
  _dtype smallint;
  _od json;
  _nw json;
  _users json;
BEGIN
	_userid = injson->>'userid';
    _id = injson->>'id';
    _title = injson->>'title';
   -- _photo = injson->>'photo';
    _photo = injson->>'value';
    _dialog_admins = injson->>'dialog_admins';
   -- _users = injson->>'users';
    SELECT 
    	d.dialog_admins,
        d.dtype
    FROM framework.dialogs as d
    WHERE d.id = _id
    INTO _admins, _dtype; 
    
    
    IF _dtype = '1'
    THEN 
        RETURN;
    END IF;
    
    IF (
        SELECT
            count(*)
        FROM json_array_elements_text(_admins)
        WHERE value::varchar::int = _userid
    ) = 0
    THEN
        PERFORM raiserror('ACCESS DENIED');
    END IF;
    
    SELECT
        row_to_json(z)
    FROM (
         SELECT
                d.*
         FROM framework.dialogs as d
         WHERE d.id = _id
    ) as z
    INTO _od;
    
    UPDATE framework.dialogs
    SET    
        title = coalesce(_title,title),
        photo = coalesce(_photo,photo),
        dialog_admins = coalesce(_dialog_admins,dialog_admins)--,
		--users = coalesce(_users,'[]')
    WHERE id = _id;
    
    SELECT
        row_to_json(z)
    FROM (
         SELECT
                d.*
         FROM framework.dialogs as d
         WHERE d.id = _id
    ) as z
    INTO _nw;
    
    INSERT INTO framework.logtable (
      tablename, tableid,
      opertype, oldata, newdata,
      userid
    ) VALUES (
      'framework.dialogs', _id::VARCHAR,
      '2',_od,_nw,
      _userid
     );
    
END;
$$;


ALTER FUNCTION framework.fn_dialog_edit(injson json) OWNER TO postgres;

--
-- TOC entry 3354 (class 0 OID 0)
-- Dependencies: 381
-- Name: FUNCTION fn_dialog_edit(injson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_dialog_edit(injson json) IS 'EDIT DIALOG';


--
-- TOC entry 382 (class 1255 OID 227273)
-- Name: fn_dialog_group_create(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_dialog_group_create(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
  --_message_text varchar;
  _dialog_id int;
  _users JSON;
 -- _files json;
  --_images json;
  _id int;
  _title varchar(150);
  _photo json;
BEGIN
	
	_userid = injson->>'userid';
    _users = injson->>'users';
   -- _message_text = injson->>'message_text';
   -- _files = injson->>'files';
    --_images = injson->>'images';
    _title = injson->>'title';
    _photo = injson->>'value';
    
    -- CHECKS
    IF _userid is NULL 
    THEN
    	PERFORM raiserror('userid is null');
    END IF;
    
    IF _users is NULL 
    THEN
    	PERFORM raiserror('users is null');
    END IF;
    
    -- USERS FOR GROUP DIALOG
    _users = (
      array_to_json(ARRAY(
        SELECT
            _userid
      ))::jsonb||_users::jsonb
    )::json;
    
    -- ADD DIALOG
    _dialog_id = nextval('framework.dialogs_id_seq'::regclass);
    
	_title = COALESCE(_title,CONCAT('untitled_',_dialog_id::varchar));
    INSERT INTO framework.dialogs (
       id, title, users, userid, 
       dtype,  photo 
    ) VALUES (
       _dialog_id, _title, _users ,_userid, 
       '2', coalesce(_photo,'[]')
    );
    
END;
$$;


ALTER FUNCTION framework.fn_dialog_group_create(injson json) OWNER TO postgres;

--
-- TOC entry 3355 (class 0 OID 0)
-- Dependencies: 382
-- Name: FUNCTION fn_dialog_group_create(injson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_dialog_group_create(injson json) IS 'CREATE GROUP DIALOG';


--
-- TOC entry 383 (class 1255 OID 227274)
-- Name: fn_dialog_leave(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_dialog_leave(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
  _user_to_remove int;
  _dialogid int;
  _dtype smallint;
  _admins json;
  _od json;
  _users JSON;
  _nw JSON;
BEGIN
	_userid = injson->>'userid';
    _dialogid = injson->>'id';
    _user_to_remove = _userid;


	IF _dialogid IS NULL 
    THEN
    	PERFORM raiserror('id is null');
    END IF;
    
    IF _user_to_remove is null 
    THEN 
  	  PERFORM raiserror('user_to_remove is null');
    END IF;
    
    SELECT 
    	d.dialog_admins,
        d.dtype,
        d.users
    FROM framework.dialogs as d
    WHERE d.id = _dialogid
    INTO _admins, _dtype, _users; 

    IF _dtype = '1'
    THEN 
        RETURN;
    END IF;
    
    IF _user_to_remove not in (
    	SELECT
        	value::varchar::int
    	FROM json_array_elements_text(_users)
    )
    THEN
    	PERFORM raiserror('User not in dialog');
    END IF;
    
    
    
    SELECT
        row_to_json(z)
    FROM (
         SELECT
                d.*
         FROM framework.dialogs as d
         WHERE d.id = _dialogid
    ) as z
    INTO _od;
    
    UPDATE framework.dialogs
    SET    
		users = array_to_json(ARRAY(
        	SELECT
                value::varchar::int
            FROM json_array_elements_text(users)
            WHERE value::varchar::int <> _user_to_remove
        ))
    WHERE id = _dialogid;


    SELECT
        row_to_json(z)
    FROM (
         SELECT
                d.*
         FROM framework.dialogs as d
         WHERE d.id = _dialogid
    ) as z
    INTO _nw;
    
    INSERT INTO framework.logtable (
      tablename, tableid,
      opertype, oldata, newdata,
      userid
    ) VALUES (
      'framework.dialogs', _dialogid::VARCHAR,
      '2',_od,_nw,
      _userid
     );
END;
$$;


ALTER FUNCTION framework.fn_dialog_leave(injson json) OWNER TO postgres;

--
-- TOC entry 3356 (class 0 OID 0)
-- Dependencies: 383
-- Name: FUNCTION fn_dialog_leave(injson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_dialog_leave(injson json) IS 'REMOVE USER FROM DIALOG';


--
-- TOC entry 385 (class 1255 OID 227275)
-- Name: fn_dialog_message_bydialog(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_dialog_message_bydialog(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE 	
	_dialog_id int;	
    _userid int;
    _users json;
    _foundcount bigint;
    _pagesize smallint;
    _offset int;
    _reply_to int;
    
BEGIN
	_dialog_id = injson->>'dialogid';
    _userid = injson->>'userid';
    _pagesize = injson->>'pagesize';
    _reply_to = injson->>'reply_to';
    
    
    IF _userid is NULL 
    THEN
    	PERFORM raiserror('userid is null');
    END IF;
    
    IF _dialog_id is NULL 
    THEN
    	PERFORM raiserror('dialogid is null');
	END IF;
    
    SELECT
    	d.users
    FROM framework.dialogs as d
    WHERE d.id = _dialog_id
    INTO _users;
    
    IF _users is null 
    THEN
    	PERFORM raiserror('Dialog is not found');
    END IF;
    
    IF _reply_to is not NULL 
    THEN
        SELECT
          count(id)
        FROM framework.dialog_messages 
        WHERE dialog_id = _dialog_id and id >= _reply_to
        INTO _pagesize;
        
        IF _pagesize < 30 THEN
        	_pagesize = 30;
        END IF;
    END IF;
    
    IF (
    	SELECT
        	count(*)
        FROM json_array_elements_text(_users)
        WHERE value::varchar::int = _userid
    ) = 0 
    THEN
    	PERFORM raiserror('ACCESS DENIED');
    END IF;
    
    SELECT
      count(id)
    FROM framework.dialog_messages 
    WHERE dialog_id = _dialog_id 
    INTO _foundcount;
    
    _pagesize = coalesce(_pagesize,'30');
    _offset = _foundcount - _pagesize;
    
    IF _offset < 0 THEN 
    	_offset = 0;
  	END IF;
    
    
    SELECT
    	array_to_json(array_agg(row_to_json(z)))
    FROM (
      SELECT
          row_number() over (ORDER BY dm.created)  as rownum,
          dm.id,
          dm.dialog_id,
          dm.files,
          dm.images,
          dm.isread,
          dm.created,
          dm.isupdated,
          dm.reply_to,
          dm.forwarded_from,
          (
          SELECT
          	usf.login
          FROM framework.dialog_messages as dmf
          	LEFT JOIN framework.users as usf on usf.id = dmf.userid
          WHERE dmf.id = dm.forwarded_from
          ) as forwarded_from_user,
          dm.message_text,
          concat(u.fam,' ',u.im,' ',u.ot) as userfio,
		  u.photo,
          u.login,
          o.orgname,
          (
          	CASE WHEN (
            	SELECT
                	dms.id
                FROM framework.dialog_messages as dms
                WHERE dms.dialog_id = _dialog_id
                ORDER BY dms.id 
                LIMIT 1
          	) = dm.id 
            THEN 
            	true
            ELSE 
           	 false
            END
          
          ) as isfirst,
          (
            CASE
            WHEN dm.userid = _userid
            THEN true
            ELSE false
            END
          ) as ismine,
          (SELECT row_to_json(f) FROM (
          	SELECT
            	dm2.message_text,
                dm2.id,
                u2.login,
                concat(u2.fam,' ',u2.im,' ',u2.ot) as userfio,
                dm2.files,
                dm2.images
            FROM framework.dialog_messages as dm2
           	 JOIN framework.users as u2 on u2.id = dm2.userid
            WHERE dm2.id = dm.reply_to
          ) as f) as reply_message
      FROM framework.dialog_messages as dm
          JOIN framework.users as u on u.id = dm.userid
          LEFT JOIN framework.orgs as o on o.id = u.orgid
      WHERE dm.dialog_id = _dialog_id
	  ORDER BY dm.created --desc
      LIMIT _pagesize OFFSET _offset
	) as z
    INTO outjson;

	outjson = COALESCE(outjson,'[]');
END;
$$;


ALTER FUNCTION framework.fn_dialog_message_bydialog(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3357 (class 0 OID 0)
-- Dependencies: 385
-- Name: FUNCTION fn_dialog_message_bydialog(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_dialog_message_bydialog(injson json, OUT outjson json) IS 'MESSAGES BY DIALOG';


--
-- TOC entry 386 (class 1255 OID 227276)
-- Name: fn_dialog_message_delete(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_dialog_message_delete(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
  _id int;
  _dialog_id int;
  _message_user int;
  _created TIMESTAMP;
  _od json;
BEGIN
  _id = injson->>'id';	
  _userid = injson->>'userid';

  -- CHECKS
  IF _id is NULL 
  THEN
  	PERFORM raiserror('id is null');
  END IF;
  
  IF _userid is NULL 
  THEN
  	PERFORM raiserror('Userid is null');
  END IF;
  
  SELECT
    dm.created,	
    dm.userid,
    dm.dialog_id
  FROM framework.dialog_messages as dm
  WHERE dm.id = _id
  INTO _created, _message_user, _dialog_id;
  
  IF _message_user <> _userid 
  THEN
  	PERFORM raiserror('Access Denied');
  END IF;
  
  IF NOT (
     EXTRACT(year from now()-_created) = 0 AND 
  	 EXTRACT(month from now()-_created) = 0 AND
     EXTRACT(day from now()-_created) = 0 AND
     EXTRACT(hour from now()-_created) < 24
  ) 
  THEN
  	PERFORM raiserror('Passed more than 24 hours');
  END IF;
  
  -- DELETE MESSAGE
  SELECT
  	row_to_json(d)
  FROM (
  	SELECT
  		*
 	FROM framework.dialog_messages 
 	WHERE id = _id
  ) as d
  INTO _od;
  
  DELETE FROM framework.dialog_notifications 
  WHERE message_id = _id;
  
  DELETE FROM framework.dialog_messages 
  WHERE id = _id;
  
  -- LOG
  INSERT INTO framework.logtable (
    tablename, tableid, opertype,
    oldata, newdata, userid
  ) VALUES (
    'framework.dialog_messages', _id::varchar, '2',
    _od, '[]'::json, _userid	
  );
  
  
END;
$$;


ALTER FUNCTION framework.fn_dialog_message_delete(injson json) OWNER TO postgres;

--
-- TOC entry 3358 (class 0 OID 0)
-- Dependencies: 386
-- Name: FUNCTION fn_dialog_message_delete(injson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_dialog_message_delete(injson json) IS 'EDIR MESSAGE';


--
-- TOC entry 387 (class 1255 OID 227277)
-- Name: fn_dialog_message_edit(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_dialog_message_edit(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
  _message_text varchar;
  _files json;
  _images json;
  _id int;
  _dialog_id int;
  _message_user int;
  _created TIMESTAMP;
  _od json;
  _nw json;
BEGIN
  _id = injson->>'id';	
  _userid = injson->>'userid';
  _message_text = injson->>'message_text';
  _files = injson->>'files';
  _images = injson->>'images';
  
  -- CHECKS
  IF _id is NULL 
  THEN
  	PERFORM raiserror('id is null');
  END IF;
  
  IF _userid is NULL 
  THEN
  	PERFORM raiserror('Userid is null');
  END IF;
  
  SELECT
    dm.created,	
    dm.userid,
    dm.dialog_id
  FROM framework.dialog_messages as dm
  WHERE dm.id = _id
  INTO _created, _message_user, _dialog_id;
  
  IF _message_user <> _userid 
  THEN
  	PERFORM raiserror('Access Denied');
  END IF;
  
  IF NOT (
     EXTRACT(year from now()-_created) = 0 AND 
  	 EXTRACT(month from now()-_created) = 0 AND
     EXTRACT(day from now()-_created) = 0 AND
     EXTRACT(hour from now()-_created) < 24
  ) 
  THEN
  	PERFORM raiserror('Passed more than 24 hours');
  END IF;
  
  IF COALESCE(_message_text,'') = '' 
  THEN
  	PERFORM raiserror('Message is empty');
  END IF;

  -- EDIT MESSAGE
  SELECT
  	row_to_json(d)
  FROM (
  	SELECT
  		*
 	FROM framework.dialog_messages 
 	WHERE id = _id
  ) as d
  INTO _od;
  
  UPDATE framework.dialog_messages 
  SET 
  	message_text = _message_text,
    isupdated = true,
    files = COALESCE(_files,files),
    images = COALESCE(_images,images)
  WHERE id = _id;
  
  SELECT
  	row_to_json(d)
  FROM (
  	SELECT
  		*
 	FROM framework.dialog_messages 
 	WHERE id = _id
  ) as d
  INTO _nw;
  
  -- LOG
  INSERT INTO framework.logtable (
    tablename, tableid, opertype,
    oldata, newdata, userid
  ) VALUES (
    'framework.dialog_messages', _id::varchar, '2',
    _od, _nw, _userid	
  );
  
  UPDATE framework.dialog_messages
  SET 
  	isread = true, 
    user_reads = (
      CASE WHEN (
          SELECT
              count(*)
          FROM json_array_elements_text(user_reads)
          WHERE value::varchar::int = _userid
      ) = 0
      THEN (
          array_to_json(ARRAY(
              SELECT
                  _userid	
          ))::jsonb||user_reads::jsonb
      )::json
      ELSE
      	user_reads
      END
    )
  WHERE dialog_id = _dialog_id and id <> _id;
  
END;
$$;


ALTER FUNCTION framework.fn_dialog_message_edit(injson json) OWNER TO postgres;

--
-- TOC entry 3359 (class 0 OID 0)
-- Dependencies: 387
-- Name: FUNCTION fn_dialog_message_edit(injson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_dialog_message_edit(injson json) IS 'EDIR MESSAGE';


--
-- TOC entry 388 (class 1255 OID 227278)
-- Name: fn_dialog_message_send(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_dialog_message_send(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
  _dialogid int;
  _message_text varchar;
  _reply_to int;
  _forwarded_from int;
  _files json;
  _images json;
  _id int;
  _users JSON;
BEGIN
  _userid = injson->>'userid';
  _dialogid = injson->>'dialogid';
  _message_text = injson->>'message_text';
  _forwarded_from = injson->>'forwarded_from';
  _reply_to = injson->>'reply_to';
  _files = injson->>'value';
  _files = COALESCE(_files,'[]');
  
  _images = (
  	SELECT
 	 array_to_json(
       ARRAY(
        SELECT
            *
        FROM json_array_elements(_files)
        WHERE lower(value->>'content_type') like 'image%'
       )
     )
  );
  
  _files = (
  	SELECT
 	 array_to_json(
       ARRAY(
        SELECT
            *
        FROM json_array_elements(_files)
        WHERE lower(value->>'content_type') not like 'image%'
       )
     )
  );
  
  -- CHECKS
  IF _userid is NULL 
  THEN
  	PERFORM raiserror('Userid is null');
  END IF;
  
  IF _dialogid is NULL 
  THEN
  	PERFORM raiserror('Dialogid is null');
  END IF;
  _message_text = COALESCE(_message_text,'');
  IF _message_text = '' AND (
  	SELECT
    	count(*)
    FROM json_array_elements(_files)
  ) = 0 AND (
  	SELECT
    	count(*)
    FROM json_array_elements(_images)
  ) = 0 AND _forwarded_from is null
  THEN
  	PERFORM raiserror('Message is empty');
  END IF;
  
  -- GET DIALOGS USERS FOR NOTIFICATIONS
  SELECT 
  	d.users
  FROM framework.dialogs as d
  WHERE d.id = _dialogid
  INTO _users;
  
  IF _users is null 
  THEN
  	PERFORM raiserror('Dialog is not found');
  END IF;
  
  IF (
    	SELECT
        	count(*)
        FROM json_array_elements_text(_users)
        WHERE value::varchar::int = _userid
   ) = 0 
  THEN
   	PERFORM raiserror('ACCESS DENIED');
  END IF;
  
  IF _forwarded_from is not null 
  THEN
  
  	SELECT
    	message_text,
        files,
        images
    FROM framework.dialog_messages as dm
    WHERE dm.id = _forwarded_from  
    INTO _message_text, _files, _images;
  	
  END IF;
  
  -- ADD MESSAGE
  _id = nextval('framework.dialog_messages_id_seq'::regclass);
  
  INSERT INTO framework.dialog_messages (
    id, userid, message_text, reply_to, 
    forwarded_from, dialog_id, files, images
  ) VALUES (
    _id, _userid, _message_text, _reply_to,
    _forwarded_from, _dialogid, _files, _images
  );
  
  -- ADD NOTIFICATIONS
  INSERT INTO framework.dialog_notifications (
    dialog_id, sender_userid, userid, message_text, message_id
  ) 
  SELECT
  	_dialogid, _userid, value::varchar::int, _message_text, _id
  FROM json_array_elements_text(_users);
  --WHERE value::varchar::int <> _userid;
  
  UPDATE framework.dialogs
  SET last_message_date = now()
  WHERE id = _dialogid;
  
  UPDATE framework.dialog_messages
  SET 
  	isread = true, 
    user_reads = (
      CASE WHEN (
          SELECT
              count(*)
          FROM json_array_elements_text(user_reads)
          WHERE value::varchar::int = _userid
      ) = 0
      THEN (
          array_to_json(ARRAY(
              SELECT
                  _userid	
          ))::jsonb||user_reads::jsonb
      )::json
      ELSE
      	user_reads
      END
    )
  WHERE dialog_id = _dialogid and id<>_id;
  
END;
$$;


ALTER FUNCTION framework.fn_dialog_message_send(injson json) OWNER TO postgres;

--
-- TOC entry 3360 (class 0 OID 0)
-- Dependencies: 388
-- Name: FUNCTION fn_dialog_message_send(injson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_dialog_message_send(injson json) IS 'SEND MESSAGE TO DIALOG';


--
-- TOC entry 389 (class 1255 OID 227279)
-- Name: fn_dialog_message_setread(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_dialog_message_setread(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _id int;
  _userid int;
BEGIN
	_id = injson->>'id';
    _userid = injson->>'userid';
    
    IF _id is null 
    THEN
    	PERFORM raiserror('id is null');
    END IF;
        
    IF _userid is null 
    THEN
    	PERFORM raiserror('userid is null');
    END IF;
    
    
    
  UPDATE framework.dialog_messages
  SET 
    isread = true, 
    user_reads = (
      CASE WHEN (
          SELECT
              count(*)
          FROM json_array_elements_text(user_reads)
          WHERE value::varchar::int = _userid
      ) = 0
      THEN (
          array_to_json(ARRAY(
              SELECT
                  _userid	
          ))::jsonb||user_reads::jsonb
      )::json
      ELSE
      	user_reads
      END
    )
  WHERE id = _id;
  UPDATE framework.dialog_notifications
  SET
     issend = TRUE, isread = true
  WHERE message_id = _id and userid = _userid;
END;
$$;


ALTER FUNCTION framework.fn_dialog_message_setread(injson json) OWNER TO postgres;

--
-- TOC entry 3361 (class 0 OID 0)
-- Dependencies: 389
-- Name: FUNCTION fn_dialog_message_setread(injson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_dialog_message_setread(injson json) IS 'SET MESSAGE READED';


--
-- TOC entry 391 (class 1255 OID 227280)
-- Name: fn_dialog_personal_create(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_dialog_personal_create(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
  _reciver_user_id int;
  _message_text varchar;
  _dialog_id int;
  _users JSON;
  _files json;
  _images json;
  _id int;
  _first_message json;
BEGIN
	
	_userid = injson->>'userid';
    _reciver_user_id = injson->>'reciver_user_id';
    _message_text = injson->>'message_text';
    _files = injson->>'files';
    _images = injson->>'images';
    
    -- CHECKS
    IF _userid is NULL 
    THEN
    	PERFORM raiserror('userid is null');
    END IF;
    
    IF _reciver_user_id is NULL 
    THEN
    	PERFORM raiserror('reciver_user is null');
    END IF;
    
    -- IF MESSAGE IS NOT EMPTY, CREATE FIRST MESSAGE
    IF _message_text is NOT NULL
    THEN
    	_first_message = json_build_object(
           'userid', _userid,
           'dialogid', _dialog_id,
           'files', _files,
           'images', _images,
           'message_text', _message_text
         ); 
    ELSE 
    	_first_message = '{}'::json;
    END IF; 
    
    -- USERS FOR PERSONAL DIALOG
    _users = array_to_json(ARRAY(
      SELECT
          _userid
      UNION 
      SELECT 
          _reciver_user_id
    ));
    
    -- ADD DIALOG
    _dialog_id = nextval('framework.dialogs_id_seq'::regclass);
	
    INSERT INTO framework.dialogs (
       id, users, userid, first_message
    ) VALUES (
       _dialog_id, _users ,_userid, _first_message
    );
	
    
END;
$$;


ALTER FUNCTION framework.fn_dialog_personal_create(injson json) OWNER TO postgres;

--
-- TOC entry 3362 (class 0 OID 0)
-- Dependencies: 391
-- Name: FUNCTION fn_dialog_personal_create(injson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_dialog_personal_create(injson json) IS 'CREATE PERSONAL DIALOG';


--
-- TOC entry 392 (class 1255 OID 227281)
-- Name: fn_dialog_removeadmin(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_dialog_removeadmin(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
  _admin_to_remove int;
  _dialogid int;
  _dtype smallint;
  _admins json;
  _od json;
  _users JSON;
  _nw JSON;
BEGIN
	_userid = injson->>'userid';
    _dialogid = injson->>'id';
    _admin_to_remove = injson->>'admin_to_remove';


	IF _dialogid IS NULL 
    THEN
    	PERFORM raiserror('id is null');
    END IF;
    
    IF _admin_to_remove is null 
    THEN 
  	  PERFORM raiserror('admin_to_remove is null');
    END IF;
    
    SELECT 
    	d.dialog_admins,
        d.dtype,
        d.dialog_admins
    FROM framework.dialogs as d
    WHERE d.id = _dialogid
    INTO _admins, _dtype, _users; 

    IF _dtype = '1'
    THEN 
        RETURN;
    END IF;
    
    IF _admin_to_remove not in (
    	SELECT
        	value::varchar::int
    	FROM json_array_elements_text(_admins)
    )
    THEN
    	PERFORM raiserror('User is not admin');
    END IF;
    
    
    
    IF (
        SELECT
            count(*)
        FROM json_array_elements_text(_admins)
        WHERE value::varchar::int = _userid
    ) = 0
    THEN
        PERFORM raiserror('ACCESS DENIED');
    END IF;
    
    SELECT
        row_to_json(z)
    FROM (
         SELECT
                d.*
         FROM framework.dialogs as d
         WHERE d.id = _dialogid
    ) as z
    INTO _od;
    
    UPDATE framework.dialogs
    SET    
		dialog_admins = array_to_json(ARRAY(
        	SELECT
                value::varchar::int
            FROM json_array_elements_text(_admins)
            WHERE value::varchar::int <> _admin_to_remove
        ))
    WHERE id = _dialogid;


    SELECT
        row_to_json(z)
    FROM (
         SELECT
                d.*
         FROM framework.dialogs as d
         WHERE d.id = _dialogid
    ) as z
    INTO _nw;
    
    INSERT INTO framework.logtable (
      tablename, tableid,
      opertype, oldata, newdata,
      userid
    ) VALUES (
      'framework.dialogs', _dialogid::VARCHAR,
      '2',_od,_nw,
      _userid
     );
END;
$$;


ALTER FUNCTION framework.fn_dialog_removeadmin(injson json) OWNER TO postgres;

--
-- TOC entry 3363 (class 0 OID 0)
-- Dependencies: 392
-- Name: FUNCTION fn_dialog_removeadmin(injson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_dialog_removeadmin(injson json) IS 'REMOVE USER FROM ADMINS';


--
-- TOC entry 393 (class 1255 OID 227282)
-- Name: fn_dialog_removeuser(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_dialog_removeuser(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
  _user_to_remove int;
  _dialogid int;
  _dtype smallint;
  _admins json;
  _od json;
  _users JSON;
  _nw JSON;
BEGIN
	_userid = injson->>'userid';
    _dialogid = injson->>'id';
    _user_to_remove = injson->>'user_to_remove';


	IF _dialogid IS NULL 
    THEN
    	PERFORM raiserror('id is null');
    END IF;
    
    IF _user_to_remove is null 
    THEN 
  	  PERFORM raiserror('user_to_remove is null');
    END IF;
    
    SELECT 
    	d.dialog_admins,
        d.dtype,
        d.users
    FROM framework.dialogs as d
    WHERE d.id = _dialogid
    INTO _admins, _dtype, _users; 

    IF _dtype = '1'
    THEN 
        RETURN;
    END IF;
    
    IF _user_to_remove not in (
    	SELECT
        	value::varchar::int
    	FROM json_array_elements_text(_users)
    )
    THEN
    	PERFORM raiserror('User not in dialog');
    END IF;
    
    
    
    IF (
        SELECT
            count(*)
        FROM json_array_elements_text(_admins)
        WHERE value::varchar::int = _userid
    ) = 0
    THEN
        PERFORM raiserror('ACCESS DENIED');
    END IF;
    
    SELECT
        row_to_json(z)
    FROM (
         SELECT
                d.*
         FROM framework.dialogs as d
         WHERE d.id = _dialogid
    ) as z
    INTO _od;
    
    UPDATE framework.dialogs
    SET    
		users = array_to_json(ARRAY(
        	SELECT
                value::varchar::int
            FROM json_array_elements_text(users)
            WHERE value::varchar::int <> _user_to_remove
        )),
    	dialog_admins = array_to_json(ARRAY(
        	SELECT
                value::varchar::int
            FROM json_array_elements_text(dialog_admins)
            WHERE value::varchar::int <> _user_to_remove
        ))
    WHERE id = _dialogid;
    
    UPDATE framework.dialog_notifications
    SET
    	issend = true,
        isread = true
    WHERE dialog_id = _dialogid and userid = _dialogid;


    SELECT
        row_to_json(z)
    FROM (
         SELECT
                d.*
         FROM framework.dialogs as d
         WHERE d.id = _dialogid
    ) as z
    INTO _nw;
    
    
    
    INSERT INTO framework.logtable (
      tablename, tableid,
      opertype, oldata, newdata,
      userid
    ) VALUES (
      'framework.dialogs', _dialogid::VARCHAR,
      '2',_od,_nw,
      _userid
     );
END;
$$;


ALTER FUNCTION framework.fn_dialog_removeuser(injson json) OWNER TO postgres;

--
-- TOC entry 3364 (class 0 OID 0)
-- Dependencies: 393
-- Name: FUNCTION fn_dialog_removeuser(injson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_dialog_removeuser(injson json) IS 'REMOVE USER FROM DIALOG';


--
-- TOC entry 394 (class 1255 OID 227283)
-- Name: fn_dialogs_byuser(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_dialogs_byuser(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
BEGIN
	_userid = injson->>'userid';
    
    IF _userid is null 
    THEN
    	PERFORM raiserror('userid is null');
    END IF;
    
    SELECT
    	array_to_json(array_agg(row_to_json(z)))
    FROM (
      SELECT 
          d.id, (
            CASE WHEN
              d.dtype = '1'
            THEN (
              SELECT
              	u.login
              FROM json_array_elements_text(d.users) as uu
              	JOIN framework.users as u on uu.value::varchar::int = u.id
              WHERE uu.value::varchar::int <> _userid
            )		
            ELSE
              d.title
            END
          ) as title, (
            CASE WHEN
              d.dtype = '1'
            THEN (
              SELECT
              	u.photo
              FROM json_array_elements_text(d.users) as uu
              	JOIN framework.users as u on uu.value::varchar::int = u.id
              WHERE uu.value::varchar::int <> _userid
            )		
            ELSE
              d.photo
            END
          ) as photo,
          d.created,
          d.last_message_date,
          (
          	SELECT 
            	row_to_json(f)
            FROM (
            	SELECT
                	m.message_text,
                    concat(u.fam,' ',u.im,' ',u.ot) as userfio,
                    u.login,
                    u.photo,
                    u.orgid,
                    o.orgname,
                    (
                      CASE
                      WHEN m.userid = _userid
                      THEN true
                      ELSE false
                      END
                    ) as ismine
                FROM framework.dialog_messages as m
                	LEFT JOIN framework.users as u on u.id = m.userid
                    LEFT JOIN framework.orgs as o on o.id = u.orgid
                WHERE m.dialog_id = d.id
                ORDER BY m.created DESC LIMIT 1
            ) as f
          ) as last_message,
          d.dtype as dialog_type,
          dt.tname as dialog_type_name,
          (
          	SELECT
            	array_to_json(array_agg(row_to_json(zz)))
           	FROM (
              SELECT 
              	uuu.id,
              	concat(uuu.fam,' ',uuu.im,' ',uuu.ot) as userfio,
                uuu.login,
                uuu.photo,
                uuu.orgid,
                o.orgname, (
                  CASE WHEN da.value::varchar is null
                  THEN false
                  ELSE true
                  END
                )  as isadmin
              FROM json_array_elements_text(d.users) as uu
              	JOIN framework.users as uuu on uuu.id = uu.value::varchar::int 
                LEFT JOIN framework.orgs as o on o.id = uuu.orgid
                LEFT JOIN json_array_elements_text(d.dialog_admins) as da on da.value::varchar = uu.value::varchar
              --WHERE uu.value::varchar::int <> _userid
            ) as zz
          ) as users, (
                SELECT
                    count(m.id)
                FROM framework.dialog_messages as m
                	JOIN framework.dialog_notifications as dn on 
                    	dn.message_id = m.id AND
                        dn.userid = _userid AND 
                        NOT dn.isread
                WHERE m.dialog_id = d.id 
          ) as unreaded,
          (
          	SELECT
            	row_to_json(zd)
            FROM (
            	SELECT
                	u.id,
                    u.login,
                    u.photo
                FROM framework.users as u
                WHERE u.id = d.creator
            ) as zd
          ) as creator,
          d.dialog_admins, (
            CASE WHEN (
              SELECT
                  count(*)
              FROM json_array_elements_text(d.dialog_admins)
              WHERE value::varchar::int = _userid
            ) > 0 THEN true
            ELSE false END
          ) as isadmin
      FROM framework.dialogs as d
      	JOIN framework.dialog_types as dt on dt.id = d.dtype
      WHERE (
          SELECT count(value) 
          FROM json_array_elements_text(d.users) 
          WHERE value::varchar::int = _userid
      ) > 0
      ORDER BY d.last_message_date desc
    ) as z
    INTO outjson;
    
    outjson = coalesce(outjson,'[]');

END;
$$;


ALTER FUNCTION framework.fn_dialogs_byuser(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3365 (class 0 OID 0)
-- Dependencies: 394
-- Name: FUNCTION fn_dialogs_byuser(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_dialogs_byuser(injson json, OUT outjson json) IS 'USER DIALOGS';


--
-- TOC entry 395 (class 1255 OID 227284)
-- Name: fn_dialogs_chats_ws(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_dialogs_chats_ws(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
BEGIN

  _userid = injson->>'userid';

  
  SELECT
     array_to_json(array_agg(row_to_json(z)))
  FROM (
       SELECT  
	     -- n.id as notificationid,
          d.id, (
            CASE WHEN
              d.dtype = '1'
            THEN (
              SELECT
                  u.login
              FROM json_array_elements_text(d.users) as uu
                  JOIN framework.users as u on uu.value::varchar::int = u.id
              WHERE uu.value::varchar::int <> _userid
            )        
            ELSE
              d.title
            END
          ) as title, (
            CASE WHEN
              d.dtype = '1'
            THEN (
              SELECT
                  u.photo
              FROM json_array_elements_text(d.users) as uu
                  JOIN framework.users as u on uu.value::varchar::int = u.id
              WHERE uu.value::varchar::int <> _userid
            )        
            ELSE
              d.photo
            END
          ) as photo,
          d.created,
          d.last_message_date, COALESCE((
            SELECT 
                array_to_json(array_agg(row_to_json(f)))
            FROM (
                SELECT
                	--DISTINCT
                    m.id,
                    m.message_text,
                    concat(u.fam,' ',u.im,' ',u.ot) as userfio,
                    u.login,
                    u.photo,
                    u.orgid,
                    o.orgname--,
                   -- m.created
                FROM framework.dialog_messages as m
                    LEFT JOIN framework.users as u on u.id = m.userid
                    LEFT JOIN framework.orgs as o on o.id = u.orgid
                	JOIN framework.dialog_notifications as dn on 
                    	dn.message_id = m.id AND not dn.issend and dn.userid = _userid
                WHERE m.dialog_id = d.id
                ORDER BY m.created DESC --LIMIT 1
            ) as f
          ),'[]') as messages,
          d.dtype as dialog_type,
          dt.tname as dialog_type_name,
          (
             SELECT
                array_to_json(array_agg(row_to_json(zz)))
             FROM (
              SELECT 
              	uuu.id,
                  concat(uuu.fam,' ',uuu.im,' ',uuu.ot) as userfio,
                uuu.login,
                uuu.photo,
                uuu.orgid,
                o.orgname, (
                  CASE WHEN da.value::varchar is null
                  THEN false
                  ELSE true
                  END
                )  as isadmin
              FROM json_array_elements_text(d.users) as uu
                JOIN framework.users as uuu on uuu.id = uu.value::varchar::int 
                LEFT JOIN framework.orgs as o on o.id = uuu.orgid
                LEFT JOIN json_array_elements_text(d.dialog_admins) as da on da.value::varchar = uu.value::varchar
              --WHERE uu.value::varchar::int <> _userid
            ) as zz
          ) as users, (
                SELECT
                    count(m.id)
                FROM framework.dialog_messages as m
                	JOIN framework.dialog_notifications as dn on 
                    	dn.message_id = m.id AND
                        dn.userid = _userid AND 
                        NOT dn.isread
                WHERE m.dialog_id = d.id 
          ) as unreaded,
          (
          	SELECT
            	row_to_json(zd)
            FROM (
            	SELECT
                	u.id,
                    u.login,
                    u.photo
                FROM framework.users as u
                WHERE u.id = d.creator
            ) as zd
          ) as creator,
          d.dialog_admins, (
            CASE WHEN (
              SELECT
                  count(*)
              FROM json_array_elements_text(d.dialog_admins)
              WHERE value::varchar::int = _userid
            ) > 0 THEN true
            ELSE false END
          ) as isadmin
	   FROM framework.dialogs as d 
			JOIN framework.dialog_types as dt on dt.id = d.dtype
	   WHERE (
          SELECT count(n.id) 
          FROM framework.dialog_notifications as n
          WHERE n.dialog_id = d.id and 
            n.userid <> n.sender_userid and
          	n.userid = _userid and not n.issend
       ) > 0
       --n.userid = _userid 
  ) as z
  INTO outjson;
  
  outjson = COALESCE(outjson,'[]');

END;
$$;


ALTER FUNCTION framework.fn_dialogs_chats_ws(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3366 (class 0 OID 0)
-- Dependencies: 395
-- Name: FUNCTION fn_dialogs_chats_ws(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_dialogs_chats_ws(injson json, OUT outjson json) IS 'DIALOGS NOTIFICATIONS FOR WS';


--
-- TOC entry 396 (class 1255 OID 227285)
-- Name: fn_dialogs_chatsmessages_ws(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_dialogs_chatsmessages_ws(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
    _userid int;
    _dialog_id int;
    _foundcount bigint;
    _pagesize int;
    _offset int;
BEGIN
    _userid = injson->>'userid';
    _dialog_id = injson->>'dialogid';
    _pagesize = injson->>'pagesize';

    SELECT
      count(id)
    FROM framework.dialog_messages 
    WHERE dialog_id = _dialog_id 
    INTO _foundcount;
    
    _pagesize = coalesce(_pagesize,'30');
    _offset = _foundcount - _pagesize;
    
    IF _offset < 0 THEN 
    	_offset = 0;
  	END IF;
    
    
    SELECT
    	array_to_json(array_agg(row_to_json(z)))
    FROM (
      SELECT
          row_number() over (ORDER BY dm.created)  as rownum,
          dm.id,
          dm.dialog_id,
          dm.files,
          dm.images,
          dm.isread,
          dm.created,
          dm.isupdated,
          dm.reply_to,
          dm.forwarded_from,
          dm.message_text,
          (
          SELECT
          	usf.login
          FROM framework.dialog_messages as dmf
          	LEFT JOIN framework.users as usf on usf.id = dmf.userid
          WHERE dmf.id = dm.forwarded_from
          ) as forwarded_from_user,
          concat(u.fam,' ',u.im,' ',u.ot) as userfio,
		  u.photo,
          u.login,
          o.orgname,
          (
          	CASE WHEN (
            	SELECT
                	dms.id
                FROM framework.dialog_messages as dms
                WHERE dms.dialog_id = _dialog_id
                ORDER BY dms.id 
                LIMIT 1
          	) = dm.id 
            THEN 
            	true
            ELSE 
           	 false
            END
          
          ) as isfirst,
          coalesce(n.id,0) as notificationid,
          (
            CASE
            WHEN dm.userid = _userid
            THEN true
            ELSE false
            END
          ) as ismine,
          (SELECT row_to_json(f) FROM (
          	SELECT
            	dm2.message_text,
                dm2.id,
                u2.login,
                dm2.files,
                dm2.images,
                concat(u2.fam,' ',u2.im,' ',u2.ot) as userfio
            FROM framework.dialog_messages as dm2
           	 JOIN framework.users as u2 on u2.id = dm2.userid
            WHERE dm2.id = dm.reply_to
          ) as f) as reply_message
      FROM framework.dialog_messages as dm
          JOIN framework.users as u on u.id = dm.userid
          LEFT JOIN framework.orgs as o on o.id = u.orgid
          LEFT JOIN framework.dialog_notifications as n on n.dialog_id = dm.dialog_id
          	AND n.message_id = dm.id and n.userid = _userid
      WHERE dm.dialog_id = _dialog_id /*and 
       (
        	SELECT 
            	count(dn.id)
            FROM framework.dialog_notifications as dn
            WHERE not dn.issend and dn.dialog_id = _dialog_id
            	  and dn.userid = _userid 
        ) > 0*/
	  ORDER BY dm.created
      LIMIT _pagesize OFFSET _offset
	) as z
    INTO outjson;
    outjson = coalesce(outjson,'[]');
    

END;
$$;


ALTER FUNCTION framework.fn_dialogs_chatsmessages_ws(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3367 (class 0 OID 0)
-- Dependencies: 396
-- Name: FUNCTION fn_dialogs_chatsmessages_ws(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_dialogs_chatsmessages_ws(injson json, OUT outjson json) IS 'DIALOGS NOTIFICATIONS FOR WS';


--
-- TOC entry 378 (class 1255 OID 227286)
-- Name: fn_dialogs_notif_setsended(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_dialogs_notif_setsended(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
  _id int;
  _ses char(36);
BEGIN
  _userid = injson->>'userid';
  _id = injson->>'id';
  _ses = injson->>'sessid';
  IF _id is NULL THEN
     PERFORM raiserror('id is null');
  END IF;
  
  UPDATE framework.dialog_notifications
  SET
     issend = TRUE
  WHERE message_id = _id and (userid = _userid or sessid = _ses);
END;
$$;


ALTER FUNCTION framework.fn_dialogs_notif_setsended(injson json) OWNER TO postgres;

--
-- TOC entry 3368 (class 0 OID 0)
-- Dependencies: 378
-- Name: FUNCTION fn_dialogs_notif_setsended(injson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_dialogs_notif_setsended(injson json) IS 'SET DIALOGS NOTIFICATION STATUS SENDED';


--
-- TOC entry 390 (class 1255 OID 227287)
-- Name: fn_dialogs_usersearch(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_dialogs_usersearch(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  _substr varchar(150);
  _userid int;
BEGIN

	_substr = injson->>'substr';
    _userid = injson->>'userid';
    
    _substr = coalesce(_substr,'1');
    _substr = replace(_substr,'@','');
    _substr = lower(concat(_substr,'%'));
    
    SELECT
    	array_to_json(array_agg(row_to_json(z)))
    FROM (
    	SELECT
        	u.id,
        	u.fam,
            u.im,
            u.ot,
            u.login,
            u.orgid,
            o.orgname,
            u.photo
        FROM framework.users as u
        	LEFT JOIN framework.orgs as o on o.id = u.orgid
        WHERE lower(u.login) like _substr and u.isactive and 
        	  u.id <> _userid
    ) as z
    INTO outjson;
    
    outjson = coalesce(outjson,'[]');

END;
$$;


ALTER FUNCTION framework.fn_dialogs_usersearch(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3369 (class 0 OID 0)
-- Dependencies: 390
-- Name: FUNCTION fn_dialogs_usersearch(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_dialogs_usersearch(injson json, OUT outjson json) IS 'SEARCH USERS';


--
-- TOC entry 397 (class 1255 OID 227288)
-- Name: fn_fapi(json, character varying, smallint, character, smallint); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_fapi(injson json, apititle character varying, apitype smallint, sessid character, primaryauthorization smallint DEFAULT NULL::smallint, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $_$
DECLARE
    _userid varchar; -- user id
    fn_title varchar(350); -- function name
    _useroles json; -- user roles
    mroles json; -- method roles
    squery varchar; -- for dynamic sql query
    role_id smallint;
    _roles json;
BEGIN
    -- CALL API METHOD'S FUNCTION
    primaryauthorization = coalesce(primaryauthorization,0);
    SELECT
        s.procedurename,
        s.roles
    FROM framework.spapi as s
    WHERE s.methodname = apititle and s.methodtype = apitype
    INTO fn_title, mroles;
     
    IF fn_title is NULL THEN
        PERFORM raiserror('m404err');
    END IF; 
    
    SELECT 
        s.userid::varchar,
        u.roles
    FROM framework.sess as s
        JOIN framework.users as u on u.id = s.userid and u.isactive
    WHERE s.id = sessid and s.killed is null
    INTO _userid, _roles;
    
    IF mroles is not null and mroles::varchar <> '[]' THEN
        IF _userid is null THEN
            PERFORM raiserror('m401err');
        END IF;
        
        IF (SELECT count(*)  
            FROM json_array_elements_text(mroles) as a1
                   JOIN json_array_elements_text(_roles) as ur 
                    ON a1.value::varchar(15)::smallint = ur.value::varchar(15)::smallint
            ) = 0 
        THEN
            PERFORM raiserror('m403err');
        END IF;        
    END IF;   
    
    IF primaryauthorization = 1 and _userid is null THEN
        perform raiserror('m401err');
    END IF; 
    
    SELECT 
        injson::jsonb || 
        (SELECT 
            row_to_json(d) 
         FROM (
             SELECT _userid as userid
         ) as d)::jsonb || 
        (SELECT 
            row_to_json(d) 
         FROM (
             SELECT sessid as sessid
         ) as d)::jsonb
    INTO injson;

    squery = concat('
        SELECT 
           row_to_json(d) 
         FROM
            ( 
               select *
               from ',fn_title,'($1)
            ) as d;'
    );
    
    EXECUTE format(squery) INTO outjson USING injson;
    
    outjson = coalesce(outjson,'[]');
END;
$_$;


ALTER FUNCTION framework.fn_fapi(injson json, apititle character varying, apitype smallint, sessid character, primaryauthorization smallint, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3370 (class 0 OID 0)
-- Dependencies: 397
-- Name: FUNCTION fn_fapi(injson json, apititle character varying, apitype smallint, sessid character, primaryauthorization smallint, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_fapi(injson json, apititle character varying, apitype smallint, sessid character, primaryauthorization smallint, OUT outjson json) IS 'CALL API METHOD''S FUNCTION';


--
-- TOC entry 398 (class 1255 OID 227289)
-- Name: fn_filter_add_untitle(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_filter_add_untitle(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE 
  _viewid int;
  _id int;
BEGIN
  -- add untitle filter in filters table
  
  _viewid = injson->>'viewid';

  IF _viewid is NULL THEN
  	PERFORM raiserror('viewid is null');
  END IF;
    
    _id = nextval('framework.filters_id_seq'::regclass);
    
    INSERT INTO framework.filters (
      id, column_order,
	  viewid, title, type
    ) VALUES (
      _id, COALESCE((
      	SELECT max(column_order) 
       	FROM framework.filters 
        WHERE viewid = _viewid
      ),0) + 1,
      _viewid, concat('untitled_',_id::varchar), 'substr'
    );
END;
$$;


ALTER FUNCTION framework.fn_filter_add_untitle(injson json) OWNER TO postgres;

--
-- TOC entry 3371 (class 0 OID 0)
-- Dependencies: 398
-- Name: FUNCTION fn_filter_add_untitle(injson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_filter_add_untitle(injson json) IS '-- add untitle filter in filters table';


--
-- TOC entry 399 (class 1255 OID 227290)
-- Name: fn_formparams_V004(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION "fn_formparams_V004"(injson json, OUT tables json, OUT filtertypes json, OUT viewtypes json, OUT columntypes json) RETURNS record
    LANGUAGE plpgsql
    AS $$
--DECLARE

BEGIN
  -- 	
/*
	OLD V004
    NEED TO REMOVE AFTER TESTS

*/
  SELECT 
  	array_to_json(array_agg(row_to_json(d)))
  FROM
  (SELECT 
      concat(TABLE_SCHEMA,'.',TABLE_NAME) as value,
      concat(TABLE_SCHEMA,'.',TABLE_NAME) as label, *
  FROM INFORMATION_SCHEMA.TABLES
  ORDER BY TABLE_SCHEMA, TABLE_NAME) as d
  INTO tables;
  
  SELECT 
  	array_to_json(array_agg(row_to_json(d)))
  FROM
  (  SELECT 
  	ft.ftname as value,
    ft.ftname as label
  FROM framework.filtertypes as ft) as d
  INTO filtertypes;
  
  SELECT 
  	array_to_json(array_agg(row_to_json(d)))
  FROM
  (
    SELECT vtypename as value, vtypename as label 
    FROM framework.viewtypes
    ) as d
    INTO viewtypes;
    
  SELECT 
  	array_to_json(array_agg(row_to_json(d)))
  FROM (
  SELECT 
  	c.typename as value, 
  	c.typename as label,
    c.viewtypes 
  FROM framework.columntypes as c
    ) as d
    INTO columntypes;
END;
$$;


ALTER FUNCTION framework."fn_formparams_V004"(injson json, OUT tables json, OUT filtertypes json, OUT viewtypes json, OUT columntypes json) OWNER TO postgres;

--
-- TOC entry 400 (class 1255 OID 227291)
-- Name: fn_formselect(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_formselect(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $_$
DECLARE
  _config json;
  _inputs json;
  _val varchar;
  _id varchar;
  _relationcolums json;
  _relation varchar;
  squery varchar;
  col1 varchar;
  col2 varchar;
  pv json;
  select_condition json;
  _oper varchar(20);
  operval varchar;
  _ismulti boolean;
  _userid int;
  _orgs varchar;
  _orgid varchar;
  k int;
BEGIN
	
  _config = injson->>'config';
  _inputs = injson->>'inputs';
  _val = injson->> 'val';
  _userid = injson->>'userid';
  _id = injson->>'id';
  _ismulti = injson->>'ismulti';
  _relation = coalesce(_config->>'multiselecttable',_config->>'relation');
  _relationcolums = coalesce(coalesce(_config->>'multicolums',_config->>'relationcolums'),'[]');
  
  
  _ismulti = coalesce(_ismulti,false);
  IF (_config->>'type') like 'multi%' THEN
  	_ismulti = true;
  END IF; 
  
  
  IF _relation is null or _relationcolums is null or (SELECT count(*) 
  													  FROM json_array_elements_text(_relationcolums)) = 0 
  THEN
  	PERFORM raiserror('Something wrong here. Please check the config');	
  END IF;  

  
  col1 = (_relationcolums->0)::json->>'value';
 
   IF (SELECT count(*)
   FROM information_schema.columns as t
   WHERE concat(t.table_schema,'.',t.table_name) = _relation and 
   		 t.column_name = col1) = 0 
   THEN
         PERFORM raiserror('error in config can not find table or col');
   END IF;      
 
  IF (SELECT count(*) FROM json_array_elements_text(_relationcolums)) = 1
  	and _config->>'type' not like '%typehead'
  THEN 		
  	squery = concat(squery,' SELECT "', col1, 
    	'" as value, "',col1, '" as label FROM ', 
        _relation
    );           
  ELSE
        IF (SELECT count(*) FROM json_array_elements_text(_relationcolums)) > 1 THEN
          k = 1;
        ELSE
        	k = 0; 
        END IF;
        
		col2 = (_relationcolums->k)::json->>'value';

        IF (SELECT count(*)
        FROM information_schema.columns as t
        WHERE concat(t.table_schema,'.',t.table_name) = _relation and 
               t.column_name = col2) = 0 THEN
               PERFORM raiserror('error in config can not find table or col2');
        END IF; 

		squery = concat(
        	squery,
        	' SELECT "' , 
            col1 , 
            '" as value, concat( "', col2,'"'
        );

        k = 2;
        WHILE k < (SELECT count(*) FROM json_array_elements_text(_relationcolums))
        LOOP
        	squery = concat(squery,','' '',"',(_relationcolums->k)::json->>'value','"');
        	k = k + 1;
        END LOOP;

		squery = concat(squery,') ');
   
		squery = concat(squery, ' as label FROM ', _relation);
        
		SELECT 
        	array_to_json(array_agg(row_to_json(d)))
        FROM (
        SELECT value
        FROM
        (select 
        	row_number() over (order by 1) as n, * 
        from json_array_elements_text(_relationcolums) )as p
        where p.n not in (1,2)) as d
        INTO _relationcolums;

		IF _val is not null 
        THEN
        	IF not _ismulti 
            THEN
              _val = concat('%',upper(_val),'%');
              squery = concat(
              	squery,' WHERE (upper("' , 
                col2 , '"::varchar) like $1 or upper("' , 
                col1 , '"::varchar) like $1'); 
              FOR pv in (SELECT * FROM json_array_elements_text(_relationcolums))
              LOOP
                  squery = concat(squery, ' or upper(' , (pv->>'value')::json->>'value' , '::varchar) like $1 ');
              END LOOP;   
            ELSE
            	IF _val not like '[%]' THEN
            	_val = json_build_array(_val)::varchar;
                END IF;

            	squery = concat(
                	squery, 
                    ' WHERE  (
                	(select count(value) 
                     from json_array_elements_text($1::json)
                     where upper("' ,col2 , '"::varchar) like 
                     	concat(''%%'', upper(value::varchar),''%%'')
                     ) > 0 ' 
                );
                FOR pv in (SELECT * FROM json_array_elements_text(_relationcolums))
                LOOP
                    squery = concat(
                      squery, 
                      ' or upper(' , 
                      pv->>'value' , 
                      '::varchar) like 
                      (select 
                      	 upper(value::varchar) 
                       from json_array_elements_text($1)) '
                    );
                END LOOP;                           
            END IF;
            squery = concat(squery, ') '); 
			IF _id is not null THEN
				squery = concat(squery,' and "' , col1 , '" = ''' , replace(_id::varchar ,'''',''''''), '''');
            END IF;    
		ELSE
        	IF not _ismulti THEN
              IF _id is not null THEN
                  squery = concat(squery,' WHERE "', col1 , '" = ''' , replace(_id::varchar ,'''','''''') , ''' '); 
                  --perform raiserror(squery);
              END IF;   
            ELSE
               IF _id is not null THEN
                  squery = concat(squery,' WHERE "', col1 , '"::varchar in (select value::varchar from json_array_elements_text(''' , replace(_id::varchar ,'''','''''') , ''')) '); 
                  --perform raiserror(squery);
              END IF;             
            END IF;   	
        END IF;        
  END IF;	
  
  select_condition = _config->>'select_condition';
  IF _inputs is not null 
  	and select_condition is not null 
  THEN
    IF squery not like '%WHERE%' THEN
    	squery = concat(squery,' WHERE ');
    ELSE
    	squery = concat(squery,' and ');
    END IF;    

    
    SELECT
       	u.orgs::varchar, u.orgid::varchar 
    FROM framework.users as u
    WHERE u.id = _userid
    INTO _orgs,_orgid;


    FOR pv in (SELECT * FROM json_array_elements_text(select_condition))
    LOOP
    	col1 = (pv->>'col')::json->>'label';
        _oper = (pv->>'operation')::json->>'value';
        operval = replace(
        	replace(
            	replace(
                	replace(
                    	coalesce(
                        	pv->>'const', (_inputs->>((pv->>'value')::json->>'value'))
                        ),'''',''''''
                    ),'_orgid_',coalesce(_orgid,'')
                ),'_userid_',coalesce(_userid::varchar,'')
            ),'_orgs_',coalesce(_orgs,'[]'));
        IF (
          SELECT count(*)
          FROM information_schema.columns as t
          WHERE concat(t.table_schema,'.',t.table_name) = _relation and 
                t.column_name = col1
        ) = 0 
        THEN
               PERFORM raiserror('error in config can not find table or col');
        END IF;  
        IF _oper not in ('like', 'in', 'not in', 'is null', 'is not null') THEN
	
          squery = concat(
          	squery, ' "', col1,'"', 
            _oper , '''' , 
            operval, ''' and'
          );
        END IF;   
        IF _oper in ('is null','is not null') THEN
          squery = concat(
          	squery, ' "', col1,'" ', 
            _oper , ' and'
          );	
        END IF;    
        IF _oper = 'like' THEN
            squery = concat(
            	squery, ' upper("', col1,'") ',  
                _oper , ' upper(''%%' , 
                operval, '%%'') and'
            );
        END IF;       
        IF _oper in ('in','not in') THEN
            squery = concat(
            	squery, ' "', col1,'" ',  
                _oper , ' (', 
                (SELECT 
                	string_agg(
                    	concat('''',o.name::varchar,''''), 
                        ', '
                    )
                 FROM json_array_elements(concat('[',operval,']')::json
                 ) as o), ') and'
            );              
        END IF;  
            
    END LOOP;
    squery = substring(squery,1,length(squery)-4); 
  END IF;
  

  squery = concat(
  	'SELECT array_to_json(array_agg(row_to_json(d))) FROM ( ',
  	squery, ' LIMIT 300 ) as d');
  
  
  EXECUTE format(squery) USING _val INTO outjson;
  outjson = coalesce(outjson,'[]');
  
END;
$_$;


ALTER FUNCTION framework.fn_formselect(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3372 (class 0 OID 0)
-- Dependencies: 400
-- Name: FUNCTION fn_formselect(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_formselect(injson json, OUT outjson json) IS 'select data for type select';


--
-- TOC entry 401 (class 1255 OID 227293)
-- Name: fn_functions_getall_spapi(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_functions_getall_spapi(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
/* ALL FUNCTIONS FOR SP API*/
DECLARE 
	_conf JSON;
    _key varchar(100);
    _val varchar(150);
BEGIN
   _conf = (injson->'config');
   
   SELECT
   	VALUE->>'key'
   FROM json_array_elements(_conf)
   WHERE (value->>'col') = 'procedurename' 
   INTO _key;
   
   _val = (injson->'data')->>_key;
   
   _val = coalesce(_val,'%');
   

	
   SELECT
   		array_to_json(array_agg(row_to_json(d)))
   FROM (
      SELECT 
        format('%I.%I', ns.nspname, p.proname) as label,
        format('%I.%I', ns.nspname, p.proname) as value
      FROM pg_proc p 
      INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)
      WHERE ns.nspname not in ('pg_catalog','information_schema') --and
      	--format('%I.%I', ns.nspname, p.proname) like _val
  ) as d
  INTO outjson;
  
  outjson = coalesce(outjson,'[]');
END;
$$;


ALTER FUNCTION framework.fn_functions_getall_spapi(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3373 (class 0 OID 0)
-- Dependencies: 401
-- Name: FUNCTION fn_functions_getall_spapi(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_functions_getall_spapi(injson json, OUT outjson json) IS 'ALL FUNCTIONS FOR SP API';


--
-- TOC entry 402 (class 1255 OID 227294)
-- Name: fn_getacttypes(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_getacttypes(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE 
	_viewtype VARCHAR(30);
BEGIN
	_viewtype = injson->>'viewtype';	
    
    /*for old versions correct work*/
	_viewtype = coalesce(_viewtype,'table');
    
	SELECT 
      array_to_json(array_agg(row_to_json(d)))
    FROM (
	SELECT 
    	a.actname as value, 
        a.actname as label 
    FROM framework.acttypes as a
    WHERE (
	      SELECT count(value)
          FROM json_array_elements_text(a.viewtypes)
          WHERE value::varchar = _viewtype
	   ) > 0
    ) as d
    INTO outjson;
    
    outjson = coalesce(outjson,'[]');
END;
$$;


ALTER FUNCTION framework.fn_getacttypes(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 403 (class 1255 OID 227295)
-- Name: fn_getfunctions(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_getfunctions(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- functions for config's column 
  
  SELECT 
  	array_to_json(array_agg(row_to_json(d)))
  FROM (
    SELECT 
      f.funcname as label,
      f.funcname as value,
      f.functype
    FROM framework.functions as f
    UNION ALL
    SELECT 
      format('%I.%I', ns.nspname, p.proname) as label,
      format('%I.%I', ns.nspname, p.proname) as name,
      'user' as functype 
    FROM pg_proc p 
    INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)
    WHERE ns.nspname not in ('pg_catalog','information_schema')
  ) as d
  INTO outjson;
  
  outjson = coalesce(outjson,'[]');
END;
$$;


ALTER FUNCTION framework.fn_getfunctions(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3374 (class 0 OID 0)
-- Dependencies: 403
-- Name: FUNCTION fn_getfunctions(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_getfunctions(injson json, OUT outjson json) IS 'functions for config''s column ';


--
-- TOC entry 404 (class 1255 OID 227296)
-- Name: fn_getselect(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_getselect(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  _filterid int;
  _tabname varchar(350);
  _tabcolums varchar(1500);
  _squery varchar(1800);
BEGIN
	_filterid = injson->>'id';
    
    
    SELECT
    	coalesce(c.relation, c.multiselecttable) as  tabname,
    	COALESCE(
        	c.relationcolums ,	
            c.multicolums)->>0 as tabcolums
    FROM framework.filters as f
    	JOIN framework.config as c on c.id = f.val_desc
        	and f.viewid = f.viewid
    WHERE f.id = _filterid
    INTO _tabname, _tabcolums;
    
	/*_tabname = injson->>'tabname';
    _tabcolums = injson->>'tabcolums';*/
    
  IF 
    (SELECT 
           count(t.*)
    FROM information_schema.columns as t                                         
    WHERE concat(t.table_schema,'.',t.table_name) = _tabname and 
    upper(t.column_name) = upper(_tabcolums)) = 0 THEN
  	perform raiserror('can not find table or column, please check input data');
  END IF;  

  _squery = concat(
  	'
    SELECT array_to_json(array_agg(row_to_json(d))) FROM
    (SELECT id as value, ' ,_tabcolums , ' as label FROM ', _tabname,') as d'
  );
  
  EXECUTE format(_squery) INTO outjson; 
  outjson = coalesce(outjson,'[]');

END;
$$;


ALTER FUNCTION framework.fn_getselect(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 405 (class 1255 OID 227297)
-- Name: fn_gettables_sel(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_gettables_sel(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
BEGIN
  SELECT 
  	array_to_json(array_agg(row_to_json(d)))
  FROM (
	SELECT 
		concat(TABLE_SCHEMA,'.',TABLE_NAME) as value,
		concat(TABLE_SCHEMA,'.',TABLE_NAME) as label, *
	FROM INFORMATION_SCHEMA.TABLES
	ORDER BY TABLE_SCHEMA, TABLE_NAME
  ) as d
  INTO outjson;
  
  outjson = coalesce(outjson,'[]');
END;
$$;


ALTER FUNCTION framework.fn_gettables_sel(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3375 (class 0 OID 0)
-- Dependencies: 405
-- Name: FUNCTION fn_gettables_sel(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_gettables_sel(injson json, OUT outjson json) IS 'ALL TABLES FOR ADMIN';


--
-- TOC entry 406 (class 1255 OID 227298)
-- Name: fn_getusersettings(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_getusersettings(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
	_userid int;
BEGIN
	_userid = injson->>'userid';
    
    SELECT 
    	u.usersettings
    FROM framework.users as u
    WHERE u.id = _userid
    INTO outjson;

	outjson = coalesce(outjson,'[]');
END;
$$;


ALTER FUNCTION framework.fn_getusersettings(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 407 (class 1255 OID 227299)
-- Name: fn_htmldatatype(character varying); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_htmldatatype(sqldatatype character varying, OUT htmltype character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
BEGIN
	
    htmltype = 'text';
	IF sqldatatype in (
    		'int',
            'integer', 
            'smallint', 
            'real', 
            'money', 
            'float', 
            'decimal', 
            'numeric', 
            'smallmoney', 
            'bigint',
            'double precision'
    ) THEN
    	 htmltype = 'number';
    END IF;     
	IF sqldatatype in (
    	'date',
        'time',
        'datetime2',
        'datetimeoffset',
        'smalldatetime',
        'datetime',
        'timestamp',
        'timestamp without time zone',
        'timestamp with time zone'
    ) THEN
    	 htmltype = 'date';
	END IF; 
    IF sqldatatype in ('bit','boolean') THEN
    	 htmltype = 'checkbox' ;   
    END IF; 
    	 
    
        
   -- RETURN htmltype
END;
$$;


ALTER FUNCTION framework.fn_htmldatatype(sqldatatype character varying, OUT htmltype character varying) OWNER TO postgres;

--
-- TOC entry 3376 (class 0 OID 0)
-- Dependencies: 407
-- Name: FUNCTION fn_htmldatatype(sqldatatype character varying, OUT htmltype character varying); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_htmldatatype(sqldatatype character varying, OUT htmltype character varying) IS 'sql types into framework types';


--
-- TOC entry 408 (class 1255 OID 227300)
-- Name: fn_logout(character); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_logout(sesid character, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
BEGIN

	UPDATE framework.sess
	SET killed = now()
    WHERE id = sesid;
    
    outjson = '{"message":"OK"}';

END;
$$;


ALTER FUNCTION framework.fn_logout(sesid character, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3377 (class 0 OID 0)
-- Dependencies: 408
-- Name: FUNCTION fn_logout(sesid character, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_logout(sesid character, OUT outjson json) IS 'log out';


--
-- TOC entry 409 (class 1255 OID 227301)
-- Name: fn_logtable_rollback(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_logtable_rollback(injson json, OUT message character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
	_id			int;			
    _schemetable varchar;		
	_scheme		varchar;		
	_table		varchar;		
    _rowid		int;			
	_opertype	int;			
    _oldata		json;			
    _newdata	json;			
    _new_actions json;			
    _new_filters json;			
    _new_config json;			
    _new_visible_condition json;	
    _new_select_condition json;		
    _new_defaultval json;		
    _i			json;			
    _filters	json;			
    _col_id		json;			
    _colname	varchar;		
    _oldata_log		json;		
    _newdata_log	json;		
    _new_cols_from_config json;	
    _cols		varchar[];		
    _cols_str	varchar;		
    _cols_str_id	varchar;	
    _strpos		int;			
    _query_str	varchar;		
    _user_id	int;			
    _new_id		int;			
    _new_actions_id int;		
    _new_filters_id int;		
    _new_config_id int;			
    _new_visible_condition_id int;	
    _new_select_condition_id int;	
    _new_defaultval_id int;		
BEGIN
	_id = injson->>'id';
    _user_id = injson->>'userid';

    SELECT
    	lt.tablename,
        lt.tableid,
        lt.opertype,
        lt.oldata,
        lt.newdata,
        lt.colname
    FROM
    	framework.logtable lt
    WHERE
    	lt.id = _id
    INTO
    	_schemetable, _rowid, _opertype, _oldata, _newdata, _colname;
        
    _strpos = strpos(_schemetable, '.') - 1;

    _scheme = left(_schemetable, _strpos);
    _table = right(_schemetable, length(_schemetable) - _strpos - 1);

    SELECT 
    	array_agg(column_name::TEXT)
    FROM
    	information_schema.columns
    WHERE
    	table_schema = _scheme AND
        table_name = _table
    INTO
    	_cols;


    _cols_str_id = array_to_string(_cols, ',', '*');

	_oldata = _oldata::jsonb - 'id';
	_cols = array_remove(_cols, _cols[1]);
	_cols_str = array_to_string(_cols, ',', '*');
    

    _cols_str = replace(_cols_str, ',join', ',"join"');
    _cols_str = replace(_cols_str, ',table,', ',"table",');
    _cols_str = replace(_cols_str, ',table)', ',"table")');
    _cols_str = replace(_cols_str, ',order by', ',"order by"');


    IF _opertype = 2 THEN
        IF _oldata IS NULL THEN
        	perform raiserror('can not rollback');
        END IF;
    

    	IF _colname IS NOT NULL AND _colname <> '' THEN
        	_cols_str = _colname;
            _cols_str_id = _colname;
        END IF;

        EXECUTE format('
        SELECT row_to_json(row)
        FROM (
            SELECT
                %s
            FROM
                %s
            WHERE
                %s.id = %s
        ) row;
        ',
        _cols_str_id,
        _schemetable,
        _table,
        _rowid
        ) INTO _oldata_log;

        IF _oldata_log IS NULL THEN
            perform raiserror(format('eow not fount (%s: %s)', _schemetable, _rowid));
        END IF;

        EXECUTE format('
            UPDATE %s set(%s)=(SELECT %s FROM json_populate_record(null::%s, ''%s'')) WHERE %s.id = %s',
            _schemetable, 
            _cols_str, 
            _cols_str, 
            _schemetable, 
            _oldata, 
            _table,
            _rowid);
        _oldata = _oldata_log;		

        EXECUTE format('
        SELECT row_to_json(row)
        FROM (
            SELECT
                %s
            FROM
                %s
            WHERE
                %s.id = %s
        ) row;
        ',
        _cols_str_id,
        _schemetable,
        _table,
        _rowid
        ) INTO _newdata_log;
        _newdata = _newdata_log;
    ELSEIF _opertype = 3 THEN
        
    	EXECUTE format('
			INSERT INTO %s(%s) SELECT %s FROM json_populate_record(null::%s, ''%s'') RETURNING id',
            _schemetable, 
            _cols_str, 
            _cols_str, 
            _schemetable, 
            _oldata)
        INTO _new_id;
		

        _newdata = _oldata;
        _newdata = _newdata::jsonb || ('{"id":' || _new_id || '}')::jsonb;




        IF _schemetable = 'framework.views' THEN
--        	perform raiserror(_oldata->>'actions'::varchar); -- restoring removed view

            IF _oldata->'actions' IS NOT NULL AND _oldata->>'actions' <> '[]' THEN
            	EXECUTE format('
                INSERT INTO framework.actions(column_order, title, viewid, icon, classname, act_url, api_method, api_type, refresh_data, ask_confirm, roles, forevery, main_action, act_type)
            	SELECT 	x.column_order, x.title, %s, x.icon, x.classname, x.act_url, x.api_method, x.api_type, x.refresh_data, x.ask_confirm, x.roles, x.forevery, x.main_action, x.act_type
                FROM json_to_recordset(''%s'') AS x(column_order int, title varchar, icon varchar, classname varchar, act_url varchar, api_method varchar, api_type varchar, refresh_data boolean, ask_confirm boolean, roles json, forevery boolean, main_action boolean, act_type varchar)
                RETURNING id', _new_id, _oldata->>'actions')
                INTO _new_actions_id;
                
                SELECT row_to_json(d)
                FROM (
                	SELECT *
                    FROM framework.actions
                    WHERE id = _new_actions_id
                ) as d 
                INTO _new_actions;
                
                _newdata = _newdata::jsonb || ('{"actions":[' || _new_actions || ']}')::jsonb;
            END IF;
            
            SELECT array_to_json(array_agg(row_to_json(d)))
            FROM (
            SELECT id, col
            FROM
            	framework.config
            WHERE
            	viewid = _new_id
            ) AS d
            INTO _new_cols_from_config;
            
            IF _oldata->'filters' IS NOT NULL AND _oldata->>'filters' <> '[]' THEN
            
            	_filters = _oldata->'filters';

                FOR _i IN SELECT * FROM json_array_elements(_filters)
                LOOP
                    SELECT row_to_json(d)
                        FROM (
                          SELECT
                              value->>'id' as fid
                          FROM
                              json_array_elements(_new_cols_from_config) as value
                          WHERE
                              value->>'col' LIKE _i->>'column') d
                    INTO
                    	_col_id;
                        

                    _filters = jsonb_set(_i::jsonb, '{0,val_desc}', (_col_id->>'fid')::jsonb, false);

                    IF _i->>'column' = 'korob_id' THEN
						perform raiserror(format('_col_id=(%s),		_new_cols=(%s),			_filters=(%s)', _col_id->>'fid', _filters, _new_cols_from_config));
                    END IF;                    
                END LOOP;

                _oldata = _oldata::jsonb || ('{"filters":' || _filters || '}')::jsonb;                

                perform raiserror(format('inserted cols (%s), _filters(%s), oldata (%s)', _new_cols_from_config, _filters, _oldata));

            	EXECUTE format('
                INSERT INTO framework.filters(column_order, viewid, title, type, classname, "column", columns, roles, t, "table", val_desc)
            	SELECT x.column_order, %s, x.title, x.type, x.classname, x.column, x.columns, x.roles, x.t, x.table, x.val_desc
                FROM json_to_recordset(''%s'') AS x(column_order smallint, title varchar, type varchar, classname varchar, "column" varchar, columns json, roles json, t varchar, "table" json, val_desc int)
                RETURNING id', _new_id, _oldata->>'filters')
                INTO _new_filters_id;
                
                SELECT row_to_json(d)
                FROM (
                	SELECT *
                    FROM framework.filters
                    WHERE id = _new_filters_id
                ) as d 
                INTO _new_filters;

				_newdata = _newdata::jsonb || ('{"filters":[' || _new_filters || ']}')::jsonb;

            END IF;            
        	
        END IF;
    END IF;

	IF _colname IS NOT NULL THEN
    	_colname = '''' || _colname || '''';
    ELSE
    	_colname = 'NULL';
    END IF;

	IF _opertype = 2 or _opertype = 3 THEN
      EXECUTE format('
          INSERT INTO 
              framework.logtable(tablename, tableid, opertype, oldata, newdata, colname, userid) 
          VALUES(''%s'', ''%s'', 4, ''%s'', ''%s'', %s, %s)',
          _schemetable,
          _rowid,
          _oldata,
          _newdata,
          NULLIF(_colname,''),  -- _colname,
          _user_id);
    END IF;

	message = 'OK';
                             
END;
$$;


ALTER FUNCTION framework.fn_logtable_rollback(injson json, OUT message character varying) OWNER TO postgres;

--
-- TOC entry 3378 (class 0 OID 0)
-- Dependencies: 409
-- Name: FUNCTION fn_logtable_rollback(injson json, OUT message character varying); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_logtable_rollback(injson json, OUT message character varying) IS 'rollback row from framework.logtable';


--
-- TOC entry 410 (class 1255 OID 227303)
-- Name: fn_mainmenu(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_mainmenu(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
  _roles json;	
BEGIN
    -- NOT USED
	_userid = injson->>'userid';
		
	SELECT
    	u.roles
    FROM framework.users as u
    WHERE u.id = _userid
    INTO _roles;
	
	SELECT
    	array_to_json(array_agg(row_to_json(d))) 
    FROM (
	  SELECT 
        m.*,
        (SELECT count(m2.id) FROM framework.mainmenu as m2 WHERE m2.parentid = m.id) as childs
      FROM framework.mainmenu as m
      WHERE ((
	        SELECT count(*)
      		FROM json_array_elements_text(_roles) as r
            WHERE r.value::varchar = '0'
       )>0     
      
      			 or 
      		 (SELECT count(*)
                			FROM json_array_elements_text(m.roles) as r
                             JOIN json_array_elements_text(_roles) as r2 on r2.value::varchar = r.value ::varchar 
                            )>0)
      ORDER BY m.orderby
      ) as d
    INTO outjson;
    
    outjson = coalesce(outjson,'[]');

END;
$$;


ALTER FUNCTION framework.fn_mainmenu(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 411 (class 1255 OID 227304)
-- Name: fn_mainmenu_recurs(json, integer); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_mainmenu_recurs(_roles json, _parentid integer, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
BEGIN
    --NOT USED
	SELECT
    	array_to_json(array_agg(row_to_json(d))) 
    FROM
      (SELECT 
        m.*,
        m.title as label,
        m.path as to,
        framework.fn_mainmenu_recurs(_roles,m.id) as items,
        (SELECT count(m2.id) FROM framework.mainmenu as m2 WHERE m2.parentid = m.id) as childs
      FROM framework.mainmenu as m
      WHERE  ((SELECT count(*)
      			FROM json_array_elements_text(_roles) as r
                WHERE r.value::varchar = '0'
           		)>0     
      
      			 or 
      		 (SELECT count(*)
                			FROM json_array_elements_text(m.roles) as r
                             JOIN json_array_elements_text(_roles) as r2 on r2.value::varchar = r.value ::varchar 
                            )>0)
      	and coalesce(m.parentid,0) = coalesce(_parentid,0)
      ORDER BY m.orderby
      ) as d
    INTO outjson;
END;
$$;


ALTER FUNCTION framework.fn_mainmenu_recurs(_roles json, _parentid integer, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 412 (class 1255 OID 227305)
-- Name: fn_mainmenusigma(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_mainmenusigma(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
  _roles json;
  _usermenu json;
  _userdetail json;
BEGIN
	_userid = injson->>'userid';
	-- NOT USED
	SELECT
    	u.roles
    FROM framework.users as u
    WHERE u.id = _userid
    INTO _roles;
	

    
	IF _userid is null THEN
    	SELECT 
				'[{"label": "Notifications", "icon": "pi pi-fw pi-inbox", "to":"/list/notifs"},
				{"label": "login", "icon": "pi pi-fw pi-power-off", "to": "/logout"}]' as usermenu
        INTO _usermenu;        
        
		SELECT row_to_json(d)
        FROM
        (SELECT 
        	'' as login,
            'unknown' as fam,
            '' as im,
            '' as ot,
            0 as orgid,
            '' as orgname,
            '' as photo,
            '{}' as usersettings) as d
         INTO _userdetail;   
    ELSE
    	SELECT 
				'[{"label": "Account", "icon": "pi pi-fw pi-user", "to": "/getone/account?id=_userid_"},
				{"label": "Notifications", "icon": "pi pi-fw pi-inbox", "to":"/list/notifs?userid=_userid_"},
                {"label": "My organization", "icon": "pi pi-fw pi-inbox", "to":"/getone/myorg?id=_orgid_"},
				{"label": "logout", "icon": "pi pi-fw pi-power-off", "to": "/logout"}]' as usermenu
        INTO _usermenu;  
        
        SELECT row_to_json(d)
        FROM
        (SELECT 
        	u.login,
            u.fam,
            u.im,
            u.ot,
            u.orgs,
            u.orgid,
        	o.orgname,
            (u.photo->0)::json->>'src' as photo,
            u.usersettings
        FROM framework.users as u
			JOIN framework.orgs as o on u.orgid = o.id 
        WHERE u.id = _userid) as d
        INTO _userdetail;
    END IF;    

    outjson = framework.fn_mainmenu_recurs(_roles, 0);

	SELECT
    	row_to_json(d)
    FROM
    (SELECT 
    	outjson as mainmenu,
        _userdetail as userdetail,
        coalesce(_usermenu,'[]') as usermenu) as d
    INTO outjson;    
    
    --outjson = coalesce(outjson,'[]');
END;
$$;


ALTER FUNCTION framework.fn_mainmenusigma(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 584 (class 1255 OID 227306)
-- Name: fn_mainsettings_save(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_mainsettings_save(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
IF ( SELECT count(id)
	 FROM framework.mainsettings
	 WHERE isactiv
   ) > 0
   THEN
	  UPDATE framework.mainsettings
	  SET 
		dsn = COALESCE(injson->>'dsn',dsn),
		port = COALESCE((injson->>'port')::int,port),
		"developerRole" = COALESCE((injson->>'developerRole'),"developerRole"),
		maindomain = COALESCE(injson->>'maindomain',maindomain),
		"primaryAuthorization" =  COALESCE((injson->>'primaryAuthorization')::smallint,"primaryAuthorization"), 
		redirect401 = COALESCE(injson->>'redirect401',redirect401),
		homepage = COALESCE(injson->>'homepage', homepage),
		reports_url = COALESCE(injson->>'reports_url', reports_url),
		login_url = COALESCE(injson->>'login_url', login_url),
        ischat = COALESCE((injson->>'ischat')::boolean, ischat)
	  WHERE isactiv;
    ELSE
	  INSERT INTO framework.mainsettings (
		dsn, port, "developerRole",	
		maindomain, "primaryAuthorization", 
		redirect401, isactiv, homepage, reports_url, 
        login_url, ischat
	  ) VALUES (
	    injson->>'dsn', (injson->>'port')::int, (injson->>'developerRole'),
		injson->>'maindomain', (injson->>'primaryAuthorization')::smallint,
		injson->>'redirect401', true, injson->>'homepage', injson->>'reports_url',
        injson->>'login_url', COALESCE((injson->>'ischat')::boolean, FALSE)
	  ); 
    END IF;

END;
$$;


ALTER FUNCTION framework.fn_mainsettings_save(injson json) OWNER TO postgres;

--
-- TOC entry 3379 (class 0 OID 0)
-- Dependencies: 584
-- Name: FUNCTION fn_mainsettings_save(injson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_mainsettings_save(injson json) IS 'Save main settings from file';


--
-- TOC entry 364 (class 1255 OID 227307)
-- Name: fn_mainsettings_usercss(text); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_mainsettings_usercss(_css text) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN

	UPDATE framework.mainsettings
    SET usercss = _css;

END;
$$;


ALTER FUNCTION framework.fn_mainsettings_usercss(_css text) OWNER TO postgres;

--
-- TOC entry 3380 (class 0 OID 0)
-- Dependencies: 364
-- Name: FUNCTION fn_mainsettings_usercss(_css text); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_mainsettings_usercss(_css text) IS 'UPDATE USERCSS FROM FILE ON THE SERVER';


--
-- TOC entry 413 (class 1255 OID 227308)
-- Name: fn_menu_recurs(integer, json, integer, integer); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_menu_recurs(_userid integer, _roles json, _parentid integer, menu_id integer, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
BEGIN
   SELECT
   		array_to_json(array_agg(row_to_json(d))) 
   FROM (
      SELECT 
        m.*, (
		  SELECT 
		     count(n.id)
		  FROM framework.notifications as n
		  WHERE n.for_userid = _userid AND not n.isread	AND
		        COALESCE(n.messagetype,'messagetype') = COALESCE(m.ws,'ws')	 
		) as notif_count,
        m.title as label,
        m.path as to,
        framework.fn_menu_recurs(_userid, _roles,m.id,menu_id) as items, (
        	SELECT count(m2.id) 
            FROM framework.mainmenu as m2 
            WHERE m2.parentid = m.id
        ) as childs
      FROM framework.mainmenu as m
      	--JOIN framework.menus as mn on mn.id = m.menuid --and not mn.ismainmenu 
      WHERE ((
          SELECT count(*)
          FROM json_array_elements_text(_roles) as r
          WHERE r.value::varchar = '0'
        ) > 0 OR (
          SELECT count(*)
          FROM json_array_elements_text(m.roles) as r
            JOIN json_array_elements_text(_roles) as r2 on r2.value::varchar = r.value ::varchar 
        ) > 0 OR (
          SELECT count(*)
          FROM json_array_elements_text(m.roles) as r
            JOIN json_array_elements_text(_roles) as r2 on r2.value::varchar = r.value ::varchar 
        ) > 0 OR m.roles::varchar='[]' OR m.roles is NULL 
    ) AND coalesce(m.parentid,0) = coalesce(_parentid,0) and m.menuid = menu_id and
    m.nosession = (
    	CASE WHEN (SELECT count(*) FROM json_array_elements_text(_roles)) = 0 OR _roles is null
    	THEN m.nosession 
        ELSE FALSE
        END
    )
    ORDER BY m.orderby
  ) as d
  INTO outjson;
END;
$$;


ALTER FUNCTION framework.fn_menu_recurs(_userid integer, _roles json, _parentid integer, menu_id integer, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3381 (class 0 OID 0)
-- Dependencies: 413
-- Name: FUNCTION fn_menu_recurs(_userid integer, _roles json, _parentid integer, menu_id integer, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_menu_recurs(_userid integer, _roles json, _parentid integer, menu_id integer, OUT outjson json) IS 'GET MENU ITEMS 
RECURS BY PARENTID';


--
-- TOC entry 414 (class 1255 OID 227309)
-- Name: fn_menu_recurs(integer, json, integer, integer, character); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_menu_recurs(_userid integer, _roles json, _parentid integer, menu_id integer, _sessid character, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
BEGIN
   SELECT
   		array_to_json(array_agg(row_to_json(d))) 
   FROM (
      SELECT 
        m.*, (
          SELECT 
             count(n.id)
          FROM framework.notifications as n
          WHERE (n.for_userid = _userid OR n.sessid = _sessid) AND not n.isread    AND
                COALESCE(n.messagetype,'messagetype') = COALESCE(m.ws,'ws')     
        ) as notif_count,
        m.title as label,
        m.path as to,
        framework.fn_menu_recurs(_userid, _roles,m.id,menu_id, _sessid) as items, (
            SELECT count(m2.id) 
            FROM framework.mainmenu as m2 
            WHERE m2.parentid = m.id
        ) as childs
      FROM framework.mainmenu as m
          --JOIN framework.menus as mn on mn.id = m.menuid --and not mn.ismainmenu 
      WHERE ((
          SELECT count(*)
          FROM json_array_elements_text(_roles) as r
          WHERE r.value::varchar = '0'
        ) > 0 OR (
          SELECT count(*)
          FROM json_array_elements_text(m.roles) as r
            JOIN json_array_elements_text(_roles) as r2 on r2.value::varchar = r.value ::varchar 
        ) > 0 OR (
          SELECT count(*)
          FROM json_array_elements_text(m.roles) as r
            JOIN json_array_elements_text(_roles) as r2 on r2.value::varchar = r.value ::varchar 
        ) > 0 OR m.roles::varchar='[]' OR m.roles is NULL 
    ) AND coalesce(m.parentid,0) = coalesce(_parentid,0) and m.menuid = menu_id and
    m.nosession = (
        CASE WHEN (SELECT count(*) FROM json_array_elements_text(_roles)) = 0 OR _roles is null
        THEN m.nosession 
        ELSE FALSE
        END
    )
    ORDER BY m.orderby
  ) as d
  INTO outjson;
END;
$$;


ALTER FUNCTION framework.fn_menu_recurs(_userid integer, _roles json, _parentid integer, menu_id integer, _sessid character, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 583 (class 1255 OID 227310)
-- Name: fn_menus(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_menus(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
  _roles json;
  _usermenu json;
  _userdetail json;
BEGIN
    _userid = injson->>'userid';    
    SELECT
        u.roles
    FROM framework.users as u
    WHERE u.id = _userid
    INTO _roles;

    IF _userid is null THEN
        SELECT 
            '[{"label": "Notifications", "icon": "pi pi-fw pi-inbox", "to":"/list/notifs"},
              {"label": "login", "icon": "pi pi-fw pi-power-off", "to": "/logout"}]' as usermenu
        INTO _usermenu;        
        
        SELECT 
            row_to_json(d)
        FROM (
          SELECT 
              '' as login, 'unknown' as fam, '' as im,
              '' as ot, 0 as orgid, '' as orgname,
              '' as photo, '{}' as usersettings
        ) as d
         INTO _userdetail;   
    ELSE
        SELECT 
            '[
				{"label": "Account", "icon": "pi pi-fw pi-user", "to": "/getone/account?id=_userid_"},
				{"label": "Notifications", "icon": "pi pi-fw pi-inbox", "to":"/list/notifs?userid=_userid_"},
				{"label": "My organization", "icon": "pi pi-fw pi-inbox", "to":"/getone/myorg?id=_orgid_"},
				{"label": "logout", "icon": "pi pi-fw pi-power-off", "to": "/logout"}
			 ]' as usermenu
        INTO _usermenu;  
        
        SELECT row_to_json(d)
        FROM (
            SELECT 
              u.login, u.fam, u.im, u.ot,
              u.orgs, u.orgid, o.orgname,
              (u.photo->0)::json->>'src' as photo,
              u.usersettings
            FROM framework.users as u
              LEFT JOIN framework.orgs as o on u.orgid = o.id 
            WHERE u.id = _userid
		) as d
        INTO _userdetail;
     
    END IF;    
    

    --outjson = framework.fn_menu_recurs(_roles, 0);
    SELECT
        row_to_json(d)
    FROM (
	  SELECT 
        --outjson as mainmenu,
        _userdetail as userdetail, (
		    SELECT homepage 
			FROM framework.mainsettings 
			WHERE isactiv 
		) as homepage,   (
		    SELECT ischat 
			FROM framework.mainsettings 
			WHERE isactiv 
		) as ischat, (
		    SELECT
                array_to_json(array_agg(row_to_json(t)))
             FROM (
			     SELECT 
                    ms.menutype as id,
                    mt.mtypename as menutype,
                    coalesce(framework.fn_menu_recurs(_userid,_roles, 0,ms.id),'[]') as menu
                 FROM framework.menus as ms 
                      JOIN framework.menutypes as mt on mt.id = ms.menutype
             ) as t
		) as menus,
        coalesce(_usermenu,'[]') as usermenu
	) as d
    INTO outjson;    
    
    --outjson = coalesce(outjson,'[]');
END;
$$;


ALTER FUNCTION framework.fn_menus(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3382 (class 0 OID 0)
-- Dependencies: 583
-- Name: FUNCTION fn_menus(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_menus(injson json, OUT outjson json) IS 'GET ALL MENUS';


--
-- TOC entry 415 (class 1255 OID 227311)
-- Name: fn_notif_setsended(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_notif_setsended(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
	_id int; 
BEGIN
	_id = injson->>'id';
    
    UPDATE framework.viewsnotification
    SET sended = now(),
    	issend = true
    WHERE id = _id;
END;
$$;


ALTER FUNCTION framework.fn_notif_setsended(injson json) OWNER TO postgres;

--
-- TOC entry 3383 (class 0 OID 0)
-- Dependencies: 415
-- Name: FUNCTION fn_notif_setsended(injson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_notif_setsended(injson json) IS 'views notifications not sended';


--
-- TOC entry 416 (class 1255 OID 227312)
-- Name: fn_notifications_bysess(character); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_notifications_bysess(_sess character, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
    _userid int;
BEGIN

    SELECT
	    s.userid
	FROM framework.sess as s
	WHERE s.id = _sess
	INTO _userid;
	
	SELECT
	     array_to_json(array_agg(row_to_json(d)))
	FROM (
	  SELECT 
		   n.id, n.message, n.messagetype
	  FROM framework.notifications as n
	  WHERE (n.for_userid = coalesce(_userid,0) or n.sessid = coalesce(_sess,'')) and 
	        not n.isread and (
			   SELECT count(*)
			   FROM json_array_elements_text(n.sended_sessions)
			   WHERE value::varchar = _sess
			) = 0
    ) as d
    INTO outjson;
    
      /*UPDATE framework.notifications as n
      SET sended_sessions = n.sended_sessions::jsonb||concat('["',_sess,'"]')::jsonb
      WHERE n.for_userid = _userid and not n.isread and (
               SELECT count(*)
               FROM json_array_elements_text(n.sended_sessions)
               WHERE value::varchar = _sess
            ) = 0;*/
    
    outjson = coalesce(outjson,'[]');

END;
$$;


ALTER FUNCTION framework.fn_notifications_bysess(_sess character, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3384 (class 0 OID 0)
-- Dependencies: 416
-- Name: FUNCTION fn_notifications_bysess(_sess character, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_notifications_bysess(_sess character, OUT outjson json) IS 'global notifications';


--
-- TOC entry 417 (class 1255 OID 227313)
-- Name: fn_notifications_setreaded_by_userid(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_notifications_setreaded_by_userid(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
BEGIN

  _userid = injson->>'userid';
  
  IF _userid is null
  THEN
     PERFORM raiserror('userid is null');
  END IF;
  
  UPDATE framework.notifications
  SET isread = true
  WHERE messagetype = 'notifs' and for_userid = _userid;

END;
$$;


ALTER FUNCTION framework.fn_notifications_setreaded_by_userid(injson json) OWNER TO postgres;

--
-- TOC entry 3385 (class 0 OID 0)
-- Dependencies: 417
-- Name: FUNCTION fn_notifications_setreaded_by_userid(injson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_notifications_setreaded_by_userid(injson json) IS 'set notifs type notifications readed';


--
-- TOC entry 418 (class 1255 OID 227314)
-- Name: fn_notifications_setsended(character); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_notifications_setsended(_sess character) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
    _userid int;
BEGIN

    SELECT
	    s.userid
	FROM framework.sess as s
	WHERE s.id = _sess
	INTO _userid;
	
	UPDATE framework.notifications as n
	SET sended_sessions = n.sended_sessions::jsonb||concat('["',_sess,'"]')::jsonb
	WHERE n.for_userid = _userid and not n.isread and (
			   SELECT count(*)
			   FROM json_array_elements_text(n.sended_sessions)
			   WHERE value::varchar = _sess
			) = 0;
	

END;
$$;


ALTER FUNCTION framework.fn_notifications_setsended(_sess character) OWNER TO postgres;

--
-- TOC entry 3386 (class 0 OID 0)
-- Dependencies: 418
-- Name: FUNCTION fn_notifications_setsended(_sess character); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_notifications_setsended(_sess character) IS 'set sended for sessionid ';


--
-- TOC entry 419 (class 1255 OID 227315)
-- Name: fn_paramtypes(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_paramtypes(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
BEGIN

	SELECT 
    	array_to_json(array_agg(row_to_json(d)))
    FROM (
	  SELECT
		  a.val as label,
		  a.val as value
	  FROM framework.paramtypes as a
	) as d
    INTO outjson;
    
    outjson = coalesce(outjson,'[]');
    

END;
$$;


ALTER FUNCTION framework.fn_paramtypes(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 420 (class 1255 OID 227316)
-- Name: fn_refreshconfig(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_refreshconfig(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  _oldconfig JSON;
  _newconfig JSON;
  _tabname varchar(350);
  ov json;
  nw json;
  isnotin boolean;
  isin boolean;
  i int;
BEGIN
    -- NOT USED
	--_oldconfig = injson->>'config';
	_tabname = injson->>'tabname';
    
    SELECT * FROM framework.fn_createconfig(injson) INTO _oldconfig;

    
   /*-- perform raiserror(_newconfig::varchar);
    SELECT * FROM framework.fn_createconfig(injson) INTO _newconfig;

    FOR nw in (SELECT * FROM json_array_elements_text(_newconfig))
    LOOP 
    	isnotin = true;
        FOR ov in (SELECT * FROM json_array_elements_text(_oldconfig))
        LOOP
			IF (ov->>'col')::varchar = (nw->>'col')::varchar 
            	and 
            	ov->>'related' is null and ov->>'tpath' is null and isnotin
                 THEN
				isnotin = false;   
            END IF;
        END LOOP;
        

        
        IF isnotin  THEN
        	SELECT _oldconfig::jsonb || nw::jsonb
            INTO _oldconfig;
		END IF;
    END LOOP;
    i = 0;
    FOR ov in (SELECT * FROM json_array_elements_text(_oldconfig))
    LOOP
    	
    	isin = true;
        FOR nw in (SELECT * FROM json_array_elements_text(_newconfig))
        LOOP
			IF (nw->>'col')::varchar = (ov->>'col')::varchar  THEN
				isin = false;
            END IF;

        END LOOP;
        IF isin and ov->>'related' is null THEN
        	SELECT _oldconfig::jsonb - i
            INTO _oldconfig;
		END IF;
        i = i+1;
    END LOOP;*/
	
    outjson = _oldconfig;
    
    

END;
$$;


ALTER FUNCTION framework.fn_refreshconfig(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 421 (class 1255 OID 227317)
-- Name: fn_roles_fetch(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_roles_fetch(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
-- функция возвращает список ролей
-- если отправитель не дев, то убираем дев из списка
-- если отправитель не сисадмин, то убираем сисадмина из списка
-- автор: Сандан Д.Б.
-- дата создания: 30.12.19
DECLARE
	_userid int;
    _roles JSON;		-- для временного хранения ролей отправителя
    _isdev int;			-- флаг для проверки на наличие роли девелопер
    _issysadmin int;	-- флаг для проверки на наличие роли сисадмин
BEGIN

	_isdev = 0;
	_userid = injson->>'userid';
    
    -- проверяем роль отправившего запрос
	-- если девелопер то убираем dev
    -- если сисадмин то убираем сисадмина

	-- получаем роли отправителя
	SELECT    	
    	u.roles 
	FROM
    	framework.users AS u
	WHERE u.id = _userid
	INTO _roles;

	-- проверяем есть ли у него роль девелопера
    SELECT
    	1
    FROM
    	json_array_elements_text(_roles) as q
    WHERE q.value = '0'
    INTO _isdev;
    
	-- проверяем есть ли у него роль сисадмина
    SELECT
    	1
    FROM
    	json_array_elements_text(_roles) as q
    WHERE q.value = '1'
    INTO _issysadmin;

	-- формируем массив ролей без дева
	SELECT
    	array_to_json(array_agg(row_to_json(pz)))
        FROM (
			SELECT 
            	ro.id AS "value",
  				ro.rolename AS "label"
			FROM framework.roles AS ro
            WHERE ro.id <> 0 			-- 0 это ID у девелопера
            ) AS pz
	INTO outjson;
    
    
    -- удаляем элементы массива с сисадмином если отправитель не сисадмин
	IF _issysadmin IS NULL THEN
	-- формируем массив ролей для возврата    
        SELECT
            array_to_json(array_agg(row_to_json(pz)))
            FROM (
                SELECT
                    (o->>'value')::int AS "value",
                    o->>'label' AS "label"
                FROM json_array_elements(outjson) AS o
                WHERE o->>'value' <> '1'		-- 1 это ID Администратора С-мы
                ) AS pz
        INTO outjson;
    END IF;

    outjson = COALESCE(outjson, '[]');
END;
$$;


ALTER FUNCTION framework.fn_roles_fetch(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3387 (class 0 OID 0)
-- Dependencies: 421
-- Name: FUNCTION fn_roles_fetch(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_roles_fetch(injson json, OUT outjson json) IS 'roles list';


--
-- TOC entry 422 (class 1255 OID 227318)
-- Name: fn_savestate(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_savestate(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $_$
DECLARE
_squery varchar;
_tablename varchar(300);
_col varchar(350);
_value varchar;
_id varchar(300);
_userid int;
_relatecolumn varchar(150);
_relatetable varchar(350);
--_squery varchar;
_err varchar;
_oldata json;
_newdata json;
_id_int int;
_id_seq varchar(200);
_col_type varchar(300);
rel_id varchar(36);
_id_type varchar(150);
rel_id_type varchar(150);
_viewid int;
_userroles json;
_viewroles json;
_type varchar(150);
_relation varchar;
_relationobj json;
_relationval varchar;
_key varchar(150);
_x varchar;
_rv varchar;
_config json;
_pv json;
_data json;
_insertvalues varchar;
_rt_query varchar;
_tpath json;
_tp json;
_tpast VARCHAR(150);
BEGIN
  _id = injson->>'id';
  _userid = injson->>'userid';
  _viewid = injson->>'viewid';
  _data = injson->>'data';
  _relation = injson->>'relation';
  _relationobj = injson->>'relationobj';
  
  SELECT
  	v.tablename,
    --v.config,
    v.roles
  FROM framework.views as v
  WHERE v.id = _viewid
  INTO _tablename, _viewroles;
  
  _config = framework.fn_config_to_json(_viewid);
  
  IF _viewid is NULL
  THEN
     PERFORM raiserror('view id is null');
  END IF; 

  SELECT 
  	roles
  FROM framework.users 
  WHERE id = _userid
  INTO _userroles;
  
  --PERFORM raiserror(_relationval::varchar);
    
  IF _viewroles is null THEN
      PERFORM raiserror('view is not found');
  END IF;
  
  IF (SELECT count(*) FROM json_array_elements_text(_viewroles)) > 0 and 
    (SELECT count(*) 
     FROM json_array_elements_text(_viewroles) as v
     	JOIN json_array_elements_text(_userroles) as r on 
        ((v.value::json->>'value')::varchar = r.value::varchar
        	OR
          v.value::varchar = r.value::varchar
        )
     ) = 0 THEN
    	PERFORM raiserror('m403err');
  END IF;
  
  SELECT 
        t.data_type, t.column_default
  FROM information_schema.columns as t                                         
  WHERE concat(t.table_schema,'.',t.table_name) = _tablename and 
      upper(t.column_name) = 'ID'
  INTO _id_type, _id_seq;
  
  IF _relation is not null  THEN
  	FOR _x in (SELECT regexp_split_to_table FROM regexp_split_to_table(_relation,','))
    LOOP
    	IF _relationobj->>_x is not null THEN
        	_rv = _relationobj->>_x;
            IF _rv = '_userid_' and 
               _tablename not in (
                    'framework.defaultval',
                    'framework.actions',
                    'framework.act_parametrs',
                    'framework.select_condition'
               )  
            THEN
               	_rv = _userid;
            END IF;
            IF _rv = '_orgs_' and 
               _tablename  not in (
                    'framework.defaultval',
                    'framework.actions',
                    'framework.act_parametrs',
                    'framework.select_condition'
               )   
            THEN
               	SELECT
                   	u.orgs::varchar 
                FROM framework.users as u
                WHERE u.id = _userid::int
                INTO _rv;
            END IF;
        	IF _rv = '_orgid_' and 
               _tablename not in (
                    'framework.defaultval',
                    'framework.actions',
                    'framework.act_parametrs',
                    'framework.select_condition'
               )  
            THEN
              SELECT
                  u.orgid::varchar 
              FROM framework.users as u
              WHERE u.id = _userid::int
              INTO _rv;
      		END IF;            
      		_relationval = concat(_relationval,',''',_rv,'''');
            
      END IF;
  	END LOOP;
    SELECT
    	string_agg(concat('"',regexp_split_to_table,'"'),',')
    FROM regexp_split_to_table(_relation,',')
    INTO _relation;    
  	_relation = concat(',',_relation);  
  ELSE
  	_relation = '';
    _relationval = '';
  END IF;
  
  IF _id is NULL THEN
      IF _id_type in ( 'character','varchar','char') 
      THEN
      	_id = upper(uuid_in(md5(random()::text || now()::text)::cstring)::CHAR(36));
      ELSE
      	EXECUTE format(concat('SELECT ',_id_seq,';')) INTO _id_int ;
      	_id = _id_int::varchar;
      END IF;
      _squery = concat('INSERT INTO ', _tablename, '(id',_relation);
      _insertvalues = concat('VALUES ($1::',_id_type,_relationval);
      
      IF 
      	(SELECT count(t.*)
         FROM information_schema.columns as t
         WHERE concat(t.table_schema,'.',t.table_name) = _tablename and 
             t.column_name = 'userid')>0 
      THEN
          _squery = concat(_squery,',userid');
          _insertvalues = concat(_insertvalues,',$2'); 
      END IF;
  ELSE
      _squery = concat('UPDATE ', _tablename, ' SET ');
      IF 
      	(SELECT count(t.*)
         FROM information_schema.columns as t
         WHERE concat(t.table_schema,'.',t.table_name) = _tablename and 
             t.column_name = 'userid')>0 
      THEN
          _squery = concat(_squery,'userid = $2, ');
      END IF;
  END IF;
  
  FOR _pv in (SELECT value FROM json_array_elements(_config))
  LOOP
  	_value = _data->>(_pv->>'key');
    
    IF _value = '_userid_' and 
       _tablename not in (
       		'framework.defaultval',
            'framework.actions',
            'framework.act_parametrs',
            'framework.select_condition'
       ) 
    THEN
    	_value = _userid;
    END IF;
    
    IF _value = '_orgs_' and 
       _tablename not in (
       		'framework.defaultval',
            'framework.actions',
            'framework.act_parametrs',
            'framework.select_condition'
       )  
    THEN
    	SELECT
        	u.orgs::varchar 
        FROM framework.users as u
    	WHERE u.id = _userid::int
        INTO _value;
    END IF;
    
    IF _value = '_orgid_' and 
       _tablename not in (
       		'framework.defaultval',
            'framework.actions',
            'framework.act_parametrs',
            'framework.select_condition'
       )  
    THEN
    	SELECT
        	u.orgid::varchar 
        FROM framework.users as u
    	WHERE u.id = _userid::int
        INTO _value;
    END IF;
    
	_relatetable = _pv->>'table';
    _col = _pv->>'col';
    _type = _pv->>'type';
    _key = _pv->>'key';
    
    IF (_pv->>'visible')::boolean and (_pv->>'type') not in ('label','color','link','filelist','gallery') THEN
      IF _relatetable is not null and _id is null
      THEN
        PERFORM raiserror('id can`t be null if relation');
      END IF;
      
      
      
      
      
      IF _type = 'password' THEN
         drop extension pgcrypto;
         create extension pgcrypto;
         SELECT encode(digest(_value, 'sha224'),'hex') INTO _value;
      END IF;
      IF _type <> 'array' THEN
        IF _pv->>'table' is null THEN
          SELECT t.data_type
          FROM information_schema.columns as t
          WHERE concat(t.table_schema,'.',t.table_name) = _tablename and 
                t.column_name = _col
          INTO _col_type; 	
           
          IF _col_type = 'character' THEN
            _col_type = 'varchar'; 
          END IF;
         
          IF _col_type is null THEN
             perform raiserror('can not find out the column type. check table and column names');
          END IF;
        
          IF _id_type = 'character' THEN
            _id_type = 'varchar'; 
          END IF;
          
          _data = (_data::jsonb-(_pv->>'key'))::json;
          _data = (jsonb_build_object((_pv->>'key'), _value) 
              || _data::jsonb)::json;
          
          IF (injson->>'id') is null THEN
            IF _value is not null  THEN
              _squery = concat(_squery,',"',_col,'"');
              _insertvalues = concat(_insertvalues,',($3->>''',_key,''')::',_col_type);
            END IF;
          ELSE
            IF _pv->>'table' is null THEN
                _squery = concat(_squery,'"',_col,'" = ($3->>''',_key,''')::',_col_type,', ');
            END IF;
          END IF;
        ELSE
           SELECT t.data_type
           FROM information_schema.columns as t
           WHERE concat(t.table_schema,'.',t.table_name) = (_pv->>'table') and 
                 t.column_name = _col
           INTO _col_type; 	
             
           IF _col_type = 'character' THEN
              _col_type = 'varchar'; 
           END IF;
           
           IF _col_type is null THEN
               perform raiserror('can not find out the column type. check table and column names');
           END IF;
          _rt_query = concat('UPDATE ',_pv->>'table',' SET "',_col,'" = ($2->>''',_key,''')::',_col_type,' FROM ',_tablename,' as t');
          _tpath = _pv->>'tpath';
          _tp = _tpath->0;
          _tpast = 't';
          FOR _tp in (SELECT value FROM json_array_elements(_tpath))
          LOOP
              _rt_query = concat(_rt_query,' JOIN ', _tp->>'table',' as ',_tp->>'t',' on ',_tpast,'."',_tp->>'col','" = ',_tp->>'t','.id');
          END LOOP;
          
          _rt_query = concat(_rt_query,' WHERE t.id = $1::',_id_type);   
          
          EXECUTE format(_rt_query) USING _id,_data;
        END IF;
      END IF; 
	END IF;
  END LOOP;
  
  IF injson->>'id' is null THEN
  	_squery = concat(_squery,') ',_insertvalues,'); ');
    EXECUTE format(_squery) USING _id,_userid,_data;
        
    _squery = concat('
      SElECT
        row_to_json(d)
      FROM (
        SELECT *
        FROM ',_tablename,'
        WHERE id = $1::',_id_type,'
      ) as d
    ');
    
    EXECUTE format(_squery) USING _id INTO _newdata;
    
	INSERT INTO framework.logtable (
      	tablename, tableid, opertype,
        userid, oldata, newdata
    ) VALUES (
      	_tablename, _id, 1,
        _userid::int, '{}'::json, _newdata
    );    
  ELSE
  
    EXECUTE format(concat('
      SElECT
        row_to_json(d)
      FROM (
        SELECT *
        FROM ',_tablename,'
        WHERE id = $1::',_id_type,'
      ) as d
    ')) USING _id INTO _oldata;
    
  	_squery = concat(substring(_squery,1,length(_squery) - 2),' WHERE id = $1::',_id_type);
    EXECUTE format(_squery) USING _id,_userid,_data;
    
    EXECUTE format(concat('
      SElECT
        row_to_json(d)
      FROM (
        SELECT *
        FROM ',_tablename,'
        WHERE id = $1::',_id_type,'
      ) as d
    ')) USING _id INTO _newdata;
    
	INSERT INTO framework.logtable (
    	tablename, tableid, opertype,
        userid, oldata, newdata
    ) VALUES (
    	_tablename, _id, 2,
        _userid::int, _oldata, _newdata
    );
  END IF;
  
  SElECT
    row_to_json(d)
  FROM (
      SELECT _id as id
    ) as d
  INTO outjson;
  /*SElECT
  	row_to_json(d)
  FROM (
  	SELECT _id as id,
    	_value as value
  ) as d
  INTO outjson;
  
  outjson = coalesce(outjson,'{}');*/
  
END;
$_$;


ALTER FUNCTION framework.fn_savestate(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3388 (class 0 OID 0)
-- Dependencies: 422
-- Name: FUNCTION fn_savestate(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_savestate(injson json, OUT outjson json) IS 'save all form state';


--
-- TOC entry 423 (class 1255 OID 227320)
-- Name: fn_saveusersettings(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_saveusersettings(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE 
	_userid int;
    _settings json;
    _osettings json;
BEGIN
	_userid = injson->>'userid';
    _settings = injson->'settings';
    
   UPDATE framework.users
   SET usersettings = _settings
   WHERE id = _userid;
   
END;
$$;


ALTER FUNCTION framework.fn_saveusersettings(injson json) OWNER TO postgres;

--
-- TOC entry 424 (class 1255 OID 227321)
-- Name: fn_savevalue(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_savevalue(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $_$
DECLARE
_tablename varchar(300);
_col varchar(350);
_value varchar;
_id varchar(300);
_userid varchar(150);
_relatecolumn varchar(150);
_relatetable varchar(350);
_squery varchar;
_err varchar;
_oldata json;
_newdata json;
_id_int int;
_col_type varchar(300);
rel_id varchar(36);
_id_type varchar(150);
rel_id_type varchar(150);
_viewid int;
_userroles json;
_viewroles json;
_type varchar(150);
_relation varchar;
_relationobj json;
_relationval varchar;
_x varchar;
_rv varchar;
BEGIN
  -- SAVE ONE COLUMN VALUE FOR TYPE form full
  
 -- _tablename = injson->>'tablename';
  _col = (injson->>'config')::json->>'col';
  _value = injson->>'value';
  _id = injson->>'id';
  _userid = injson->>'userid';
  _relatecolumn = (injson->>'config')::json->>'relatecolumn';
  _relatetable = injson->>'relatetable';
  _viewid = injson->>'viewid';
  _type = (injson->>'config')::json->>'type';
  _relation = injson->>'relation';
  _relationobj = injson->>'relationobj';
  

    
    IF _viewid is NULL
    THEN
      perform raiserror('view id is null');
    END IF; 
    
    SELECT 
    	roles,
        tablename
    FROM framework.views 
    WHERE id = _viewid
    INTO _viewroles, _tablename;
    
   IF _tablename <> 'framework.defaultval'
   THEN
    IF _value = '_userid_' and
       _tablename in (
       		'framework.defaultval',
            'framework.actions',
            'framework.act_parametrs',
            'framework.select_condition'
       )  
    THEN
    	_value = _userid;
    END IF;
    IF _value = '_orgs_' and 
       _tablename in (
       		'framework.defaultval',
            'framework.actions',
            'framework.act_parametrs',
            'framework.select_condition'
       ) 
    THEN
    	SELECT
        	u.orgs::varchar 
        FROM framework.users as u
    	WHERE u.id = _userid::int
        INTO _value;
    END IF;
    IF _value = '_orgid_' and 
       _tablename in (
       		'framework.defaultval',
            'framework.actions',
            'framework.act_parametrs',
            'framework.select_condition'
       ) 
    THEN
    	SELECT
        	u.orgid::varchar 
        FROM framework.users as u
    	WHERE u.id = _userid::int
        INTO _value;
    END IF;
   END IF;
    SELECT 
    	roles
    FROM framework.users 
    WHERE id::varchar = _userid
    INTO _userroles;
    
    IF _viewroles is null THEN
    	perform raiserror('view is not found');
    END IF;
    
    IF (SELECT count(*) FROM json_array_elements_text(_viewroles)) > 0 and 
    (SELECT count(*) 
     FROM json_array_elements_text(_viewroles) as v
     	JOIN json_array_elements_text(_userroles) as r on  (
        		(v.value::json->>'value')::varchar = r.value::varchar
                OR
                v.value::varchar = r.value::varchar
            )
     ) = 0 THEN
    	PERFORM raiserror('m403err');
    END IF;
    
    IF _tablename is NULL
    THEN
      perform raiserror('table is null');
    END IF; 
    
    IF _col is NULL
    THEN
      perform raiserror('col is null');
    END IF;
      
    IF _relatetable is not null and _id is null
    THEN
      perform raiserror('id can`t be null if relation');
    END IF;
   
   SELECT t.data_type
   FROM information_schema.columns as t
   WHERE concat(t.table_schema,'.',t.table_name) = _tablename and 
   		 t.column_name = _col
   INTO _col_type; 	
   
   IF _col_type = 'character' THEN
  	_col_type = 'varchar'; 
   END IF;
   
   IF _col_type is null THEN
   	 perform raiserror('can not find out the column type. check table and column names');
   END IF;
  
  SELECT 
     t.data_type
  FROM information_schema.columns as t                                         
  WHERE concat(t.table_schema,'.',t.table_name) = _tablename and 
  upper(t.column_name) = 'ID'
  INTO _id_type;
  
  IF _id_type = 'character' THEN
  	_id_type = 'varchar'; 
  END IF;
  
  IF _type = 'password' THEN
     drop extension pgcrypto;
     create extension pgcrypto;
     SELECT encode(digest(_value, 'sha224'),'hex') INTO _value;
  END IF;
  
  IF _relatetable is not null
  THEN    
  	
  	 IF _relatecolumn is null THEN
     	perform raiserror('can''t find relate column');
     END IF;	
      
     SELECT 
         t.data_type
     FROM information_schema.columns as t                                         
     WHERE concat(t.table_schema,'.',t.table_name) = _relatetable and 
     upper(t.column_name) = 'ID'
     INTO rel_id_type;
     
     IF rel_id_type = 'character' THEN
     	rel_id_type = 'varchar'; 
     END IF;
     
     IF rel_id_type is null THEN
       perform raiserror('can not find out the relation ID type. check table and column names');
     END IF;
     
      _squery = concat(_squery,'
          SELECT 
               ',_relatecolumn,'::',_id_type,'
          FROM ',_relatetable,'
          WHERE id::',rel_id_type,' = $1::',rel_id_type,';
      ');
      
      EXECUTE format(_squery) USING _id INTO rel_id;
      
      IF trim(coalesce(rel_id,'')) = ''
      THEN
          perform raiserror('id of relation table can not be NULL');
      END IF;
      BEGIN
        _squery = concat('
            SELECT row_to_json(d) FROM	
            (SELECT 
              "',_col,'"
            FROM ',_tablename,'
            WHERE id = $1::',_id_type,' ) as d;');
            
        EXECUTE format(_squery) USING rel_id INTO _oldata;
        
      END;
      _squery = concat('SELECT row_to_json(d) FROM 
          (SELECT $1 as ',_col,') as d;');
      
      EXECUTE format(_squery) USING _value INTO _newdata; 
     
      INSERT INTO framework.logtable (
         tablename, tableid, opertype,
         userid, oldata, newdata, colname
      ) VALUES (
         _tablename, rel_id, 2,
         _userid::int, _oldata, _newdata, _col      
      ); 
     IF (SELECT count(t.*)
      FROM information_schema.columns as t
      WHERE concat(t.table_schema,'.',t.table_name) = _tablename and 
           t.column_name = 'userid')>0 THEN
     _squery = concat('          
          UPDATE ', _tablename, ' 
          SET "',_col,'" = $2::',_col_type,' , userid = $3 
          WHERE id::',_id_type,' = $1::',_id_type,'; 
      ');	
      EXECUTE format(_squery) USING rel_id,_value, _userid::int;
      ELSE
	  	  _squery = concat('          
          UPDATE ', _tablename, ' 
          SET "',_col,'" = $2::',_col_type,'
          WHERE id::',_id_type,' = $1::',_id_type,'; 
      ');
      EXECUTE format(_squery) USING rel_id,_value;
     END IF; 
  ELSE  

    IF _id is NULL
    THEN
      IF _value is null 
      THEN
        perform raiserror('value is null');
      END IF;
      IF _relation is not null THEN
         FOR _x in (SELECT regexp_split_to_table FROM regexp_split_to_table(_relation,','))
         LOOP
            IF _relationobj->>_x is not null THEN
  				_rv = _relationobj->>_x;
                IF _rv = '_userid_' and 
                   _tablename not in (
                    'framework.defaultval',
                    'framework.actions',
                    'framework.act_parametrs',
                    'framework.select_condition'
                   )  
                THEN
                    _rv = _userid;
                END IF;
                IF _rv = '_orgs_' and 
                   _tablename not in (
                      'framework.defaultval',
                      'framework.actions',
                      'framework.act_parametrs',
                      'framework.select_condition'
                   )  
                THEN
                    SELECT
                        u.orgs::varchar 
                    FROM framework.users as u
                    WHERE u.id = _userid::int
                    INTO _rv;
                END IF;
                IF _rv = '_orgid_' and 
                   _tablename not in (
                      'framework.defaultval',
                      'framework.actions',
                      'framework.act_parametrs',
                      'framework.select_condition'
                   )  
                THEN
                    SELECT
                        u.orgid::varchar 
                    FROM framework.users as u
                    WHERE u.id = _userid::int
                    INTO _rv;
                END IF;
    
                _relationval = concat(_relationval,',''',_rv,'''');
            END IF;
         END LOOP;
         
        SELECT
            string_agg(concat('"',regexp_split_to_table,'"'),',')
        FROM regexp_split_to_table(_relation,',')
        INTO _relation;           
        
        _relation = concat(',',_relation);  
      ELSE
      	_relation = '';
        _relationval = '';
      END IF; 
      
      IF _id_type in ( 'character','varchar','char') 
      THEN
      	   _id = upper(uuid_in(md5(random()::text || now()::text)::cstring)::CHAR(36));
      ELSE
      	   EXECUTE format(concat('SELECT nextval(''',_tablename,'_id_seq''::regclass);')) INTO _id_int ;
           _id = _id_int::varchar;
      END IF;   
     IF 
      (SELECT count(t.*)
       FROM information_schema.columns as t
       WHERE concat(t.table_schema,'.',t.table_name) = _tablename and 
            t.column_name = 'userid') > 0 
     THEN
        _squery = concat(
        	'INSERT INTO ', 
            _tablename, 
            '(id,"',_col,'"',_relation,', userid) 
            VALUES ($1::',
            _id_type,',$2::',
            _col_type,_relationval,
            ',$3); '
        );  
                            
        EXECUTE format(_squery) USING _id,_value, _userid::int;
     ELSE
        _squery = concat(
        	'INSERT INTO ', 
            _tablename, 
            '(id,"',_col,'"',
            _relation,') 
            VALUES ($1::',
            _id_type,',$2::',
            _col_type,_relationval,'); '
        );                     
     	EXECUTE format(_squery) USING _id,_value;
     END IF;   
         
      _squery = concat(
      	'SELECT row_to_json(d) FROM 
        	(SELECT $1 as ',_col,') as d;'
       );
       IF _userid is not null
       THEN       
       EXECUTE format(_squery) USING _value INTO _newdata;
                 
         INSERT INTO framework.logtable (
               tablename, tableid, opertype,
               userid, newdata, colname
         ) VALUES (
               _tablename, _id, '1',
               _userid::int, _newdata, _col
         );    
       END IF;           
           	
  	ELSE
    
    	IF trim(coalesce(_id,'')) = '' THEN
        	perform raiserror('id is null');
        END IF;
        
         _squery = concat(
         	'SELECT row_to_json(d) FROM	
            	 (SELECT 
                  	"',_col,'"
                  FROM ',_tablename,'
                  WHERE id = $1::',_id_type,') as d;'
         );
         EXECUTE format(_squery) USING _id INTO _oldata;  
        IF (SELECT count(t.*)
            FROM information_schema.columns as t
            WHERE concat(t.table_schema,'.',t.table_name) = _tablename and 
               t.column_name = 'userid') > 0 
        THEN
             _squery = concat( 
             	' UPDATE ', _tablename, ' 
                  SET "',_col,'" = $2::',_col_type,' , userid = $3
                  WHERE id = $1::',_id_type,';'
             );
    							
             EXECUTE format(_squery) USING _id,_value, _userid::int; 
        ELSE
             _squery = concat( 
             	' UPDATE ', _tablename, ' 
                  SET "',_col,'" = $2::',_col_type,' 
                  WHERE id = $1::',_id_type,';'
             );
             EXECUTE format(_squery) USING _id,_value; 
        END IF;   
  
        _squery = concat(
        	'SELECT row_to_json(d) FROM 
            	(SELECT $1 as ',_col,') as d;');                
        EXECUTE format(_squery) USING _value INTO _newdata;
        IF _userid is not null
        THEN
          INSERT INTO framework.logtable (
                tablename, tableid, opertype,
                userid, oldata, newdata, colname
          ) VALUES (
                _tablename, _id, 2,
                _userid::int, _oldata, _newdata, _col
          );       
        END IF;    
    END IF;
  END IF; 
    
  SElECT
  	row_to_json(d)
  FROM (
  	SELECT _id as id,
    	_value as value
  ) as d
  INTO outjson;
  
  outjson = coalesce(outjson,'{}');
  
END;
$_$;


ALTER FUNCTION framework.fn_savevalue(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3389 (class 0 OID 0)
-- Dependencies: 424
-- Name: FUNCTION fn_savevalue(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_savevalue(injson json, OUT outjson json) IS 'SAVE ONE COLUMN VALUE FOR TYPE form full';


--
-- TOC entry 425 (class 1255 OID 227323)
-- Name: fn_sess(character varying, character varying); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_sess(_login character varying, pass character varying, OUT sessid character) RETURNS character
    LANGUAGE plpgsql
    AS $$
DECLARE
  user_id int;
  _orgid int;
BEGIN

	SELECT 
    	u.id,
        u.orgs->0
    FROM framework.users as u
    WHERE u.isactive and u.login = _login and u.password = pass
    INTO user_id, _orgid;
    
    IF user_id is null THEN
    	perform raiserror('User not active or not found. Check login password combination');
    END IF;
    
    sessid = uuid_in(md5(random()::text || now()::text)::cstring)::CHAR(36);
    
    INSERT INTO framework.sess
    (
    	id,
        userid
    )
    VALUES 
    (
    	sessid,
        user_id
    );
    
    UPDATE framework.users
    SET orgid = _orgid
    WHERE orgid is null and id = user_id;

END;
$$;


ALTER FUNCTION framework.fn_sess(_login character varying, pass character varying, OUT sessid character) OWNER TO postgres;

--
-- TOC entry 426 (class 1255 OID 227324)
-- Name: fn_sess(character varying, character varying, character); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_sess(_login character varying, pass character varying, INOUT sessid character) RETURNS character
    LANGUAGE plpgsql
    AS $$
DECLARE
  user_id int;
  _orgid int;
BEGIN

	SELECT 
    	u.id,
        u.orgs->0
    FROM framework.users as u
    WHERE u.isactive and u.login = _login and u.password = pass
    INTO user_id, _orgid;
    
    IF user_id is null THEN
        perform raiserror('User not active or not found. Check login password combination');
    END IF;
    IF sessid is null
    THEN
        sessid = uuid_in(md5(random()::text || now()::text)::cstring)::CHAR(36);
    END IF;
    INSERT INTO framework.sess
    (
        id,
        userid
    )
    VALUES 
    (
        sessid,
        user_id
    );
    
    UPDATE framework.users
    SET orgid = _orgid
    WHERE orgid is null and id = user_id;

END;
$$;


ALTER FUNCTION framework.fn_sess(_login character varying, pass character varying, INOUT sessid character) OWNER TO postgres;

--
-- TOC entry 427 (class 1255 OID 227325)
-- Name: fn_tabcolumns(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_tabcolumns(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  _tabname varchar(150);
BEGIN
  _tabname = injson->>'tabname';

  SELECT 
  	array_to_json(array_agg(row_to_json(d)))
  FROM (
	SELECT column_name as label,
	  column_name as value
	FROM information_schema.columns
	WHERE concat(table_schema,'.',table_name) = _tabname
  ) as d
  INTO outjson;
  
  outjson = coalesce(outjson,'[]');
END;
$$;


ALTER FUNCTION framework.fn_tabcolumns(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 428 (class 1255 OID 227326)
-- Name: fn_tabcolumns_for_filters(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_tabcolumns_for_filters(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  _viewid int;
  _tabname varchar(150);
  _substr varchar(540);
BEGIN

	-- for select conditions
  _viewid = (injson->'inputs')->>'id';
  _substr = injson->>'substr';
  
  SELECT
  	v.tablename
  FROM framework.views as v
  WHERE v.id = _viewid
  INTO _tabname;
  	
  _substr = concat('%',upper(coalesce(_substr,'%')),'%');

	
 /* SELECT 
  	array_to_json(array_agg(row_to_json(d)))
  FROM
  (SELECT column_name as label,
    column_name as value
  FROM information_schema.columns
  WHERE concat(table_schema,'.',table_name) = _tabname and 
  	upper(column_name) like _substr) as d
  INTO outjson;*/
  
  SELECT 
  	array_to_json(array_agg(row_to_json(d)))
  FROM (
	  SELECT
		title as label,
		id as value
	  FROM framework.config
	  WHERE viewid = _viewid
  ) as d
  INTO outjson;
  
  
  outjson = coalesce(outjson,'[]');
END;
$$;


ALTER FUNCTION framework.fn_tabcolumns_for_filters(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3390 (class 0 OID 0)
-- Dependencies: 428
-- Name: FUNCTION fn_tabcolumns_for_filters(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_tabcolumns_for_filters(injson json, OUT outjson json) IS 'for select conditions';


--
-- TOC entry 429 (class 1255 OID 227327)
-- Name: fn_tabcolumns_for_filters_arr(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_tabcolumns_for_filters_arr(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  _viewid int;
  _tabname varchar(150);
  _substr varchar(540);
  _cols json;
BEGIN

	-- for select conditions
  _viewid = (injson->'inputs')->>'id';
  _substr = injson->>'substr';
  
  SELECT
  	v.tablename
  FROM framework.views as v
  WHERE v.id = _viewid
  INTO _tabname;
  	
  --
  IF _substr like '[%' THEN
  	_cols = _substr::json;
  END IF;	
  
  _substr = concat('%',upper(coalesce(_substr,'%')),'%');
  
  
  SELECT 
  	array_to_json(array_agg(row_to_json(d)))
  FROM (
    SELECT
      title as label,
      id as value
    FROM framework.config
    WHERE viewid = _viewid and (
    	upper(title) in (
          SELECT
              upper(value::varchar)
          FROM json_array_elements_text(_cols)
    	) OR upper(title) like _substr
    )) as d
  INTO outjson;
  
  outjson = coalesce(outjson,'[]');
END;
$$;


ALTER FUNCTION framework.fn_tabcolumns_for_filters_arr(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3391 (class 0 OID 0)
-- Dependencies: 429
-- Name: FUNCTION fn_tabcolumns_for_filters_arr(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_tabcolumns_for_filters_arr(injson json, OUT outjson json) IS 'for select conditions';


--
-- TOC entry 430 (class 1255 OID 227328)
-- Name: fn_tabcolumns_for_sc(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_tabcolumns_for_sc(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  _tabname varchar(150);
  _substr varchar(540);
BEGIN

	-- for select conditions
  _tabname = (injson->'inputs')->>'table';
  _substr = injson->>'substr';
  	
  _substr = concat('%',upper(coalesce(_substr,'%')),'%');

	
  SELECT 
  	array_to_json(array_agg(row_to_json(d)))
  FROM (
	SELECT column_name as label,
	  column_name as value
	FROM information_schema.columns
	WHERE concat(table_schema,'.',table_name) = _tabname and 
	  upper(column_name) like _substr
  ) as d
  INTO outjson;
  
  outjson = coalesce(outjson,'[]');
END;
$$;


ALTER FUNCTION framework.fn_tabcolumns_for_sc(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3392 (class 0 OID 0)
-- Dependencies: 430
-- Name: FUNCTION fn_tabcolumns_for_sc(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_tabcolumns_for_sc(injson json, OUT outjson json) IS 'for select conditions';


--
-- TOC entry 431 (class 1255 OID 227329)
-- Name: fn_tabcolumns_selforconfig_depselect(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_tabcolumns_selforconfig_depselect(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  _tabname varchar(150);
  _substr varchar(350);
  _config json;
  _key1 varchar(400);
BEGIN
  _config = (injson->'config');
  
  SELECT 
  	cc.value->>'key'
  FROM json_array_elements(_config) as cc 
  WHERE (cc.value->>'title') = 'relation table'
  INTO _key1;

  _tabname = (injson->'data')->>'relation_relation';
  _substr = injson->>'substr';	
  
  _substr = upper(concat('%',coalesce(_substr,'%'),'%'));
  
  SELECT 
  	array_to_json(array_agg(row_to_json(d)))
  FROM (
	SELECT column_name as label,
	  column_name as value
	FROM information_schema.columns
	WHERE concat(table_schema,'.',table_name) = _tabname
	 AND upper(column_name) like _substr
  ) as d
  INTO outjson;
  
  outjson = coalesce(outjson,'[]');
END;
$$;


ALTER FUNCTION framework.fn_tabcolumns_selforconfig_depselect(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 432 (class 1255 OID 227330)
-- Name: fn_tabcolumns_selforconfig_multiselect(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_tabcolumns_selforconfig_multiselect(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  _tabname varchar(150);
  _substr varchar(350);
  _config json;
  _key1 varchar(400);
BEGIN
  _config = (injson->'config');
  
  SELECT 
  	cc.value->>'key'
  FROM json_array_elements(_config) as cc 
  WHERE (cc.value->>'title') = 'multiselecttable'
  INTO _key1;
 -- _key1 = _config->>'key';
  
  _tabname = (injson->'data')->>_key1;
  _substr = injson->>'substr';	
  
  _substr = upper(concat('%',coalesce(_substr,'%'),'%'));
  
  SELECT 
  	array_to_json(array_agg(row_to_json(d)))
  FROM (
	SELECT column_name as label,
	  column_name as value
	FROM information_schema.columns
	WHERE concat(table_schema,'.',table_name) = _tabname
	 AND upper(column_name) like _substr
  ) as d
  INTO outjson;
  
  outjson = coalesce(outjson,'[]');
END;
$$;


ALTER FUNCTION framework.fn_tabcolumns_selforconfig_multiselect(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 433 (class 1255 OID 227331)
-- Name: fn_tabcolumns_selforconfig_relselect(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_tabcolumns_selforconfig_relselect(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  _tabname varchar(150);
  _substr varchar(350);
  _config json;
  _key1 varchar(400);
BEGIN
  _config = (injson->'config');
  
  SELECT 
  	cc.value->>'key'
  FROM json_array_elements(_config) as cc 
  WHERE (cc.value->>'title') = 'relation table'
  INTO _key1;

  _tabname = (injson->'data')->>_key1;
  _substr = injson->>'substr';	
  
  _substr = upper(concat('%',coalesce(_substr,'%'),'%'));
  
  SELECT 
  	array_to_json(array_agg(row_to_json(d)))
  FROM (
	SELECT column_name as label,
	  column_name as value
	FROM information_schema.columns
	WHERE concat(table_schema,'.',table_name) = _tabname
	 AND upper(column_name) like _substr
  ) as d
  INTO outjson;
  
  outjson = coalesce(outjson,'[]');
END;
$$;


ALTER FUNCTION framework.fn_tabcolumns_selforconfig_relselect(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 434 (class 1255 OID 227332)
-- Name: fn_trees_bypath(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_trees_bypath(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
  _path varchar(350);
  _roles json;
BEGIN
  _userid = injson->>'userid';
  _path = injson->>'path';
  SELECT
  	u.roles
  FROM framework.users as u
  WHERE u.id = _userid
  INTO _roles;
  
  
  SELECT 
  	row_to_json(d)
  FROM (
  SELECT 
  	t.id, t.title, t.descr, (
	SELECT 
      array_to_json(array_agg(row_to_json(t))) 
    FROM (
	     SELECT 
          	ta.*
         FROM framework.treesacts as ta
         WHERE coalesce(ta.act,'')<>'' and coalesce(ta.title,'')<>'' and 
		       ta.treesid = t.id) as t) as acts,   
    framework.fn_branchestree_recurs(0,t.id) as branches, (
	  SELECT
    	array_to_json(array_agg(row_to_json(d))) 
      FROM (
		SELECT
			tb.id as key, tb.icon,
			tb.parentid, tb.treesid,
			tb.title as label, tb.treeviewtype,
			coalesce(v.path,c.path) as path,
			v.viewtype, tb.ismain
		FROM framework.treesbranches as tb
		  LEFT JOIN framework.views as v on v.id = tb.viewid
		  LEFT JOIN framework.compos as c on c.id = tb.compoid
		WHERE tb.treesid = t.id and tb.title is not null
		ORDER BY tb.orderby
	 ) as d) as  items  
  FROM framework.trees as t
  WHERE t.url = _path and (t.roles is null or (
	  SELECT count(*)
	  FROM json_array_elements_text(t.roles) as t1
    ) = 0 or (
		SELECT count(*)
		FROM json_array_elements_text(t.roles) as t1
		JOIN json_array_elements_text(_roles) as t2 on 
			 t1.value::varchar::int = t2.value::varchar::int or 
			 t2.value::varchar::int = '0'
	  )>0
	)
  ) as d
  INTO outjson;
  
  outjson = coalesce(outjson,'{}');
  
END;
$$;


ALTER FUNCTION framework.fn_trees_bypath(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3393 (class 0 OID 0)
-- Dependencies: 434
-- Name: FUNCTION fn_trees_bypath(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_trees_bypath(injson json, OUT outjson json) IS 'GET TREES BY PATH';


--
-- TOC entry 435 (class 1255 OID 227333)
-- Name: fn_userjson(character); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_userjson(sessid character, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
BEGIN

	SELECT row_to_json(d)
    FROM (
      SELECT
          u.roles, orgs as orgs,
          u.id, u.fam, u.im,
          u.ot, u.login,
          u.usersettings, u.orgid,
          s.id as sessid
      FROM framework.sess as s
          JOIN framework.users as u on u.id = s.userid
      WHERE upper(s.id) = upper(sessid) and u.isactive
    ) as d
    INTO outjson;
    IF outjson is null and (
    	SELECT "primaryAuthorization"
        FROM framework.mainsettings WHERE isactiv
       ) = '1'
    THEN
    	perform raiserror('m401err');
    END IF;
    outjson = coalesce(outjson,'{}');
	

END;
$$;


ALTER FUNCTION framework.fn_userjson(sessid character, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3394 (class 0 OID 0)
-- Dependencies: 435
-- Name: FUNCTION fn_userjson(sessid character, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_userjson(sessid character, OUT outjson json) IS 'USERJSON';


--
-- TOC entry 384 (class 1255 OID 227334)
-- Name: fn_userorg_upd(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_userorg_upd(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _orgid int;
  _userid int;
BEGIN
	_orgid = injson->>'orgid';
	_userid = injson->>'userid';
    
    UPDATE framework.users
    SET orgid = _orgid
    WHERE id = _userid;

END;
$$;


ALTER FUNCTION framework.fn_userorg_upd(injson json) OWNER TO postgres;

--
-- TOC entry 436 (class 1255 OID 227335)
-- Name: fn_userorgs(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_userorgs(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
  _orgs json;
  _roles JSON;
BEGIN
	_userid = injson->>'userid';
	
    SELECT
    	u.roles,
        u.orgs
    FROM framework.users as u
    WHERE u.id = _userid
    INTO _roles,_orgs;
    
    IF (
	    SELECT count(*) 
        FROM json_array_elements_text(_roles) 
        WHERE VALUE::varchar = '0'
	) = 0 THEN
    	SELECT
        	array_to_json(array_agg(row_to_json(d))) 
        FROM (
		  SELECT
			  o.id as value,
			  o.orgname as label
		  FROM framework.orgs as o
			  JOIN json_array_elements_text(_orgs)  as o1 on o1.value::varchar::int = o.id
  		  UNION ALL 
		  SELECT
			  o.id as value,
			  o.orgname as label
		  FROM framework.orgs as o
			  JOIN json_array_elements_text(_orgs)  as o1 on o1.value::varchar::int = o.parentid
		
		) as d
        INTO outjson;    
    ELSE
    	SELECT
        	array_to_json(array_agg(row_to_json(d))) 
        FROM (
		  SELECT
			  o.id as value,
			  o.orgname as label
		  FROM framework.orgs as o
		) as d
        INTO outjson;  
    END IF;    
    
    outjson = coalesce(outjson,'[]');

END;
$$;


ALTER FUNCTION framework.fn_userorgs(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3395 (class 0 OID 0)
-- Dependencies: 436
-- Name: FUNCTION fn_userorgs(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_userorgs(injson json, OUT outjson json) IS 'Change user orgid';


--
-- TOC entry 437 (class 1255 OID 227336)
-- Name: fn_view_byid(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_view_byid(injson json, OUT outjson json, OUT roles json) RETURNS record
    LANGUAGE plpgsql
    AS $$
DECLARE 
	_id int;
BEGIN
  -- GET VIEW DATA BY id
  _id = injson->>'id'; 	
  SELECT 
  	array_to_json(array_agg(row_to_json(d)))
  FROM (
	SELECT id as value, rolename as label 
	FROM  framework.roles
  ) as d
  INTO roles; 

  SELECT 
  	row_to_json(d)
  FROM (
     SELECT 
    	v.id, v.title, v.tablename,
        v.descr, v.path, v.pagination,
        v.viewtype, v.config, v.orderby,
        v.groupby, v.filters, v.acts,
        v.roles, v.classname, v.ispagesize,
        v.pagecount, v.foundcount, v.subscrible,
        v.checker, v.api
    FROM framework.views as v
    WHERE v.id = _id
 ) as d
 INTO outjson;
    
 outjson = coalesce(outjson,'{}');
END;
$$;


ALTER FUNCTION framework.fn_view_byid(injson json, OUT outjson json, OUT roles json) OWNER TO postgres;

--
-- TOC entry 3396 (class 0 OID 0)
-- Dependencies: 437
-- Name: FUNCTION fn_view_byid(injson json, OUT outjson json, OUT roles json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_view_byid(injson json, OUT outjson json, OUT roles json) IS 'GET VIEW DATA BY id';


--
-- TOC entry 438 (class 1255 OID 227337)
-- Name: fn_view_cols_for_fn(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_view_cols_for_fn(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
	_viewid int;
    _n int;
    _substr varchar(540);
BEGIN

    -- columns for fncols select_api
    
    _viewid = (injson->'inputs')->>'id';
      
    
     /*SELECT
        viewid
    FROM framework.config
    WHERE id = _n
    INTO _viewid; */   
    
    SELECT
        array_to_json(array_agg(row_to_json(d)))
    FROM(
       SELECT
          concat(title,' / ',col) as label,
          id::varchar as value
       FROM framework.config
       WHERE viewid = _viewid  
       UNION
       SELECT
          value::varchar as label,
          value::varchar as value
       FROM json_array_elements_text('["_userid_", "_orgid_", "_orgs_", "_sesid_"]'::json)
    ) as d
    INTO outjson;
    
    outjson = coalesce(outjson,'[]');

END;
$$;


ALTER FUNCTION framework.fn_view_cols_for_fn(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3397 (class 0 OID 0)
-- Dependencies: 438
-- Name: FUNCTION fn_view_cols_for_fn(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_view_cols_for_fn(injson json, OUT outjson json) IS '-- columns for visible_condition fncols';


--
-- TOC entry 439 (class 1255 OID 227338)
-- Name: fn_view_cols_for_param(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_view_cols_for_param(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
	_viewid int;
    _n int;
    _substr varchar(540);
BEGIN

	-- columns for visible_condition select_api
    
	_n = (injson->'inputs')->>'actionid';
	_substr = injson->>'substr';
    --_viewid = (injson->'inputs')->>'viewid';
  	
    _substr = coalesce(_substr,'%');
    
 	_viewid = COALESCE(_viewid,(SELECT
    	viewid
    FROM framework.actions
    WHERE id = _n
    ));    
    
    SELECT
    	array_to_json(array_agg(row_to_json(d)))
    FROM (
	  SELECT
		  concat(title,' / ',col) as label,
		  id as value
	  FROM framework.config
	  WHERE viewid = _viewid and 
		  id::varchar like _substr
	) as d
    INTO outjson;
    
    outjson = coalesce(outjson,'[]');

END;
$$;


ALTER FUNCTION framework.fn_view_cols_for_param(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3398 (class 0 OID 0)
-- Dependencies: 439
-- Name: FUNCTION fn_view_cols_for_param(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_view_cols_for_param(injson json, OUT outjson json) IS '-- columns for visible_condition select_api';


--
-- TOC entry 440 (class 1255 OID 227339)
-- Name: fn_view_cols_for_sc(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_view_cols_for_sc(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
	_viewid int;
    _n int;
    _substr varchar(540);
BEGIN

	-- columns for visible_condition select_api
    
	_n = (injson->'inputs')->>'configid';
	_substr = injson->>'substr';
    _viewid = (injson->'inputs')->>'viewid';
  	
    _substr = coalesce(_substr,'%');
    
 	_viewid = COALESCE(_viewid,(SELECT
    	viewid
    FROM framework.config
    WHERE id = _n
    ));    
    
    SELECT
    	array_to_json(array_agg(row_to_json(d)))
    FROM
    (SELECT
    	concat(title,' / ',col) as label,
        id as value
    FROM framework.config
    WHERE viewid = _viewid and 
    	id::varchar like _substr) as d
    INTO outjson;
    
    outjson = coalesce(outjson,'[]');

END;
$$;


ALTER FUNCTION framework.fn_view_cols_for_sc(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3399 (class 0 OID 0)
-- Dependencies: 440
-- Name: FUNCTION fn_view_cols_for_sc(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_view_cols_for_sc(injson json, OUT outjson json) IS '-- columns for visible_condition select_api';


--
-- TOC entry 441 (class 1255 OID 227340)
-- Name: fn_view_deletebyid(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_view_deletebyid(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE 
	olddata json;
    view_headerdata json;
    _vid int;
    _user_id int;
BEGIN
	_vid = injson->>'id';
    _user_id = injson->>'userid';
    
    SELECT row_to_json(d)
    FROM
    (SELECT
      (
        SELECT 
            array_to_json(array_agg(row_to_json(d)))
        FROM ( 
          SELECT *
          FROM framework.actions
          WHERE viewid = _vid 
      ) as d) as actions,
      (
        SELECT 
            array_to_json(array_agg(row_to_json(d)))
        FROM ( 
          SELECT *
          FROM framework.visible_condition
          WHERE configid in (
              SELECT id FROM framework.config WHERE viewid = _vid
            )
      ) as d) as visible_condition,
      (
        SELECT 
            array_to_json(array_agg(row_to_json(d)))
        FROM ( 
          SELECT *
          FROM framework.select_condition
          WHERE configid in (
              SELECT id FROM framework.config WHERE viewid = _vid
            )
      ) as d) as select_condition,
      (
        SELECT 
            array_to_json(array_agg(row_to_json(d)))
        FROM ( 
          SELECT *
          FROM framework.defaultval
          WHERE configid in (
             SELECT id FROM framework.config WHERE viewid = _vid
          )
      ) as d) as defaultval,
      (
        SELECT 
            array_to_json(array_agg(row_to_json(d)))
        FROM ( 
          SELECT *
          FROM framework.filters
          WHERE viewid = _vid 
      ) as d) as filters,      
      (
        SELECT 
            array_to_json(array_agg(row_to_json(d)))
        FROM ( 
          SELECT *
          FROM framework.config
          WHERE viewid = _vid 
      ) as d) as config
    ) as d
    INTO olddata;

	IF olddata->>'filters' IS NULL THEN
    	olddata = olddata::jsonb - 'filters' || '{"filters":"[]"}';
    END IF;
	IF olddata->>'actions' IS NULL THEN
    	olddata = olddata::jsonb - 'actions' || '{"actions":"[]"}';
    END IF;
	IF olddata->>'config' IS NULL THEN
    	olddata = olddata::jsonb - 'config' || '{"config":"[]"}';
    END IF;
	IF olddata->>'defaultval' IS NULL THEN
    	olddata = olddata::jsonb - 'defaultval' || '{"defaultval":"[]"}';
    END IF;
	IF olddata->>'visible_condition' IS NULL THEN
    	olddata = olddata::jsonb - 'visible_condition' || '{"visible_condition":"[]"}';
    END IF;
	IF olddata->>'select_condition' IS NULL THEN
    	olddata = olddata::jsonb - 'select_condition' || '{"select_condition":"[]"}';
    END IF;
    
--	perform raiserror(olddata::varchar);

    SELECT row_to_json(d)
    FROM (
    	SELECT *
        FROM framework.views
	    WHERE id = _vid
        ) AS d
    INTO view_headerdata;
    
    olddata = view_headerdata::jsonb || olddata::jsonb;
    
    DELETE FROM framework.views
    WHERE id = _vid;
    
    INSERT INTO framework.logtable(
      tablename, tableid, 
      opertype, oldata, newdata,
      userid
    ) VALUES (
    	'framework.views', _vid::varchar,
        '3', olddata, '[]'::json,
        _user_id
    );
     
    
    --PERFORM raiserror(format('fn_view_deletebyid, id=(%s), userid=(%s), olddata=(%s)', _vid, _user_id, olddata));

END;
$$;


ALTER FUNCTION framework.fn_view_deletebyid(injson json) OWNER TO postgres;

--
-- TOC entry 3400 (class 0 OID 0)
-- Dependencies: 441
-- Name: FUNCTION fn_view_deletebyid(injson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_view_deletebyid(injson json) IS 'delete view';


--
-- TOC entry 442 (class 1255 OID 227341)
-- Name: fn_view_getByPath(character varying, character varying); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION "fn_view_getByPath"(_path character varying, _viewtype character varying, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
--DECLARE
  --_calendar_actions_cols varchar(500); -- FOR ERROR
 -- _relation varchar(250);
 -- _relation_columns json;
BEGIN
 IF (SELECT count(v.id)  
     FROM framework.views as v
      WHERE v."path" = _path ) = 0
 THEN
     PERFORM raiserror('view is not found');
 END IF;
 
 IF _viewtype = 'list' and (SELECT count(v.id)  
     FROM framework.views as v
      WHERE v."path" = _path and v.viewtype in ('table','tiles','table_api','calendar')) = 0
 THEN
     PERFORM raiserror('view with type list is not found');
 END IF;
 
 IF _viewtype = 'getone' and (SELECT count(v.id)  
     FROM framework.views as v
      WHERE v."path" = _path and v.viewtype like '%form%') = 0
 THEN
     PERFORM raiserror('view with type getone is not found');
 END IF; 
 
 IF (
  SELECT v.viewtype 
  FROM framework.views as v
  WHERE v."path" = _path ) = 'calendar' 
 THEN
     -- Calendar checks
    
    IF (
        SELECT count(c.id) 
        FROM framework.views as v
            JOIN framework.config as c on c.viewid = v.id and c.visible and c.type = 'calendarStartDate'
        WHERE v."path" = _path 
    ) = 0
    THEN
         PERFORM raiserror('view with type "calendar" must have one column typeof "calendarStartDate"');
     END IF;
    
    
    IF (
        SELECT count(c.id) 
        FROM framework.views as v
            JOIN framework.config as c on c.viewid = v.id and c.visible and c.type = 'calendarEndDate'
        WHERE v."path" = _path 
    ) = 0
    THEN
         PERFORM raiserror('view with type "calendar" must have one column typeof "calendarEndDate"');
     END IF;
    
    IF (
        SELECT count(c.id) 
        FROM framework.views as v
            JOIN framework.config as c on c.viewid = v.id and c.visible and c.type = 'calendarTitle'
        WHERE v."path" = _path 
    ) = 0
    THEN
         PERFORM raiserror('view with type "calendar" must have one column typeof "calendarTitle"');
     END IF;
 END IF;
 
 SELECT
   row_to_json(d)
 FROM
  (SELECT
      v.id,
    v.title,
    v.pagecount,
    v.pagination,
    v.checker,
    v.classname,
    v.orderby,
    v.ispagesize,
    v.subscrible,
    COALESCE((SELECT
         array_to_json(array_agg(row_to_json(d)))
     FROM
    (SELECT
        value as value,
        value as label
    FROM json_array_elements(v.roles) as rl) as d),'[]') as roles
        
    ,
    v.viewtype,
    v.tablename,
    
    COALESCE((
      SELECT
          array_to_json(array_agg(row_to_json(d)))
      FROM 
       (
        SELECT
            f.title,
            f.id,
            f.type,
            f.t,
            f.classname,
            c.col as column,
            
            CASE WHEN f.columns is not null
            THEN
            COALESCE((
              SELECT
                array_to_json(array_agg(row_to_json(d)))
              FROM
                (
                  SELECT
                      cc.col as label,
                      cc.title as value,
                      concat(cc.col,'_',cc.id::varchar) as key,
                      CASE WHEN cc.related THEN cc.t
                      ELSE '1'
                      END as t
                  FROM json_array_elements_text(f.columns) as ff
                      JOIN framework.config as cc on cc.viewid = v.id and (
                           cc.title = ff.value::varchar OR cc.id::varchar = ff.value::varchar
                      )
                ) as d),'[]')
            ELSE
              null
            END as columns,           
            COALESCE((SELECT
                array_to_json(array_agg(row_to_json(d)))
             FROM
            (SELECT
                value as value,
                value as label
            FROM json_array_elements(f.roles) as rl) as d),'[]') as roles,
            f."table"
        FROM framework.filters as f
            LEFT JOIN framework.config as c on c.id = f.val_desc
        WHERE f.viewid = v.id
        ORDER BY f.column_order
    ) as d),'[]') as filters,
    
   COALESCE( (SELECT
            array_to_json(array_agg(row_to_json(d)))
     FROM (
      SELECT
          a.act_url as act,
        a.title,
        a.icon,
        a.classname,
        a.act_type as "type",
        a.main_action as ismain,
        coalesce((SELECT
           array_to_json(array_agg(row_to_json(d)))
         FROM
            (SELECT
                value as value,
                value as label
            FROM json_array_elements(a.roles) as rl) as d),'[]') as roles
        ,
        a.forevery as isforevery,
        a.ask_confirm as actapiconfirm,
        a.refresh_data as actapirefresh,
        upper(a.api_type) as actapitype,
        a.api_method as actapimethod,
        (SELECT
            array_to_json(array_agg(row_to_json(d)))
         FROM
            (SELECT
              CASE WHEN ap.val_desc is not null
              THEN
              json_build_object(
                  'value',cc.title,
                  'label',cc.title,
                  't', cc.t,
                  'key',concat(cc.col,'_',cc.id::varchar)
              )
              ELSE
                  null
              END
               as paramcolumn,
             ap.paramconst,
             ap.paraminput,
             ap.paramt,
             ap.paramtitle,
             ap.query_type
            FROM framework.act_parametrs as ap
                LEFT JOIN framework.config as cc on cc.id = ap.val_desc
            WHERE ap.actionid = a.id
            ORDER BY ap.orderby
            ) as d
        ) as parametrs,
       (SELECT
               array_to_json(array_agg(row_to_json(d)))
        FROM
        (
        SELECT
            av.value,
            json_build_object(
                'label',cc.col,
                't',cc.t,
                'value', cc.title,
                'key', concat(cc.col,'_',cc.id::varchar)
            ) as col,
            json_build_object('value',op.value,'js',op.js) as operation
        FROM framework.act_visible_condions as av
            LEFT JOIN framework.operations as op on op.value = av.operation
            LEFT JOIN framework.config as cc on cc.viewid = v.id and cc.id = av.val_desc
        WHERE av.actionid = a.id
        ) as d) as act_visible_condition 
      FROM framework.actions as a
      WHERE a.viewid = v.id
      ORDER BY a.column_order) as d
    
    ),'[]') as acts
    ,
    framework.fn_config_to_json(v.id) as config
  FROM framework.views as v
  WHERE v."path" = _path) as d
  INTO outjson;

END;
$$;


ALTER FUNCTION framework."fn_view_getByPath"(_path character varying, _viewtype character varying, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3401 (class 0 OID 0)
-- Dependencies: 442
-- Name: FUNCTION "fn_view_getByPath"(_path character varying, _viewtype character varying, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION "fn_view_getByPath"(_path character varying, _viewtype character varying, OUT outjson json) IS 'get view config by path';


--
-- TOC entry 444 (class 1255 OID 227343)
-- Name: fn_view_getByPath_showSQL(character varying); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION "fn_view_getByPath_showSQL"(_path character varying, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
--DECLARE
  --variable_name datatype;
BEGIN
 IF (SELECT count(v.id)  
     FROM framework.views as v
 	 WHERE v."path" = _path ) = 0
 THEN
 	PERFORM raiserror('view is not found');
 END IF;
 

 
 SELECT
   row_to_json(d)
 FROM
  (SELECT
  	v.id,
    v.title,
    v.pagecount,
    v.pagination,
    v.checker,
    v.classname,
    v.orderby,
    v.ispagesize,
    v.subscrible,
    COALESCE((SELECT
     	array_to_json(array_agg(row_to_json(d)))
     FROM
    (SELECT
    	value as value,
        value as label
    FROM json_array_elements(v.roles) as rl) as d),'[]') as roles
    	
    ,
    v.viewtype,
    v.tablename,
    
    COALESCE((
      SELECT
      	array_to_json(array_agg(row_to_json(d)))
      FROM 
       (
        SELECT
            f.title,
            f.id,
            f.type,
            f.t,
            f.classname,
            f."column",
            
            CASE WHEN f.columns is not null
            THEN
            (
              SELECT
                array_to_json(array_agg(row_to_json(d)))
              FROM
                (
                  SELECT
                      cc.col as label,
                      cc.title as value,
                      concat(cc.col,'_',cc.id::varchar) as key,
                      CASE WHEN cc.relation is not null THEN cc.t
                      ELSE '1'
                      END as t
                  FROM json_array_elements_text(f.columns) as ff
                      JOIN framework.config as cc on cc.viewid = v.id and cc.title = ff.value::varchar
                ) as d)
            ELSE
              null
            END as columns,           
            COALESCE((SELECT
                array_to_json(array_agg(row_to_json(d)))
             FROM
            (SELECT
                value as value,
                value as label
            FROM json_array_elements(f.roles) as rl) as d),'[]') as roles,
            f."table"
        FROM framework.filters as f
        WHERE f.viewid = v.id
        ORDER BY f.column_order
    ) as d),'[]') as filters,
    
   COALESCE( (SELECT
   	 	array_to_json(array_agg(row_to_json(d)))
     FROM (
      SELECT
      	a.act_url as act,
        a.title,
        a.icon,
        a.classname,
        a.act_type as "type",
        a.main_action as ismain,
        coalesce((SELECT
           array_to_json(array_agg(row_to_json(d)))
         FROM
            (SELECT
                value as value,
                value as label
            FROM json_array_elements(a.roles) as rl) as d),'[]') as roles
        ,
        a.forevery as isforevery,
        a.ask_confirm as actapiconfirm,
        a.refresh_data as actapirefresh,
        upper(a.api_type) as actapitype,
        a.api_method as actapimethod,
        (SELECT
        	array_to_json(array_agg(row_to_json(d)))
         FROM
            (SELECT
              CASE WHEN ap.val_desc is not null
              THEN
              json_build_object(
                  'value',cc.title,
                  'label',cc.title,
                  't', cc.t,
                  'key',concat(cc.col,'_',cc.id::varchar)
              )
              ELSE
              	null
              END
               as paramcolumn,
             ap.paramconst,
             ap.paraminput,
             ap.paramt,
             ap.paramtitle,
             ap.query_type
            FROM framework.act_parametrs as ap
            	LEFT JOIN framework.config as cc on cc.id = ap.val_desc
            WHERE ap.actionid = a.id
            ) as d
        ) as parametrs,
       (SELECT
      	 	array_to_json(array_agg(row_to_json(d)))
        FROM
        (
        SELECT
            av.value,
            json_build_object(
            	'label',cc.col,
                't',cc.t,
                'value', cc.title,
                'key', concat(cc.col,'_',cc.id::varchar)
            ) as col,
            json_build_object('value',op.value,'js',op.js) as operation
        FROM framework.act_visible_condions as av
        	LEFT JOIN framework.operations as op on op.value = av.operation
            LEFT JOIN framework.config as cc on cc.viewid = v.id and cc.id = av.val_desc
        WHERE av.actionid = a.id
        ) as d) as act_visible_condition 
      FROM framework.actions as a
      WHERE a.viewid = v.id
      ORDER BY a.column_order) as d
    
    ),'[]') as acts
    ,
    framework.fn_config_to_json(v.id) as config
  FROM framework.views as v
  WHERE v."path" = _path) as d
  INTO outjson;

END;
$$;


ALTER FUNCTION framework."fn_view_getByPath_showSQL"(_path character varying, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3402 (class 0 OID 0)
-- Dependencies: 444
-- Name: FUNCTION "fn_view_getByPath_showSQL"(_path character varying, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION "fn_view_getByPath_showSQL"(_path character varying, OUT outjson json) IS 'for show sql button';


--
-- TOC entry 445 (class 1255 OID 227344)
-- Name: fn_view_json_for_copy(integer); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_view_json_for_copy(_id integer, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  
BEGIN
	-- GET VIEW IN JSON FOR COPY TO ANOTHER DB
    
    SELECT
    	row_to_json(dd)
    FROM (
      SELECT (
          SELECT
            row_to_json(d)
          FROM (
            SELECT
                v.*
            FROM framework.views as v
            WHERE v.id = _id
          ) as d
      	) as "view", COALESCE((
          SELECT
            array_to_json(array_agg(row_to_json(d)))
          FROM (
            SELECT
                c.*                
            FROM framework.config as c
            WHERE c.viewid = _id
          ) as d
        ),'[]') as config, COALESCE((
          SELECT
            array_to_json(array_agg(row_to_json(d)))
          FROM (
            SELECT
                a.*
            FROM framework.actions as a
            WHERE a.viewid = _id
          ) as d
        ),'[]') actions, COALESCE((
          SELECT
            array_to_json(array_agg(row_to_json(d)))
          FROM (
            SELECT
                f.*
            FROM framework.filters as f
            WHERE f.viewid = _id
        ) as d
      ),'[]') as  filters,COALESCE((
      	SELECT
        	array_to_json(array_agg(row_to_json(d)))
        FROM (
        	SELECT vc.*
            FROM framework.config as c
            	JOIN framework.visible_condition as vc on vc.configid = c.id  
            WHERE c.viewid = _id
        ) as d ),'[]'
      ) visible_condition, COALESCE((
      	SELECT
        	array_to_json(array_agg(row_to_json(d)))
        FROM (
        	SELECT sc.*
            FROM framework.config as c 
            	JOIN framework.select_condition as sc on sc.configid = c.id 
            WHERE c.viewid = _id
        ) as d),'[]') as select_condition, COALESCE((
        SELECT
        	array_to_json(array_agg(row_to_json(d)))
        FROM (
        	SELECT dv.*
            FROM framework.config as c
               	JOIN framework.defaultval as dv on dv.configid = c.id 
            WHERE c.viewid = _id
      	) as d),'[]') defaultval,COALESCE((
        SELECT
           array_to_json(array_agg(row_to_json(d)))
        FROM (
         	SELECT
            	ap.*
            FROM framework.actions as a
            	JOIN framework.act_parametrs as ap on ap.actionid = a.id
            WHERE a.viewid = _id
        ) as d),'[]') as act_parametrs, COALESCE((
        	SELECT
               array_to_json(array_agg(row_to_json(d)))
            FROM (
            	SELECT
                   av.*
                FROM framework.actions as a
                	JOIN framework.act_visible_condions as av on av.actionid = a.id
                WHERE a.viewid = _id
            ) as d),'[]') as act_visible_condions
    ) as dd
    INTO outjson;

END;
$$;


ALTER FUNCTION framework.fn_view_json_for_copy(_id integer, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3403 (class 0 OID 0)
-- Dependencies: 445
-- Name: FUNCTION fn_view_json_for_copy(_id integer, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_view_json_for_copy(_id integer, OUT outjson json) IS 'GET VIEW IN JSON FOR COPY TO ANOTHER DB';


--
-- TOC entry 446 (class 1255 OID 227345)
-- Name: fn_view_json_parse(json, integer); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_view_json_parse(injson json, _n integer DEFAULT 2) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  
BEGIN
	BEGIN
      INSERT INTO framework.views (
        id,
        title, descr,
        tablename, viewtype,
        pagination,
        "path", roles,
        classname, orderby,
        ispagesize, pagecount,
        foundcount, subscrible,
        checker, copy
      )
      SELECT 
          ((injson->'view')->>'id')::smallint*_n,
          ((injson->'view')->>'title'), ((injson->'view')->>'descr'),
          ((injson->'view')->>'tablename'), ((injson->'view')->>'viewtype'),
          ((injson->'view')->>'pagination')::boolean, 
          ((injson->'view')->>'path'), ((injson->'view')->'roles'),
          ((injson->'view')->>'classname'), ((injson->'view')->>'orderby')::boolean,
          ((injson->'view')->>'ispagesize')::boolean, ((injson->'view')->>'pagecount')::boolean,
          ((injson->'view')->>'foundcount')::boolean, ((injson->'view')->>'subscrible')::boolean,
          ((injson->'view')->>'checker')::boolean, true;
    END;
    INSERT INTO framework.config (
      id, viewid,
      t, col,
      column_id, title,
      type, roles,
      visible, required,
      width, "join",
      classname, updatable,
      relation, select_api,
      multiselecttable,
      orderby, orderbydesc,
      relcol, depency,
      relationcolums, multicolums,
      depencycol, column_order,
      fn, fncolumns,
      relatecolumn, "table",
      related, tpath,
      editable, "copy"
    ) SELECT 
    	 (value->>'id')::smallint*_n, (value->>'viewid')::smallint*_n,
    	 (value->>'t'), (value->>'col'),
         (value->>'column_id')::int, (value->>'title'),
         (value->>'type'), (value->'roles'),
         (value->>'visible')::boolean, (value->>'required')::boolean,
    	 (value->>'width'), (value->>'join')::boolean,
         (value->>'classname'), (value->>'updatable')::boolean, 
         (value->>'relation'), (value->>'select_api'), 
         (value->>'multiselecttable'),
		 (value->>'orderby')::boolean, (value->>'orderbydesc')::boolean,
         (value->>'relcol'), (value->>'depency')::boolean,
	     (value->'relationcolums'), (value->'multicolums'),
    	 (value->>'depencycol'), (value->>'column_order')::SMALLINT,
    	 (value->>'fn'), array_to_json(ARRAY(SELECT value::varchar::int*20
         	FROM json_array_elements_text(coalesce((value->>'fncolumns')::json,'[]'::json)::json))),
    	 (value->>'relatecolumn'), (value->>'table'),
         (value->>'related')::boolean, (value->'tpath'),
         (value->>'editable')::boolean, true
    FROM json_array_elements(injson->'config') ;
         
     INSERT INTO framework.visible_condition (
      id, configid,
      val_desc, col,
      title, operation,
      value
     ) 
     SELECT 
    	 (value->>'id')::int, (value->>'configid')::int*_n,
 		 (value->>'val_desc')::int*_n, (value->>'col'),
         (value->>'title'), (value->>'operation'),
         (value->>'value')
     FROM json_array_elements(injson->'visible_condition') ;
    
     INSERT INTO framework.select_condition (
      id, configid,
      col, operation,
      const, value,
      val_desc
     )      
     SELECT 
    	 (value->>'id')::int, (value->>'configid')::int*_n,
 		 (value->>'col'), (value->>'operation'),
         (value->>'const'), (value->>'value'),
         (value->>'val_desc')::int*20
     FROM json_array_elements(injson->'select_condition');
         
     INSERT INTO framework.defaultval (
      id, configid,
      bool, act,
      value
     )      
     SELECT 
    	 (value->>'id')::int*_n, (value->>'configid')::int*_n,
 		 (value->>'bool'), (value->>'act'),
         (value->>'value')
     FROM json_array_elements(injson->'defaultval');
     
     INSERT INTO framework.actions (
      id, column_order,
      title, viewid,
      icon, classname,
      act_url, api_method,
      api_type, refresh_data,
      ask_confirm, roles,
      forevery, main_action,
      act_type
     ) 
     SELECT 
    	 (value->>'id')::int*_n, (value->>'column_order')::int,
 		 (value->>'title'), (value->>'viewid')::int*_n,
         (value->>'icon'), (value->>'classname'),
         (value->>'act_url'), (value->>'api_method'),
         (value->>'api_type'), (value->>'refresh_data')::boolean,  
         (value->>'ask_confirm')::boolean, (value->'roles'),
         (value->>'forevery')::boolean, (value->>'main_action')::boolean,
		(value->>'act_type')
     FROM json_array_elements(injson->'actions')
      ;     
         
    INSERT INTO framework.act_parametrs (
      id, actionid,
      paramtitle, paramt,
      paramconst, paraminput,
      paramcolumn, val_desc,
      query_type, "order by"
    ) 
     SELECT 
    	 (value->>'id')::int, (value->>'actionid')::int*_n,
 		 (value->>'paramtitle'), (value->>'paramt'),
         (value->>'paramconst'), (value->>'paraminput'),
         (value->>'paramcolumn'), (value->>'val_desc')::int*_n,
         (value->>'query_type'), (value->>'order by')::int
     FROM json_array_elements(injson->'act_parametrs');
         
    INSERT INTO framework.act_visible_condions (
      id, actionid,
      val_desc, col,
      title, operation,
      value
    ) 
     SELECT 
    	 (value->>'id')::int,  (value->>'actionid')::int*_n,
 		 (value->>'val_desc')::int*_n, (value->>'col'),
         (value->>'title'), 
         (value->>'operation'),
         (value->>'value')
     FROM json_array_elements(injson->'act_visible_condions');

	INSERT INTO framework.filters (
      id, column_order,
      viewid, title,
      type, classname,
      "column", columns,
      roles, t,
      "table", val_desc
    ) 
    SELECT
    	 (value->>'id')::int*_n,  (value->>'column_order')::smallint,
 		 (value->>'viewid')::int*_n, (value->>'title'),
         (value->>'type'), (value->>'classname'),
         (value->>'column'), (value->'columns'),
         (value->'roles'), (value->>'t'),
         (value->'table'), (value->>'val_desc')::int*_n
    FROM json_array_elements(injson->'filters')
         ;
         
     
END;
$$;


ALTER FUNCTION framework.fn_view_json_parse(injson json, _n integer) OWNER TO postgres;

--
-- TOC entry 3404 (class 0 OID 0)
-- Dependencies: 446
-- Name: FUNCTION fn_view_json_parse(injson json, _n integer); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_view_json_parse(injson json, _n integer) IS 'PARSE VIEW FROM JSON 
FROM framework.fn_vew_json_for_copy function';


--
-- TOC entry 447 (class 1255 OID 227346)
-- Name: fn_view_link_showsql(character varying); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_view_link_showsql(_path character varying, OUT _link json) RETURNS json
    LANGUAGE plpgsql
    AS $$
-- SQL SHOW LINK GENERATOR
BEGIN
	_link = json_build_object(
    	'link', (
		   SELECT
			  concat(maindomain,'/schema?path=', _path)
		   FROM framework.mainsettings
		   WHERE isactiv
		 ),
        'title',
        'show sql'
	);
END;
$$;


ALTER FUNCTION framework.fn_view_link_showsql(_path character varying, OUT _link json) OWNER TO postgres;

--
-- TOC entry 3405 (class 0 OID 0)
-- Dependencies: 447
-- Name: FUNCTION fn_view_link_showsql(_path character varying, OUT _link json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_view_link_showsql(_path character varying, OUT _link json) IS '-- SQL SHOW LINK GENERATOR';


--
-- TOC entry 448 (class 1255 OID 227347)
-- Name: fn_view_setKeys(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION "fn_view_setKeys"() RETURNS void
    LANGUAGE plpgsql
    AS $$
/*
	ADD "key" IN CONFIG
	FOR TRANSFER TO NEW VERSION
*/
BEGIN
	UPDATE framework.views SET config = (
	SELECT 
    	json_build_array (
		  ARRAY ( 
			SELECT 
				value::jsonb || (
					jsonb_build_object( 'key',
						concat(
							value->>'col','_',                         	
							SUBSTRING((uuid_in(md5(random()::text || now()::text)::cstring)::CHAR(36)),1,5)
						)) 
				)::jsonb as conf
			FROM json_array_elements(config)
		  ) 
		)
	)->0;
    
    UPDATE framework.views as v
	SET acts = 
	jsonb_build_array(
		ARRAY(
          (SELECT
            (a.value::jsonb - 'parametrs') ||
            jsonb_build_object('parametrs',
              jsonb_build_array(
                ARRAY(
                  SELECT
                    CASE WHEN coalesce((p.value->>'paramconst'),'') = ''
                    THEN

                    jsonb_build_object('paramcolumn',
                      (p.value->'paramcolumn')::jsonb ||
                       test."fn_setParamsKey"(
                            v.config,
                            (p.value->>'paramcolumn')::jsonb
                        )
                      ) || p.value::jsonb - 'paramcolumn'
                    ELSE
                      (p.value)::jsonb
                    END
                  FROM json_array_elements(coalesce((a.value->>'parametrs')::json,'[]')) as p


                )
              )->0
            )


    	 FROM json_array_elements(v.acts) as a
     	)
   	 )
	)->0;
END;
$$;


ALTER FUNCTION framework."fn_view_setKeys"() OWNER TO postgres;

--
-- TOC entry 449 (class 1255 OID 227348)
-- Name: fn_view_title_link(integer, character varying); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_view_title_link(viewid integer, title character varying, OUT lnk json) RETURNS json
    LANGUAGE plpgsql
    AS $$
BEGIN
/*
	OLD V004
    NEED TO REMOVE AFTER TESTS

*/
	SELECT
    	row_to_json(d)
    FROM
	(SELECT 
    	concat('/composition/view?id=',viewid,'&act_id=-1&fl_id=-1&N=-1&_doctitle_=View: ', title) as link,
        title as title) as d
    INTO lnk;

END;
$$;


ALTER FUNCTION framework.fn_view_title_link(viewid integer, title character varying, OUT lnk json) OWNER TO postgres;

--
-- TOC entry 443 (class 1255 OID 227349)
-- Name: fn_viewnotif_get(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_viewnotif_get(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  _viewid int;
  _userid int;
  viewpath varchar;
  ids json;
BEGIN

	-- FOR WS NOTFICATIONS

	viewpath = injson->>'viewpath';
 	_userid = injson->>'userid';   
    ids = injson->>'ids';

	IF viewpath is null THEN
    	perform raiserror('no viewpath');
    END IF;
     
	SELECT 
    	v.id
    FROM framework.views as v
	WHERE v.path = viewpath
    INTO _viewid;
    
	IF _viewid is null THEN
    	perform raiserror('no viewid');
    END IF;
    
    -- СТАРЫЙ РАБОЧИЙ КОД 
    IF ids is not NULL and ids::varchar <> '[]'
    THEN 
      SELECT array_to_json(array_agg(row_to_json(d)))
      FROM (
		SELECT *
		FROM framework.viewsnotification as v
			JOIN json_array_elements_text(ids) as n on (n.value::varchar = v.tableid or v.tableid is null)
		WHERE v.viewid = _viewid and 
			 (v.foruser = _userid or v.foruser is null) and not v.isread and not v.issend
      ) as d    
       INTO outjson; 
    ELSE
      SELECT array_to_json(array_agg(row_to_json(d)))
      FROM (
		SELECT *
		FROM framework.viewsnotification as v
		   -- JOIN json_array_elements_text(ids) as n on (n.value::varchar = v.tableid or v.tableid is null)
		WHERE v.viewid = _viewid and v.tableid is null and
			 (v.foruser = _userid or v.foruser is null) and not v.isread and not v.issend
       ) as d    
       INTO outjson; 
    END IF;  
    -- НОВЫЙ КОД ГДЕ РАСКОМЕНТИРОВАН v.tableid is null
/*    SELECT array_to_json(array_agg(row_to_json(d)))
    FROM
    (SELECT *
    FROM framework.viewsnotification as v
    	JOIN json_array_elements_text(ids) as n on (n.value::varchar = v.tableid or v.tableid is null)
    WHERE v.viewid = _viewid and 
    	 (v.foruser = _userid or v.foruser is null) and not v.isread and not v.issend
     ) as d    
     INTO outjson;      */
	
    outjson = COALESCE(outjson,'[]');
END;
$$;


ALTER FUNCTION framework.fn_viewnotif_get(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3406 (class 0 OID 0)
-- Dependencies: 443
-- Name: FUNCTION fn_viewnotif_get(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION fn_viewnotif_get(injson json, OUT outjson json) IS 'FOR WS NOTFICATIONS';


--
-- TOC entry 451 (class 1255 OID 227350)
-- Name: fn_viewsave(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION fn_viewsave(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  _id int ;
  _title varchar(150) ;
  _descr varchar(1500) ;
  _tablename varchar(350) ;
  _viewtype varchar(200) ;
  _pagination boolean ;
  _config JSON ;
  _path varchar(150) ;
  _orderby boolean ;
  _pagesize boolean ;
  _pagecount boolean ;
  _foundcount boolean ;
  _subscrible boolean;
  _checker boolean;  
  _groupby JSON ;
  _filters JSON ;
  _acts JSON ;
  _roles JSON ;
  _classname varchar(400) ;
  _userid varchar(250) ;
  _newdata json;
  _oldata json;
BEGIN
  _id  = injson->>'id';
  _title  = injson->>'title';
  _descr  = injson->>'descr';
  _tablename  = injson->>'tablename';
  _viewtype  = injson->>'viewtype';
  _pagination  = injson->>'pagination';
  _config = injson->>'config';
  _path = injson->>'path';
  _orderby = injson->>'orderby';
  _groupby = injson->>'groupby';
  _filters = injson->>'filters';
  _acts = injson->>'acts';
  _roles = injson->>'roles';
  _classname = injson->>'classname';
  _userid = injson->>'userid';
  _pagesize = injson->>'ispagesize';
  _pagecount = injson->>'pagecount';
  _foundcount = injson->>'foundcount';
  _subscrible = injson->>'subscrible';
  _checker = injson->>'checker';
 IF _id is null THEN
  
    IF coalesce(_title,'') = '' THEN
        PERFORM raiserror('title is null');
    END IF;
      
    IF coalesce(_descr,'') = '' THEN
        PERFORM raiserror('descr is null');
    END IF;
      
    IF coalesce(_tablename,'') = '' THEN
        perform raiserror('tablename is null');  
    END IF;
      
    IF coalesce(_viewtype,'') = '' THEN
        perform raiserror('viewtype is null');
    END IF;    

    _pagination = coalesce(_pagination,false);

    IF coalesce(_config::varchar,'[]') = '[]' THEN
    	perform raiserror('config is null');	
    END IF;
    
    IF _path is null THEN
    	perform raiserror('path is null');
    END IF;  
    
    _orderby = coalesce(_orderby,false);
    _pagesize = coalesce(_pagesize,true);
    _pagecount = coalesce(_pagecount,true);
    _foundcount = coalesce(_foundcount,true);
    _subscrible = coalesce(_subscrible,false);
    
    _groupby = coalesce(_groupby,'[]');
    _roles = coalesce(_roles,'[]');
    _filters = coalesce(_filters,'[]');
	_acts = coalesce(_acts,'[]');
    
    IF (SELECT 
        count(*)
    FROM INFORMATION_SCHEMA.TABLES
    WHERE concat('',TABLE_SCHEMA,'.', TABLE_NAME) = _tablename) = 0
    THEN
      perform raiserror('table is not exist');
    END IF;
    
    _id = nextval('framework.views_id_seq'::regclass);
	   

    INSERT INTO framework.views (
    	id,
      title ,
      descr ,
      tablename ,
      viewtype ,
      pagination ,
      config ,
      "path" ,
      orderby ,
      groupby ,
      filters ,
      acts,
      roles,
      classname,
      ispagesize,
      pagecount,
      foundcount,
      subscrible,
      checker
    )
    VALUES (
      _id,	
      _title ,
      _descr ,
      _tablename ,
      _viewtype ,
      _pagination ,
      _config ,
      _path ,
      _orderby ,
      _groupby ,
      _filters ,
      _acts,
      _roles,
      _classname,
      _pagesize,
      _pagecount,
      _foundcount ,
      _subscrible   ,
      coalesce(_checker,false)  
    );
    

    _newdata  = (
      SELECT row_to_json(d) 
      FROM 
      (SELECT *
      FROM framework.views  
      WHERE id = _id) as d
    );
  	INSERT INTO framework.logtable (
      tablename,
      tableid,
      opertype,
      userid,
      newdata
    ) VALUES (
      'framework.views',
      _id::varchar(150),
      '1',
      _userid::int ,
     _newdata   
    );
	outjson = (select row_to_json(d) from ( select _id as id) as d);
  ELSE
     _oldata = (
        SELECT row_to_json(d)
        FROM
        (SELECT * 
        FROM framework.views  
        WHERE id = _id) as d

      );

      
      UPDATE framework.views 
      SET
        title = coalesce(_title,title),
        descr = coalesce(_descr,descr),
        viewtype = coalesce(_viewtype,viewtype),
        pagination = coalesce(_pagination,pagination),
        config = coalesce(_config,config),
        "path" = coalesce(_path,"path"),
        orderby = coalesce(_orderby,orderby),
        groupby = coalesce(_groupby,'[]'),
        filters = coalesce(_filters,'[]'),
        acts = coalesce(_acts,'[]'),
        roles = coalesce(_roles,'[]'),
        classname = _classname,
        ispagesize = coalesce(_pagesize,ispagesize),
        pagecount = coalesce(_pagecount,pagecount),  
        foundcount = coalesce(_foundcount,foundcount),
        subscrible = coalesce(_subscrible,subscrible) ,
        checker = coalesce(_checker,checker)
      WHERE id = _id;
      
      _newdata = (
      	SELECT
        	row_to_json(d)
        FROM
        (SELECT * 
        FROM framework.views  
        WHERE id = _id) as d
       
      );
      
      IF _oldata::varchar <> _newdata::varchar THEN
        INSERT INTO framework.logtable (
          tablename, tableid,
          opertype, userid,
          oldata, newdata
        ) VALUES (
          'framework.views', _id::varchar(150),
          '2', _userid::int ,
         _oldata, _newdata   
        );
    END IF;
  END IF; 
END;
$$;


ALTER FUNCTION framework.fn_viewsave(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 452 (class 1255 OID 227351)
-- Name: fn_viewsave_V004(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION "fn_viewsave_V004"(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  _id int ;
  _title varchar(150) ;
  _descr varchar(1500) ;
  _tablename varchar(350) ;
  _viewtype varchar(200) ;
  _pagination boolean ;
  _config JSON ;
  _path varchar(150) ;
  _orderby boolean ;
  _pagesize boolean ;
  _pagecount boolean ;
  _foundcount boolean ;
  _subscrible boolean;
  _checker boolean;  
  _groupby JSON ;
  _filters JSON ;
  _acts JSON ;
  _roles JSON ;
  _classname varchar(400) ;
  _userid varchar(250) ;
  _newdata json;
  _oldata json;
BEGIN
  _id  = injson->>'id';
  _title  = injson->>'title';
  _descr  = injson->>'descr';
  _tablename  = injson->>'tablename';
  _viewtype  = injson->>'viewtype';
  _pagination  = injson->>'pagination';
  _config = injson->>'config';
  _path = injson->>'path';
  _orderby = injson->>'orderby';
  _groupby = injson->>'groupby';
  _filters = injson->>'filters';
  _acts = injson->>'acts';
  _roles = injson->>'roles';
  _classname = injson->>'classname';
  _userid = injson->>'userid';
  _pagesize = injson->>'ispagesize';
  _pagecount = injson->>'pagecount';
  _foundcount = injson->>'foundcount';
  _subscrible = injson->>'subscrible';
  _checker = injson->>'checker';
 IF _id is null THEN
/*
	OLD V004
    NEED TO REMOVE AFTER TESTS

*/
    IF coalesce(_title,'') = '' THEN
        PERFORM raiserror('title is null');
    END IF;
      
    IF coalesce(_descr,'') = '' THEN
        PERFORM raiserror('descr is null');
    END IF;
      
    IF coalesce(_tablename,'') = '' THEN
        perform raiserror('tablename is null');  
    END IF;
      
    IF coalesce(_viewtype,'') = '' THEN
        perform raiserror('viewtype is null');
    END IF;    

    _pagination = coalesce(_pagination,false);

    IF coalesce(_config::varchar,'[]') = '[]' THEN
    	perform raiserror('config is null');	
    END IF;
    
    IF _path is null THEN
    	perform raiserror('path is null');
    END IF;  
    
    _orderby = coalesce(_orderby,false);
    _pagesize = coalesce(_pagesize,true);
    _pagecount = coalesce(_pagecount,true);
    _foundcount = coalesce(_foundcount,true);
    _subscrible = coalesce(_subscrible,false);
    
    _groupby = coalesce(_groupby,'[]');
    _roles = coalesce(_roles,'[]');
    _filters = coalesce(_filters,'[]');
	_acts = coalesce(_acts,'[]');
    
    IF (SELECT 
        count(*)
    FROM INFORMATION_SCHEMA.TABLES
    WHERE concat('',TABLE_SCHEMA,'.', TABLE_NAME) = _tablename) = 0
    THEN
      perform raiserror('table is not exist');
    END IF;
    
    _id = nextval('framework.views_id_seq'::regclass);
	   

    INSERT INTO framework.views (
    	id,
      title ,
      descr ,
      tablename ,
      viewtype ,
      pagination ,
      config ,
      "path" ,
      orderby ,
      groupby ,
      filters ,
      acts,
      roles,
      classname,
      ispagesize,
      pagecount,
      foundcount,
      subscrible,
      checker
    )
    VALUES (
      _id,	
      _title ,
      _descr ,
      _tablename ,
      _viewtype ,
      _pagination ,
      _config ,
      _path ,
      _orderby ,
      _groupby ,
      _filters ,
      _acts,
      _roles,
      _classname,
      _pagesize,
      _pagecount,
      _foundcount ,
      _subscrible   ,
      coalesce(_checker,false)  
    );
    

    _newdata  = (
      SELECT row_to_json(d) 
      FROM 
      (SELECT *
      FROM framework.views  
      WHERE id = _id) as d
    );
  	INSERT INTO framework.logtable (
      tablename,
      tableid,
      opertype,
      userid,
      newdata
    ) VALUES (
      'framework.views',
      _id::varchar(150),
      '1',
      _userid::int ,
     _newdata   
    );
	outjson = (select row_to_json(d) from ( select _id as id) as d);
  ELSE
     _oldata = (
        SELECT row_to_json(d)
        FROM
        (SELECT * 
        FROM framework.views  
        WHERE id = _id) as d

      );

      
      UPDATE framework.views 
      SET
        title = coalesce(_title,title),
        descr = coalesce(_descr,descr),
        viewtype = coalesce(_viewtype,viewtype),
        pagination = coalesce(_pagination,pagination),
        config = coalesce(_config,config),
        "path" = coalesce(_path,"path"),
        orderby = coalesce(_orderby,orderby),
        groupby = coalesce(_groupby,'[]'),
        filters = coalesce(_filters,'[]'),
        acts = coalesce(_acts,'[]'),
        roles = coalesce(_roles,'[]'),
        classname = _classname,
        ispagesize = coalesce(_pagesize,ispagesize),
        pagecount = coalesce(_pagecount,pagecount),  
        foundcount = coalesce(_foundcount,foundcount),
        subscrible = coalesce(_subscrible,subscrible) ,
        checker = coalesce(_checker,checker)
      WHERE id = _id;
      
      _newdata = (
      	SELECT
        	row_to_json(d)
        FROM
        (SELECT * 
        FROM framework.views  
        WHERE id = _id) as d
       
      );
      
      IF _oldata::varchar <> _newdata::varchar THEN
        INSERT INTO framework.logtable (
          tablename,
          tableid,
          opertype,
          userid,
          oldata,
          newdata
        ) VALUES (
          'framework.views',
          _id::varchar(150),
          '2',
          _userid::int ,
         _oldata,
         _newdata   
        );
    END IF;
  END IF; 
END;
$$;


ALTER FUNCTION framework."fn_viewsave_V004"(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3407 (class 0 OID 0)
-- Dependencies: 452
-- Name: FUNCTION "fn_viewsave_V004"(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION "fn_viewsave_V004"(injson json, OUT outjson json) IS '/*
	OLD V004
    NEED TO REMOVE AFTER TESTS

*/';


--
-- TOC entry 453 (class 1255 OID 227352)
-- Name: get_colcongif(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION get_colcongif(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  col varchar(350);
  _table varchar(350);
  
BEGIN
  col = injson->>'col';
  _table = injson->>'table';
  SELECT
  	row_to_json(d) 
  FROM (
   SELECT 
      	CASE WHEN y.table_schema is not null 
            THEN  concat(y.table_schema , '.' , y.table_name)
             ELSE y.table_schema
        END		
      as relation      
   FROM information_schema.columns as t
 	  left join pg_catalog.pg_statio_all_tables as st on 
      		st.schemaname = t.table_schema 
      		and st.relname = t.table_name	
 	  left join pg_catalog.pg_description pgd on pgd.objoid=st.relid
			and pgd.objsubid=t.ordinal_position
       left join information_schema.table_constraints as c on c.table_name = t.table_name
      	and c.table_schema = t.table_schema and c.constraint_type = 'FOREIGN KEY'
         
      LEFT JOIN information_schema.key_column_usage AS x ON 
      c.constraint_name = x.constraint_name and x.column_name = t.column_name                        
	  LEFT JOIN information_schema.constraint_column_usage 
        AS y ON y.constraint_name = c.constraint_name and x.column_name = t.column_name 
                                 
 WHERE concat(t.table_schema,'.',t.table_name) = _table and t.column_name = col) as d
 INTO outjson;
 
 outjson = coalesce(outjson,'{}');

END;
$$;


ALTER FUNCTION framework.get_colcongif(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 454 (class 1255 OID 227353)
-- Name: get_colcongif_V004(json); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION "get_colcongif_V004"(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  col varchar(350);
  _table varchar(350);
  
BEGIN
/*
	OLD V004
    NEED TO REMOVE AFTER TESTS

*/
  	

  col = injson->>'col';
  _table = injson->>'table';
  SELECT
  	row_to_json(d) 
  FROM
  (SELECT 
      	CASE WHEN y.table_schema is not null 
            THEN  concat(y.table_schema , '.' , y.table_name)
             ELSE y.table_schema
        END		
      as relation      
 FROM information_schema.columns as t
 	  left join pg_catalog.pg_statio_all_tables as st on 
      		st.schemaname = t.table_schema 
      		and st.relname = t.table_name	
 	  left join pg_catalog.pg_description pgd on pgd.objoid=st.relid
			and pgd.objsubid=t.ordinal_position
       left join information_schema.table_constraints as c on c.table_name = t.table_name
      	and c.table_schema = t.table_schema and c.constraint_type = 'FOREIGN KEY'
         
      LEFT JOIN information_schema.key_column_usage AS x ON 
      c.constraint_name = x.constraint_name and x.column_name = t.column_name                        
	  LEFT JOIN information_schema.constraint_column_usage 
        AS y ON y.constraint_name = c.constraint_name and x.column_name = t.column_name 
                                 
 WHERE concat(t.table_schema,'.',t.table_name) = _table and t.column_name = col) as d
 INTO outjson;
 
 outjson = coalesce(outjson,'{}');

END;
$$;


ALTER FUNCTION framework."get_colcongif_V004"(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3408 (class 0 OID 0)
-- Dependencies: 454
-- Name: FUNCTION "get_colcongif_V004"(injson json, OUT outjson json); Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON FUNCTION "get_colcongif_V004"(injson json, OUT outjson json) IS '/*
	OLD V004
    NEED TO REMOVE AFTER TESTS

*/';


--
-- TOC entry 455 (class 1255 OID 227354)
-- Name: tr_act_parametrs_tr(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_act_parametrs_tr() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN

	IF (
    	SELECT act_type
        FROM framework.actions
        WHERE id = NEW.actionid
      ) = 'onLoad' and (NEW.paramconst is not null OR 
      NEW.val_desc is not null )
    THEN
    	PERFORM raiserror('onLoad type parametr can be only from url');
    END IF;
    
    RETURN NEW;

END;
$$;


ALTER FUNCTION framework.tr_act_parametrs_tr() OWNER TO postgres;

--
-- TOC entry 456 (class 1255 OID 227355)
-- Name: tr_actions_tr(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_actions_tr() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
	IF NEW.act_type in ('API', 'onLoad') and 
       NEW.api_type is NULL 
    THEN
    	NEW.api_type = 'get';	
        NEW.classname = coalesce(NEW.classname,'success');
    END IF;
    
    IF NEW.act_type = 'Save' THEN
    	NEW.forevery = false;
        NEW.classname = coalesce(NEW.classname,'success');
    END IF; 
	
    IF NEW.act_type in ('Delete', 'Expand') THEN
    	NEW.forevery = true;
        NEW.classname = coalesce(NEW.classname,'danger');
    END IF; 

    
    IF NEW.act_type = 'Expand' and not (
    	NEW.act_url like '/list/%' OR 
		NEW.act_url like '/getone/%'
      )    
    THEN
    	PERFORM raiserror('Expand act must have list or getone url');
    END IF;
	RETURN NEW;
END;
$$;


ALTER FUNCTION framework.tr_actions_tr() OWNER TO postgres;

--
-- TOC entry 457 (class 1255 OID 227356)
-- Name: tr_actions_tr_del(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_actions_tr_del() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN

	DELETE FROM framework.act_parametrs WHERE actionid = OLD.id;
    DELETE FROM framework.act_visible_condions WHERE actionid = OLD.id;
    
    RETURN OLD;
END;
$$;


ALTER FUNCTION framework.tr_actions_tr_del() OWNER TO postgres;

--
-- TOC entry 458 (class 1255 OID 227357)
-- Name: tr_calendar_actions_tr(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_calendar_actions_tr() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN

	SELECT
    	calendar_date, 
        calendar_date
    FROM framework.calendar_test
    WHERE id = NEW.calendar_id
    INTO NEW."start", NEW."end";
    
    RETURN NEW;

END;
$$;


ALTER FUNCTION framework.tr_calendar_actions_tr() OWNER TO postgres;

--
-- TOC entry 459 (class 1255 OID 227358)
-- Name: tr_config_tr(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_config_tr() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
	_col varchar(150);
	_title varchar(150);
    _tablename varchar(350); -- view major table name
    _tpath json;
    _tt varchar(150);
BEGIN

	SELECT
    	v.tablename
    FROM framework.views as v
    WHERE v.id = NEW.viewid
    INTO _tablename;
    
    -- if related column from other table
    IF NEW.table is not null 
    THEN
    	_tablename = NEW.table;
    END IF;
    
    -- check multi type columns data_type in table
    IF NEW.type like 'multi%' 
    THEN
        -- data_type must be JSON
        IF (
          SELECT 
              data_type
          FROM information_schema.columns
          WHERE concat(table_schema,'.',table_name) = _tablename AND
                column_name = NEW.col
        ) <> 'json'
        THEN
        	PERFORM raiserror('for type multi(select, typehead), column type must be JSON');
        END IF;    	
    END IF;
    
    -- check relaition and type
    IF NEW.relation is not null THEN
      -- for multiselect, mu;titypehead types	
      -- only not api types
      IF NEW.type like 'multi%' AND 
      	 NEW.type not like '%_api'
      THEN
      	IF (
        	SELECT 
              count(table_name)
            FROM information_schema.columns
            WHERE concat(table_schema,'.',table_name) = NEW.relation
        ) = 0 THEN
        	PERFORM raiserror(concat('table ',NEW.relation,' is not found'));
        END IF;
        
        NEW.multiselecttable = NEW.relation;      
        NEW.multicolums = NEW.relationcolums;
        NEW.relationcolums = '[]';
      END IF;
      
      -- if type _api
      IF NEW.type like '%_api' AND 
      	 COALESCE(OLD.select_api,'') <> NEW.relation 
         and COALESCE(OLD.relation,'')<>NEW.relation
      THEN    
        NEW.select_api = NEW.relation;      
      END IF;
      
      -- do not change relation
      IF OLD.relation is null OR OLD.relation <> NEW.relation 
      THEN
          NEW.relation = OLD.relation;
      END IF;
    END IF;
    
    
	-- add relation columns to config 
    -- only if not "array" type 
	IF NEW.relationcolums is not null AND 
    
       NOT NEW.copy AND
       
       NEW.type<>'array' AND
       NOT NEW.depency AND
       NEW.relation is not null AND
       
      (SELECT count(*) FROM json_array_elements(NEW.relationcolums)) > 0 AND 
      
      (SELECT count(r.value) 
       FROM json_array_elements_text(NEW.relationcolums) as r
       WHERE r.value::varchar not in (
			SELECT r2.value::varchar 	
       		FROM json_array_elements_text(coalesce(OLD.relationcolums,'[]'::json)) as r2
       )) > 0
       
    THEN
    	_tt = NEW.t;
    	IF NEW.related = true 
        THEN
            /*[
            	{"t": "t2", "col": "region_id", "table": "nsi.ros_j5phs5f9ra"}, 
                {"t": "t7", "col": "addressTypeId", "table": "nsi.ros_n4rellrh3d"}
            ]*/
            --IF (SELECT FROM ) 
            SELECT
            	array_to_json(array_agg(row_to_json(d)))
            FROM (
              SELECT
                   concat('t',NEW.t) as t, 
                   NEW.relatecolumn as col, 
                   NEW.table as table
              UNION 
              SELECT	
                  concat(NEW.col,'_', NEW.t) as t, 
                  NEW.col, 
                  NEW.relation as table
            ) as d
            INTO _tpath;
            
            _tt = concat(NEW.col,'_', NEW.t);
        	--PERFORM raiserror('There is not realized yet!');
        END IF;
        _tpath = coalesce(_tpath,'[]');
        
    	FOR _col in (
        	SELECT 
            	VALUE::varchar 
            FROM json_array_elements_text(NEW.relationcolums)
            WHERE value::varchar not in (
              SELECT value::varchar
              FROM json_array_elements_text(OLD.relationcolums)
          )
        )
        LOOP
        	_title = _col;
            
        	IF 
             (SELECT 
            	count(c.id)
              FROM framework.config as c
              WHERE c.viewid = NEW.viewid and c.col = _col) >0
            THEN
            	_title = concat(_col,'_',NEW.id);
            END IF;
        	
            
        	INSERT INTO framework.config (
               col, title, type, visible,
               related, roles, relatecolumn,
               relation,
               relcol,
               classname, "join", t,
               "table", viewid,
               column_order, tpath
            )
        	SELECT
              _col as col, _title as title, 'label' as type, true as visible,
              true as related, '[]'::json as roles, NEW.col as relatecolumn,
              (
                SELECT 
                  	concat(y.table_schema, '.', y.table_name)
                FROM information_schema.table_constraints as c
                   	JOIN information_schema.key_column_usage AS x ON
                       	c.constraint_name = x.constraint_name and
                        x.column_name = _col
                    JOIN information_schema.constraint_column_usage AS y ON 
                       	y.constraint_name = c.constraint_name and
                        y.constraint_schema = c.constraint_schema
                WHERE concat(c.table_schema ,'.',c.table_name) = NEW.relation 
                    	and
                      c.constraint_type = 'FOREIGN KEY'
                LIMIT 1                
                
              ) as relation,
              COALESCE((
                SELECT 
                  	concat(y.column_name)
                FROM information_schema.table_constraints as c
                  	JOIN information_schema.key_column_usage AS x ON
                         c.constraint_name = x.constraint_name and
                         x.column_name = _col
                    JOIN information_schema.constraint_column_usage AS y ON 
                      	y.constraint_name = c.constraint_name and
                        y.constraint_schema = c.constraint_schema
                WHERE concat(c.table_schema ,'.',c.table_name) = NEW.relation 
                   	  and
                     c.constraint_type = 'FOREIGN KEY'
                LIMIT 1
              ),NEW.relcol) as relcol,
              '' as classname, false as "join", _tt as t,
              NEW.relation as "table", NEW.viewid,
              coalesce((
              	SELECT 
                 max(c.column_order) 
            	FROM framework.config as c
            	WHERE c.viewid = NEW.viewid),0
              ) + 1, _tpath;
        END LOOP;
    END IF;
    
    -- check function changing 
    IF (OLD.fn is null and NEW.fn is not null) OR
       (OLD.fn is not null and NEW.fn is null)
    THEN
    	PERFORM raiserror('You can not change simple column to function column');
    END IF;
	
    IF NEW.depency and NEW.depencycol is null 
    THEN
    	PERFORM raiserror('depencycol can not be empty (null) when depency=TRUE!');
    END IF;
    
	-- change column order in all config
	/*IF OLD.column_order<>NEW.column_order and 
	  (SELECT
	     count(id)
	   FROM framework.config
	   WHERE viewid = NEW.viewid and column_order = NEW.column_order) > 0 
	THEN
	   UPDATE framework.config
	   SET
	      column_order = column_order + 1
	   WHERE viewid = NEW.viewid AND column_order >= NEW.column_order;
	END IF;*/

	RETURN NEW;
END;
$$;


ALTER FUNCTION framework.tr_config_tr() OWNER TO postgres;

--
-- TOC entry 460 (class 1255 OID 227360)
-- Name: tr_config_tr_del(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_config_tr_del() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN

	-- column use in fncols 
    IF OLD.fncolumns::varchar like '[%]' and (
    	SELECT 
        	count(id)
        FROM framework.config
        WHERE (
        	SELECT 
            	count(*)
            FROM json_array_elements_text(OLD.fncolumns)
            WHERE value::varchar = OLD.id::varchar 
        ) > 0
    ) > 0 THEN
    	PERFORM raiserror('column use in fn columns');
    END IF;
    
	DELETE FROM framework.visible_condition WHERE configid = OLD.id;
	DELETE FROM framework.select_condition WHERE configid = OLD.id;
	
	DELETE FROM framework.defaultval WHERE configid = OLD.id;
    
    RETURN OLD;

END;
$$;


ALTER FUNCTION framework.tr_config_tr_del() OWNER TO postgres;

--
-- TOC entry 461 (class 1255 OID 227361)
-- Name: tr_config_tr_ins(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_config_tr_ins() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN

	IF (
    	SELECT 
        	count(c.id)
        FROM framework.config as c
        WHERE c.title = NEW.title and c.viewid = NEW.viewid
    ) > 0
    THEN
    	NEW.title = CONCAT(NEW.title,'_',NEW.id::varchar);
    END IF;

	-- IF FN PARAMETR IS FN
	IF NEW.fn is not null
    THEN
    	IF NEW.fncolumns is not null and (
        	SELECT
            	count(c.id)
            FROM framework.config as c 
            	JOIN json_array_elements_text(NEW.fncolumns) as fc on c.id::varchar = fc.value::varchar
            WHERE c.fn is not null
        ) > 0
        THEN
        	PERFORM raiserror('fn columns can not be fn');
        END IF;
    END IF;
    
    -- CHECK T NUMBER
    IF NEW.table is NULL AND (
    	SELECT
        	count(c.id)
        FROM framework.config as c
        WHERE c.viewid = NEW.viewid and c.t = NEW.t
       ) > 0
    THEN
    	SELECT
        	max(c.t::int) + 1
        FROM framework.config as c
        WHERE c.viewid = NEW.viewid and isnumeric(c.t)
        INTO NEW.t;     
    END IF;
    
	RETURN NEW;
END;
$$;


ALTER FUNCTION framework.tr_config_tr_ins() OWNER TO postgres;

--
-- TOC entry 462 (class 1255 OID 227362)
-- Name: tr_dialog_messages_tr_ins(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_dialog_messages_tr_ins() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE 
	_dialog_users json;
    _status smallint;
BEGIN
	
	-- CHECK USER ACCESS IN DIALOG
	SELECT
    	d.users,
        d.status
    FROM framework.dialogs as d
    WHERE d.id = NEW.dialog_id
    INTO 
    	_dialog_users,
        _status
        ;
    
    IF NEW.userid not in (
    		SELECT value::varchar::int 
        	FROM json_array_elements(_dialog_users)
    	) 
    THEN
    	PERFORM raiserror('Access denied. User not in dialog');
    END IF;
    
    -- CHECK DIALOG STATUS
    IF _status in ('2')
    THEN
    	PERFORM raiserror('Dialog is closed');
    END IF;
    
    
    -- CHECK USER ACTIVATION
    IF (
    	SELECT 
        	count(u.id)
        FROM framework.users as u
        WHERE u.id = NEW.userid and u.isactive
     ) = 0 
    THEN
    	PERFORM raiserror('User not found or not active');
    END IF;
     
    -- COPY MESSAGE IF FORWARDED
    IF NEW.forwarded_from IS NOT NULL 
    THEN
    	SELECT
        	d.message_text,
            d.files,
            d.images
        FROM framework.dialog_messages as d
        WHERE d.id = NEW.forwarded_from
        INTO 
        	NEW.message_text,
            NEW.files,
            NEW.images;
    END IF;
    
    -- CHECK MESSAGE TEXT
    NEW.message_text = COALESCE(NEW.message_text,'');
    IF NEW.message_text = '' AND (
      SELECT
          count(*)
      FROM json_array_elements(NEW.files)
 	) = 0 AND (
      SELECT
          count(*)
      FROM json_array_elements(NEW.images)
    ) = 0
    THEN
		PERFORM raiserror('Message is empty');
    END IF;

    -- DEFAULTS
    NEW.files = COALESCE(NEW.files,'[]');    
    NEW.images = COALESCE(NEW.images,'[]');
    NEW.user_reads = array_to_json(ARRAY(
    	SELECT
        	NEW.userid
    ));
    
    
	RETURN NEW;

END;
$$;


ALTER FUNCTION framework.tr_dialog_messages_tr_ins() OWNER TO postgres;

--
-- TOC entry 463 (class 1255 OID 227363)
-- Name: tr_dialogs_tr_edit(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_dialogs_tr_edit() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN

   IF NEW.dtype = '1' THEN
      NEW.title = OLD.title;
   END IF;
   
   RETURN NEW;
  
END;
$$;


ALTER FUNCTION framework.tr_dialogs_tr_edit() OWNER TO postgres;

--
-- TOC entry 464 (class 1255 OID 227364)
-- Name: tr_dialogs_tr_ins(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_dialogs_tr_ins() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
	
	-- IF PERSONAL DIALOG
	IF NEW.dtype = '1' 
    THEN
    	IF (
        	SELECT count(*) 
        	FROM json_array_elements(NEW.users)
        ) <> 2
        THEN
        	PERFORM raiserror('For pesonal dialog must be 2 users');
        END IF;
        
        
    	NEW.title = COALESCE(NEW.title,
        	(
              SELECT
                  string_agg(us.login,',') 
              FROM json_array_elements(NEW.users) as u
                  JOIN framework.users as us on us.id = u.value::varchar::int
            )
        );
        
        -- CHECK DUBLICATES
        IF (
        	SELECT 	
            	count(d.id)
        	FROM framework.dialogs as d
            WHERE  d.dtype = NEW.dtype and (
            	SELECT count(*) 
                FROM json_array_elements(NEW.users) as u1
                	JOIN json_array_elements(d.users) as u2 on u1.value::varchar::int = u2.value::varchar::int
            ) = 2
        ) > 0
        THEN
        	PERFORM raiserror('Dialog already exist');
        END IF;
        
        
    END IF; 
    
    -- CHECK USERS
    IF (
    	SELECT count(*) 
    	FROM json_array_elements(NEW.users)
    ) <> (
      SELECT
     	 count(*)
      FROM json_array_elements(NEW.users) as u
      	JOIN framework.users as us on us.id = u.value::varchar::int
      WHERE us.isactive
    )
    THEN
    	PERFORM raiserror('One of dialogs user are not found or not active');
    END IF;
    
    NEW.creator = NEW.userid;
    
    -- SET ADMINS BY DEFAULT
	NEW.dialog_admins = array_to_json(
    	ARRAY(
        	SELECT NEW.userid
        )
    );
    
	RETURN NEW;
END;
$$;


ALTER FUNCTION framework.tr_dialogs_tr_ins() OWNER TO postgres;

--
-- TOC entry 450 (class 1255 OID 227365)
-- Name: tr_dialogs_tr_ins_after(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_dialogs_tr_ins_after() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE 
	_id int;
    _users json;
BEGIN
    -- SEND FIRST MESSAGE
    IF NEW.dtype = '1' AND NEW.first_message::varchar <> '{}'
    THEN
      PERFORM framework.fn_dialog_message_send(
         NEW.first_message
      );
    END IF;

    RETURN NEW;
END;
$$;


ALTER FUNCTION framework.tr_dialogs_tr_ins_after() OWNER TO postgres;

--
-- TOC entry 465 (class 1255 OID 227366)
-- Name: tr_filters_tr(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_filters_tr() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
	
	-- get column title
	IF NEW.val_desc is not NULL
    THEN 
    	SELECT
        	col, t
        FROM framework.config
        WHERE id = NEW.val_desc
        INTO NEW."column", NEW.t;
        IF /*(
          SELECT
              relation
          FROM framework.config
          WHERE id = NEW.val_desc
        ) is null AND*/ (
          SELECT
              "table"
          FROM framework.config
          WHERE id = NEW.val_desc
        ) is null 
        THEN
        	NEW.t = '1';
        END IF;
		
        
	END IF;
    
    -- columns only for typehead type
    IF NEW.type<>'typehead' THEN
    	NEW.columns = '[]'::json;
    ELSE
    	NEW."column" = null;
    END IF;
    
    RETURN NEW;
END;
$$;


ALTER FUNCTION framework.tr_filters_tr() OWNER TO postgres;

--
-- TOC entry 466 (class 1255 OID 227367)
-- Name: tr_mainmenu_tr(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_mainmenu_tr() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN

	IF NEW.parentid is not null and NEW.parentid = NEW.id THEN
    	PERFORM raiserror('parent id can not be = id');
    END IF;
    
    IF NEW.parentid is not null and 
    	NEW.menuid is not null and
    (SELECT 
    	m.menutype
     FROM framework.menus as m
     WHERE m.id = NEW.menuid
     ) = '3' THEN
     	PERFORM raiserror('Footer menu can not have child elements');
    END IF;
    
    RETURN NEW;

END;
$$;


ALTER FUNCTION framework.tr_mainmenu_tr() OWNER TO postgres;

--
-- TOC entry 467 (class 1255 OID 227368)
-- Name: tr_menu_tr(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_menu_tr() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN

	IF NEW.ismainmenu and NEW.menutype in ('1','2')
    THEN
    	UPDATE framework.menus
        SET ismainmenu = false
        WHERE id <> NEW.id;
    END IF;
    IF NEW.menutype not in ('1','2') THEN
    	NEW.ismainmenu = false; 
    END IF;
    
   
    
    RETURN NEW;
END;
$$;


ALTER FUNCTION framework.tr_menu_tr() OWNER TO postgres;

--
-- TOC entry 468 (class 1255 OID 227369)
-- Name: tr_menus_tr_del(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_menus_tr_del() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN

	IF OLD.ismainmenu = true THEN
    	PERFORM raiserror('Access denied. It is main menu');
    END IF;
    
    DELETE FROM framework.mainmenu WHERE menuid = OLD.id;
    
    RETURN OLD;
END;
$$;


ALTER FUNCTION framework.tr_menus_tr_del() OWNER TO postgres;

--
-- TOC entry 469 (class 1255 OID 227370)
-- Name: tr_notifications_tr_check(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_notifications_tr_check() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE

BEGIN

	IF NEW.for_userid is NULL AND 
       NEW.sessid is NULL
    THEN
    	PERFORM raiserror('no session and user');
    END IF;
    
    RETURN NEW;

END;
$$;


ALTER FUNCTION framework.tr_notifications_tr_check() OWNER TO postgres;

--
-- TOC entry 470 (class 1255 OID 227371)
-- Name: tr_orgs(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_orgs() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  _useroles json;
  _userorgs json;
  _orgs json;
  _org int;
  _parentid int;
BEGIN
	SELECT 
    	u.roles,
        u.orgs
    FROM framework.users as u
    WHERE u.id = NEW.userid
    INTO _useroles,_userorgs;
    _orgs = concat('[',NEW.id::varchar,']')::json;
    
	IF COALESCE(NEW.parentid,0)<>0 THEN 
      WHILE COALESCE(NEW.parentid,0)<>0
      LOOP
          SELECT
              parentid
          FROM framework.orgs
          WHERE id = _org
          INTO _parentid;
          IF coalesce(_parentid,0) <> 0 THEN
              SELECT
                  (_orgs::jsonb || concat('[',_parentid::varchar,']')::jsonb)::json   
              INTO _orgs;
          END IF;
      END LOOP;    
    END IF;     
    
    IF NEW.orgtype in (2,3,4) and 
       (
       	(SELECT count(*)
         FROM json_array_elements_text(_useroles)
         WHERE value::varchar::int in (0,3)) = 0
         OR 
        (SELECT count(*)
         FROM json_array_elements_text(_orgs) as o
          	JOIN json_array_elements_text(_userorgs) as uo on 
                  	uo.value::varchar::int = o.value::varchar::int
        ) = 0
      ) THEN
      	PERFORM raiserror('Отказано в доступе');
    END IF;	
    
    IF NEW.orgtype in (1,5) and  -- Разрешить редактировать только админам системы, либо админам организаций
       (
       	(SELECT count(*)
         FROM json_array_elements_text(_useroles)
         WHERE value::varchar::int in (0,1)) = 0
         OR 
        (
           (SELECT count(*)
           FROM json_array_elements_text(_orgs) as o
              JOIN json_array_elements_text(_userorgs) as uo on 
                      uo.value::varchar::int = o.value::varchar::int
           ) = 0 
           AND 
          (SELECT count(*)
           FROM json_array_elements_text(_useroles)
           WHERE value::varchar::int in (0,1,2)) = 0
       )
      ) THEN
      	PERFORM raiserror('Отказано в доступе');
    END IF;	
    
    IF NEW.ogrn is not null and not isnumeric(NEW.ogrn)
    	and length(NEW.ogrn)<>13
    THEN
		PERFORM raiserror('ошибка в формате ОГРН');
    END IF;
    
    IF NEW.inn is not null and not isnumeric(NEW.inn)
    	and length(NEW.inn)<>10
    THEN
		PERFORM raiserror('ошибка в формате ИНН');
    END IF;

	IF new.orgname<>'' and new.orgtype is not null THEN
    	NEW.completed = true;
    END IF;
      
	RETURN new;


END;
$$;


ALTER FUNCTION framework.tr_orgs() OWNER TO postgres;

--
-- TOC entry 471 (class 1255 OID 227372)
-- Name: tr_select_condition_tr(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_select_condition_tr() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    
	IF NEW.const is null and NEW.val_desc is null and NEW.operation not like '%null%'
    THEN
    	PERFORM raiserror('const or value is null');
    END IF;
    
    IF NEW.const is not null and NEW.value is not null
    THEN
    	NEW.value = null;
    END IF;
    SELECT
    	row_to_json(d)
    FROM
    (SELECT
    	c.t,
        c.id as key,
        c.col as label,
        c.title as value
    FROM framework.config as c
    WHERE c.id = NEW.val_desc) as d
    INTO NEW.value;
    
    RETURN NEW;

END;
$$;


ALTER FUNCTION framework.tr_select_condition_tr() OWNER TO postgres;

--
-- TOC entry 472 (class 1255 OID 227373)
-- Name: tr_spapi_tr(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_spapi_tr() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
	
	-- existing in db
	IF (
      SELECT 
        count(p.proname)
      FROM pg_proc p 
      INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)
      WHERE format('%I.%I', ns.nspname, p.proname) = NEW.procedurename 
    ) = 0 THEN
    	PERFORM raiserror('Can not found selected function');
    END IF;
    
    -- Check function description
    IF COALESCE((
      SELECT 
          pd.description
      FROM pg_proc p 
          INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)
          LEFT JOIN pg_catalog.pg_description as pd on p.oid = pd.objoid
      WHERE format('%I.%I', ns.nspname, p.proname) = NEW.procedurename 
    ),'') = '' THEN
    	PERFORM raiserror('Function without description');
    END IF;
    
    -- IN parametr check
    IF (
      SELECT count(p.proname)	
      FROM pg_proc p 
          INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)
          LEFT JOIN pg_catalog.pg_description as pd on p.oid = pd.objoid
          LEFT JOIN pg_type as pt on pt.oid = p.proargtypes[0]::int
      WHERE format('%I.%I', ns.nspname, p.proname) = NEW.procedurename 
      and p.proargnames[1] = 'injson' and upper(pt.typname) like '%JSON' 
      --and p.proargmodes[1] = 'i'
    ) = 0 THEN
    	PERFORM raiserror('Check injson parametr');
    END IF;
    
	-- title
	IF (
      SELECT 
        p.proname
      FROM pg_proc p 
      INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)
      WHERE format('%I.%I', ns.nspname, p.proname) = NEW.procedurename 
    ) not like 'fn_%' THEN
    	PERFORM raiserror('Function title must begun with fn_');
    END IF;
    
    -- check api method path
    new.methodname = regexp_replace(new.methodname, '[^a-z0-9_]-', '', 'g');
    
    RETURN NEW;

END;
$$;


ALTER FUNCTION framework.tr_spapi_tr() OWNER TO postgres;

--
-- TOC entry 473 (class 1255 OID 227374)
-- Name: tr_trees_add_org(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_trees_add_org() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  _orgid int;
BEGIN
	SELECT 
    	orgid
    FROM framework.users
    WHERE id = NEW.userid
    INTO _orgid;
    
    UPDATE framework.trees
    SET orgid = _orgid
    WHERE id = NEW.id;
    
    return null;
END;
$$;


ALTER FUNCTION framework.tr_trees_add_org() OWNER TO postgres;

--
-- TOC entry 474 (class 1255 OID 227375)
-- Name: tr_trees_tr_del(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_trees_tr_del() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN

	DELETE FROM framework.treesbranches WHERE treesid = OLD.id;
    DELETE FROM framework.treesacts WHERE treesid = OLD.id;
    
    RETURN OLD; 

END;
$$;


ALTER FUNCTION framework.tr_trees_tr_del() OWNER TO postgres;

--
-- TOC entry 475 (class 1255 OID 227376)
-- Name: tr_treesbranch_check(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_treesbranch_check() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
	IF TG_OP = 'UPDATE' and  NEW.compoid is not null and OLD.compoid is null  THEN
    	NEW.viewid = null;
    END IF;
    
	IF TG_OP = 'UPDATE' and NEW.viewid is not null and OLD.viewid is null  THEN
    	NEW.compoid = null;
    END IF;    
    
	IF NEW.ismain THEN
    	UPDATE framework.treesbranches
        SET ismain = false
        WHERE treesid = NEW.treesid and id<>NEW.id;
    END IF;
    
    return 	NEW;
END;
$$;


ALTER FUNCTION framework.tr_treesbranch_check() OWNER TO postgres;

--
-- TOC entry 476 (class 1255 OID 227377)
-- Name: tr_user_check(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_user_check() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE 
	useroles json;
    
BEGIN

    IF NEW.fam is not null and NEW.fam = '' THEN
    	perform raiserror('fam is null');
    END IF;
    IF NEW.im is not null and NEW.im = '' THEN
    	perform raiserror('im is null');
    END IF;

    IF NEW.login is not null and NEW.login = '' THEN
    	perform raiserror('login is null');
    END IF;
    IF TG_OP = 'INSERT' and NEW.password is null THEN
    	perform raiserror('password is null');
    END IF;
    IF TG_OP = 'UPDATE' and NEW.password is not null and NEW.password = 'd14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f' THEN
    	NEW.password = OLD.password;
    END IF;


	IF NEW.roles is not null and  NEW.roles::varchar not like '[%]' THEN
    	perform raiserror('roles format error');
    END IF;
	IF NEW.orgs is not null and  NEW.orgs::varchar not like '[%]' THEN
    	perform raiserror('orgs format error');
    END IF;
	
	IF NEW.orgid is null and NEW.orgs is not null
	THEN
	   SELECT
	      value::varchar::int
	   FROM json_array_elements_text(NEW.orgs)
	   LIMIT 1
	   INTO NEW.orgid;
	END IF;
	
	IF NEW.roles is not null and (SELECT count(*) FROM json_array_elements_text(NEW.roles)) = 0 THEN
    	perform raiserror('no roles');
    END IF;
    
    SELECT
    	 roles
    FROM framework.users
    WHERE id = NEW.userid
    INTO useroles;
    

    IF TG_OP = 'UPDATE' and NEW.roles::VARCHAR<>OLD.roles::varchar THEN
      	
       IF (SELECT 
          coalesce( min(r.hierarchy),100000)
        FROM  json_array_elements_text(Old.roles) as o
          JOIN framework.roles as r on r.id = o.value::varchar::smallint) <
        (SELECT 
              coalesce( min(r.hierarchy),100000)
        FROM  json_array_elements_text(useroles) as o
          JOIN framework.roles as r on r.id = o.value::varchar::smallint) THEN
         perform raiserror('u can not change the roles');
         
       END IF;   
  
          
    END IF;

    return NEW;
END;
$$;


ALTER FUNCTION framework.tr_user_check() OWNER TO postgres;

--
-- TOC entry 477 (class 1255 OID 227378)
-- Name: tr_view_tr_check(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_view_tr_check() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
	IF NEW.viewtype like '%api' and NEW.tablename is NULL THEN
    -- if data-binding from API method - view type is api, tablename is not neccesary
    	NEW.tablename = '';
    END IF;
    
    SELECT		
    	COALESCE(NEW.descr,p.description)
    FROM pg_catalog.pg_statio_all_tables as t
    	LEFT JOIN pg_catalog.pg_description as p on p.objoid = t.relid
    WHERE concat(t.schemaname::varchar,'.',t.relname::varchar) = NEW.tablename 
    INTO NEW.descr;
    
    IF coalesce((
      SELECT		
          p.description
      FROM pg_catalog.pg_statio_all_tables as t
          LEFT JOIN pg_catalog.pg_description as p on p.objoid = t.relid
      WHERE concat(t.schemaname::varchar,'.',t.relname::varchar) = NEW.tablename 
      LIMIT 1
    ),'') = '' THEN
       PERFORM raiserror('Table has no description');
    END IF;

    RETURN NEW;

END;
$$;


ALTER FUNCTION framework.tr_view_tr_check() OWNER TO postgres;

--
-- TOC entry 478 (class 1255 OID 227379)
-- Name: tr_views_tr_del(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_views_tr_del() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE 
	olddata json;
BEGIN
/*
    SELECT row_to_json(d)
    FROM
    (SELECT 
      (
        SELECT 
            array_to_json(array_agg(row_to_json(d)))
        FROM ( 
          SELECT *
          FROM framework.actions
          WHERE viewid = OLD.id 
      ) as d) as actions,
      (
        SELECT 
            array_to_json(array_agg(row_to_json(d)))
        FROM ( 
          SELECT *
          FROM framework.visible_condition
          WHERE configid in (
              SELECT id FROM framework.config WHERE viewid = OLD.id
            )
      ) as d) as visible_condition,
      (
        SELECT 
            array_to_json(array_agg(row_to_json(d)))
        FROM ( 
          SELECT *
          FROM framework.select_condition
          WHERE configid in (
              SELECT id FROM framework.config WHERE viewid = OLD.id
            )
      ) as d) as select_condition,
      (
        SELECT 
            array_to_json(array_agg(row_to_json(d)))
        FROM ( 
          SELECT *
          FROM framework.defaultval
          WHERE configid in (
             SELECT id FROM framework.config WHERE viewid = OLD.id
          )
      ) as d) as defaultval,
      (
        SELECT 
            array_to_json(array_agg(row_to_json(d)))
        FROM ( 
          SELECT *
          FROM framework.config
          WHERE viewid = OLD.id 
      ) as d) as config,
      (
        SELECT 
            array_to_json(array_agg(row_to_json(d)))
        FROM ( 
          SELECT *
          FROM framework.filters
          WHERE viewid = OLD.id 
      ) as d) as filters
    ) as d
    INTO olddata;
*/    
    
    
   -- UPDATE framework.views SET config = olddata WHERE id = OLD.id;
    DELETE FROM framework.act_parametrs WHERE val_desc in (
      SELECT id FROM framework.config WHERE viewid = OLD.id
    ); 
    
   DELETE FROM framework.act_visible_condions WHERE val_desc in (
      SELECT id FROM framework.config WHERE viewid = OLD.id
    ); 
    DELETE FROM framework.actions WHERE viewid = OLD.id;    
        
	DELETE FROM framework.visible_condition WHERE configid in (
      SELECT id FROM framework.config WHERE viewid = OLD.id
    );
    
	DELETE FROM framework.visible_condition WHERE val_desc in (
      SELECT id FROM framework.config WHERE viewid = OLD.id
    );
    
	DELETE FROM framework.select_condition WHERE configid in (
      SELECT id FROM framework.config WHERE viewid = OLD.id
    );
    
	DELETE FROM framework.select_condition WHERE val_desc in (
      SELECT id FROM framework.config WHERE viewid = OLD.id
    ); 
    
	DELETE FROM framework.defaultval WHERE configid in (
      SELECT id FROM framework.config WHERE viewid = OLD.id
    );
    DELETE FROM framework.filters WHERE val_desc in (
      SELECT id FROM framework.config WHERE viewid = OLD.id
    );
    DELETE FROM framework.filters WHERE viewid = OLD.id;

	DELETE FROM framework.config WHERE viewid = OLD.id and fn is not null;
	DELETE FROM framework.config WHERE viewid = OLD.id and fn is null;	
	
    
/*    
    INSERT INTO framework.logtable(
      tablename, tableid, 
      opertype, oldata, newdata,
      userid
    ) VALUES (
    	'framework.views', OLD.id::varchar,
        '3', olddata, '[]'::json,
        1
    );
*/    
    RETURN OLD;  

END;
$$;


ALTER FUNCTION framework.tr_views_tr_del() OWNER TO postgres;

--
-- TOC entry 479 (class 1255 OID 227380)
-- Name: tr_views_tr_ins_after(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_views_tr_ins_after() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
	IF not NEW.copy THEN
      INSERT INTO framework.config (
        viewid, t, col, column_id, title, type,
        roles, visible, required, width,
        "join", classname, updatable,
        relation, select_api, multiselecttable,
        orderby, orderbydesc, relcol,
        depency, depencycol, relationcolums,
        multicolums, column_order, fn,
        fncolumns, relatecolumn, "table",
        related
      )
      SELECT 
        NEW.id, c.value->>'t' as t, c.value->>'col' as col, 
        (c.value->>'column_id')::INTEGER as column_id,
        c.value->>'title' as title, c.value->>'type' as type,
        
        (CASE WHEN (c.value->>'roles')::varchar like '[%'
        THEN
        json_build_array(array(SELECT
                value->'value'
           FROM json_array_elements((c.value->>'roles')::json)
        ))->0
        ELSE
            '[]'::json
        END) as roles,
         
        coalesce((c.value->>'visible' )::BOOLEAN,false) as visible,
        COALESCE((c.value->>'required')::BOOLEAN,false) as required,
        c.value->>'width' as width,
        COALESCE((c.value->>'join')::BOOLEAN,false) as join,
        c.value->>'classname' as classname,
        COALESCE((c.value->>'updatable')::BOOLEAN,false) as updatable,
        c.value->>'relation' as relation,
        c.value->>'select_api' as select_api,   
        c.value->>'multiselecttable' as multiselecttable,
        COALESCE((c.value->>'orderby')::BOOLEAN,false) as orderby,
        COALESCE((c.value->>'orderbydesc')::BOOLEAN,false) as orderbydesc,
        c.value->>'relcol' as relcol,
        COALESCE((c.value->>'depency')::BOOLEAN,false) as depency,
        c.value->>'depencycol' as depencycol,
        
        (CASE WHEN (c.value->>'relationcolums')::varchar like '[%'
        THEN
        json_build_array(array(SELECT
                value->'value'
           FROM json_array_elements((c.value->>'relationcolums')::json)
        ))->0
        ELSE
         '[]'::json
        END) as relationcolums,
         
        (CASE WHEN (c.value->>'multicolums')::varchar like '[%'
        THEN
            json_build_array(array(SELECT
                value->'value'
           FROM json_array_elements((c.value->>'multicolums')::json)
            ))->0
        ELSE
            '[]'::json
        END
        ) as multicolums,
        
        (row_number() over (PARTITION BY 0))*10 as column_order,
        (c.value->'fn')->>'value' as fn,
        
        (CASE WHEN (c.value->>'fncolumns')::varchar like '[%'
        THEN
           json_build_array(array(SELECT
                value->'value'
           FROM json_array_elements((c.value->'fncolumns')::json)
        ))->0 
        ELSE
         null
        END ) as fncolumns,
        
        c.value->>'relatecolumn',
        c.value->>'table',
        coalesce((c.value->>'related')::boolean,false)
     FROM json_array_elements(framework.fn_createconfig(json_build_object('tabname',NEW.tablename ))) as c;	
	END IF;
	RETURN NEW;
END;
$$;


ALTER FUNCTION framework.tr_views_tr_ins_after() OWNER TO postgres;

--
-- TOC entry 480 (class 1255 OID 227381)
-- Name: tr_viewsnotification_del_doubles(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_viewsnotification_del_doubles() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN /*Этот  триггер удаляет дубли  сообщений по полю doublemess*/ 
  if (old.issend=false and new.issend=true and not (new.doublemess is null))  then -- если информация о том что issend изменен на получен и причем принимает участие поле doublemess
    delete from framework.viewsnotification 
    where doublemess=new.doublemess and id<>new.id;
  end if; 
  RETURN NEW;
EXCEPTION
WHEN others THEN
  RETURN NEW;
END;
$$;


ALTER FUNCTION framework.tr_viewsnotification_del_doubles() OWNER TO postgres;

--
-- TOC entry 481 (class 1255 OID 227382)
-- Name: tr_visible_condition_tr(); Type: FUNCTION; Schema: framework; Owner: postgres
--

CREATE FUNCTION tr_visible_condition_tr() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN

	IF NEW.value is null and NEW.operation not like '%null%'
    THEN
    	PERFORM raiserror('value is null');
    END IF; 
    
	IF NEW.val_desc is null
    THEN
    	PERFORM raiserror('val_desc is null');
    END IF;     
    
    RETURN NEW;

END;
$$;


ALTER FUNCTION framework.tr_visible_condition_tr() OWNER TO postgres;

SET search_path = public, pg_catalog;

--
-- TOC entry 482 (class 1255 OID 227383)
-- Name: fn_completed_color(boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fn_completed_color(c boolean, OUT color character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
BEGIN
	color = 'red';

	IF c THEN
    	color = 'green';
    END IF;     

END;
$$;


ALTER FUNCTION public.fn_completed_color(c boolean, OUT color character varying) OWNER TO postgres;

--
-- TOC entry 483 (class 1255 OID 227384)
-- Name: fn_completed_colorblack(boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fn_completed_colorblack(t boolean, OUT c character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
BEGIN
	c = 'black';
    IF not  t THEN
    	c = 'red';
    END IF;

END;
$$;


ALTER FUNCTION public.fn_completed_colorblack(t boolean, OUT c character varying) OWNER TO postgres;

--
-- TOC entry 484 (class 1255 OID 227385)
-- Name: fn_corect_error_view_config(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fn_corect_error_view_config(_id integer, OUT _result character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
  _i int;
  _act json; 
  _acts json[];
  _newact json;
BEGIN
 _result='';
 _i=0;
 FOR  _act in (select value from json_array_elements ((select acts from framework.views where  id=_id)::json) as d) 
 LOOP
  _i=_i+1;
  --_result=(concat(_result,' ',_i::varchar,'-',_act->>'title'::varchar,' ',_act->>'isforevery'::varchar,', '));
  if _act->>'isforevery' is null 
    then
     _newact=(_act::jsonb||'{"isforevery":"false"}'::jsonb)::json;
     /*_acts=row_to_json
     (
         select value from json_array_elements (_acts)
         -- union  select _newact
     );*/
     
    else   
     _newact=_act;
  end if;
 END LOOP;
 _result=_newact::varchar;
 return;
END;
$$;


ALTER FUNCTION public.fn_corect_error_view_config(_id integer, OUT _result character varying) OWNER TO postgres;

--
-- TOC entry 485 (class 1255 OID 227386)
-- Name: fn_users_getorgs(json); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fn_users_getorgs(injson json, OUT result character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$


BEGIN
    SELECT 
    	string_agg(ro.orgname, ', ')
    FROM
        json_array_elements_text(injson) as q
    JOIN framework.orgs AS ro ON ro.id = q.value::VARCHAR::int
    INTO result;
END;
$$;


ALTER FUNCTION public.fn_users_getorgs(injson json, OUT result character varying) OWNER TO postgres;

--
-- TOC entry 486 (class 1255 OID 227387)
-- Name: fn_users_getroles(json); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fn_users_getroles(injson json, OUT result character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

BEGIN
    SELECT 
        string_agg(ro.rolename, ', ')
    FROM
        json_array_elements_text(injson) as q
    JOIN framework.roles AS ro ON ro.id = q.value::VARCHAR::int
    INTO result;
END;
$$;


ALTER FUNCTION public.fn_users_getroles(injson json, OUT result character varying) OWNER TO postgres;

--
-- TOC entry 487 (class 1255 OID 227388)
-- Name: fn_view_copy_json_test(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fn_view_copy_json_test(_id integer, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
BEGIN
  SELECT
      row_to_json(d)
  FROM 
  (SELECT COALESCE((
      SELECT 
         row_to_json(f)
      FROM (
        SELECT v.*
        FROM framework.views as v
        WHERE v.id = _id
      ) as f),'[]') as view, COALESCE((
        SELECT
            array_to_json(array_agg(row_to_json(f)))
        FROM (
            SELECT
                c.*
            FROM framework.config as c
            WHERE c.viewid = _id
        ) as f),'[]') as config, COALESCE((
        SELECT
            array_to_json(array_agg(row_to_json(f)))
        FROM (
            SELECT
                a.*
            FROM framework.actions as a
            WHERE a.viewid = _id
        ) as f),'[]') as actions, COALESCE((
        SELECT
            array_to_json(array_agg(row_to_json(f)))
        FROM (
            SELECT
                ff.*
            FROM framework.filters as ff
            WHERE ff.viewid = _id
        ) as f),'[]') as filters, COALESCE((
        SELECT
            array_to_json(array_agg(row_to_json(f)))
        FROM (
            SELECT
                ap.*
            FROM framework.act_parametrs as ap
              JOIN framework.actions as a on a.id = ap.actionid
            WHERE a.viewid = _id
        ) as f),'[]') as act_parametrs, COALESCE((
          SELECT
              array_to_json(array_agg(row_to_json(f)))
          FROM (
              SELECT
                  vc.*
              FROM framework.visible_condition as vc
                JOIN framework.config as c on c.id = vc.configid
              WHERE c.viewid = _id
          ) as f),'[]') as visible_condition, COALESCE((
          SELECT
              array_to_json(array_agg(row_to_json(f)))
          FROM (
              SELECT
                  sc.*
              FROM framework.select_condition as sc
                JOIN framework.config as c on c.id = sc.configid
              WHERE c.viewid = _id
          ) as f),'[]') as select_condition,  COALESCE((
          SELECT
              array_to_json(array_agg(row_to_json(f)))
          FROM (
              SELECT
                  df.*
              FROM framework.defaultval as df
                JOIN framework.config as c on c.id = df.configid
              WHERE c.viewid = _id
          ) as f),'[]') as defaultval, COALESCE((
          SELECT
              array_to_json(array_agg(row_to_json(f)))
          FROM (
              SELECT
                  av.*
              FROM framework.act_visible_condions as av
                JOIN framework.actions as a on a.id = av.actionid
              WHERE a.viewid = _id
          ) as f),'[]') as act_visible_condions) as d
    INTO outjson    
        ;
      

END;
$$;


ALTER FUNCTION public.fn_view_copy_json_test(_id integer, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 488 (class 1255 OID 227389)
-- Name: fn_withoutDesc_setRightFnTitle(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION "fn_withoutDesc_setRightFnTitle"(_schemaname character varying, _fn_name character varying, _newschemaname character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _squery varchar;
  _nfnname varchar(500);
BEGIN

	IF _schemaname<>_newschemaname
    THEN
      _squery = CONCAT(
          'ALTER FUNCTION "',_schemaname,'"."', _fn_name,
          '"() SET SCHEMA "',_newschemaname,'";'
      );
      EXECUTE(_squery);
    END IF;
    
    


    
   --_squery = CONCAT(_squery,' SET SCHEMA ', _schemaname,' ',_newschemaname,';');
    
    
    
    IF _fn_name not like 'tr_%'
    THEN
    	_nfnname = _fn_name;
    	IF _nfnname like 'fn_%'
        THEN
        	_nfnname = replace(_fn_name,'fn_','');
        END IF;
        
        _nfnname = concat('"tr_', _nfnname,'"');
        _squery = CONCAT(
        	'ALTER FUNCTION "',_newschemaname,'"."', _fn_name,
            '"() RENAME TO ', _nfnname,';'
        );
        EXECUTE(_squery);
    END IF;
	

END;
$$;


ALTER FUNCTION public."fn_withoutDesc_setRightFnTitle"(_schemaname character varying, _fn_name character varying, _newschemaname character varying) OWNER TO postgres;

--
-- TOC entry 489 (class 1255 OID 227390)
-- Name: fn_withoutDesc_tables(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION "fn_withoutDesc_tables"(_schema character varying) RETURNS TABLE(schema character varying, tablename character varying, description character varying)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT 
	   t.schemaname::varchar, 
	   t.relname::varchar as table,
	   COALESCE(p.description,'НЕТ ОПИСАНИЯ')::varchar as desc
  FROM pg_catalog.pg_statio_all_tables as t
	  LEFT JOIN pg_catalog.pg_description as p on p.objoid = t.relid
  WHERE t.schemaname = _schema and (COALESCE(p.description,'') = '' OR
		p.description = 'НЕТ ОПИСАНИЯ');

END;
$$;


ALTER FUNCTION public."fn_withoutDesc_tables"(_schema character varying) OWNER TO postgres;

--
-- TOC entry 3409 (class 0 OID 0)
-- Dependencies: 489
-- Name: FUNCTION "fn_withoutDesc_tables"(_schema character varying); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION "fn_withoutDesc_tables"(_schema character varying) IS 'ТАБЛИЦЫ БЕЗ ОПИСАНИЙ';


--
-- TOC entry 490 (class 1255 OID 227391)
-- Name: fn_withoutDesc_triggers(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION "fn_withoutDesc_triggers"(_schemaname character varying) RETURNS TABLE(tab character varying, tg_name character varying, function_shema character varying, fnresult character varying)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT 
   --c.*,
      CONCAT(n.nspname,'.', c.relname)::varchar as tablename, 
      t.tgname::varchar as tg_name,
      concat(pn.nspname,'.', p.proname)::varchar as functionschema ,
      "fn_withoutDesc_setRightFnTitle"(
         pn.nspname::varchar,
         p.proname::varchar,
     	 n.nspname::varchar   
      )::varchar as fn_result
  FROM pg_trigger as t
       JOIN pg_class as c on c.oid = t.tgrelid 
       JOIN pg_namespace as n on n.oid = c.relnamespace
       JOIN pg_proc as p on p.oid = t.tgfoid
       JOIN pg_namespace pn ON pn.oid = p.pronamespace
  WHERE n.nspname = _schemaname and not t.tgisinternal 
      AND ( n.nspname <> pn.nspname OR p.proname not like 'tr_%');
END;
$$;


ALTER FUNCTION public."fn_withoutDesc_triggers"(_schemaname character varying) OWNER TO postgres;

--
-- TOC entry 3410 (class 0 OID 0)
-- Dependencies: 490
-- Name: FUNCTION "fn_withoutDesc_triggers"(_schemaname character varying); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION "fn_withoutDesc_triggers"(_schemaname character varying) IS ' -- triggers with wrong schemas and names';


--
-- TOC entry 491 (class 1255 OID 227392)
-- Name: fn_withoutDesc_triggers_test(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION "fn_withoutDesc_triggers_test"(_schemaname character varying) RETURNS TABLE(tab character varying, tg_name character varying, function_shema character varying, fnresult json)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT 
   --c.*,
      CONCAT(n.nspname,'.', c.relname)::varchar as tablename, 
      t.tgname::varchar as tg_name,
      concat(pn.nspname,'.', p.proname)::varchar as functionschema ,
      t.tgargs as fnresult
  FROM pg_trigger as t
       JOIN pg_class as c on c.oid = t.tgrelid 
       JOIN pg_namespace as n on n.oid = c.relnamespace
       JOIN pg_proc as p on p.oid = t.tgfoid
       JOIN pg_namespace pn ON pn.oid = p.pronamespace
  WHERE n.nspname = _schemaname ;
END;
$$;


ALTER FUNCTION public."fn_withoutDesc_triggers_test"(_schemaname character varying) OWNER TO postgres;

--
-- TOC entry 3411 (class 0 OID 0)
-- Dependencies: 491
-- Name: FUNCTION "fn_withoutDesc_triggers_test"(_schemaname character varying); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION "fn_withoutDesc_triggers_test"(_schemaname character varying) IS ' -- triggers with wrong schemas and names';


--
-- TOC entry 492 (class 1255 OID 227393)
-- Name: fn_yesorno(boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fn_yesorno(b boolean, OUT y character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
BEGIN
	IF b THEN
    	y = 'ДА';
    ELSE
    	y = 'НЕТ';
    END IF;

END;
$$;


ALTER FUNCTION public.fn_yesorno(b boolean, OUT y character varying) OWNER TO postgres;

--
-- TOC entry 493 (class 1255 OID 227394)
-- Name: isnumeric(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION isnumeric(text) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
DECLARE x NUMERIC;
BEGIN
    x = $1::NUMERIC;
    RETURN TRUE;
EXCEPTION WHEN others THEN
    RETURN FALSE;
END;
$_$;


ALTER FUNCTION public.isnumeric(text) OWNER TO postgres;

--
-- TOC entry 494 (class 1255 OID 227395)
-- Name: raiserror(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION raiserror(_hint character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
	RAISE EXCEPTION 'usererror' USING HINT=concat(_hint,'+++___');
END;
$$;


ALTER FUNCTION public.raiserror(_hint character varying) OWNER TO postgres;

SET search_path = reports, pg_catalog;

--
-- TOC entry 495 (class 1255 OID 227396)
-- Name: fn_call_report(json); Type: FUNCTION; Schema: reports; Owner: postgres
--

CREATE FUNCTION fn_call_report(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $_$
DECLARE
  report_path VARCHAR(350);
  _roles json;
  _userroles json;
  _sess char(36);
  _userid char(36);
  _fn_title VARCHAR(350);  
  squery varchar;
  _template_path varchar(300);
  _ishtml boolean; 
BEGIN
  report_path = injson->>'report_path';
  _sess =injson->>'sess';
  injson = injson->>'injson';
  
  SELECT 
  	rl.functitle,
    rl.roles,
    rl.template_path,
    rl.ishtml
  FROM reports.reportlist as rl
  WHERE rl.path = report_path
  INTO _fn_title, _roles, _template_path, _ishtml;
  
  IF _fn_title is null THEN
  	PERFORM raiserror('404');
  END IF; 
  
  SELECT
      u.id,
      u.roles
  FROM framework.users as u
      JOIN framework.sess as s on s.userid = u.id
  WHERE s.id = _sess
  INTO _userid, _userroles;
  
  IF _roles is not null and (
      SELECT count(*) 
      FROM json_array_elements_text(_roles)
    ) <> 0 AND (
    	SELECT count(*) 
        FROM json_array_elements_text(_userroles)
    ) <> 0
  THEN
 	IF (
          SELECT 
              count(*) 
          FROM json_array_elements_text(_userroles) as u
              JOIN json_array_elements_text(_roles) as r on 
                  u.value::varchar::int = r.value::varchar::int
        ) = 0 AND (
          SELECT 
              count(*) 
          FROM json_array_elements_text(_userroles)
          WHERE value::varchar = '0'
        ) = 0
 	THEN
    	PERFORM raiserror('access denied');
    END IF;
  END IF;
  
  SELECT injson::jsonb || (
  	SELECT row_to_json(d) 
    FROM (
    	SELECT _userid as userid
    ) as d
  )::jsonb
  INTO injson;

  squery = concat('
    SELECT 
       row_to_json(d) 
    FROM
       ( 
         select 
         	outjson
            
         from ',_fn_title,'($1)
       ) as d;'
    );
    
  EXECUTE format(squery) INTO outjson USING injson;
  
  outjson =  (outjson::jsonb||(SELECT row_to_json(d) FROM (
  	SELECT 
      _template_path as template_path,
      _ishtml as ishtml
  ) as d)::jsonb)::jsonb;
  
  outjson = coalesce(outjson,'{}');
 
END;
$_$;


ALTER FUNCTION reports.fn_call_report(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3412 (class 0 OID 0)
-- Dependencies: 495
-- Name: FUNCTION fn_call_report(injson json, OUT outjson json); Type: COMMENT; Schema: reports; Owner: postgres
--

COMMENT ON FUNCTION fn_call_report(injson json, OUT outjson json) IS 'ФУНКЦИЯ ВЫЗОВА ФУНКЦИИ ОТЧЁТА';


--
-- TOC entry 496 (class 1255 OID 227397)
-- Name: fn_getmethod_info(json); Type: FUNCTION; Schema: reports; Owner: postgres
--

CREATE FUNCTION fn_getmethod_info(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
	_id int; 
BEGIN
	_id = injson->>'id';
	

	SELECT
    	row_to_json(d)
    FROM (
	  SELECT
		  s.methodname,
		  s.methodtype,
		  mt.methotypename
	  FROM framework.spapi as s
		  LEFT JOIN framework.methodtypes as mt on mt.id = s.methodtype
	  WHERE s.id = _id
	) as d
	into outjson;
    
    outjson = coalesce(outjson,'{}');
END;
$$;


ALTER FUNCTION reports.fn_getmethod_info(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3413 (class 0 OID 0)
-- Dependencies: 496
-- Name: FUNCTION fn_getmethod_info(injson json, OUT outjson json); Type: COMMENT; Schema: reports; Owner: postgres
--

COMMENT ON FUNCTION fn_getmethod_info(injson json, OUT outjson json) IS 'get method info';


--
-- TOC entry 498 (class 1255 OID 227398)
-- Name: fn_getreports_fn(json); Type: FUNCTION; Schema: reports; Owner: postgres
--

CREATE FUNCTION fn_getreports_fn(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE 
	_substr varchar(130);
BEGIN

  _substr = injson->>'substr';	

  _substr = CONCAT('%',upper(coalesce(_substr,'%')),'%');	

  SELECT
  	array_to_json(array_agg(row_to_json(p)))
  FROM (
	SELECT 
	  format('%I.%I', ns.nspname, p.proname) as label,
	  format('%I.%I', ns.nspname, p.proname) as value,
	  'user' as functype 
	FROM pg_proc p 
	INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)
	WHERE ns.nspname in ('reports') and  
	  upper(format('%I.%I', ns.nspname, p.proname)) like _substr 
  ) as p
  INTO outjson;
  
  outjson = coalesce(outjson,'[]');
END;
$$;


ALTER FUNCTION reports.fn_getreports_fn(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3414 (class 0 OID 0)
-- Dependencies: 498
-- Name: FUNCTION fn_getreports_fn(injson json, OUT outjson json); Type: COMMENT; Schema: reports; Owner: postgres
--

COMMENT ON FUNCTION fn_getreports_fn(injson json, OUT outjson json) IS 'get report info';


--
-- TOC entry 499 (class 1255 OID 227399)
-- Name: fn_report_copy(json); Type: FUNCTION; Schema: reports; Owner: postgres
--

CREATE FUNCTION fn_report_copy(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
  _id int;
  _newid int;	
  _nw json;
BEGIN
	/* REPORT COPY (DUBLICATE) */
	_userid = injson->>'userid';
    _id = injson->>'id';
    
    _newid = nextval('reports.reportlist_id_seq'::regclass);
	
    
    INSERT INTO reports.reportlist (
      id, title, roles,
      "path", "template",
      template_path, functitle,
      section, completed, filename
    )
    SELECT
      _newid, r.title, r.roles,
      concat(r."path",'_copy'), r."template",
      r.template_path, r.functitle,
      r.section, r.completed, r.filename
    FROM reports.reportlist as r
    WHERE r.id = _id;
    
    INSERT INTO reports.reportparams (
      reportlistid, ptitle, func_paramtitle,
      ptype, apimethod, completed, orderby 
    )
    SELECT
      _newid, rp.ptitle, rp.func_paramtitle,
      rp.ptype, rp.apimethod, rp.completed, rp.orderby 
    FROM reports.reportparams as rp
    WHERE rp.reportlistid = _id;
    
    SELECT
    	row_to_json(d)
    FROM (
      SELECT r.*
      FROM reports.reportlist as r
      WHERE r.id = _id
    ) as d
    INTO _nw;
    
    INSERT INTO framework.logtable (
      tablename, tableid, opertype,
      oldata, newdata, userid
    ) VALUES (
    	'reports.reportlist', _newid, '1',
        '{}'::json, _nw, _userid
    );
END;
$$;


ALTER FUNCTION reports.fn_report_copy(injson json) OWNER TO postgres;

--
-- TOC entry 3415 (class 0 OID 0)
-- Dependencies: 499
-- Name: FUNCTION fn_report_copy(injson json); Type: COMMENT; Schema: reports; Owner: postgres
--

COMMENT ON FUNCTION fn_report_copy(injson json) IS 'REPORT COPY (DUBLICATE)';


--
-- TOC entry 500 (class 1255 OID 227400)
-- Name: fn_report_getone(json); Type: FUNCTION; Schema: reports; Owner: postgres
--

CREATE FUNCTION fn_report_getone(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
  _id int;
  _userroles json;
  _reportroles json;
BEGIN
	_userid = injson->>'userid';
    _id = injson->>'id';
    
    SELECT
    	u.roles
    FROM framework.users as u
    WHERE u.id = _userid
	INTO _userroles;
    
	SELECT 
    	rl.roles
    FROM reports.reportlist as rl
    WHERE rl.id = _id
    INTO _reportroles;
    
    
    IF _reportroles is not null AND
    	(SELECT count(*) 
         FROM json_array_elements_text(_reportroles)) <> 0
	THEN
    	IF (SELECT count(*) 
             FROM json_array_elements_text(_reportroles) as r
                JOIN json_array_elements_text(_userroles) as ur on 
                    ur.value::varchar = r.value::varchar) = 0

    	THEN
        	PERFORM raiserror('access denied');
        END IF;                     
    END IF;
    
    SELECT 
   		row_to_json(d)
 	FROM (
	  SELECT 
		  rl.id,
		  rl.filename,
		  rl.template_path,
		  rl.title,
		  rl.path,
		  COALESCE((
			SELECT 
				array_to_json(array_agg(row_to_json(p)))
			FROM (
			  SELECT
				  rp.id,
				  rp.apimethod,
				  rp.func_paramtitle,
				  rp.ptitle,
				  rp.ptype,
				  pt.typename
			  FROM reports.reportparams as rp
				  LEFT JOIN reports.paramtypes as pt on pt.id = rp.ptype
			  WHERE rp.reportlistid = rl.id
				  AND rp.completed
			ORDER BY rp.orderby
		  ) as p
	  ),'[]') as params	
	  FROM reports.reportlist as rl
	  WHERE rl.id = _id and rl.completed
	) as d
    INTO outjson;
    
    outjson = coalesce(outjson,'{}');

END;
$$;


ALTER FUNCTION reports.fn_report_getone(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3416 (class 0 OID 0)
-- Dependencies: 500
-- Name: FUNCTION fn_report_getone(injson json, OUT outjson json); Type: COMMENT; Schema: reports; Owner: postgres
--

COMMENT ON FUNCTION fn_report_getone(injson json, OUT outjson json) IS 'get report by id';


--
-- TOC entry 501 (class 1255 OID 227401)
-- Name: tr_reportlist_tr(); Type: FUNCTION; Schema: reports; Owner: postgres
--

CREATE FUNCTION tr_reportlist_tr() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF NEW."template" is not null THEN
    IF (
	  SELECT
          count(*)
      FROM json_array_elements_text(NEW."template")
	)>1 
	THEN
    	PERFORM raiserror('more than 1 file');
    END IF;  
	
    IF NEW."template"->0 is not null THEN
    	NEW.template_path = (NEW."template"->0)::json->>'uri';
        IF (NEW."template"->0)::json->>'filename' not like '%.xlsx' THEN
	    	PERFORM raiserror('template must be xlsx');	
        END IF; 
    END IF; 
  END IF;
  
  IF NEW.functitle is not null THEN
    IF (SELECT 
          count(*)
        FROM pg_proc p 
        INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)
        WHERE ns.nspname not in ('pg_catalog','information_schema') and 
        		format('%I.%I', ns.nspname, p.proname) = NEW.functitle) = 0 THEN
	    	PERFORM raiserror('can not found function');	
    END IF;
  END IF; 
  
  
  NEW.filename = (NEW."template"->0)::json->>'filename';
  NEW.completed = false;
  
  IF 
  	coalesce(NEW.title,'') <>'' and
 	COALESCE(NEW."path",'')<>'' and
  	NEW.template is not null and
  	coalesce(NEW.template_path,'')<>'' and
  	coalesce(NEW.functitle,'')<>'' and
  
  	coalesce(NEW.section,'')<>'' 
    
  THEN
  	 NEW.completed = true;
  END IF;   
  
  RETURN NEW;
END;
$$;


ALTER FUNCTION reports.tr_reportlist_tr() OWNER TO postgres;

--
-- TOC entry 502 (class 1255 OID 227402)
-- Name: tr_reportlist_tr_ins(); Type: FUNCTION; Schema: reports; Owner: postgres
--

CREATE FUNCTION tr_reportlist_tr_ins() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN

	NEW.title = upper(trim(NEW.title));
    NEW.path = trim(NEW.path);
    
    
    RETURN NEW;

END;
$$;


ALTER FUNCTION reports.tr_reportlist_tr_ins() OWNER TO postgres;

--
-- TOC entry 503 (class 1255 OID 227403)
-- Name: tr_reportlist_trigger(); Type: FUNCTION; Schema: reports; Owner: postgres
--

CREATE FUNCTION tr_reportlist_trigger() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF NEW."template" is not null THEN
    IF 
      (SELECT
          count(*)
      FROM json_array_elements_text(NEW."template"))>1 THEN
    	PERFORM raiserror('more than 1 file');
    END IF;  
    IF NEW."template"->0 is not null THEN
    	NEW.template_path = (NEW."template"->0)::json->>'uri';
        IF (NEW."template"->0)::json->>'filename' not like '%.xlsx' THEN
	    	PERFORM raiserror('Template must be xlsx');	
        END IF; 
    END IF; 
  END IF;
  
  IF NEW.functitle is not null THEN
    IF (SELECT 
          count(*)
        FROM pg_proc p 
        INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)
        WHERE ns.nspname not in ('pg_catalog','information_schema') and 
        		format('%I.%I', ns.nspname, p.proname) = NEW.functitle) = 0 THEN
	    	PERFORM raiserror('Can not found the function');	
    END IF;
  END IF; 
  
  
  NEW.filename = (NEW."template"->0)::json->>'filename';
  NEW.completed = false;
  
  IF 
  	coalesce(NEW.title,'') <>'' and
 	COALESCE(NEW."path",'')<>'' and
  	NEW.template is not null and
  	coalesce(NEW.template_path,'')<>'' and
  	coalesce(NEW.functitle,'')<>'' and
  
  	coalesce(NEW.section,'')<>'' 
    
  THEN
  	 NEW.completed = true;
  END IF;   
  
  RETURN NEW;
END;
$$;


ALTER FUNCTION reports.tr_reportlist_trigger() OWNER TO postgres;

--
-- TOC entry 504 (class 1255 OID 227404)
-- Name: tr_reportparams_tr(); Type: FUNCTION; Schema: reports; Owner: postgres
--

CREATE FUNCTION tr_reportparams_tr() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN

	NEW.completed = false;

  IF NEW.reportlistid is not null and
  	 coalesce(NEW.ptitle,'') <> '' and
  	 coalesce(NEW.func_paramtitle,'')<>'' and
  	 NEW.ptype is not null 
  THEN
  	NEW.completed = true;
  	IF NEW.ptype in (2,3,5) and NEW.apimethod is null THEN
    	NEW.completed = false;
    END IF;
  END IF; 
  
  RETURN NEW;

END;
$$;


ALTER FUNCTION reports.tr_reportparams_tr() OWNER TO postgres;

SET search_path = sqlmanager, pg_catalog;

--
-- TOC entry 497 (class 1255 OID 227405)
-- Name: fn_fk_maintablecols_select(json); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION fn_fk_maintablecols_select(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  _tablename varchar(300);
BEGIN

	_tablename = (injson->'inputs')->>'tablename';
    _tablename = COALESCE(_tablename, (injson->'inputs')->>'maintablename');
      
    SELECT 
      array_to_json(array_agg(row_to_json(d)))
    FROM (
      SELECT 
      	column_name as label, column_name as value
      FROM information_schema.columns
      WHERE concat(table_schema,'.',table_name) = _tablename
    ) as d
    INTO outjson;
    
    outjson = coalesce(outjson,'[]');

END;
$$;


ALTER FUNCTION sqlmanager.fn_fk_maintablecols_select(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3417 (class 0 OID 0)
-- Dependencies: 497
-- Name: FUNCTION fn_fk_maintablecols_select(injson json, OUT outjson json); Type: COMMENT; Schema: sqlmanager; Owner: postgres
--

COMMENT ON FUNCTION fn_fk_maintablecols_select(injson json, OUT outjson json) IS 'FOREIGN KEYS MAINTABLE FIELDS';


--
-- TOC entry 505 (class 1255 OID 227406)
-- Name: fn_fk_parentcols_sel(json); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION fn_fk_parentcols_sel(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
	_parentablename varchar(200);

BEGIN

	_parentablename = (injson->'data')->>
    (
      SELECT
          value->>'key'
      FROM json_array_elements(injson->'config') as c
      WHERE (c.value->>'col') = 'parentablename'
    );
    
    IF coalesce(_parentablename,'') = ''
    THEN
    	PERFORM raiserror('pt is empty');
    END IF;
    
  SELECT 
  	array_to_json(array_agg(row_to_json(d)))
  FROM (
	SELECT column_name as label,
	  column_name as value
	FROM information_schema.columns
	WHERE concat(table_schema,'.',table_name) = _parentablename
  ) as d
  INTO outjson;
  
  outjson = coalesce(outjson,'[]');



END;
$$;


ALTER FUNCTION sqlmanager.fn_fk_parentcols_sel(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3418 (class 0 OID 0)
-- Dependencies: 505
-- Name: FUNCTION fn_fk_parentcols_sel(injson json, OUT outjson json); Type: COMMENT; Schema: sqlmanager; Owner: postgres
--

COMMENT ON FUNCTION fn_fk_parentcols_sel(injson json, OUT outjson json) IS 'FK PARENT TABLE FIELDS';


--
-- TOC entry 506 (class 1255 OID 227407)
-- Name: fn_fk_tables_sel(json); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION fn_fk_tables_sel(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN

	SELECT
    	array_to_json(array_agg(row_to_json(d)))
    FROM (
        SELECT 
            concat(TABLE_SCHEMA,'.',TABLE_NAME) as value,
            concat(TABLE_SCHEMA,'.',TABLE_NAME) as label, *
        FROM INFORMATION_SCHEMA.TABLES
        ORDER BY TABLE_SCHEMA, TABLE_NAME 
        
    ) as d
    INTO outjson;
    
    outjson = coalesce(outjson,'[]');


END;
$$;


ALTER FUNCTION sqlmanager.fn_fk_tables_sel(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3419 (class 0 OID 0)
-- Dependencies: 506
-- Name: FUNCTION fn_fk_tables_sel(injson json, OUT outjson json); Type: COMMENT; Schema: sqlmanager; Owner: postgres
--

COMMENT ON FUNCTION fn_fk_tables_sel(injson json, OUT outjson json) IS 'TABLES';


--
-- TOC entry 507 (class 1255 OID 227408)
-- Name: fn_foreignkeys_onload(json); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION fn_foreignkeys_onload(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
BEGIN

	_userid = injson->>'userid';
    
    UPDATE sqlmanager.foreignkeys as f
    SET noscript = true;
    
    UPDATE sqlmanager.foreignkeys as f
    SET 
      ftitle = con.conname,
      maintablename = con.conrelid::regclass,
      maintableid = con.conrelid,
      parentablename = att.attrelid::regclass,
      parenttableid = att.attrelid,
      maincol = att2.attname,
      parentcol = att.attname,
      userid = _userid
    FROM (
      SELECT 
          unnest(con1.conkey) as "parent", 
          unnest(con1.confkey) as "child", 
          con1.confrelid, 
          con1.conrelid,
          con1.conname,
          con1.oid
      FROM pg_class cl
          join pg_namespace ns on cl.relnamespace = ns.oid
          join pg_constraint con1 on con1.conrelid = cl.oid
      WHERE
          --cl.relname = 'child_table'
          --and 
          ns.nspname not like  'pg_%'
          and con1.contype = 'f'
   ) con
     JOIN pg_attribute att on att.attrelid = con.confrelid and 
         att.attnum = con.child
     JOIN pg_class cl on cl.oid = con.confrelid
     JOIN pg_attribute att2 on att2.attrelid = con.conrelid and 
         att2.attnum = con.parent
   WHERE con.oid = f.id;
   
   INSERT INTO sqlmanager.foreignkeys (
   		id, ftitle, maintablename, maintableid,
		parentablename, parenttableid,
 		maincol, parentcol, userid
   ) 
   SELECT       
   	  con.oid, con.conname, con.conrelid::regclass, con.conrelid,
      att.attrelid::regclass, att.attrelid,
      att2.attname, att.attname, _userid
   FROM (
      SELECT 
          unnest(con1.conkey) as "parent", 
          unnest(con1.confkey) as "child", 
          con1.confrelid, con1.conrelid,
          con1.conname, con1.oid
      FROM pg_class cl
          JOIN pg_namespace ns on cl.relnamespace = ns.oid
          JOIN pg_constraint con1 on con1.conrelid = cl.oid
      WHERE ns.nspname not like  'pg_%' and con1.contype = 'f'
   ) con
     JOIN pg_attribute att on att.attrelid = con.confrelid and 
         att.attnum = con.child
     JOIN pg_class cl on cl.oid = con.confrelid
     JOIN pg_attribute att2 on att2.attrelid = con.conrelid and 
         att2.attnum = con.parent
   WHERE con.oid not in (
   		SELECT id FROM sqlmanager.foreignkeys
   );
   
   DELETE FROM sqlmanager.foreignkeys
   WHERE id not in (
     SELECT       
        con.oid
     FROM (
        SELECT 
            unnest(con1.conkey) as "parent", 
            unnest(con1.confkey) as "child", 
            con1.confrelid, con1.conrelid,
            con1.conname, con1.oid
        FROM pg_class cl
            JOIN pg_namespace ns on cl.relnamespace = ns.oid
            JOIN pg_constraint con1 on con1.conrelid = cl.oid
        WHERE ns.nspname not like  'pg_%' and con1.contype = 'f'
     ) con
       JOIN pg_attribute att on att.attrelid = con.confrelid and 
           att.attnum = con.child
       JOIN pg_class cl on cl.oid = con.confrelid
       JOIN pg_attribute att2 on att2.attrelid = con.conrelid and 
           att2.attnum = con.parent
   );
    
   UPDATE sqlmanager.foreignkeys as f
   SET noscript = false;
END;
$$;


ALTER FUNCTION sqlmanager.fn_foreignkeys_onload(injson json) OWNER TO postgres;

--
-- TOC entry 3420 (class 0 OID 0)
-- Dependencies: 507
-- Name: FUNCTION fn_foreignkeys_onload(injson json); Type: COMMENT; Schema: sqlmanager; Owner: postgres
--

COMMENT ON FUNCTION fn_foreignkeys_onload(injson json) IS 'FOREIGN KEYS';


--
-- TOC entry 508 (class 1255 OID 227409)
-- Name: fn_function_add(json); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION fn_function_add(injson json, OUT _redirect character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$
DECLARE 
  schemaname varchar(350);	
  squery varchar;
  fn_title varchar(150);
  _userid int;
  _id int;
  _nw json;
BEGIN
	schemaname = injson->>'schemaname';
    _userid =injson->>'userid';
    IF COALESCE(schemaname,'') = ''
    THEN
    	PERFORM raiserror('schema name is empty');
    END IF;
    
    fn_title = CONCAT('"',schemaname ,'"."fn_untitle_', (
      SELECT 
          COUNT(p.oid)::varchar
      FROM pg_proc as p
          JOIN pg_namespace ns ON (p.pronamespace = ns.oid)
      WHERE ns.nspname = fn_title
    ), '"');
    
    squery = CONCAT('
      CREATE FUNCTION ',fn_title,' ()
      RETURNS void AS
      $body$
      DECLARE BEGIN END;
      $body$
      LANGUAGE ''plpgsql'' VOLATILE CALLED ON NULL INPUT SECURITY INVOKER;
    ');
    
    
    EXECUTE squery;
    SELECT 
        p.oid
    FROM pg_proc as p
        JOIN pg_namespace ns ON (p.pronamespace = ns.oid)
    WHERE concat('"',ns.nspname,'"."',p.proname,'"') = fn_title
    	and p.oid not in (
        	SELECT id FROM sqlmanager.functionslist 
        )
    INTO _id;
    
    INSERT INTO sqlmanager.functionslist(
      id, functionschema,
      functiontitle,
      fullname, descr,
      userid, functionfulltitle, 
      dll
    )
    SELECT 
        p.oid, ns.nspname, p.proname, 
        concat(ns.nspname,'.', p.proname,'(', (
          	SELECT 
            	string_agg(
                	CONCAT(
                    	an.arg,' ', (
                        	CASE WHEN 
                            am.mode = 'o'
                            THEN 'out'
                            ELSE ''
                            END
                        ),' ',p.typname
                    ),','
                ) 
           	FROM (
              SELECT 
                  row_number() over (order by 0) as rownum, c.typname
              FROM json_array_elements_text(
                  ARRAY_TO_JSON(p.proallargtypes)
              ) as a
                  JOIN pg_type  as c on c.oid = a.value::varchar::int
            
            ) as p
            JOIN (
            	SELECT 
                  row_number() over (order by 0) as rownum, vv.value as arg 
                FROM json_array_elements_text(
                  ARRAY_TO_JSON(p.proargnames)
              ) as vv
            ) as an on an.rownum = p.rownum
            JOIN (
            	SELECT 
                  row_number() over (order by 0) as rownum, vv.value as mode 
                FROM json_array_elements_text(
                  ARRAY_TO_JSON(p.proargmodes)
              ) as vv
            ) as am on am.rownum = p.rownum
          ),')'),
        COALESCE(pg_catalog.obj_description(p.oid),'<NO TITLE>'),
        _userid, concat( p.proname,'(', (
          	SELECT 
            	string_agg(
                	CONCAT(
                    	an.arg,' ', (
                        	CASE WHEN 
                            am.mode = 'o'
                            THEN 'out'
                            ELSE ''
                            END
                        ),' ',p.typname
                    ),','
                ) 
           	FROM (
              SELECT 
                  row_number() over (order by 0) as rownum, c.typname
              FROM json_array_elements_text(
                  ARRAY_TO_JSON(p.proallargtypes)
              ) as a
                  JOIN pg_type  as c on c.oid = a.value::varchar::int
            
            ) as p
            JOIN (
            	SELECT 
                  row_number() over (order by 0) as rownum, vv.value as arg 
                FROM json_array_elements_text(
                  ARRAY_TO_JSON(p.proargnames)
              ) as vv
            ) as an on an.rownum = p.rownum
            JOIN (
            	SELECT 
                  row_number() over (order by 0) as rownum, vv.value as mode 
                FROM json_array_elements_text(
                  ARRAY_TO_JSON(p.proargmodes)
              ) as vv
            ) as am on am.rownum = p.rownum
          ),')'), 
          pg_get_functiondef(p.oid)
    FROM pg_proc as p
        JOIN pg_namespace ns ON (p.pronamespace = ns.oid)
    WHERE p.oid = _id
    ;
    
    SELECT
    	row_to_json(d)
    FROM (
    	SELECT *
        FROM sqlmanager.functionslist
        WHERE id = _id
    ) as d
    INTO _nw;
    
    _redirect = CONCAT('/trees/function?id=', _id::varchar);
    
    INSERT INTO framework.logtable (
      tablename, tableid, opertype,
      oldata, newdata, userid
    ) VALUES (
      'sqlmanager.functionslist', _id::varchar, '1',
      '{}'::json, _nw, _userid
    );
    
    
    
	

END;
$_$;


ALTER FUNCTION sqlmanager.fn_function_add(injson json, OUT _redirect character varying) OWNER TO postgres;

--
-- TOC entry 3421 (class 0 OID 0)
-- Dependencies: 508
-- Name: FUNCTION fn_function_add(injson json, OUT _redirect character varying); Type: COMMENT; Schema: sqlmanager; Owner: postgres
--

COMMENT ON FUNCTION fn_function_add(injson json, OUT _redirect character varying) IS 'add function';


--
-- TOC entry 509 (class 1255 OID 227410)
-- Name: fn_function_argadd(json); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION fn_function_argadd(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
  _nw json;
  _id int;
  _oid int;
BEGIN

	_oid = injson->>'oid';
    _userid = injson->>'userid';
    
    IF _oid is null
    THEN
    	PERFORM raiserror('function oid is empty');
    END IF;
    
    _id = nextval('sqlmanager.functionargs_id_seq'::regclass);
    
    INSERT INTO sqlmanager.functionargs(
      id, oid, argname, 
      argtype, argmode, userid 
    ) VALUES (
      _id, _oid, CONCAT('untitle_', _id::varchar),
      'int', 'input', _userid
    );
    
    INSERT INTO framework.logtable (
      tablename, tableid, opertype,
      oldata, newdata, userid
    ) VALUES (
      'sqlmanager.functionargs', _id::varchar, '1',
      '{}', _nw, _userid
    );



END;
$$;


ALTER FUNCTION sqlmanager.fn_function_argadd(injson json) OWNER TO postgres;

--
-- TOC entry 3422 (class 0 OID 0)
-- Dependencies: 509
-- Name: FUNCTION fn_function_argadd(injson json); Type: COMMENT; Schema: sqlmanager; Owner: postgres
--

COMMENT ON FUNCTION fn_function_argadd(injson json) IS 'ADD ARGUMENT FOR FUNCTION';


--
-- TOC entry 510 (class 1255 OID 227411)
-- Name: fn_function_args_json(json, json, json); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION fn_function_args_json(_names json, _types json, _modesc json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
	SELECT 
    	array_to_json(array_agg(row_to_json(f)))
    FROM (
    SELECT 
        
        n.arg as argname, (
        	CASE WHEN  tt.mode = 'o'
            THEN 'output'
            WHEN tt.mode = 'b'
            THEN 'input/output'
            ELSE 'input'
            END
        ) as argmode, t.typname as argtype

    FROM (
    	SELECT
    		row_number() over (order by 1) as rownum,
    		nm.value as arg
    	FROM json_array_elements_text(_names) as nm
    ) as n
    LEFT JOIN (
    	  SELECT
          	f.rownum,
            c.typname
          FROM(
            SELECT
                row_number() over (order by 1) as rownum,
                cc.value 
            FROM json_array_elements_text(_types) as cc
          ) as f
          JOIN pg_type  as c on c.oid = f.value::varchar::int
    	) as t on t.rownum = n.rownum
    LEFT JOIN (
          SELECT
              row_number() over (order by 1) as rownum, 
              vv.value as mode
          FROM json_array_elements_text(_modesc) as vv
    	) as tt on tt.rownum = n.rownum
    ORDER BY n.rownum
    ) as f
    INTO outjson;

END;
$$;


ALTER FUNCTION sqlmanager.fn_function_args_json(_names json, _types json, _modesc json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 514 (class 1255 OID 227412)
-- Name: fn_function_args_text(json, json, json); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION fn_function_args_text(_names json, _types json, _modesc json, OUT _str character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
	SELECT 
    	string_agg(
            CONCAT(
             	f.arg,' ', (
                 	CASE WHEN
                    f.mode = 'o'
                    THEN 'out'
                    WHEN
                    f.mode = 'b'
                    THEN 'inout'
                    ELSE ''
                    END
                 ),' ', f.typname
            ),','
        ) as str 
    FROM (
    SELECT 
    	n.rownum, tt.mode, n.arg, t.typname

    FROM (
    	SELECT
    		row_number() over (order by 1) as rownum,
    		nm.value as arg
    	FROM json_array_elements_text(_names) as nm
    ) as n
    LEFT JOIN (
    	  SELECT
          	f.rownum,
            c.typname
          FROM(
            SELECT
                row_number() over (order by 1) as rownum,
                cc.value 
            FROM json_array_elements_text(_types) as cc
          ) as f
          JOIN pg_type  as c on c.oid = f.value::varchar::int
    	) as t on t.rownum = n.rownum
    LEFT JOIN (
          SELECT
              row_number() over (order by 1) as rownum, 
              vv.value as mode
          FROM json_array_elements_text(_modesc) as vv
    	) as tt on tt.rownum = n.rownum
    ORDER BY n.rownum
    ) as f
    INTO _str;

END;
$$;


ALTER FUNCTION sqlmanager.fn_function_args_text(_names json, _types json, _modesc json, OUT _str character varying) OWNER TO postgres;

--
-- TOC entry 515 (class 1255 OID 227413)
-- Name: fn_function_onload(json); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION fn_function_onload(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
	_id int;
    _userid int;
	
BEGIN
	_id = injson->>'id';
    _userid = injson->>'userid';
    
    
    UPDATE sqlmanager.functionslist
    SET noscript = true
    WHERE id = _id; 
    
    UPDATE sqlmanager.functionslist as f
    SET
		functiontitle = p.proname,
        functionschema = ns.nspname, 
        fullname = concat(
        	ns.nspname,'.', p.proname,'(', 
        	sqlmanager.fn_function_args_text(
            	ARRAY_TO_JSON(p.proargnames),
                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),
                ARRAY_TO_JSON(p.proargmodes)
            ) ,')'
        ),
        descr = COALESCE(pg_catalog.obj_description(p.oid),'<NO TITLE>'),
        userid = _userid,
        functionfulltitle = concat( p.proname,'(',
        	sqlmanager.fn_function_args_text(
            	ARRAY_TO_JSON(p.proargnames),
                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),
                ARRAY_TO_JSON(p.proargmodes)
            ),')'),
          dll = pg_get_functiondef(p.oid),
          args = sqlmanager.fn_function_args_json(
            	ARRAY_TO_JSON(p.proargnames),
                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),
                ARRAY_TO_JSON(p.proargmodes)
          ),
          returntype = t.typname
    FROM pg_proc as p
    	JOIN pg_namespace ns ON (p.pronamespace = ns.oid)
    	LEFT JOIN pg_type as t on t.oid = p.prorettype

    WHERE p.oid = f.id and f.id= _id;
    
    DELETE FROM sqlmanager.functionslist 
    WHERE id = _id and id not in (
    	SELECT p.oid
        FROM pg_proc as p
         INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)
    	WHERE ns.nspname not in ('pg_catalog','information_schema')
    );
    
    UPDATE sqlmanager.functionslist
    SET noscript = false
    WHERE id = _id; 
END;
$$;


ALTER FUNCTION sqlmanager.fn_function_onload(injson json) OWNER TO postgres;

--
-- TOC entry 3423 (class 0 OID 0)
-- Dependencies: 515
-- Name: FUNCTION fn_function_onload(injson json); Type: COMMENT; Schema: sqlmanager; Owner: postgres
--

COMMENT ON FUNCTION fn_function_onload(injson json) IS 'Function onload';


--
-- TOC entry 520 (class 1255 OID 227414)
-- Name: fn_functions_onload(json); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION fn_functions_onload(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
BEGIN
	_userid = injson->>'userid';
    UPDATE sqlmanager.functionslist
    SET noscript = true; 
   
    UPDATE sqlmanager.functionslist as f
    SET
		functiontitle = p.proname,
        functionschema = ns.nspname, 
        fullname = concat(
        	ns.nspname,'.', p.proname,'(', 
        	sqlmanager.fn_function_args_text(
            	ARRAY_TO_JSON(p.proargnames),
                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),
                ARRAY_TO_JSON(p.proargmodes)
            ) ,')'
        ),
        descr = COALESCE(pg_catalog.obj_description(p.oid),'<NO TITLE>'),
        userid = _userid,
        functionfulltitle = concat( p.proname,'(',
        	sqlmanager.fn_function_args_text(
            	ARRAY_TO_JSON(p.proargnames),
                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),
                ARRAY_TO_JSON(p.proargmodes)
            ),')'),
          dll = pg_get_functiondef(p.oid),
          args = sqlmanager.fn_function_args_json(
            	ARRAY_TO_JSON(p.proargnames),
                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),
                ARRAY_TO_JSON(p.proargmodes)
          ),
          returntype = t.typname
    FROM pg_proc as p
    	JOIN pg_namespace ns ON (p.pronamespace = ns.oid)
    	LEFT JOIN pg_type as t on t.oid = p.prorettype

    WHERE p.oid = f.id and (
    	f.functiontitle <> p.proname OR
        f.functionschema <> ns.nspname OR
        f.descr <> COALESCE(pg_catalog.obj_description(p.oid),'<NO TITLE>') OR
        f.dll <> pg_get_functiondef(p.oid)
    );
    
    INSERT INTO sqlmanager.functionslist(
      id, functionschema,
      functiontitle,
      fullname, descr,
      userid, functionfulltitle, 
      dll, args, returntype
    )
    SELECT 
        p.oid, ns.nspname, p.proname, 
        concat(ns.nspname,'.', p.proname,'(', 
        	sqlmanager.fn_function_args_text(
            	ARRAY_TO_JSON(p.proargnames),
                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),
                ARRAY_TO_JSON(p.proargmodes)
            )
        ,')'),
        COALESCE(pg_catalog.obj_description(p.oid),'<NO TITLE>'),
        _userid, concat( p.proname,'(', 
        	sqlmanager.fn_function_args_text(
            	ARRAY_TO_JSON(p.proargnames),
                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),
                ARRAY_TO_JSON(p.proargmodes)
            )
        ,')'), 
          pg_get_functiondef(p.oid),
		  sqlmanager.fn_function_args_json(
            	ARRAY_TO_JSON(p.proargnames),
                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),
                ARRAY_TO_JSON(p.proargmodes)
          )
          , t.typname
    FROM pg_proc as p
        JOIN pg_namespace ns ON (p.pronamespace = ns.oid)
       	LEFT JOIN pg_type as t on t.oid = p.prorettype
    WHERE ns.nspname not in ('pg_catalog','information_schema')
    	and p.oid not in (
        	SELECT id FROM sqlmanager.functionslist 
        )
    ;
    
    DELETE FROM sqlmanager.functionslist 
    WHERE id not in (
    	SELECT p.oid
        FROM pg_proc as p
         INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)
    	WHERE ns.nspname not in ('pg_catalog','information_schema')
    );

    UPDATE sqlmanager.functionslist
    SET noscript = false; 
END;
$$;


ALTER FUNCTION sqlmanager.fn_functions_onload(injson json) OWNER TO postgres;

--
-- TOC entry 3424 (class 0 OID 0)
-- Dependencies: 520
-- Name: FUNCTION fn_functions_onload(injson json); Type: COMMENT; Schema: sqlmanager; Owner: postgres
--

COMMENT ON FUNCTION fn_functions_onload(injson json) IS 'functions_onload ';


--
-- TOC entry 516 (class 1255 OID 227415)
-- Name: fn_modes_sel(json); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION fn_modes_sel(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE

BEGIN

	SELECT
    	array_to_json(array_agg(row_to_json(d)))
    FROM (
    	SELECT
        	value as value,
            value as label
        FROM json_array_elements_text('["input","output","input/output"]')
    	
    ) as d
    INTO outjson;

END;
$$;


ALTER FUNCTION sqlmanager.fn_modes_sel(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3425 (class 0 OID 0)
-- Dependencies: 516
-- Name: FUNCTION fn_modes_sel(injson json, OUT outjson json); Type: COMMENT; Schema: sqlmanager; Owner: postgres
--

COMMENT ON FUNCTION fn_modes_sel(injson json, OUT outjson json) IS 'functions arguments types';


--
-- TOC entry 517 (class 1255 OID 227416)
-- Name: fn_schemalist_onload(json); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION fn_schemalist_onload(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
BEGIN
	_userid = injson->>'userid';
    
   UPDATE sqlmanager.schemalist
   SET noscript = true; 
    
   UPDATE sqlmanager.schemalist as s
   SET 
   	schemaname = n.nspname,
   	schemadescr = COALESCE( pg_catalog.obj_description(n.oid, 'pg_namespace'),'<NO DESCR>'),
    userid = _userid
   FROM pg_catalog.pg_namespace as n
   WHERE
    n.oid = s.id AND
    n.nspname !~ '^pg_' AND 
   	n.nspname <> 'information_schema';

    
   INSERT INTO sqlmanager.schemalist (
    id, schemaname,
    schemadescr,
    userid
   ) 
   SELECT 
      n.oid, n.nspname,                                                     
      COALESCE( pg_catalog.obj_description(n.oid, 'pg_namespace'),'<NO DESCR>') AS descr,
      _userid
   FROM pg_catalog.pg_namespace n                                       
   WHERE n.nspname !~ '^pg_' AND n.nspname <> 'information_schema'
   			and n.oid not in (
            	SELECT id
                FROM sqlmanager.schemalist
            );
            
	DELETE FROM sqlmanager.schemalist
    WHERE id not in (
       SELECT 
          n.oid
       FROM pg_catalog.pg_namespace n                                       
       WHERE n.nspname !~ '^pg_' AND n.nspname <> 'information_schema'
    );  	
	
	INSERT INTO sqlmanager.schemaobjects (
	  oname, schemaname, linkurl
	) 
	SELECT
	  'tables', s.schemaname, 'tables'
	FROM sqlmanager.schemalist as s
	WHERE (
	    SELECT
		  count(c.id)
		FROM sqlmanager.schemaobjects as c
		WHERE c.schemaname = s.schemaname and c.oname = 'tables'
	) = 0 
	UNION ALL
	SELECT
	  'functions', s.schemaname, 'functions'
	FROM sqlmanager.schemalist as s
	WHERE (
	    SELECT
		  count(c.id)
		FROM sqlmanager.schemaobjects as c
		WHERE c.schemaname = s.schemaname and c.oname = 'functions'
	) = 0 ;
    
    UPDATE sqlmanager.schemalist
    SET noscript = false; 
END;
$$;


ALTER FUNCTION sqlmanager.fn_schemalist_onload(injson json) OWNER TO postgres;

--
-- TOC entry 3426 (class 0 OID 0)
-- Dependencies: 517
-- Name: FUNCTION fn_schemalist_onload(injson json); Type: COMMENT; Schema: sqlmanager; Owner: postgres
--

COMMENT ON FUNCTION fn_schemalist_onload(injson json) IS 'load schemas';


--
-- TOC entry 518 (class 1255 OID 227417)
-- Name: fn_schemas_sel(json); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION fn_schemas_sel(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
 
BEGIN

	SELECT 
    	array_to_json(array_agg(row_to_json(d)))
    FROM (
      SELECT 
          n.nspname as value,
          n.nspname as label
      FROM pg_catalog.pg_namespace as n
      WHERE
          n.nspname !~ '^pg_' AND 
          n.nspname <> 'information_schema'
    ) as d
    INTO outjson;

END;
$$;


ALTER FUNCTION sqlmanager.fn_schemas_sel(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3427 (class 0 OID 0)
-- Dependencies: 518
-- Name: FUNCTION fn_schemas_sel(injson json, OUT outjson json); Type: COMMENT; Schema: sqlmanager; Owner: postgres
--

COMMENT ON FUNCTION fn_schemas_sel(injson json, OUT outjson json) IS 'select api for schemas';


--
-- TOC entry 519 (class 1255 OID 227418)
-- Name: fn_tablecols_onload(json); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION fn_tablecols_onload(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
  _tablename varchar(350);
BEGIN
  _userid = injson->>'userid';
  
  _tablename = injson->>'tablename';
  
  UPDATE sqlmanager.tablecolumns as tb
  SET 
  	noscript = true
  WHERE tb.tablename = _tablename;
  
  UPDATE sqlmanager.tablecolumns as tb
  SET 
    coldesc = COALESCE(pgd.description, '<NO TITLE>'),
    coltype = t.udt_name,
    size = COALESCE(
        t.character_maximum_length, 
        t.numeric_precision
    ),
    accur = t.numeric_scale,
    defval = t.column_default,
    "notnull" = (CASE WHEN t.is_nullable = 'YES'
    THEN false
    ELSE true
    END) ,
    uniq = (CASE WHEN (
      SELECT count(i.indrelid)
      FROM pg_index as i
           JOIN pg_class as c on c.oid = i.indexrelid
           JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
           JOIN pg_class as tt on tt.oid = i.indrelid
           JOIN pg_attribute a on a.attrelid = tt.oid and a.attnum = ANY(i.indkey)
      WHERE concat(n.nspname,'.', tt.relname) = concat(t.table_schema, '.', t.table_name)
            and i.indisunique and a.attname = t.column_name
      ) > 0
    THEN true
    ELSE false 
    END), userid = _userid  
  
  FROM information_schema.columns as t
      LEFT JOIN pg_catalog.pg_statio_all_tables as st on 
           st.schemaname = t.table_schema and 
           st.relname = t.table_name
      LEFT JOIN pg_catalog.pg_description pgd on 
           pgd.objoid = st.relid and 
           pgd.objsubid = t.ordinal_position
  WHERE concat(t.table_schema, '.', t.table_name) = _tablename and 
        tb.tablename = _tablename and 
        t.column_name = tb.colname;  
  
  INSERT INTO sqlmanager.tablecolumns (
      tablename, colname, coldesc,
      coltype, size, accur, defval,
      "notnull", uniq, userid
  )
  SELECT
    concat(t.table_schema, '.', t.table_name) as tablename,
    t.column_name as colname,
    COALESCE(pgd.description, '<NO TITLE>') as coldesc,
    t.udt_name as coltype,
    COALESCE(
        t.character_maximum_length, 
        t.numeric_precision
    ) as size,
    t.numeric_scale as accur,
    t.column_default as defval,
    CASE WHEN t.is_nullable = 'YES'
    THEN false
    ELSE true
    END as notnull,
    CASE WHEN (
      SELECT count(i.indrelid)
      FROM pg_index as i
           JOIN pg_class as c on c.oid = i.indexrelid
           JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
           JOIN pg_class as tt on tt.oid = i.indrelid
           JOIN pg_attribute a on a.attrelid = tt.oid and a.attnum = ANY(i.indkey)
      WHERE concat(n.nspname,'.', tt.relname) = concat(t.table_schema, '.', t.table_name)
            and i.indisunique and a.attname = t.column_name
      ) > 0
    THEN true
    ELSE false 
    END as uniq, _userid
  FROM information_schema.columns as t
	  LEFT JOIN pg_catalog.pg_statio_all_tables as st on 
		   st.schemaname = t.table_schema and 
		   st.relname = t.table_name
	  LEFT JOIN pg_catalog.pg_description pgd on 
		   pgd.objoid = st.relid and 
		   pgd.objsubid = t.ordinal_position
  WHERE concat(t.table_schema, '.', t.table_name) = _tablename and (
      SELECT count(tb.id)
	  FROM sqlmanager.tablecolumns as tb
	  WHERE tb.tablename = _tablename and tb.colname = t.column_name
  ) = 0;
  
  DELETE FROM sqlmanager.tablecolumns 
  WHERE tablename = _tablename and 
        colname not in (
		    SELECT t.column_name
			FROM information_schema.columns as t
            WHERE concat(t.table_schema, '.', t.table_name) = _tablename
		);
        
  UPDATE sqlmanager.tablecolumns as tb
  SET 
  	noscript = false
  WHERE tb.tablename = _tablename;

END;
$$;


ALTER FUNCTION sqlmanager.fn_tablecols_onload(injson json) OWNER TO postgres;

--
-- TOC entry 3428 (class 0 OID 0)
-- Dependencies: 519
-- Name: FUNCTION fn_tablecols_onload(injson json); Type: COMMENT; Schema: sqlmanager; Owner: postgres
--

COMMENT ON FUNCTION fn_tablecols_onload(injson json) IS 'table columns onload';


--
-- TOC entry 521 (class 1255 OID 227419)
-- Name: fn_tablelist_onload(json); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION fn_tablelist_onload(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
BEGIN
	_userid = injson->>'userid';
   UPDATE sqlmanager.tablelist
   SET noscript = true; 
   
    UPDATE sqlmanager.tablelist as tb
    SET
    	tableschemaname = t.schemaname,
        tablename = t.relname,
        descr =  COALESCE(pg_catalog.obj_description(t.relid),'<NO TITLE>'),
        userid = _userid
    FROM pg_catalog.pg_statio_all_tables as t
    WHERE t.relid = tb.id and t.schemaname not like 'pg_%' and t.schemaname<>'information_schema';

    
    
    INSERT INTO sqlmanager.tablelist (
      id, tableschemaname, tablename, fullname,
      descr, userid 
    )
    SELECT 
        t.relid, t.schemaname, t.relname, concat(t.schemaname,'.', t.relname),
        COALESCE(pg_catalog.obj_description(t.relid),'<NO TITLE>'),
        _userid
    FROM pg_catalog.pg_statio_all_tables as t
    WHERE t.schemaname not like 'pg_%' and t.schemaname<>'information_schema'
			and t.relid not in (
            	SELECT id
                FROM sqlmanager.tablelist
            );
	DELETE FROM sqlmanager.tablelist
    WHERE id not in (
    	SELECT
        	t.relid
		FROM pg_catalog.pg_statio_all_tables as t
    	WHERE t.schemaname not like 'pg_%' and t.schemaname<>'information_schema'
    );
    
   UPDATE sqlmanager.tablelist
   SET noscript = false; 

END;
$$;


ALTER FUNCTION sqlmanager.fn_tablelist_onload(injson json) OWNER TO postgres;

--
-- TOC entry 3429 (class 0 OID 0)
-- Dependencies: 521
-- Name: FUNCTION fn_tablelist_onload(injson json); Type: COMMENT; Schema: sqlmanager; Owner: postgres
--

COMMENT ON FUNCTION fn_tablelist_onload(injson json) IS 'table list';


--
-- TOC entry 582 (class 1255 OID 228589)
-- Name: fn_trigger_fields(json); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION fn_trigger_fields(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  _tablename varchar;
  
BEGIN
	
	_tablename	 = (injson->'inputs')->>'tablename';
    
    /*(
       SELECT value->>'key' 
       FROM json_array_elements(injson->'config')
       WHERE value->>'title' = 'Fields'
    )*/
    IF _tablename is NULL
    THEN
      _tablename = (injson->'data')->>(
         SELECT value->>'key' 
         FROM json_array_elements(injson->'config')
         WHERE value->>'title' = 'Table'
      );
    END IF;
    
    IF _tablename is NULL
    THEN
      _tablename = (injson->'data')->>(
         SELECT value->>'key' 
         FROM json_array_elements(injson->'config')
         WHERE value->>'title' = 'tablename'
      );
    END IF;
    
    SELECT
    	array_to_json(array_agg(row_to_json(d)))
    FROM (
    	SELECT
        	pa.attname as value,
            pa.attname as label
        FROM pg_attribute as pa
        WHERE pa.attrelid::regclass::varchar = _tablename
    ) as d
    INTO outjson;
    
    outjson = COALESCE(outjson,'[]');
	

END;
$$;


ALTER FUNCTION sqlmanager.fn_trigger_fields(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3430 (class 0 OID 0)
-- Dependencies: 582
-- Name: FUNCTION fn_trigger_fields(injson json, OUT outjson json); Type: COMMENT; Schema: sqlmanager; Owner: postgres
--

COMMENT ON FUNCTION fn_trigger_fields(injson json, OUT outjson json) IS 'fields trigger';


--
-- TOC entry 522 (class 1255 OID 227420)
-- Name: fn_triggeractions_str(boolean, boolean, boolean, boolean); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION fn_triggeractions_str(_ins boolean, _upd boolean, _del boolean, _trun boolean, OUT _str character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
  
BEGIN

	IF _ins THEN
    	_str = 'INSERT ';
    END IF;
	
	IF _upd 
    THEN
    	_str = CONCAT(_str, 'OR UPDATE ');
    END IF;
    
	IF _del 
    THEN
    	_str = CONCAT(_str, 'OR DELETE ');
    END IF;
    
	IF _trun 
    THEN
    	_str = CONCAT(_str, 'OR TRUNCATE ');
    END IF;
    
    IF substring(_str,1,2) = 'OR'
    THEN
    	_str = substring(_str,3,length(_str));
    END IF;

END;
$$;


ALTER FUNCTION sqlmanager.fn_triggeractions_str(_ins boolean, _upd boolean, _del boolean, _trun boolean, OUT _str character varying) OWNER TO postgres;

--
-- TOC entry 579 (class 1255 OID 227421)
-- Name: fn_triggers_onload(json); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION fn_triggers_onload(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _userid int;
BEGIN
	_userid = injson->>'userid';
    
    UPDATE sqlmanager.triggers
    SET noscript = TRUE;

	UPDATE sqlmanager.triggers as tg 
    SET 
	  triggername = t.tgname, 
      tablename = t.tgrelid::regclass::varchar, 
      userid = _userid, 
      functionname = CONCAT(fn.nspname,'.',p.proname), 
      functionoid = t.tgfoid, 
      enables = (
        CASE WHEN t.tgenabled = 'D'
        THEN false
        ELSE true
        END
      ), 
      onbefore = (
        CASE WHEN (t.tgtype::int::bit(7) & b'0000010')::int = 0 
        THEN false ELSE true END
      ), 
      onafter = (
        CASE WHEN (t.tgtype::int::bit(7) & b'0000010')::int = 0 
        THEN true ELSE false END
      ),
      oninstead = (
         CASE WHEN (t.tgtype::int::bit(7) & b'1000000')::int = 0 
         THEN false ELSE true END
      ), 
      oninsert = (
        CASE WHEN (t.tgtype::int::bit(7) & b'0000100')::int = 0 
        THEN false ELSE true END
      ), 
      ondelete = (
        CASE WHEN (t.tgtype::int::bit(7) & b'0001000')::int = 0 
        THEN false ELSE true END
      ), 
      onupdate = (
        CASE WHEN (t.tgtype::int::bit(7) & b'0010000')::int = 0 
        THEN false ELSE true END
      ), 
      ontruncate = (
        CASE WHEN (t.tgtype::int::bit(7) & b'0100000')::int = 0 
        THEN false ELSE true END
      ), 
      functiondef = pg_get_functiondef(t.tgfoid),
      fields = array_to_json(ARRAY(
      	SELECT
        	pa.attname
      	FROM json_array_elements_text(array_to_json( t.tgattr )) as ta
        	JOIN pg_attribute as pa on pa.attrelid = t.tgrelid
        		AND pa.attnum::varchar = ta.value::varchar
      ))
    FROM pg_trigger as t
     LEFT JOIN pg_proc as p on p.oid = t.tgfoid
     LEFT JOIN pg_namespace as fn on fn.oid = p.pronamespace
    WHERE not t.tgisinternal and t.oid = tg.id;

    INSERT INTO sqlmanager.triggers (
      id, triggername, tablename,
      userid,
      functionname, functionoid,
      enables,
      onbefore,
      onafter,
      oninstead,
      oninsert,
      ondelete,
      onupdate,
      ontruncate,
      functiondef ,
      fields 
    )    
    SELECT 
      t.oid, t.tgname, t.tgrelid::regclass::varchar as tr_table, 
      _userid, 
      CONCAT(fn.nspname,'.',p.proname) as tr_function, t.tgfoid, 
      CASE WHEN t.tgenabled = 'D'
      THEN false
      ELSE true
      END as enabled, (
        CASE WHEN (t.tgtype::int::bit(7) & b'0000010')::int = 0 
        THEN false ELSE true END
      ) onbefore, (
        CASE WHEN (t.tgtype::int::bit(7) & b'0000010')::int = 0 
        THEN true ELSE false END
      ) as onafter,(
         CASE WHEN (t.tgtype::int::bit(7) & b'1000000')::int = 0 
         THEN false ELSE true END
      ) as oninstead, (
        CASE WHEN (t.tgtype::int::bit(7) & b'0000100')::int = 0 
        THEN false ELSE true END
      ) as oninsert, (
        CASE WHEN (t.tgtype::int::bit(7) & b'0001000')::int = 0 
        THEN false ELSE true END
      ) as ondelete, (
        CASE WHEN (t.tgtype::int::bit(7) & b'0010000')::int = 0 
        THEN false ELSE true END
      ) as onupdate, (
        CASE WHEN (t.tgtype::int::bit(7) & b'0100000')::int = 0 
        THEN false ELSE true END
      ) as ontruncate,
      pg_get_functiondef(t.tgfoid),
      array_to_json(ARRAY(
      	SELECT
        	pa.attname
      	FROM json_array_elements_text(array_to_json( t.tgattr )) as ta
        	JOIN pg_attribute as pa on pa.attrelid = t.tgrelid
        		AND pa.attnum::varchar = ta.value::varchar
      ))
    FROM pg_trigger as t
     LEFT JOIN pg_proc as p on p.oid = t.tgfoid
     LEFT JOIN pg_namespace as fn on fn.oid = p.pronamespace
    WHERE not t.tgisinternal AND (
    	SELECT 
        	count(tg.id)
        FROM sqlmanager.triggers as tg
        WHERE tg.id = t.oid
    ) = 0;
    
    DELETE FROM sqlmanager.triggers 
    WHERE id not in (
    	SELECT t.oid
        FROM  pg_trigger as t
        WHERE not t.tgisinternal
    );


    UPDATE sqlmanager.triggers
    SET noscript = FALSE;
    	
END;
$$;


ALTER FUNCTION sqlmanager.fn_triggers_onload(injson json) OWNER TO postgres;

--
-- TOC entry 3431 (class 0 OID 0)
-- Dependencies: 579
-- Name: FUNCTION fn_triggers_onload(injson json); Type: COMMENT; Schema: sqlmanager; Owner: postgres
--

COMMENT ON FUNCTION fn_triggers_onload(injson json) IS 'triggers onload';


--
-- TOC entry 523 (class 1255 OID 227422)
-- Name: fn_types_sel(json); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION fn_types_sel(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE

BEGIN
  SELECT
      array_to_json(array_agg(row_to_json(d)))
  FROM (	
    SELECT 
        t.typname as value,
        t.typname as label
    FROM pg_type t
        LEFT JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace
    WHERE (
      t.typrelid = 0 OR (
          SELECT c.relkind = 'c'
          FROM pg_catalog.pg_class c
          WHERE c.oid = t.typrelid
      )
    ) AND NOT EXISTS (
        SELECT 1
        FROM pg_catalog.pg_type el
        WHERE el.oid = t.typelem AND
              el.typarray = t.oid
    ) 
  ) as d
  INTO outjson;
  
  outjson = coalesce(outjson,'[]');

END;
$$;


ALTER FUNCTION sqlmanager.fn_types_sel(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3432 (class 0 OID 0)
-- Dependencies: 523
-- Name: FUNCTION fn_types_sel(injson json, OUT outjson json); Type: COMMENT; Schema: sqlmanager; Owner: postgres
--

COMMENT ON FUNCTION fn_types_sel(injson json, OUT outjson json) IS 'ALL TYPES';


--
-- TOC entry 524 (class 1255 OID 227423)
-- Name: tr_foreignkeys_tr_del(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_foreignkeys_tr_del() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  squery varchar;
BEGIN

	IF NOT OLD.noscript
    THEN
    	squery = CONCAT('             
          ALTER TABLE ', OLD.maintablename ,'
  		    DROP CONSTRAINT "', OLD.ftitle ,'" RESTRICT;
        ');
        
        EXECUTE squery;
    END IF;
	RETURN OLD;

END;
$$;


ALTER FUNCTION sqlmanager.tr_foreignkeys_tr_del() OWNER TO postgres;

--
-- TOC entry 525 (class 1255 OID 227424)
-- Name: tr_foreignkeys_tr_ins(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_foreignkeys_tr_ins() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  squery varchar;
BEGIN

	IF NOT NEW.noscript
    THEN
    	squery = CONCAT('
          ALTER TABLE ', NEW.maintablename ,'
            ADD CONSTRAINT "', NEW.ftitle, '" 
            FOREIGN KEY ("' , NEW.maincol , '")
              REFERENCES ', NEW.parentablename,'("', NEW.parentcol ,'")
              ON DELETE NO ACTION
              ON UPDATE NO ACTION
              NOT DEFERRABLE;
        ');
        
        EXECUTE squery;
    END IF;

	RETURN NEW;
END;
$$;


ALTER FUNCTION sqlmanager.tr_foreignkeys_tr_ins() OWNER TO postgres;

--
-- TOC entry 526 (class 1255 OID 227425)
-- Name: tr_foreignkeys_tr_maincol(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_foreignkeys_tr_maincol() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  squery varchar;
BEGIN
	IF NOT NEW.noscript AND (
    	OLD.maincol <> NEW.maincol OR 
        OLD.parentablename <> NEW.parentablename OR
        OLD.parentcol <> NEW.parentcol
    )
    THEN
    	squery = concat('
          -- object recreation
          ALTER TABLE ', NEW.maintablename ,'
            DROP CONSTRAINT "', NEW.ftitle , '" RESTRICT;

          ALTER TABLE ', NEW.maintablename ,'
            ADD CONSTRAINT "', NEW.ftitle, '" 
            FOREIGN KEY ("' , NEW.maincol , '")
              REFERENCES ', NEW.parentablename,'("', NEW.parentcol ,'")
              ON DELETE NO ACTION
              ON UPDATE NO ACTION
              NOT DEFERRABLE;
          ');
        
        EXECUTE squery;
    END IF;
	
    RETURN NEW;
END;
$$;


ALTER FUNCTION sqlmanager.tr_foreignkeys_tr_maincol() OWNER TO postgres;

--
-- TOC entry 527 (class 1255 OID 227426)
-- Name: tr_foreignkeys_tr_title(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_foreignkeys_tr_title() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  squery varchar;
BEGIN

	IF NOT NEW.noscript and OLD.ftitle <> NEW.ftitle
    THEN
      squery = concat('
        ALTER TABLE ', NEW.maintablename ,'
          RENAME CONSTRAINT "',OLD.ftitle,'" TO "', NEW.ftitle  , '";
      ');
      
      EXECUTE squery;
          
    END IF;
    RETURN NEW;
END;
$$;


ALTER FUNCTION sqlmanager.tr_foreignkeys_tr_title() OWNER TO postgres;

--
-- TOC entry 528 (class 1255 OID 227427)
-- Name: tr_functionslist_tr_args(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_functionslist_tr_args() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  
BEGIN
	IF NEW.noscript
    THEN
      NEW.args =  COALESCE(NEW.args,'[]');
      IF NEW.args::varchar <> '[]'
      THEN
          INSERT INTO sqlmanager.functionargs (
            argname, argtype, argmode,
            oid, userid
          )
          SELECT
              value->>'argname', value->>'argtype', value->>'argmode',
              NEW.id, NEW.userid
          FROM json_array_elements(NEW.args) as a
          WHERE  (
              SELECT count(f.id)
              FROM sqlmanager.functionargs as f
              WHERE f.argname = value->>'argname' and
                    f.argtype = value->>'argtype' and
                    f.argmode = value->>'argmode' and
                    f.oid = NEW.id
          ) = 0;
      END IF;
    END IF;
    
    RETURN NEW;

END;
$$;


ALTER FUNCTION sqlmanager.tr_functionslist_tr_args() OWNER TO postgres;

--
-- TOC entry 511 (class 1255 OID 227428)
-- Name: tr_functionslist_tr_del(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_functionslist_tr_del() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    squery varchar;
BEGIN

  IF not OLD.noscript 
  THEN
    squery = concat('	
        DROP FUNCTION ',OLD.fullname,' ;
    ');
    
     EXECUTE format(squery) ;
    
  END IF;
  
  IF OLD.noscript
  THEN
  	DELETE FROM sqlmanager.functionargs
    WHERE oid = OLD.id;
  END IF; 
  
  RETURN OLD;

END;
$$;


ALTER FUNCTION sqlmanager.tr_functionslist_tr_del() OWNER TO postgres;

--
-- TOC entry 512 (class 1255 OID 227429)
-- Name: tr_functionslist_tr_desc(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_functionslist_tr_desc() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    squery varchar;
BEGIN
	
  IF not NEW.noscript and COALESCE(NEW.descr,'') <> ''
  THEN
    squery = concat('	
        COMMENT ON FUNCTION ', NEW.fullname ,'
        IS ''', NEW.descr ,''';
    ');
    
     EXECUTE format(squery) ;
    
  END IF;
  RETURN NEW;

END;
$$;


ALTER FUNCTION sqlmanager.tr_functionslist_tr_desc() OWNER TO postgres;

--
-- TOC entry 513 (class 1255 OID 227430)
-- Name: tr_functionslist_tr_dll(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_functionslist_tr_dll() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF not NEW.noscript and OLD.dll <> NEW.dll
  THEN    
     EXECUTE format(NEW.dll) ;
  END IF;
  RETURN OLD;
  

END;
$$;


ALTER FUNCTION sqlmanager.tr_functionslist_tr_dll() OWNER TO postgres;

--
-- TOC entry 529 (class 1255 OID 227431)
-- Name: tr_functionslist_tr_ins(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_functionslist_tr_ins() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
    squery varchar;
BEGIN
	
  IF not NEW.noscript
  THEN
  	IF COALESCE(NEW.functionschema, '') = ''
    THEN
    	PERFORM raiserror('function schema is empty');
    END IF;
    
  	IF COALESCE(NEW.functiontitle, '') = ''
    THEN
    	PERFORM raiserror('title is empty');
    END IF;
    NEW.fullname = CONCAT(NEW.functionschema,'.',NEW.functiontitle,'()');
    NEW.functionfulltitle = CONCAT(NEW.functiontitle,'()');
    squery = CONCAT('
      CREATE FUNCTION "', NEW.functionschema, '"."',
      	NEW.functiontitle, '"()
      RETURNS void AS
      $body$
      DECLARE BEGIN END;
      $body$
      LANGUAGE ''plpgsql'' VOLATILE CALLED ON NULL INPUT SECURITY INVOKER;
    ');
    
    NEW.dll = squery;
    
    EXECUTE format(squery) ;
    
  END IF;
  
  NEW.dll = CONCAT(
  	'/*
    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS
    DROP FUNCTION 
', NEW.fullname ,' 
*/
', 
NEW.dll
  );
  
  NEW.definition = SUBSTRING(NEW.dll,
	POSITION('$function$' IN NEW.dll) + 10,
    length(NEW.dll)
  );
  
  NEW.definition =  SUBSTRING(NEW.definition,
    0, POSITION('$function$' IN NEW.definition)
  );
  

  RETURN NEW;

END;
$_$;


ALTER FUNCTION sqlmanager.tr_functionslist_tr_ins() OWNER TO postgres;

--
-- TOC entry 530 (class 1255 OID 227432)
-- Name: tr_functionslist_tr_upd(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_functionslist_tr_upd() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
    squery varchar;
BEGIN

   IF NEW.noscript and NEW.dll like '%LANGUAGE plpgsql%'
   THEN
       NEW.definition = SUBSTRING(NEW.dll,
        POSITION('$function$' IN NEW.dll) + 10,
        length(NEW.dll)
       );
      
      NEW.definition =  SUBSTRING(NEW.definition,
        0, POSITION('$function$' IN NEW.definition)
      );
      
   END IF;
   
   IF NOT NEW.noscript
   THEN
       squery = '
       ';	
       
       IF (
           SELECT
              count(a.value)
           FROM json_array_elements(NEW.args) as a
       ) <> (
           SELECT
              count(fa.id)
           FROM sqlmanager.functionargs as fa
           JOIN json_array_elements(NEW.args) as a 
           	ON a.value->>'argname' = fa.argname AND 
            	a.value->>'argtype' = fa.argtype AND
                a.value->>'argmode' = fa.argmode
                
           WHERE fa.oid = NEW.id
       ) OR  (
           SELECT
              count(a.value)
           FROM json_array_elements(NEW.args) as a
       ) <> (
           SELECT
              count(fa.id)
           FROM sqlmanager.functionargs as fa                
           WHERE fa.oid = NEW.id
       ) OR NEW.returntype <> OLD.returntype
       THEN
           squery = CONCAT(squery,
               'DROP FUNCTION ',NEW.fullname,'; 
               '
           );
       ELSE
         IF OLD.functionschema <> NEW.functionschema
         THEN
             squery = CONCAT(
                 squery,'
                    ALTER FUNCTION ',OLD.functionschema,'.',OLD.functionfulltitle,'
                      SET SCHEMA ', NEW.functionschema ,';
                 '
             );
         END IF;
         
         IF OLD.functiontitle <> NEW.functiontitle
         THEN
             squery = CONCAT(
                 squery,'
                 ALTER FUNCTION ',NEW.functionschema,'.',OLD.functionfulltitle,'
                	RENAME TO "', NEW.functiontitle, '";
                 '
             );
         END IF;
         
         
       END IF;
       
       squery = CONCAT(squery,'
           CREATE OR REPLACE FUNCTION "', NEW.functionschema, '"."', NEW.functiontitle, '"(
       ');
       
       squery = CONCAT(squery,( 
         SELECT 
             string_agg( 
             	CONCAT((
                      CASE WHEN f.argmode = 'output'
                      THEN 'out'
                      WHEN f.argmode = 'input/output'
                      THEN 'inout'
                      END
                    ), ' ',
                	f.argname,' ',f.argtype,' '
                ),','
             )
         FROM sqlmanager.functionargs as f
         WHERE f.oid = NEW.id
       ));
       
       --squery = SUBSTRING(squery,0,length(squery));
       
       squery = CONCAT(
           squery,') RETURNS ', 
           NEW.returntype, 
           ' AS $function$ ',
           NEW.definition, '$function$ LANGUAGE ''plpgsql'';' 
       );

       
       EXECUTE squery;
       
       /*PERFORM sqlmanager.fn_functions_onload ((
           SELECT row_to_json(d)
           FROM (
               SELECT NEW.userid as userid
           ) as d
       
       ));*/
       
   END IF;
   
  
   RETURN NEW;
END;
$_$;


ALTER FUNCTION sqlmanager.tr_functionslist_tr_upd() OWNER TO postgres;

--
-- TOC entry 531 (class 1255 OID 227433)
-- Name: tr_schemalist_tr_del(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_schemalist_tr_del() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    squery varchar;
BEGIN

  IF not OLD.noscript 
  THEN
    squery = concat('	
        DROP SCHEMA ',OLD.schemaname,';
    ');
    
     EXECUTE format(squery) ;
    
  END IF;
  RETURN OLD;

END;
$$;


ALTER FUNCTION sqlmanager.tr_schemalist_tr_del() OWNER TO postgres;

--
-- TOC entry 532 (class 1255 OID 227434)
-- Name: tr_schemalist_tr_descr(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_schemalist_tr_descr() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
 squery varchar;
BEGIN
  IF not NEW.noscript
  THEN
    squery = concat('	
      COMMENT ON SCHEMA "', 
      replace(NEW.schemaname, '"', ''), '" 
      IS ''', NEW.schemadescr, '''
    ');
    
     EXECUTE format(squery) ;
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION sqlmanager.tr_schemalist_tr_descr() OWNER TO postgres;

--
-- TOC entry 533 (class 1255 OID 227435)
-- Name: tr_schemalist_tr_ins(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_schemalist_tr_ins() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
	squery varchar;
BEGIN

	IF not NEW.noscript
    THEN 
        IF COALESCE(NEW.schemaname,'') = ''
        THEN
        	PERFORM raiserror('Name is empty');
        END IF;
    	
    	squery = concat(
    		'CREATE SCHEMA "',NEW.schemaname,'" 
            AUTHORIZATION postgres;'
        );
         IF COALESCE(NEW.schemadescr,'') <> ''
         THEN
            squery = concat(squery,
                'COMMENT ON SCHEMA "',NEW.schemaname,'" 
                IS ''',NEW.schemadescr,''';'
            );
         END IF;   
         
         EXECUTE squery;             
        
    END IF;
    
    RETURN NEW;
	

END;
$$;


ALTER FUNCTION sqlmanager.tr_schemalist_tr_ins() OWNER TO postgres;

--
-- TOC entry 534 (class 1255 OID 227436)
-- Name: tr_schemalist_tr_name(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_schemalist_tr_name() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  squery varchar;
BEGIN
  IF not NEW.noscript and 
  	 NEW.schemaname <> OLD.schemaname
  THEN
    squery = concat('	
        ALTER SCHEMA ',OLD.schemaname,'
        RENAME TO ',NEW.schemaname,';
    ');
    
     EXECUTE format(squery) ;
    
  END IF;
  
  RETURN NEW;
  
END;
$$;


ALTER FUNCTION sqlmanager.tr_schemalist_tr_name() OWNER TO postgres;

--
-- TOC entry 535 (class 1255 OID 227437)
-- Name: tr_tablecolumns_tr_accur(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_tablecolumns_tr_accur() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
 squery varchar;
BEGIN
  IF not NEW.noscript and NEW.size is not null and
  	 NEW.accur is not null
  THEN
    squery = concat('	
		ALTER TABLE ',NEW.tablename,'
  			ALTER COLUMN "',NEW.colname,'" 
            TYPE ',NEW.coltype,'(',NEW.size::varchar,',',
            NEW.accur::varchar,');
    ');
    
     EXECUTE format(squery);
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION sqlmanager.tr_tablecolumns_tr_accur() OWNER TO postgres;

--
-- TOC entry 536 (class 1255 OID 227438)
-- Name: tr_tablecolumns_tr_coldesc(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_tablecolumns_tr_coldesc() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
 squery varchar;
BEGIN
  IF not NEW.noscript
  THEN
    squery = concat('	
      COMMENT ON COLUMN ',NEW.tablename,'.',NEW.colname,'
      IS ''', NEW.coldesc ,''';
    ');
    
     EXECUTE format(squery);
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION sqlmanager.tr_tablecolumns_tr_coldesc() OWNER TO postgres;

--
-- TOC entry 537 (class 1255 OID 227439)
-- Name: tr_tablecolumns_tr_colname(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_tablecolumns_tr_colname() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
 squery varchar;
BEGIN
  IF not NEW.noscript
  THEN
    squery = concat('	
      ALTER TABLE ',NEW.tablename,'
        RENAME COLUMN ',OLD.colname,' TO ',NEW.colname,';
    ');
    
     EXECUTE format(squery);
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION sqlmanager.tr_tablecolumns_tr_colname() OWNER TO postgres;

--
-- TOC entry 538 (class 1255 OID 227440)
-- Name: tr_tablecolumns_tr_defval(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_tablecolumns_tr_defval() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
 squery varchar;
 _nn varchar(150);
BEGIN
  IF not NEW.noscript  
  THEN
  	IF COALESCE(NEW.defval,'') <> ''
    THEN
    	_nn = CONCAT(
        	'ALTER COLUMN "', 
            NEW.colname, 
            '" SET DEFAULT ',
            NEW.defval, ';'
        );
    ELSE
    	_nn = CONCAT(
        	'ALTER COLUMN "', 
            NEW.colname, 
            '" DROP DEFAULT;'
        );
    END IF;
  
 -- ALTER COLUMN col5 ;
    squery = concat('	
      ALTER TABLE ', NEW.tablename, ' ', _nn, '
        
    ');
    
     EXECUTE format(squery);
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION sqlmanager.tr_tablecolumns_tr_defval() OWNER TO postgres;

--
-- TOC entry 539 (class 1255 OID 227441)
-- Name: tr_tablecolumns_tr_del(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_tablecolumns_tr_del() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
   squery varchar;

BEGIN

	IF not OLD.noscript
    THEN
      squery = concat('
          ALTER TABLE ',OLD.tablename,'
            DROP COLUMN "',OLD.colname,'";'
      );
      
      EXECUTE squery;    
    END IF;
    
    RETURN OLD;

END;
$$;


ALTER FUNCTION sqlmanager.tr_tablecolumns_tr_del() OWNER TO postgres;

--
-- TOC entry 540 (class 1255 OID 227442)
-- Name: tr_tablecolumns_tr_ins(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_tablecolumns_tr_ins() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
 squery varchar;
BEGIN
	IF not NEW.noscript
    THEN
      IF COALESCE(NEW.colname,'') = ''
      THEN 
          PERFORM raiserror('Name is empty');
      END IF;
      
      IF COALESCE(NEW.tablename,'') = ''
      THEN 
          PERFORM raiserror('tablename is empty');
      END IF;
      
      NEW.coltype = COALESCE(NEW.coltype,'int');
      squery = concat('
        ALTER TABLE ',NEW.tablename,'
          ADD COLUMN "',NEW.colname,'" ',NEW.coltype
      );
      
      -- Type size
      IF NEW.size is not null
      THEN
        squery = concat( squery, '(', NEW.size::varchar);
        IF NEW.accur is not null
        THEN
          squery = concat( squery, ',', NEW.accur::varchar);
        END IF;
        squery = concat(squery, ')');
      END IF;
      
      IF COALESCE(NEW.defval,'') <> ''
      THEN
        squery = concat(squery, ' DEFAULT ''', NEW.defval,'''');
      END IF;
      
      IF NEW."notnull"
      THEN
        squery = concat( squery, ' NOT NULL ');
      END IF;
      

      
      squery = concat(squery,';');
      
      IF COALESCE(NEW.coldesc,'') <> ''
      THEN
      	squery = concat(squery ,'
        	COMMENT ON COLUMN ', NEW.tablename, '."', NEW.colname,'"
        	IS ''', NEW.coldesc, ''';'
        );
      END IF;
      
      EXECUTE squery;
      
    END IF;


	RETURN NEW;
END;
$$;


ALTER FUNCTION sqlmanager.tr_tablecolumns_tr_ins() OWNER TO postgres;

--
-- TOC entry 541 (class 1255 OID 227443)
-- Name: tr_tablecolumns_tr_notnull(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_tablecolumns_tr_notnull() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
 squery varchar;
 _nn varchar(150);
BEGIN
  IF not NEW.noscript 
  THEN
  	IF NEW.notnull 
    THEN
    	_nn = 'SET NOT NULL';
    ELSE
		_nn = 'DROP NOT NULL';		
    END IF;
    
    squery = concat('	
      ALTER TABLE ',NEW.tablename,'
        ALTER COLUMN "',NEW.colname,'" ', _nn, ';
    ');
    
     EXECUTE format(squery);
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION sqlmanager.tr_tablecolumns_tr_notnull() OWNER TO postgres;

--
-- TOC entry 542 (class 1255 OID 227444)
-- Name: tr_tablecolumns_tr_size(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_tablecolumns_tr_size() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
 squery varchar;
BEGIN
  IF not NEW.noscript and 
  	 NEW.size is not null
  THEN
    squery = concat('	
		ALTER TABLE ',NEW.tablename,'
  			ALTER COLUMN "',NEW.colname,'" 
            TYPE ',NEW.coltype,'(',NEW.size::varchar,');
    ');
    
     EXECUTE format(squery);
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION sqlmanager.tr_tablecolumns_tr_size() OWNER TO postgres;

--
-- TOC entry 543 (class 1255 OID 227445)
-- Name: tr_tablecolumns_tr_type(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_tablecolumns_tr_type() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
 squery varchar;
BEGIN
  IF not NEW.noscript
  THEN
    squery = concat('	
		ALTER TABLE ',NEW.tablename,'
  			ALTER COLUMN "',NEW.colname,'" 
            TYPE ',NEW.coltype,';
    ');
    
     EXECUTE format(squery);
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION sqlmanager.tr_tablecolumns_tr_type() OWNER TO postgres;

--
-- TOC entry 544 (class 1255 OID 227446)
-- Name: tr_tablecolumns_tr_uniq(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_tablecolumns_tr_uniq() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
/*

*/

DECLARE
 squery varchar;
 _nn varchar(150);
BEGIN
  IF not NEW.noscript 
  THEN
  	IF NEW.uniq 
    THEN
    	_nn = concat('ADD UNIQUE ("',NEW.colname,'")');
    ELSE
		_nn = CONCAT('DROP CONSTRAINT ',(
            SELECT c.relname
            FROM pg_index as i
                 JOIN pg_class as c on c.oid = i.indexrelid
                 JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
                 JOIN pg_class as tt on tt.oid = i.indrelid
                 JOIN pg_attribute a on a.attrelid = tt.oid and a.attnum = ANY(i.indkey)
            WHERE concat(n.nspname,'.', tt.relname) = NEW.tablename
                  and i.indisunique and a.attname = NEW.colname

        ),' RESTRICT;');		
    END IF;
    
    squery = concat('	
      ALTER TABLE ',NEW.tablename,' ', _nn);
    
     EXECUTE format(squery);
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION sqlmanager.tr_tablecolumns_tr_uniq() OWNER TO postgres;

--
-- TOC entry 545 (class 1255 OID 227447)
-- Name: tr_tablelist_tr_del(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_tablelist_tr_del() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    squery varchar;
BEGIN

  IF not OLD.noscript 
  THEN
    squery = concat('	
        DROP TABLE ',OLD.fullname,';
    ');
    
     EXECUTE format(squery) ;
    
  END IF;
  RETURN OLD;

END;
$$;


ALTER FUNCTION sqlmanager.tr_tablelist_tr_del() OWNER TO postgres;

--
-- TOC entry 546 (class 1255 OID 227448)
-- Name: tr_tablelist_tr_descr(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_tablelist_tr_descr() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  squery varchar;
BEGIN
  IF not NEW.noscript and 
  	 NEW.descr <> OLD.descr
  THEN
    squery = concat('	
      COMMENT ON TABLE ', concat(
      		'"',NEW.tableschemaname,'"."',
            NEW.tablename,'"'
        ) ,'
      IS ''', NEW.descr ,''';
    ');
    
     EXECUTE format(squery) ;
    
  END IF;

  RETURN NEW;

END;
$$;


ALTER FUNCTION sqlmanager.tr_tablelist_tr_descr() OWNER TO postgres;

--
-- TOC entry 547 (class 1255 OID 227449)
-- Name: tr_tablelist_tr_ins(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_tablelist_tr_ins() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  squery varchar;
BEGIN
  IF not NEW.noscript 
  THEN
  
  	IF COALESCE(NEW.tableschemaname, '') = ''
    THEN
    	PERFORM raiserror('Schema name is empty');
    END IF;
    
  	IF COALESCE(NEW.tablename, '') = ''
    THEN
    	PERFORM raiserror('Table name is empty');
    END IF;
    
    NEW.fullname = concat('"', NEW.tableschemaname, '"."', NEW.tablename,'"');
    
    squery = concat('	
        CREATE TABLE "', NEW.tableschemaname, '"."', NEW.tablename, '" (
          id SERIAL NOT NULL,
          PRIMARY KEY(id)
        ) 
        WITH (oids = false);
    ');
    
    IF COALESCE(NEW.descr,'') <> ''
    THEN
    	squery = concat(squery,'
          COMMENT ON TABLE "', NEW.tableschemaname, '"."', NEW.tablename, '"
          IS ''', NEW.descr, ''';'
        );
    END IF;  
    
    EXECUTE format(squery) ;
    
  END IF;
  
  RETURN NEW;
  
END;
$$;


ALTER FUNCTION sqlmanager.tr_tablelist_tr_ins() OWNER TO postgres;

--
-- TOC entry 548 (class 1255 OID 227450)
-- Name: tr_tablelist_tr_name(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_tablelist_tr_name() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  squery varchar;
BEGIN
  IF not NEW.noscript and 
  	 NEW.tablename <> OLD.tablename
  THEN
    squery = concat('	
      	ALTER TABLE ', 
        concat(
        	'"', NEW.tableschemaname, '"."', 
            OLD.tablename, '"'
        ), '
        RENAME TO ', 
        concat(
        	'"', 
            NEW.tablename, '"'
        ), ';
    ');
    
     EXECUTE format(squery) ;
    
  END IF;
  
  RETURN NEW;
END;
$$;


ALTER FUNCTION sqlmanager.tr_tablelist_tr_name() OWNER TO postgres;

--
-- TOC entry 549 (class 1255 OID 227451)
-- Name: tr_trigger_del(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_trigger_del() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  squery varchar;
BEGIN
	IF NOT OLD.noscript
    THEN
      squery = CONCAT('
          DROP TRIGGER "', OLD.triggername , '" ON ', OLD.tablename, ';
      ');
      EXECUTE squery;
    END IF;
    
    RETURN OLD;
END;
$$;


ALTER FUNCTION sqlmanager.tr_trigger_del() OWNER TO postgres;

--
-- TOC entry 550 (class 1255 OID 227452)
-- Name: tr_triggers_tr_beforafter(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_triggers_tr_beforafter() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    squery varchar;
    splus varchar;
    
BEGIN

	IF NOT NEW.noscript  
    THEN
    	IF OLD.onbefore <> NEW.onbefore
        THEN
        	splus = (
              	CASE WHEN NEW.onbefore
              	THEN 'BEFORE'
                ELSE 'AFTER'
                END
            );
        	
            IF NEW.onbefore THEN
              	NEW.onafter = false;
            ELSE
            	NEW.onafter = true;
            END IF;
        
    	ELSE 
          IF OLD.onafter <> NEW.onafter
          THEN
              splus = (
                  CASE WHEN NEW.onafter
                  THEN 'AFTER'
                  ELSE 'BEFORE'
                  END
              );
              
              IF NEW.onafter THEN
              	NEW.onbefore = false;
              ELSE
              	NEW.onbefore = true;
              END IF;
          END IF;
        END IF;
        
    	squery = CONCAT('
            -- object recreation
            DROP TRIGGER ', NEW.triggername, ' 
            ON ', NEW.tablename , ';

            CREATE TRIGGER ', NEW.triggername, '
              ', splus, ' ', sqlmanager.fn_triggeractions_str(
              	NEW.oninsert,
              	NEW.onupdate,
                NEW.ondelete,
                NEW.ontruncate
              ), ' 
              ON ', NEW.tablename , '
              
            FOR EACH ROW 
              EXECUTE PROCEDURE ', NEW.functionname , '();
        ');
        
        EXECUTE squery;
    	
    END IF;
	
	RETURN NEW;
END;
$$;


ALTER FUNCTION sqlmanager.tr_triggers_tr_beforafter() OWNER TO postgres;

--
-- TOC entry 551 (class 1255 OID 227453)
-- Name: tr_triggers_tr_def(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_triggers_tr_def() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
  --variable_name datatype;
BEGIN
   IF NEW.noscript and NEW.functiondef like '%LANGUAGE plpgsql%'
   THEN
       NEW.functiondef = SUBSTRING(NEW.functiondef,
        POSITION('$function$' IN NEW.functiondef) + 10,
        length(NEW.functiondef)
       );
      
      NEW.functiondef =  SUBSTRING(NEW.functiondef,
        0, POSITION('$function$' IN NEW.functiondef)
      );
      
   END IF;
   RETURN NEW;

END;
$_$;


ALTER FUNCTION sqlmanager.tr_triggers_tr_def() OWNER TO postgres;

--
-- TOC entry 552 (class 1255 OID 227454)
-- Name: tr_triggers_tr_def_upd(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_triggers_tr_def_upd() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
  squery varchar;
BEGIN
	IF NOT NEW.noscript
    THEN
        squery = concat('
            CREATE OR REPLACE FUNCTION ',
              NEW.functionname
            ,' ()
            RETURNS trigger AS
            $body$',
              NEW.functiondef
            , '
            $body$
            LANGUAGE ''plpgsql''
            VOLATILE
            CALLED ON NULL INPUT
            SECURITY INVOKER
            COST 100;
        ');
        EXECUTE squery;
	END IF;
    
    RETURN NEW;
END;
$_$;


ALTER FUNCTION sqlmanager.tr_triggers_tr_def_upd() OWNER TO postgres;

--
-- TOC entry 553 (class 1255 OID 227455)
-- Name: tr_triggers_tr_enabled(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_triggers_tr_enabled() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  squery varchar;
BEGIN
	
	IF not NEW.noscript and NEW.enables <> OLD.enables
    THEN
	  squery = concat('
        ALTER TABLE ', NEW.tablename ,'
        	', (
            	CASE WHEN NEW.enables
                THEN 'ENABLE'
                ELSE 'DISABLE'
                END
            ) , ' TRIGGER "', NEW.triggername, '";
        '
      );
      
      EXECUTE squery;
	END IF;
	
	RETURN NEW;
END;
$$;


ALTER FUNCTION sqlmanager.tr_triggers_tr_enabled() OWNER TO postgres;

--
-- TOC entry 554 (class 1255 OID 227456)
-- Name: tr_triggers_tr_ins(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_triggers_tr_ins() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
	squery varchar;
BEGIN


	IF not NEW.noscript 
    THEN
      IF COALESCE(NEW.tablename,'') = ''
      THEN 
      	PERFORM raiserror('table name is null');
      END IF;
       	
    	
      squery = concat('
          CREATE FUNCTION ',(
            SELECT t.schemaname
            FROM pg_catalog.pg_statio_all_tables as t
            WHERE CONCAT(t.schemaname,'.',t.relname) = NEW.tablename
          ),'."tr_', NEW.triggername, '" (
          )
          RETURNS trigger AS
          $body$ DECLARE BEGIN RETURN NEW; END;
          $body$
          LANGUAGE ''plpgsql''
          VOLATILE
          CALLED ON NULL INPUT
          SECURITY INVOKER;

          CREATE TRIGGER ', NEW.triggername , '
            ',(
            	CASE WHEN NEW.onbefore
                THEN 'BEFORE'
                ELSE 'AFTER'
                END
            
            ),' ',sqlmanager.fn_triggeractions_str(
              	NEW.oninsert,
              	NEW.onupdate,
                NEW.ondelete,
                NEW.ontruncate
            ),' 
            ON ', NEW.tablename , '
            
          FOR EACH ROW 
            EXECUTE PROCEDURE ',(
              SELECT t.schemaname
              FROM pg_catalog.pg_statio_all_tables as t
              WHERE CONCAT(t.schemaname,'.',t.relname) = NEW.tablename
          ),'."tr_', NEW.triggername, '"();
      
      ');
      
      EXECUTE squery;
	END IF;
	RETURN NEW;
END;
$_$;


ALTER FUNCTION sqlmanager.tr_triggers_tr_ins() OWNER TO postgres;

--
-- TOC entry 581 (class 1255 OID 227457)
-- Name: tr_triggers_tr_iudt(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_triggers_tr_iudt() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    squery varchar;
BEGIN
	IF NOT NEW.noscript AND (
    	OLD.oninsert <> NEW.oninsert OR
        OLD.onupdate <> NEW.onupdate OR
        OLD.ondelete <> NEW.ondelete OR
        OLD.ontruncate <> NEW.ontruncate
     	OR OLD.fields::varchar <> NEW.fields::varchar 
    ) 
    THEN
    	squery = CONCAT('
            -- object recreation
            DROP TRIGGER ', NEW.triggername, ' 
            ON ', NEW.tablename , ';

            CREATE TRIGGER ', NEW.triggername, '
              ', (
              	CASE WHEN NEW.onbefore
              	THEN 'BEFORE'
                ELSE 'AFTER'
                END
              ), ' ', sqlmanager.fn_triggeractions_str(
              	NEW.oninsert,
              	NEW.onupdate,
                NEW.ondelete,
                NEW.ontruncate
              ), (
                  CASE WHEN (
                      SELECT count(value)
                      FROM json_array_elements_text(NEW.fields)
                  ) > 0
                  THEN concat(' OF ',(
                      SELECT 
                          string_agg(concat('"',value::varchar,'"'),',')
                      FROM json_array_elements_text(NEW.fields) 
                  ))
                  ELSE ''
                  END
               )
              , ' 
              ON ', NEW.tablename , ' 
              
            FOR EACH ROW 
              EXECUTE PROCEDURE ', NEW.functionname , '();
        ');
        
        EXECUTE squery;
    END IF;
    
    
    
    RETURN NEW;
END;
$$;


ALTER FUNCTION sqlmanager.tr_triggers_tr_iudt() OWNER TO postgres;

--
-- TOC entry 555 (class 1255 OID 227458)
-- Name: tr_triggers_tr_title(); Type: FUNCTION; Schema: sqlmanager; Owner: postgres
--

CREATE FUNCTION tr_triggers_tr_title() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
	squery varchar;

BEGIN
	
	IF not NEW.noscript
    THEN
    	squery = CONCAT('
          ALTER TRIGGER ', OLD.triggername ,' ON ', NEW.tablename ,'
            RENAME TO "', NEW.triggername , '";
        ');
        
        EXECUTE squery;
    END IF; 


	RETURN NEW;

END;
$$;


ALTER FUNCTION sqlmanager.tr_triggers_tr_title() OWNER TO postgres;

SET search_path = test, pg_catalog;

--
-- TOC entry 556 (class 1255 OID 227459)
-- Name: fn_act_visible_conditions_intable(json, integer, integer); Type: FUNCTION; Schema: test; Owner: postgres
--

CREATE FUNCTION fn_act_visible_conditions_intable(_vs json, act_id integer, INOUT _vid integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
BEGIN
	
  INSERT INTO framework.act_visible_condions (
    actionid, val_desc,
    col, title,
    operation, value
  )
  SELECT
  	act_id, (
  	 SELECT
       	c.id
     FROM framework.config as c
     WHERE c.viewid = _vid and c.title = (value->'col')->>'value'
    ) as val_desc, (v.value->'col')->>'col' as col,
    (v.value->'col')->>'title' as title,
    (v.value->'operation')->>'value' as operation,
    v.value->>'value'
  FROM json_array_elements(_vs) as v;

END;
$$;


ALTER FUNCTION test.fn_act_visible_conditions_intable(_vs json, act_id integer, INOUT _vid integer) OWNER TO postgres;

--
-- TOC entry 3433 (class 0 OID 0)
-- Dependencies: 556
-- Name: FUNCTION fn_act_visible_conditions_intable(_vs json, act_id integer, INOUT _vid integer); Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON FUNCTION fn_act_visible_conditions_intable(_vs json, act_id integer, INOUT _vid integer) IS 'ins act vis conditions from json (table views) into table';


--
-- TOC entry 557 (class 1255 OID 227460)
-- Name: fn_actions_in_table(json, integer); Type: FUNCTION; Schema: test; Owner: postgres
--

CREATE FUNCTION fn_actions_in_table(_actions json, INOUT _vid integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE 
	_kl json;
BEGIN

	INSERT INTO framework.actions (
      column_order,
      viewid, classname, title,
      icon, act_url ,
      api_method ,
      api_type ,
      refresh_data ,
      ask_confirm ,
      roles ,
      forevery ,
      main_action ,
      act_type 
    )
	SELECT
      row_number() over (PARTITION BY 0) as column_order,
      _vid, value->>'classname' as classname, value->>'title' as title,
	  value->>'icon' as icon, value->>'act' as act,
      value->>'actapimethod' as api_method,
      lower(value->>'actapitype') as api_type,
      COALESCE((value->>'actapirefresh')::boolean,FALSE) as refresh_data,
      COALESCE((value->>'actapiconfirm')::boolean,FALSE) as ask_confirm,
      
      json_build_array(array(SELECT
             value->'value'
      	FROM json_array_elements((value->'roles')::json)
      ))->0 as roles,
      
      COALESCE((value->>'isforevery')::boolean,FALSE) as forevery,
      COALESCE((value->>'ismain')::boolean,FALSE) as main_action,
	  value->>'type' as type
    FROM json_array_elements(_actions);
    
    SELECT
    	array_to_json(array_agg(row_to_json(d)))
    FROM
    (SELECT
    	test.fn_parametrs_intotables(  
       	  value->'parametrs',
          _vid,
           c.id
        ),
        test.fn_act_visible_conditions_intable(
       	  value->'act_visible_condition',
          c.id,
          _vid  
        )
    FROM json_array_elements(_actions) as a
    	JOIN framework.actions as c on c.viewid = _vid and 
        	c.title = value->>'title') as d
    INTO _kl;
    
    
    
	/*
	[
       {
          "act": "/", 
          "icon": "fa fa-check", 
          "type": "Save", 
          "title": "save", 
          "classname": "p-button-success", 
          "parametrs": [], 
          "isforevery": false, 
          "act_visible_condition": [{
              "col": {
                  "t": 1, 
                  "key": "id_99ad9", 
                  "label": "id", 
                  "value": "vs_id"
              },
              "value": "-1", 
              "operation": {
                  "js": ">", 
                  "label": ">", 
                  "value": ">", 
                  "python": ">"
              }}
          ]
       }, 
       {
         "act": "/composition/act_visible_conditions", 
         "icon": "fa fa-cros",
         "type": "Link", 
         "title": "close", 
         "parametrs": [{
              "paramt": null, 
              "paramconst": "", 
              "paraminput": "actionid", 
              "paramtitle": "actionid", 
              "paramcolumn": null
           }, 
           {
              "paramt": null, 
              "paramconst": "actionid", 
              "paraminput": "", 
              "paramtitle": "relation", 
              "paramcolumn": null
           }, 
           {
              "paramt": null, 
              "paramconst": "-1", 
              "paraminput": "", 
              "paramtitle": "vs_id", 
              "paramcolumn": null
           }, 
           {
              "paramt": null, 
              "paramconst": "", 
              "paraminput": "act_id", 
              "paramtitle": "act_id", 
              "paramcolumn": null
           }
         ], 
         "isforevery": false, 
         "act_visible_condition": [
         	{
            	"col": {
            		"t": 1, 
                    "key": "id_99ad9", 
                	"label": "id", 
                	"value": "vs_id"
            	}, 
         		"const": null, 
            	"value": "-1", 
            	"operation": {
            		"js": ">", 
                	"label": ">", 
                	"value": ">", 
                	"python": ">"
            	}
            }
         ]
   	   }
     ]    
     
	[
        {
        	"act": "/api/postmethodtest_setselectedcolor_black", 
            "type": "API", 
            "title": "set checke black (POST TEST CHECKED)", 
            "parametrs": [
            	{
                	"paramt": null, 
                    "paramconst": "_checked_", 
                    "paraminput": "", 
                    "paramtitle": "checked", 
                    "paramcolumn": null
                }
            ], 
            "actapitype": "POST", 
            "isforevery": false, 
            "actapiconfirm": true, 
            "actapirefresh": true
        }
    ]
    
    */

END;
$$;


ALTER FUNCTION test.fn_actions_in_table(_actions json, INOUT _vid integer) OWNER TO postgres;

--
-- TOC entry 3434 (class 0 OID 0)
-- Dependencies: 557
-- Name: FUNCTION fn_actions_in_table(_actions json, INOUT _vid integer); Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON FUNCTION fn_actions_in_table(_actions json, INOUT _vid integer) IS 'ins actions from json (table views) into table';


--
-- TOC entry 558 (class 1255 OID 227461)
-- Name: fn_config_in_table(json, integer); Type: FUNCTION; Schema: test; Owner: postgres
--

CREATE FUNCTION fn_config_in_table(_config json, INOUT _viewid integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
--insert all configs in tables
DECLARE 
	mock_json json;
BEGIN
  INSERT INTO framework.config (
    viewid, t, col ,
    column_id ,
    title , type ,
    roles ,
    visible ,
    required ,
    width ,
    "join" ,
    classname ,
    updatable ,
    relation ,
    select_api ,
    multiselecttable ,
    orderby ,
    orderbydesc ,
    relcol ,
    depency ,
    depencycol ,
    relationcolums ,
    multicolums ,
    column_order ,
    fn ,
    fncolumns,
    relatecolumn,
    "table",
    related
  )

  SELECT 
	_viewid, c.value->>'t' as t, c.value->>'col' as col,
    (c.value->>'column_id')::INTEGER as column_id,
    c.value->>'title' as title, c.value->>'type' as type,
    
    (CASE WHEN (c.value->>'roles')::varchar like '[%'
    THEN
    json_build_array(array(SELECT
    		value->'value'
       FROM json_array_elements((c.value->>'roles')::json)
    ))->0
    ELSE
    	'[]'::json
    END)
     as roles,
    
    coalesce((c.value->>'visible' )::BOOLEAN,false) as visible,
    COALESCE((c.value->>'required')::BOOLEAN,false) as required,
    c.value->>'width' as width,
    COALESCE((c.value->>'join')::BOOLEAN,false) as join,
    c.value->>'classname' as classname,
    COALESCE((c.value->>'updatable')::BOOLEAN,false) as updatable,
    c.value->>'relation' as relation,
    c.value->>'select_api' as select_api,   
	c.value->>'multiselecttable' as multiselecttable,
    COALESCE((c.value->>'orderby')::BOOLEAN,false) as orderby,
    COALESCE((c.value->>'orderbydesc')::BOOLEAN,false) as orderbydesc,
    c.value->>'relcol' as relcol,
    COALESCE((c.value->>'depency')::BOOLEAN,false) as depency,
    c.value->>'depencycol' as depencycol,
    
    (CASE WHEN (c.value->>'relationcolums')::varchar like '[%'
    THEN
    json_build_array(array(SELECT
    		value->'value'
       FROM json_array_elements((c.value->>'relationcolums')::json)
    ))->0
    ELSE
   	 '[]'::json
    END)
     as relationcolums,
     
    (CASE WHEN (c.value->>'multicolums')::varchar like '[%'
    THEN
    	json_build_array(array(SELECT
    		value->'value'
       FROM json_array_elements((c.value->>'multicolums')::json)
   		))->0
    ELSE
    	'[]'::json
    END
    ) as multicolums,
    
    row_number() over (PARTITION BY 0) as column_order,
    (c.value->'fn')->>'value' as fn,
    
    (CASE WHEN (c.value->>'fncolumns')::varchar like '[%'
    THEN
    json_build_array(array(SELECT
    		value->'value'
       FROM json_array_elements((c.value->'fncolumns')::json)
    ))->0 
    ELSE
   	 null
    END ) as fncolumns,
    c.value->>'relatecolumn',
    c.value->>'table',
    coalesce((c.value->>'related')::boolean,false)
 FROM json_array_elements(_config) as c;


  SELECT
  	array_to_json(array_agg(row_to_json(d))) 
  FROM
  (SELECT 
    c.value->>'title' as title,
    test.fn_visible_condition_intable(cn.id, (c.value->'visible_condition')) as vc,
    test.fn_select_condition_intable(cn.id,(c.value->'select_condition')) as sc,
    test.fn_defaultval_intable(cn.id,(c.value->'defaultval')) as dv
 FROM json_array_elements(_config) as c
 	JOIN framework.config as cn on cn.title = c.value->>'title'
 WHERE cn.viewid = _viewid) as d
 
 INTO mock_json
 ;  	
END;
$$;


ALTER FUNCTION test.fn_config_in_table(_config json, INOUT _viewid integer) OWNER TO postgres;

--
-- TOC entry 3435 (class 0 OID 0)
-- Dependencies: 558
-- Name: FUNCTION fn_config_in_table(_config json, INOUT _viewid integer); Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON FUNCTION fn_config_in_table(_config json, INOUT _viewid integer) IS 'ins config from json (table views) into table';


--
-- TOC entry 559 (class 1255 OID 227462)
-- Name: fn_config_in_table_fncolumns_fix(json, integer); Type: FUNCTION; Schema: test; Owner: postgres
--

CREATE FUNCTION fn_config_in_table_fncolumns_fix(_config json, INOUT _viewid integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
-- update all configs , fix fncolumns
DECLARE 
	mock_json json;
BEGIN

  UPDATE framework.config as cc
  SET fncolumns =   
    (CASE WHEN (c.value->>'fncolumns')::varchar like '[%'
    THEN
    	json_build_array(array(SELECT
    		ccc.id
       FROM json_array_elements((c.value->'fncolumns')::json) as n
         JOIN framework.config as ccc on (ccc.title = (value->>'value')) and ccc.viewid = _viewid
    ))->0 
    ELSE
   	 null
    END ) 
 FROM json_array_elements(_config) as c
 WHERE c.value->>'title' = cc.title and cc.viewid = _viewid and 
  ((c.value->'fn')->>'value') is not null ;
 	
END;
$$;


ALTER FUNCTION test.fn_config_in_table_fncolumns_fix(_config json, INOUT _viewid integer) OWNER TO postgres;

--
-- TOC entry 3436 (class 0 OID 0)
-- Dependencies: 559
-- Name: FUNCTION fn_config_in_table_fncolumns_fix(_config json, INOUT _viewid integer); Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON FUNCTION fn_config_in_table_fncolumns_fix(_config json, INOUT _viewid integer) IS 'ins config fn cols from json (table views) into table';


--
-- TOC entry 560 (class 1255 OID 227463)
-- Name: fn_config_in_table_tpath_fix(json, integer); Type: FUNCTION; Schema: test; Owner: postgres
--

CREATE FUNCTION fn_config_in_table_tpath_fix(_config json, INOUT _viewid integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
-- update all configs , fix fncolumns
DECLARE 
	mock_json json;
BEGIN

 UPDATE framework.config as cc
  SET tpath = coalesce(c.value->'tpath','[]')
 FROM json_array_elements(_config) as c
 WHERE c.value->>'title' = cc.title and cc.viewid = _viewid;
 	
END;
$$;


ALTER FUNCTION test.fn_config_in_table_tpath_fix(_config json, INOUT _viewid integer) OWNER TO postgres;

--
-- TOC entry 3437 (class 0 OID 0)
-- Dependencies: 560
-- Name: FUNCTION fn_config_in_table_tpath_fix(_config json, INOUT _viewid integer); Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON FUNCTION fn_config_in_table_tpath_fix(_config json, INOUT _viewid integer) IS 'ins config tpath from json (table views) into table';


--
-- TOC entry 561 (class 1255 OID 227464)
-- Name: fn_defaultval_intable(integer, json); Type: FUNCTION; Schema: test; Owner: postgres
--

CREATE FUNCTION fn_defaultval_intable(INOUT _colid integer, _dv json) RETURNS integer
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- put defaultval from json to table 

  /*[{"act": {"label": "=", "value": "="}, 
  "bool": {"label": "and", "value": "and"}, 
  "value": "_orgid_"}]*/
  IF _colid is not null and _dv::varchar like '[%' THEN
    INSERT INTO framework.defaultval(
      configid,
      act,
      bool,
      value 
    )
    SELECT 
    	_colid,
        (v.value->'act')->>'label',
        (v.value->'bool')->>'label',
        v.value ->> 'value'
    FROM json_array_elements(_dv) as v;
  END IF;

END;
$$;


ALTER FUNCTION test.fn_defaultval_intable(INOUT _colid integer, _dv json) OWNER TO postgres;

--
-- TOC entry 3438 (class 0 OID 0)
-- Dependencies: 561
-- Name: FUNCTION fn_defaultval_intable(INOUT _colid integer, _dv json); Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON FUNCTION fn_defaultval_intable(INOUT _colid integer, _dv json) IS 'put defaultval from json to table ';


--
-- TOC entry 562 (class 1255 OID 227465)
-- Name: fn_filters_in_table(json, integer); Type: FUNCTION; Schema: test; Owner: postgres
--

CREATE FUNCTION fn_filters_in_table(filtrs json, INOUT _vid integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
BEGIN

	INSERT INTO framework.filters (
      column_order, 
      viewid, classname, title,
      "column",
      columns,
      t, roles, "type", "table" 
    )
	SELECT
    	 row_number() over (PARTITION BY 0) as column_order,
    	_vid, value->>'classname' as classname, value->>'title' as title,
        (CASE WHEN (value->>'column')::varchar not like '[%'
          THEN 
          (value->>'column')::varchar
          ELSE 
          null
        END) as column,
        (CASE WHEN (value->>'column')::varchar like '[%'
          THEN 
            json_build_array(array(SELECT
                value->'value'
            FROM json_array_elements((value->>'column')::json)
            ))->0
		  ELSE 
          '[]'::json
        END) as columns,
        value->>'t', 
        json_build_array(array(SELECT
            value->'value'
        FROM json_array_elements(value->'roles')
        ))->0, value->>'type', coalesce(value->'table','{}')
   FROM json_array_elements(filtrs);

	

END;
$$;


ALTER FUNCTION test.fn_filters_in_table(filtrs json, INOUT _vid integer) OWNER TO postgres;

--
-- TOC entry 3439 (class 0 OID 0)
-- Dependencies: 562
-- Name: FUNCTION fn_filters_in_table(filtrs json, INOUT _vid integer); Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON FUNCTION fn_filters_in_table(filtrs json, INOUT _vid integer) IS 'ins filters from json (table views) into table';


--
-- TOC entry 563 (class 1255 OID 227466)
-- Name: fn_getmethodtest_setcolorblack(json); Type: FUNCTION; Schema: test; Owner: postgres
--

CREATE FUNCTION fn_getmethodtest_setcolorblack(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
	_id int;
BEGIN
	/*
      TEST GET API METHOD 
      CHANGE test.major_table
      colorpicker COLOR    
    */
	
	_id = injson->>'id';
    
    IF _id is null THEN
    	PERFORM raiserror('id is null');
    END IF;
    
    UPDATE test.major_table
    SET colorpicker = 'ff0000'
    WHERE id = _id;



END;
$$;


ALTER FUNCTION test.fn_getmethodtest_setcolorblack(injson json) OWNER TO postgres;

--
-- TOC entry 3440 (class 0 OID 0)
-- Dependencies: 563
-- Name: FUNCTION fn_getmethodtest_setcolorblack(injson json); Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON FUNCTION fn_getmethodtest_setcolorblack(injson json) IS 'TEST GET API METHOD 
CHANGE test.major_table
colorpicker COLOR';


--
-- TOC entry 564 (class 1255 OID 227467)
-- Name: fn_gettest_setallcolor_red(json); Type: FUNCTION; Schema: test; Owner: postgres
--

CREATE FUNCTION fn_gettest_setallcolor_red(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _id int;
BEGIN

	_id = injson->>'id';
    
    UPDATE test.major_table
    SET color = 'red';

END;
$$;


ALTER FUNCTION test.fn_gettest_setallcolor_red(injson json) OWNER TO postgres;

--
-- TOC entry 3441 (class 0 OID 0)
-- Dependencies: 564
-- Name: FUNCTION fn_gettest_setallcolor_red(injson json); Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON FUNCTION fn_gettest_setallcolor_red(injson json) IS 'set color red for test action in view';


--
-- TOC entry 565 (class 1255 OID 227468)
-- Name: fn_parametrs_intotables(json, integer, integer); Type: FUNCTION; Schema: test; Owner: postgres
--

CREATE FUNCTION fn_parametrs_intotables(_params json, vi_id integer, INOUT act_id integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
/*DECLARE
  variable_name datatype;*/
BEGIN
    INSERT INTO framework.act_parametrs (
      actionid,
      paramtitle,
      paramt,
      paramconst,
      paraminput,
      paramcolumn,
      val_desc
    ) 
    SELECT 
    	act_id,
        value->>'paramtitle' as paramtitle,
        value->>'paramt' as paramt,
        value->>'paramconst' as paramconst,
        value->>'paraminput' as paraminput,
        (value->'paramcolumn')->>'value' as paramcolumn,
        (
        SELECT
        	c.id
        FROM framework.config as c
        WHERE c.viewid = vi_id and c.title = (value->'paramcolumn')->>'value'
        ) as val_desc
    FROM json_array_elements(_params) as p;
    
    /*
		"paramt": null, 
        "paramconst": "", 
        "paraminput": "actionid", 
        "paramtitle": "actionid", 
        "paramcolumn": null
    */
END;
$$;


ALTER FUNCTION test.fn_parametrs_intotables(_params json, vi_id integer, INOUT act_id integer) OWNER TO postgres;

--
-- TOC entry 3442 (class 0 OID 0)
-- Dependencies: 565
-- Name: FUNCTION fn_parametrs_intotables(_params json, vi_id integer, INOUT act_id integer); Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON FUNCTION fn_parametrs_intotables(_params json, vi_id integer, INOUT act_id integer) IS 'ins acts params from json (table views) into table';


--
-- TOC entry 566 (class 1255 OID 227469)
-- Name: fn_postmethodtest_setcolorblue(json); Type: FUNCTION; Schema: test; Owner: postgres
--

CREATE FUNCTION fn_postmethodtest_setcolorblue(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
	_id int;
BEGIN
	/*
      TEST POST API METHOD 
      CHANGE test.major_table
      colorpicker COLOR    
    */
	
	_id = injson->>'id';
    
    IF _id is null THEN
    	PERFORM raiserror('id is null');
    END IF;
    
    UPDATE test.major_table
    SET colorpicker = '2f00ff'
    WHERE id = _id;



END;
$$;


ALTER FUNCTION test.fn_postmethodtest_setcolorblue(injson json) OWNER TO postgres;

--
-- TOC entry 3443 (class 0 OID 0)
-- Dependencies: 566
-- Name: FUNCTION fn_postmethodtest_setcolorblue(injson json); Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON FUNCTION fn_postmethodtest_setcolorblue(injson json) IS 'TEST POST API METHOD 
CHANGE test.major_table
colorpicker COLOR    ';


--
-- TOC entry 567 (class 1255 OID 227470)
-- Name: fn_postmethodtest_setselectedcolor_black(json); Type: FUNCTION; Schema: test; Owner: postgres
--

CREATE FUNCTION fn_postmethodtest_setselectedcolor_black(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
	_id int;
    checked json;
BEGIN
	/*
      TEST POST API METHOD 
      CHANGE test.major_table
      colorpicker COLOR by selected rows  
    */
	
	checked = injson->>'checked';
    
    IF checked is null THEN
    	PERFORM raiserror('checked is null');
    END IF;
    
    
    
    UPDATE test.major_table as m
    SET colorpicker = '000000'
    FROM json_array_elements(checked) as c
    WHERE (c.value->>'id_3a31e')::int = m.id;



END;
$$;


ALTER FUNCTION test.fn_postmethodtest_setselectedcolor_black(injson json) OWNER TO postgres;

--
-- TOC entry 3444 (class 0 OID 0)
-- Dependencies: 567
-- Name: FUNCTION fn_postmethodtest_setselectedcolor_black(injson json); Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON FUNCTION fn_postmethodtest_setselectedcolor_black(injson json) IS 'TEST POST API METHOD 
CHANGE test.major_table
colorpicker COLOR by selected rows  ';


--
-- TOC entry 568 (class 1255 OID 227471)
-- Name: fn_select_api(json); Type: FUNCTION; Schema: test; Owner: postgres
--

CREATE FUNCTION fn_select_api(injson json, OUT outjson json) RETURNS json
    LANGUAGE plpgsql
    AS $$
/*
	function must have input variable "injson" type of JSON
    and out variable "outjson" type of JSON,
    objects array with label,value keys
*/
DECLARE 
	_substr varchar(150);
    _data json; -- from data  
    _inputs json; -- query params

BEGIN
	_substr = injson->>'substr';
    _data = injson->'data';
    _inputs = injson->'inputs';
    
    
    _substr = concat('%',lower(_substr),'%');

	SElECT
    	array_to_json(array_agg(row_to_json(f))) 
    FROM
    (SELECT 
    	d.id as value,
        d.dname as label
    FROM test.dictionary_for_select as d
    WHERE lower(d.dname) like _substr OR 
    	  d.id::varchar like _substr -- there must be "id" too
    ) as f
	INTO outjson;
    
    outjson = coalesce(outjson,'[]');
END;
$$;


ALTER FUNCTION test.fn_select_api(injson json, OUT outjson json) OWNER TO postgres;

--
-- TOC entry 3445 (class 0 OID 0)
-- Dependencies: 568
-- Name: FUNCTION fn_select_api(injson json, OUT outjson json); Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON FUNCTION fn_select_api(injson json, OUT outjson json) IS 'test select_api type';


--
-- TOC entry 569 (class 1255 OID 227472)
-- Name: fn_select_condition_intable(integer, json); Type: FUNCTION; Schema: test; Owner: postgres
--

CREATE FUNCTION fn_select_condition_intable(INOUT _colid integer, _sc json) RETURNS integer
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- put visible_condition from json to table 

  /*[{"col": {"label": "treesid", "value": "treesid"}, "value": {"t": 1, "key":
  "treesid_9766c", "label": "treesid", "value": "treesid"}, "operation": {"js":
  "===", "label": "=", "value": "=", "python": "=="}}, {"col": {"label": "id",
  "value": "id"}, "value": {"t": 1, "key": "id_512cb", "label": "id", "value":
  "bid"}, "operation": {"js": "!==", "label": "!=", "value": "<>", "python":
  "!="}}]
  */
   IF _colid is not null and _sc::varchar like '[%' THEN
     INSERT INTO framework.select_condition (
        configid,
        col ,
        operation ,
        const,
        value,
        val_desc 
      )
      SELECT
          _colid,
          (v.value->'col')->>'label',
          (v.value->'operation')->>'value',
          v.value->>'const',
          v.value->>'value',
          (SELECT
              c.id
           FROM framework.config as c
           WHERE c.title = ((v.value->'value')->>'value')
           and c.col = ((v.value->'value')->>'label')
           LIMIT 1)
          
          
      FROM json_array_elements(_sc) as v;
    END IF;
    
END;
$$;


ALTER FUNCTION test.fn_select_condition_intable(INOUT _colid integer, _sc json) OWNER TO postgres;

--
-- TOC entry 3446 (class 0 OID 0)
-- Dependencies: 569
-- Name: FUNCTION fn_select_condition_intable(INOUT _colid integer, _sc json); Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON FUNCTION fn_select_condition_intable(INOUT _colid integer, _sc json) IS 'put visible_condition from json to table ';


--
-- TOC entry 570 (class 1255 OID 227473)
-- Name: fn_setParamsKey(json, jsonb); Type: FUNCTION; Schema: test; Owner: postgres
--

CREATE FUNCTION "fn_setParamsKey"(conf json, INOUT paramcol jsonb) RETURNS jsonb
    LANGUAGE plpgsql
    AS $$
BEGIN

   

   	IF paramcol is not null THEN
     SELECT	
       paramcol::jsonb
            || 
       coalesce(jsonb_build_object('key', (
          SELECT
            c.value->>'key'
          FROM json_array_elements(conf) as c
          WHERE c.value->>'title' = (paramcol)->>'value'
        )),'{}')
     INTO paramcol;
    END IF;

END;
$$;


ALTER FUNCTION test."fn_setParamsKey"(conf json, INOUT paramcol jsonb) OWNER TO postgres;

--
-- TOC entry 3447 (class 0 OID 0)
-- Dependencies: 570
-- Name: FUNCTION "fn_setParamsKey"(conf json, INOUT paramcol jsonb); Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON FUNCTION "fn_setParamsKey"(conf json, INOUT paramcol jsonb) IS 'set keys in params into json';


--
-- TOC entry 571 (class 1255 OID 227474)
-- Name: fn_tel_save(json); Type: FUNCTION; Schema: test; Owner: postgres
--

CREATE FUNCTION fn_tel_save(injson json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  _log_data json;
BEGIN
	_log_data = injson->>'logdata';
    
    IF _log_data is null
    THEN
    	PERFORM raiserror('logdata is null');
    END IF;
    
    INSERT INTO test.fel (
    	logdata
    ) VALUES (
    	_log_data
    );
    
    

END;
$$;


ALTER FUNCTION test.fn_tel_save(injson json) OWNER TO postgres;

--
-- TOC entry 572 (class 1255 OID 227475)
-- Name: fn_test(); Type: FUNCTION; Schema: test; Owner: postgres
--

CREATE FUNCTION fn_test() RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN

END;
$$;


ALTER FUNCTION test.fn_test() OWNER TO postgres;

--
-- TOC entry 3448 (class 0 OID 0)
-- Dependencies: 572
-- Name: FUNCTION fn_test(); Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON FUNCTION fn_test() IS 'test22';


--
-- TOC entry 573 (class 1255 OID 227476)
-- Name: fn_test3_t(); Type: FUNCTION; Schema: test; Owner: postgres
--

CREATE FUNCTION fn_test3_t() RETURNS void
    LANGUAGE plpgsql
    AS $$
      DECLARE BEGIN END;
      $$;


ALTER FUNCTION test.fn_test3_t() OWNER TO postgres;

--
-- TOC entry 574 (class 1255 OID 227477)
-- Name: fn_views_in_table(); Type: FUNCTION; Schema: test; Owner: postgres
--

CREATE FUNCTION fn_views_in_table() RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE	
	x json;
BEGIN
	-- put views data in tables
	SELECT 
    	array_to_json(array_agg(row_to_json(d)))
    FROM
    (
    SELECT
    	test.fn_config_in_table(v.config, v.id) as f,
        test.fn_filters_in_table(v.filters, v.id) as k,
        test.fn_actions_in_table(v.acts, v.id) as a
    FROM framework.views as v
    WHERE v.id in (118,119,120,121)
    ) as d
    INTO x;
    
    
    
   -- INTO x;


END;
$$;


ALTER FUNCTION test.fn_views_in_table() OWNER TO postgres;

--
-- TOC entry 3449 (class 0 OID 0)
-- Dependencies: 574
-- Name: FUNCTION fn_views_in_table(); Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON FUNCTION fn_views_in_table() IS 'put views data in tables';


--
-- TOC entry 575 (class 1255 OID 227478)
-- Name: fn_visible_condition_intable(integer, json); Type: FUNCTION; Schema: test; Owner: postgres
--

CREATE FUNCTION fn_visible_condition_intable(INOUT _colid integer, _vs json) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE 
	_viewid int;
BEGIN
  -- put visible_condition from json to table 

  /*[{"col": {"t": 1, "label": "id", "value": "bid"}, 
  		"value": "-1",
  	 "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]*/
   IF _colid is not null and _vs::varchar like '[%' 
   THEN
   	 SELECT
     	c.viewid
     FROM framework.config as c
     WHERE c.id = _colid
     INTO _viewid;	
 
     INSERT INTO framework.visible_condition (
        configid, col,
        operation, value,
        val_desc
      )
      SELECT
          _colid, (v.value->'col')->>'label',
          (v.value->'operation')->>'value', v.value->>'value',
          (SELECT
              c.id
           FROM framework.config as c
           WHERE c.title = ((v.value->'col')->>'value')
           and c.col = ((v.value->'col')->>'label')
           LIMIT 1)
      FROM json_array_elements(_vs) as v;
   END IF;
    
END;
$$;


ALTER FUNCTION test.fn_visible_condition_intable(INOUT _colid integer, _vs json) OWNER TO postgres;

--
-- TOC entry 3450 (class 0 OID 0)
-- Dependencies: 575
-- Name: FUNCTION fn_visible_condition_intable(INOUT _colid integer, _vs json); Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON FUNCTION fn_visible_condition_intable(INOUT _colid integer, _vs json) IS 'put visible_condition from json to table ';


--
-- TOC entry 576 (class 1255 OID 227479)
-- Name: tr_dfs4(); Type: FUNCTION; Schema: test; Owner: postgres
--

CREATE FUNCTION tr_dfs4() RETURNS trigger
    LANGUAGE plpgsql
    AS $$BEGIN 
  
  RETURN NEW; 
END;
          
            
            
            $$;


ALTER FUNCTION test.tr_dfs4() OWNER TO postgres;

--
-- TOC entry 580 (class 1255 OID 227480)
-- Name: tr_major_table_tr(); Type: FUNCTION; Schema: test; Owner: postgres
--

CREATE FUNCTION tr_major_table_tr() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN

	NEW.gallery = NEW.images;
    NEW.color = NEW.colorpicker;
    NEW.colorrow = NEW.colorpicker;
    IF NEW.colorpicker is not null and NEW.colorpicker not like '#%'
    THEN
    	NEW.color = concat('#',NEW.color);
    	NEW.colorrow = concat('#',NEW.colorrow);
    END IF;
    NEW.link = json_build_object('title', NEW.text, 'link', concat('/view/',NEW.number));
    NEW.label = NEW.text;
    NEW.html = NEW.texteditor;
    
    RETURN NEW;

END;

            
            
            
            $$;


ALTER FUNCTION test.tr_major_table_tr() OWNER TO postgres;

--
-- TOC entry 3451 (class 0 OID 0)
-- Dependencies: 580
-- Name: FUNCTION tr_major_table_tr(); Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON FUNCTION tr_major_table_tr() IS 'test major table trigger';


--
-- TOC entry 577 (class 1255 OID 227481)
-- Name: tr_major_table_tr1(); Type: FUNCTION; Schema: test; Owner: postgres
--

CREATE FUNCTION tr_major_table_tr1() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
	--PERFORM raiserror(TG_TAG::varchar);
	RETURN NEW;
END;
$$;


ALTER FUNCTION test.tr_major_table_tr1() OWNER TO postgres;

--
-- TOC entry 578 (class 1255 OID 227482)
-- Name: tr_trtr(); Type: FUNCTION; Schema: test; Owner: postgres
--

CREATE FUNCTION tr_trtr() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
          DECLARE

          BEGIN


              RETURN NEW;
          END;
          $$;


ALTER FUNCTION test.tr_trtr() OWNER TO postgres;

SET search_path = framework, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- TOC entry 186 (class 1259 OID 227483)
-- Name: act_parametrs; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE act_parametrs (
    id integer NOT NULL,
    actionid integer NOT NULL,
    paramtitle character varying(350),
    paramt character varying(50),
    paramconst character varying(350),
    paraminput character varying(350),
    paramcolumn character varying(350),
    val_desc integer,
    query_type character varying(25) DEFAULT 'query'::character varying NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL,
    orderby smallint DEFAULT '0'::smallint NOT NULL
);


ALTER TABLE act_parametrs OWNER TO postgres;

--
-- TOC entry 3452 (class 0 OID 0)
-- Dependencies: 186
-- Name: TABLE act_parametrs; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE act_parametrs IS 'ACTIONS PARAMETERS';


--
-- TOC entry 187 (class 1259 OID 227492)
-- Name: act_parametrs_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE act_parametrs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE act_parametrs_id_seq OWNER TO postgres;

--
-- TOC entry 3453 (class 0 OID 0)
-- Dependencies: 187
-- Name: act_parametrs_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE act_parametrs_id_seq OWNED BY act_parametrs.id;


--
-- TOC entry 188 (class 1259 OID 227494)
-- Name: act_visible_condions; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE act_visible_condions (
    id integer NOT NULL,
    actionid integer NOT NULL,
    val_desc integer,
    col character varying(350),
    title character varying(350),
    operation character varying(30),
    value character varying(350),
    created timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE act_visible_condions OWNER TO postgres;

--
-- TOC entry 3454 (class 0 OID 0)
-- Dependencies: 188
-- Name: TABLE act_visible_condions; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE act_visible_condions IS 'action visible condition';


--
-- TOC entry 3455 (class 0 OID 0)
-- Dependencies: 188
-- Name: COLUMN act_visible_condions.val_desc; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN act_visible_condions.val_desc IS 'column id in config';


--
-- TOC entry 3456 (class 0 OID 0)
-- Dependencies: 188
-- Name: COLUMN act_visible_condions.operation; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN act_visible_condions.operation IS 'bool operation ';


--
-- TOC entry 3457 (class 0 OID 0)
-- Dependencies: 188
-- Name: COLUMN act_visible_condions.value; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN act_visible_condions.value IS 'const value';


--
-- TOC entry 189 (class 1259 OID 227501)
-- Name: act_visible_condions_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE act_visible_condions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE act_visible_condions_id_seq OWNER TO postgres;

--
-- TOC entry 3458 (class 0 OID 0)
-- Dependencies: 189
-- Name: act_visible_condions_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE act_visible_condions_id_seq OWNED BY act_visible_condions.id;


--
-- TOC entry 190 (class 1259 OID 227503)
-- Name: actions; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE actions (
    id integer NOT NULL,
    column_order integer DEFAULT 0 NOT NULL,
    title character varying(350),
    viewid integer NOT NULL,
    icon character varying(100),
    classname character varying(350),
    act_url character varying(400),
    api_method character varying(25),
    api_type character varying(15),
    refresh_data boolean DEFAULT false NOT NULL,
    ask_confirm boolean DEFAULT false NOT NULL,
    roles json DEFAULT '[]'::json NOT NULL,
    forevery boolean DEFAULT false NOT NULL,
    main_action boolean DEFAULT false NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL,
    act_type character varying(50) NOT NULL
);


ALTER TABLE actions OWNER TO postgres;

--
-- TOC entry 3459 (class 0 OID 0)
-- Dependencies: 190
-- Name: TABLE actions; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE actions IS 'VIEWS ACTIONS';


--
-- TOC entry 191 (class 1259 OID 227516)
-- Name: actions_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE actions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE actions_id_seq OWNER TO postgres;

--
-- TOC entry 3460 (class 0 OID 0)
-- Dependencies: 191
-- Name: actions_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE actions_id_seq OWNED BY actions.id;


--
-- TOC entry 192 (class 1259 OID 227518)
-- Name: actparam_querytypes; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE actparam_querytypes (
    id smallint NOT NULL,
    aqname character varying(50) NOT NULL
);


ALTER TABLE actparam_querytypes OWNER TO postgres;

--
-- TOC entry 3461 (class 0 OID 0)
-- Dependencies: 192
-- Name: TABLE actparam_querytypes; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE actparam_querytypes IS 'action''s parametrs query types';


--
-- TOC entry 193 (class 1259 OID 227521)
-- Name: actparam_querytypes_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE actparam_querytypes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE actparam_querytypes_id_seq OWNER TO postgres;

--
-- TOC entry 3462 (class 0 OID 0)
-- Dependencies: 193
-- Name: actparam_querytypes_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE actparam_querytypes_id_seq OWNED BY actparam_querytypes.id;


--
-- TOC entry 194 (class 1259 OID 227523)
-- Name: acttypes; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE acttypes (
    id smallint NOT NULL,
    actname character varying(150) NOT NULL,
    viewtypes json DEFAULT '[]'::json NOT NULL
);


ALTER TABLE acttypes OWNER TO postgres;

--
-- TOC entry 3463 (class 0 OID 0)
-- Dependencies: 194
-- Name: TABLE acttypes; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE acttypes IS 'actions types dictionary';


--
-- TOC entry 195 (class 1259 OID 227530)
-- Name: apicallingmethods; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE apicallingmethods (
    id smallint NOT NULL,
    aname character varying(150) NOT NULL
);


ALTER TABLE apicallingmethods OWNER TO postgres;

--
-- TOC entry 3464 (class 0 OID 0)
-- Dependencies: 195
-- Name: TABLE apicallingmethods; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE apicallingmethods IS 'API calling methods
for user methods';


--
-- TOC entry 196 (class 1259 OID 227533)
-- Name: apicallingmethods_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE apicallingmethods_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE apicallingmethods_id_seq OWNER TO postgres;

--
-- TOC entry 3465 (class 0 OID 0)
-- Dependencies: 196
-- Name: apicallingmethods_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE apicallingmethods_id_seq OWNED BY apicallingmethods.id;


--
-- TOC entry 197 (class 1259 OID 227535)
-- Name: apimethods; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE apimethods (
    id smallint NOT NULL,
    val character varying(150) NOT NULL,
    created timestamp(0) without time zone DEFAULT now()
);


ALTER TABLE apimethods OWNER TO postgres;

--
-- TOC entry 3466 (class 0 OID 0)
-- Dependencies: 197
-- Name: TABLE apimethods; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE apimethods IS 'Different implementations of API calls
Along with the type, a method must be added on the interface (front-end)';


--
-- TOC entry 198 (class 1259 OID 227539)
-- Name: booloper; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE booloper (
    id smallint NOT NULL,
    bname character varying(5) NOT NULL
);


ALTER TABLE booloper OWNER TO postgres;

--
-- TOC entry 3467 (class 0 OID 0)
-- Dependencies: 198
-- Name: TABLE booloper; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE booloper IS 'boolean operations';


--
-- TOC entry 199 (class 1259 OID 227542)
-- Name: booloper_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE booloper_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE booloper_id_seq OWNER TO postgres;

--
-- TOC entry 3468 (class 0 OID 0)
-- Dependencies: 199
-- Name: booloper_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE booloper_id_seq OWNED BY booloper.id;


--
-- TOC entry 200 (class 1259 OID 227544)
-- Name: calendar_actions; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE calendar_actions (
    id integer NOT NULL,
    type character varying(50),
    title character varying(300),
    start timestamp(0) without time zone DEFAULT now() NOT NULL,
    "end" timestamp(0) without time zone DEFAULT now() NOT NULL,
    "desc" character varying(350),
    current_day date
);


ALTER TABLE calendar_actions OWNER TO postgres;

--
-- TOC entry 3469 (class 0 OID 0)
-- Dependencies: 200
-- Name: TABLE calendar_actions; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE calendar_actions IS 'calendars actions test table
not use
delete';


--
-- TOC entry 3470 (class 0 OID 0)
-- Dependencies: 200
-- Name: COLUMN calendar_actions.title; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN calendar_actions.title IS 'title';


--
-- TOC entry 3471 (class 0 OID 0)
-- Dependencies: 200
-- Name: COLUMN calendar_actions.start; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN calendar_actions.start IS 'start date';


--
-- TOC entry 3472 (class 0 OID 0)
-- Dependencies: 200
-- Name: COLUMN calendar_actions."end"; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN calendar_actions."end" IS 'enddate';


--
-- TOC entry 3473 (class 0 OID 0)
-- Dependencies: 200
-- Name: COLUMN calendar_actions."desc"; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN calendar_actions."desc" IS 'description';


--
-- TOC entry 201 (class 1259 OID 227552)
-- Name: calendar_actions_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE calendar_actions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE calendar_actions_id_seq OWNER TO postgres;

--
-- TOC entry 3474 (class 0 OID 0)
-- Dependencies: 201
-- Name: calendar_actions_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE calendar_actions_id_seq OWNED BY calendar_actions.id;


--
-- TOC entry 202 (class 1259 OID 227554)
-- Name: calendar_test; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE calendar_test (
    id integer NOT NULL,
    calendar_date date NOT NULL,
    month integer DEFAULT 1 NOT NULL
);


ALTER TABLE calendar_test OWNER TO postgres;

--
-- TOC entry 3475 (class 0 OID 0)
-- Dependencies: 202
-- Name: TABLE calendar_test; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE calendar_test IS 'calendar types view test table
not use
delete';


--
-- TOC entry 3476 (class 0 OID 0)
-- Dependencies: 202
-- Name: COLUMN calendar_test.calendar_date; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN calendar_test.calendar_date IS 'calendar date';


--
-- TOC entry 3477 (class 0 OID 0)
-- Dependencies: 202
-- Name: COLUMN calendar_test.month; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN calendar_test.month IS 'month';


--
-- TOC entry 203 (class 1259 OID 227558)
-- Name: calendar_test_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE calendar_test_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE calendar_test_id_seq OWNER TO postgres;

--
-- TOC entry 3478 (class 0 OID 0)
-- Dependencies: 203
-- Name: calendar_test_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE calendar_test_id_seq OWNED BY calendar_test.id;


--
-- TOC entry 204 (class 1259 OID 227560)
-- Name: columntypes; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE columntypes (
    id integer NOT NULL,
    typename character varying(100) NOT NULL,
    viewtypes json DEFAULT '["form full","form not mutable"]'::json NOT NULL
);


ALTER TABLE columntypes OWNER TO postgres;

--
-- TOC entry 3479 (class 0 OID 0)
-- Dependencies: 204
-- Name: TABLE columntypes; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE columntypes IS 'configs columns types';


--
-- TOC entry 205 (class 1259 OID 227567)
-- Name: columntypes_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE columntypes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE columntypes_id_seq OWNER TO postgres;

--
-- TOC entry 206 (class 1259 OID 227569)
-- Name: columntypes_id_seq1; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE columntypes_id_seq1
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE columntypes_id_seq1 OWNER TO postgres;

--
-- TOC entry 3480 (class 0 OID 0)
-- Dependencies: 206
-- Name: columntypes_id_seq1; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE columntypes_id_seq1 OWNED BY columntypes.id;


--
-- TOC entry 207 (class 1259 OID 227571)
-- Name: compos; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE compos (
    id integer NOT NULL,
    title character varying(250) NOT NULL,
    path character varying(250) NOT NULL,
    config json DEFAULT '[]'::json NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE compos OWNER TO postgres;

--
-- TOC entry 3481 (class 0 OID 0)
-- Dependencies: 207
-- Name: TABLE compos; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE compos IS 'compositions';


--
-- TOC entry 3482 (class 0 OID 0)
-- Dependencies: 207
-- Name: COLUMN compos.title; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN compos.title IS 'compositions title';


--
-- TOC entry 3483 (class 0 OID 0)
-- Dependencies: 207
-- Name: COLUMN compos.path; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN compos.path IS 'path';


--
-- TOC entry 3484 (class 0 OID 0)
-- Dependencies: 207
-- Name: COLUMN compos.config; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN compos.config IS 'config with views';


--
-- TOC entry 208 (class 1259 OID 227579)
-- Name: compos_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE compos_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE compos_id_seq OWNER TO postgres;

--
-- TOC entry 209 (class 1259 OID 227581)
-- Name: compos_id_seq1; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE compos_id_seq1
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE compos_id_seq1 OWNER TO postgres;

--
-- TOC entry 3485 (class 0 OID 0)
-- Dependencies: 209
-- Name: compos_id_seq1; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE compos_id_seq1 OWNED BY compos.id;


--
-- TOC entry 210 (class 1259 OID 227583)
-- Name: config; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE config (
    id integer NOT NULL,
    viewid integer NOT NULL,
    t character varying(50) DEFAULT '1'::character varying,
    col character varying(200) NOT NULL,
    column_id integer,
    title character varying(300) NOT NULL,
    type character varying(100) DEFAULT 'label'::character varying NOT NULL,
    roles json DEFAULT '[]'::json NOT NULL,
    visible boolean DEFAULT true NOT NULL,
    required boolean DEFAULT false NOT NULL,
    width character varying(40),
    "join" boolean DEFAULT false NOT NULL,
    classname character varying(150),
    updatable boolean DEFAULT false NOT NULL,
    relation character varying(150),
    select_api character varying(150),
    multiselecttable character varying(150),
    orderby boolean DEFAULT false NOT NULL,
    orderbydesc boolean DEFAULT false NOT NULL,
    relcol character varying(150),
    depency boolean DEFAULT false NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL,
    relationcolums json DEFAULT '[]'::json NOT NULL,
    multicolums json DEFAULT '[]'::json NOT NULL,
    depencycol character varying(150),
    column_order smallint DEFAULT 0 NOT NULL,
    fn character varying(150),
    fncolumns json,
    relatecolumn character varying(150),
    "table" character varying(150),
    related boolean DEFAULT false NOT NULL,
    tpath json DEFAULT '[]'::json NOT NULL,
    editable boolean DEFAULT false NOT NULL,
    copy boolean DEFAULT false NOT NULL
);


ALTER TABLE config OWNER TO postgres;

--
-- TOC entry 3486 (class 0 OID 0)
-- Dependencies: 210
-- Name: TABLE config; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE config IS 'view columns config';


--
-- TOC entry 3487 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.viewid; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.viewid IS 'view';


--
-- TOC entry 3488 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.t; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.t IS 'column allias in query';


--
-- TOC entry 3489 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.col; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.col IS 'column title';


--
-- TOC entry 3490 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.column_id; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.column_id IS 'column id in db
use in createconfig function';


--
-- TOC entry 3491 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.title; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.title IS 'title';


--
-- TOC entry 3492 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.type; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.type IS 'type';


--
-- TOC entry 3493 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.roles; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.roles IS 'roles accessed to this column';


--
-- TOC entry 3494 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.visible; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.visible IS 'is required in WHERE (query)';


--
-- TOC entry 3495 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.required; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.required IS 'is required column value in WHERE';


--
-- TOC entry 3496 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.width; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.width IS 'column width CSS';


--
-- TOC entry 3497 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config."join"; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config."join" IS 'use JOIN if true
LEFT JOIN if false';


--
-- TOC entry 3498 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.classname; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.classname IS 'className CSS';


--
-- TOC entry 3499 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.updatable; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.updatable IS 'refresh data on this column change';


--
-- TOC entry 3500 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.relation; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.relation IS 'relation table';


--
-- TOC entry 3501 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.select_api; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.select_api IS 'api method path for type *_api';


--
-- TOC entry 3502 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.multiselecttable; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.multiselecttable IS 'tablename for type multiselect';


--
-- TOC entry 3503 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.orderby; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.orderby IS 'order by this column by default';


--
-- TOC entry 3504 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.orderbydesc; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.orderbydesc IS 'order by desc or asc';


--
-- TOC entry 3505 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.depency; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.depency IS 'this column is depency table';


--
-- TOC entry 3506 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.relationcolums; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.relationcolums IS 'columns for columns with relations
for typehead, select types in forms
for select filters in lists';


--
-- TOC entry 3507 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.multicolums; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.multicolums IS 'columns array for multiselect type';


--
-- TOC entry 3508 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.column_order; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.column_order IS 'column order in config';


--
-- TOC entry 3509 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.fn; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.fn IS 'function is SELECT';


--
-- TOC entry 3510 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.fncolumns; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.fncolumns IS 'Function input parametrs';


--
-- TOC entry 3511 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config."table"; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config."table" IS 'table name for related col';


--
-- TOC entry 3512 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.related; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.related IS 'is related';


--
-- TOC entry 3513 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.tpath; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.tpath IS 'join path';


--
-- TOC entry 3514 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.editable; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.editable IS 'is editable cell';


--
-- TOC entry 3515 (class 0 OID 0)
-- Dependencies: 210
-- Name: COLUMN config.copy; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN config.copy IS 'if true don''t apply triggers changes';


--
-- TOC entry 211 (class 1259 OID 227607)
-- Name: config_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE config_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE config_id_seq OWNER TO postgres;

--
-- TOC entry 3516 (class 0 OID 0)
-- Dependencies: 211
-- Name: config_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE config_id_seq OWNED BY config.id;


--
-- TOC entry 212 (class 1259 OID 227609)
-- Name: configsettings; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE configsettings (
    id integer NOT NULL,
    sname character varying(150) NOT NULL
);


ALTER TABLE configsettings OWNER TO postgres;

--
-- TOC entry 3517 (class 0 OID 0)
-- Dependencies: 212
-- Name: TABLE configsettings; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE configsettings IS 'config settings list';


--
-- TOC entry 213 (class 1259 OID 227612)
-- Name: configsettings_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE configsettings_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE configsettings_id_seq OWNER TO postgres;

--
-- TOC entry 3518 (class 0 OID 0)
-- Dependencies: 213
-- Name: configsettings_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE configsettings_id_seq OWNED BY configsettings.id;


--
-- TOC entry 214 (class 1259 OID 227614)
-- Name: defaultval; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE defaultval (
    id integer NOT NULL,
    configid integer NOT NULL,
    bool character varying(5),
    act character varying(30),
    value character varying(300),
    created timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE defaultval OWNER TO postgres;

--
-- TOC entry 3519 (class 0 OID 0)
-- Dependencies: 214
-- Name: TABLE defaultval; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE defaultval IS 'defaultval configs property';


--
-- TOC entry 3520 (class 0 OID 0)
-- Dependencies: 214
-- Name: COLUMN defaultval.configid; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN defaultval.configid IS 'id from config table';


--
-- TOC entry 3521 (class 0 OID 0)
-- Dependencies: 214
-- Name: COLUMN defaultval.bool; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN defaultval.bool IS 'bool operator';


--
-- TOC entry 3522 (class 0 OID 0)
-- Dependencies: 214
-- Name: COLUMN defaultval.act; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN defaultval.act IS 'action';


--
-- TOC entry 3523 (class 0 OID 0)
-- Dependencies: 214
-- Name: COLUMN defaultval.value; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN defaultval.value IS 'value';


--
-- TOC entry 215 (class 1259 OID 227618)
-- Name: defaultval_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE defaultval_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE defaultval_id_seq OWNER TO postgres;

--
-- TOC entry 3524 (class 0 OID 0)
-- Dependencies: 215
-- Name: defaultval_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE defaultval_id_seq OWNED BY defaultval.id;


--
-- TOC entry 216 (class 1259 OID 227620)
-- Name: dialog_messages; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE dialog_messages (
    id integer NOT NULL,
    userid integer NOT NULL,
    message_text character varying NOT NULL,
    reply_to integer,
    forwarded_from integer,
    dialog_id integer NOT NULL,
    files json DEFAULT '[]'::json NOT NULL,
    images json DEFAULT '[]'::json NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL,
    isread boolean DEFAULT false NOT NULL,
    isupdated boolean DEFAULT false NOT NULL,
    user_reads json DEFAULT '[]'::json NOT NULL
);


ALTER TABLE dialog_messages OWNER TO postgres;

--
-- TOC entry 3525 (class 0 OID 0)
-- Dependencies: 216
-- Name: COLUMN dialog_messages.userid; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN dialog_messages.userid IS 'who send';


--
-- TOC entry 3526 (class 0 OID 0)
-- Dependencies: 216
-- Name: COLUMN dialog_messages.message_text; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN dialog_messages.message_text IS 'message';


--
-- TOC entry 3527 (class 0 OID 0)
-- Dependencies: 216
-- Name: COLUMN dialog_messages.reply_to; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN dialog_messages.reply_to IS 'reply to message id';


--
-- TOC entry 3528 (class 0 OID 0)
-- Dependencies: 216
-- Name: COLUMN dialog_messages.forwarded_from; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN dialog_messages.forwarded_from IS 'forward from message';


--
-- TOC entry 3529 (class 0 OID 0)
-- Dependencies: 216
-- Name: COLUMN dialog_messages.dialog_id; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN dialog_messages.dialog_id IS 'dialog';


--
-- TOC entry 3530 (class 0 OID 0)
-- Dependencies: 216
-- Name: COLUMN dialog_messages.files; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN dialog_messages.files IS 'files';


--
-- TOC entry 3531 (class 0 OID 0)
-- Dependencies: 216
-- Name: COLUMN dialog_messages.images; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN dialog_messages.images IS 'images';


--
-- TOC entry 3532 (class 0 OID 0)
-- Dependencies: 216
-- Name: COLUMN dialog_messages.isread; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN dialog_messages.isread IS 'when user read message';


--
-- TOC entry 3533 (class 0 OID 0)
-- Dependencies: 216
-- Name: COLUMN dialog_messages.isupdated; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN dialog_messages.isupdated IS 'when user update the message';


--
-- TOC entry 3534 (class 0 OID 0)
-- Dependencies: 216
-- Name: COLUMN dialog_messages.user_reads; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN dialog_messages.user_reads IS 'users who reads the message';


--
-- TOC entry 217 (class 1259 OID 227632)
-- Name: dialog_messages_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE dialog_messages_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dialog_messages_id_seq OWNER TO postgres;

--
-- TOC entry 3535 (class 0 OID 0)
-- Dependencies: 217
-- Name: dialog_messages_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE dialog_messages_id_seq OWNED BY dialog_messages.id;


--
-- TOC entry 218 (class 1259 OID 227634)
-- Name: dialog_notifications; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE dialog_notifications (
    id integer NOT NULL,
    dialog_id integer NOT NULL,
    sender_userid integer NOT NULL,
    userid integer NOT NULL,
    message_text character varying NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL,
    issend boolean DEFAULT false NOT NULL,
    message_id integer NOT NULL,
    isread boolean DEFAULT false NOT NULL
);


ALTER TABLE dialog_notifications OWNER TO postgres;

--
-- TOC entry 3536 (class 0 OID 0)
-- Dependencies: 218
-- Name: TABLE dialog_notifications; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE dialog_notifications IS 'ws notifications for dialogs';


--
-- TOC entry 3537 (class 0 OID 0)
-- Dependencies: 218
-- Name: COLUMN dialog_notifications.dialog_id; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN dialog_notifications.dialog_id IS 'dialog';


--
-- TOC entry 3538 (class 0 OID 0)
-- Dependencies: 218
-- Name: COLUMN dialog_notifications.issend; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN dialog_notifications.issend IS 'sended';


--
-- TOC entry 219 (class 1259 OID 227643)
-- Name: dialog_notifications_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE dialog_notifications_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dialog_notifications_id_seq OWNER TO postgres;

--
-- TOC entry 3539 (class 0 OID 0)
-- Dependencies: 219
-- Name: dialog_notifications_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE dialog_notifications_id_seq OWNED BY dialog_notifications.id;


--
-- TOC entry 220 (class 1259 OID 227645)
-- Name: dialog_statuses; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE dialog_statuses (
    id integer NOT NULL,
    sname character varying(150) NOT NULL
);


ALTER TABLE dialog_statuses OWNER TO postgres;

--
-- TOC entry 3540 (class 0 OID 0)
-- Dependencies: 220
-- Name: TABLE dialog_statuses; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE dialog_statuses IS 'DIALOG STATUSES';


--
-- TOC entry 221 (class 1259 OID 227648)
-- Name: dialog_statuses_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE dialog_statuses_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dialog_statuses_id_seq OWNER TO postgres;

--
-- TOC entry 3541 (class 0 OID 0)
-- Dependencies: 221
-- Name: dialog_statuses_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE dialog_statuses_id_seq OWNED BY dialog_statuses.id;


--
-- TOC entry 222 (class 1259 OID 227650)
-- Name: dialog_types; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE dialog_types (
    id smallint NOT NULL,
    tname character varying(150) NOT NULL
);


ALTER TABLE dialog_types OWNER TO postgres;

--
-- TOC entry 3542 (class 0 OID 0)
-- Dependencies: 222
-- Name: TABLE dialog_types; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE dialog_types IS 'DIALOG TYPES';


--
-- TOC entry 223 (class 1259 OID 227653)
-- Name: dialogs; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE dialogs (
    id integer NOT NULL,
    title character varying(350) NOT NULL,
    users json DEFAULT '[]'::json NOT NULL,
    dtype smallint DEFAULT '1'::smallint NOT NULL,
    userid integer NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL,
    status smallint DEFAULT '1'::smallint NOT NULL,
    first_message json DEFAULT '{}'::json NOT NULL,
    last_message_date timestamp(0) without time zone DEFAULT now() NOT NULL,
    photo json DEFAULT '[]'::json NOT NULL,
    dialog_admins json DEFAULT '[]'::json NOT NULL,
    creator integer NOT NULL
);


ALTER TABLE dialogs OWNER TO postgres;

--
-- TOC entry 3543 (class 0 OID 0)
-- Dependencies: 223
-- Name: TABLE dialogs; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE dialogs IS 'USERS CHAT DIALOGS';


--
-- TOC entry 3544 (class 0 OID 0)
-- Dependencies: 223
-- Name: COLUMN dialogs.title; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN dialogs.title IS 'title of dialog';


--
-- TOC entry 3545 (class 0 OID 0)
-- Dependencies: 223
-- Name: COLUMN dialogs.users; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN dialogs.users IS 'users of dialog';


--
-- TOC entry 3546 (class 0 OID 0)
-- Dependencies: 223
-- Name: COLUMN dialogs.dtype; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN dialogs.dtype IS 'type of dialog';


--
-- TOC entry 3547 (class 0 OID 0)
-- Dependencies: 223
-- Name: COLUMN dialogs.userid; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN dialogs.userid IS 'user who create dialog';


--
-- TOC entry 3548 (class 0 OID 0)
-- Dependencies: 223
-- Name: COLUMN dialogs.created; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN dialogs.created IS 'create date';


--
-- TOC entry 3549 (class 0 OID 0)
-- Dependencies: 223
-- Name: COLUMN dialogs.status; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN dialogs.status IS 'status of dialog';


--
-- TOC entry 3550 (class 0 OID 0)
-- Dependencies: 223
-- Name: COLUMN dialogs.first_message; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN dialogs.first_message IS 'first message in dialog';


--
-- TOC entry 3551 (class 0 OID 0)
-- Dependencies: 223
-- Name: COLUMN dialogs.last_message_date; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN dialogs.last_message_date IS 'last mesage date';


--
-- TOC entry 3552 (class 0 OID 0)
-- Dependencies: 223
-- Name: COLUMN dialogs.photo; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN dialogs.photo IS 'dialog photo
only for groups';


--
-- TOC entry 3553 (class 0 OID 0)
-- Dependencies: 223
-- Name: COLUMN dialogs.dialog_admins; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN dialogs.dialog_admins IS 'admin users';


--
-- TOC entry 3554 (class 0 OID 0)
-- Dependencies: 223
-- Name: COLUMN dialogs.creator; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN dialogs.creator IS 'dialog creator userid';


--
-- TOC entry 224 (class 1259 OID 227667)
-- Name: dialogs_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE dialogs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dialogs_id_seq OWNER TO postgres;

--
-- TOC entry 3555 (class 0 OID 0)
-- Dependencies: 224
-- Name: dialogs_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE dialogs_id_seq OWNED BY dialogs.id;


--
-- TOC entry 225 (class 1259 OID 227669)
-- Name: dialogs_status_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE dialogs_status_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dialogs_status_seq OWNER TO postgres;

--
-- TOC entry 3556 (class 0 OID 0)
-- Dependencies: 225
-- Name: dialogs_status_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE dialogs_status_seq OWNED BY dialogs.status;


--
-- TOC entry 226 (class 1259 OID 227671)
-- Name: filters; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE filters (
    id integer NOT NULL,
    column_order smallint DEFAULT 0 NOT NULL,
    viewid integer NOT NULL,
    title character varying(150),
    type character varying(250) NOT NULL,
    classname character varying(150),
    "column" character varying,
    columns json DEFAULT '[]'::json NOT NULL,
    roles json DEFAULT '[]'::json NOT NULL,
    t character varying(150) DEFAULT '1'::character varying,
    "table" json DEFAULT '{}'::json NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL,
    val_desc integer
);


ALTER TABLE filters OWNER TO postgres;

--
-- TOC entry 3557 (class 0 OID 0)
-- Dependencies: 226
-- Name: TABLE filters; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE filters IS 'view''s filters';


--
-- TOC entry 3558 (class 0 OID 0)
-- Dependencies: 226
-- Name: COLUMN filters.column_order; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN filters.column_order IS 'order by';


--
-- TOC entry 3559 (class 0 OID 0)
-- Dependencies: 226
-- Name: COLUMN filters.viewid; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN filters.viewid IS 'view';


--
-- TOC entry 3560 (class 0 OID 0)
-- Dependencies: 226
-- Name: COLUMN filters.title; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN filters.title IS 'title';


--
-- TOC entry 3561 (class 0 OID 0)
-- Dependencies: 226
-- Name: COLUMN filters.type; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN filters.type IS 'filter type';


--
-- TOC entry 3562 (class 0 OID 0)
-- Dependencies: 226
-- Name: COLUMN filters.classname; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN filters.classname IS 'css classname';


--
-- TOC entry 3563 (class 0 OID 0)
-- Dependencies: 226
-- Name: COLUMN filters."column"; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN filters."column" IS 'congig columns title';


--
-- TOC entry 3564 (class 0 OID 0)
-- Dependencies: 226
-- Name: COLUMN filters.columns; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN filters.columns IS 'config id json array';


--
-- TOC entry 3565 (class 0 OID 0)
-- Dependencies: 226
-- Name: COLUMN filters.roles; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN filters.roles IS 'roles access';


--
-- TOC entry 3566 (class 0 OID 0)
-- Dependencies: 226
-- Name: COLUMN filters.val_desc; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN filters.val_desc IS 'config id';


--
-- TOC entry 227 (class 1259 OID 227683)
-- Name: filters_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE filters_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE filters_id_seq OWNER TO postgres;

--
-- TOC entry 3567 (class 0 OID 0)
-- Dependencies: 227
-- Name: filters_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE filters_id_seq OWNED BY filters.id;


--
-- TOC entry 228 (class 1259 OID 227685)
-- Name: filtertypes; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE filtertypes (
    id smallint NOT NULL,
    ftname character varying(150) NOT NULL
);


ALTER TABLE filtertypes OWNER TO postgres;

--
-- TOC entry 3568 (class 0 OID 0)
-- Dependencies: 228
-- Name: TABLE filtertypes; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE filtertypes IS 'filters types';


--
-- TOC entry 229 (class 1259 OID 227688)
-- Name: functions; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE functions (
    id smallint NOT NULL,
    funcname character varying(15) NOT NULL,
    functype character varying(15) NOT NULL
);


ALTER TABLE functions OWNER TO postgres;

--
-- TOC entry 230 (class 1259 OID 227691)
-- Name: logtable; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE logtable (
    id integer DEFAULT nextval(('framework.logtable_id_seq'::text)::regclass) NOT NULL,
    tablename character varying(250) NOT NULL,
    tableid character varying(150) NOT NULL,
    opertype smallint NOT NULL,
    oldata json,
    newdata json,
    created timestamp without time zone DEFAULT now() NOT NULL,
    colname character varying(150),
    userid integer NOT NULL
);


ALTER TABLE logtable OWNER TO postgres;

--
-- TOC entry 3569 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN logtable.tablename; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN logtable.tablename IS 'table name';


--
-- TOC entry 3570 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN logtable.tableid; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN logtable.tableid IS 'id columns value';


--
-- TOC entry 3571 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN logtable.opertype; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN logtable.opertype IS 'operations type';


--
-- TOC entry 3572 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN logtable.oldata; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN logtable.oldata IS 'old data in json object';


--
-- TOC entry 3573 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN logtable.newdata; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN logtable.newdata IS 'new data after operation. json object';


--
-- TOC entry 3574 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN logtable.colname; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN logtable.colname IS 'colname, if changed just one column in table';


--
-- TOC entry 3575 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN logtable.userid; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN logtable.userid IS 'the user who make changes';


--
-- TOC entry 231 (class 1259 OID 227699)
-- Name: logtable_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE logtable_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE logtable_id_seq OWNER TO postgres;

--
-- TOC entry 232 (class 1259 OID 227701)
-- Name: mainmenu; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE mainmenu (
    id integer NOT NULL,
    title character varying(150) DEFAULT 'untitled'::character varying NOT NULL,
    parentid integer,
    created timestamp without time zone DEFAULT now() NOT NULL,
    systemfield boolean DEFAULT false,
    orderby smallint DEFAULT 0 NOT NULL,
    path character varying(150) DEFAULT '/'::character varying NOT NULL,
    roles json,
    icon character varying(150),
    menuid integer NOT NULL,
    nosession boolean DEFAULT false NOT NULL,
    ws character varying(150),
    istitle boolean DEFAULT true NOT NULL
);


ALTER TABLE mainmenu OWNER TO postgres;

--
-- TOC entry 3576 (class 0 OID 0)
-- Dependencies: 232
-- Name: COLUMN mainmenu.icon; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN mainmenu.icon IS 'icon';


--
-- TOC entry 3577 (class 0 OID 0)
-- Dependencies: 232
-- Name: COLUMN mainmenu.nosession; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN mainmenu.nosession IS 'only if not session';


--
-- TOC entry 3578 (class 0 OID 0)
-- Dependencies: 232
-- Name: COLUMN mainmenu.ws; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN mainmenu.ws IS 'ws message';


--
-- TOC entry 3579 (class 0 OID 0)
-- Dependencies: 232
-- Name: COLUMN mainmenu.istitle; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN mainmenu.istitle IS 'show title';


--
-- TOC entry 233 (class 1259 OID 227714)
-- Name: mainmenu_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE mainmenu_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mainmenu_id_seq OWNER TO postgres;

--
-- TOC entry 3580 (class 0 OID 0)
-- Dependencies: 233
-- Name: mainmenu_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE mainmenu_id_seq OWNED BY mainmenu.id;


--
-- TOC entry 234 (class 1259 OID 227716)
-- Name: mainsettings; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE mainsettings (
    id integer DEFAULT 1 NOT NULL,
    dsn character varying(200) DEFAULT 'host=127.0.0.1 dbname=framework user=postgres password=Qwerty123 port=5432'::character varying NOT NULL,
    port integer DEFAULT 8080 NOT NULL,
    "developerRole" character varying(30) DEFAULT '0'::character varying NOT NULL,
    maindomain character varying(200) DEFAULT 'http://localhost:8080'::character varying NOT NULL,
    "primaryAuthorization" smallint DEFAULT '1'::smallint NOT NULL,
    redirect401 character varying(200) DEFAULT 'http://localhost:8080/auth'::character varying NOT NULL,
    isactiv boolean DEFAULT true NOT NULL,
    usercss text DEFAULT ''::text NOT NULL,
    homepage character varying(300) DEFAULT '/composition/home'::character varying NOT NULL,
    reports_url character varying(400) DEFAULT 'http://127.0.0.1:12318/report'::character varying NOT NULL,
    login_url character varying(200) DEFAULT '/login'::character varying NOT NULL,
    ischat boolean DEFAULT false NOT NULL
);


ALTER TABLE mainsettings OWNER TO postgres;

--
-- TOC entry 3581 (class 0 OID 0)
-- Dependencies: 234
-- Name: TABLE mainsettings; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE mainsettings IS 'Projects main settings
Must be the same as settings.json file';


--
-- TOC entry 3582 (class 0 OID 0)
-- Dependencies: 234
-- Name: COLUMN mainsettings.dsn; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN mainsettings.dsn IS 'db connection string';


--
-- TOC entry 3583 (class 0 OID 0)
-- Dependencies: 234
-- Name: COLUMN mainsettings.port; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN mainsettings.port IS 'project server port';


--
-- TOC entry 3584 (class 0 OID 0)
-- Dependencies: 234
-- Name: COLUMN mainsettings."developerRole"; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN mainsettings."developerRole" IS 'developer role id';


--
-- TOC entry 3585 (class 0 OID 0)
-- Dependencies: 234
-- Name: COLUMN mainsettings.maindomain; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN mainsettings.maindomain IS 'main domain';


--
-- TOC entry 3586 (class 0 OID 0)
-- Dependencies: 234
-- Name: COLUMN mainsettings."primaryAuthorization"; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN mainsettings."primaryAuthorization" IS 'primary authorization';


--
-- TOC entry 3587 (class 0 OID 0)
-- Dependencies: 234
-- Name: COLUMN mainsettings.redirect401; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN mainsettings.redirect401 IS 'redirect when status 401';


--
-- TOC entry 3588 (class 0 OID 0)
-- Dependencies: 234
-- Name: COLUMN mainsettings.usercss; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN mainsettings.usercss IS 'css file';


--
-- TOC entry 3589 (class 0 OID 0)
-- Dependencies: 234
-- Name: COLUMN mainsettings.homepage; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN mainsettings.homepage IS 'home page';


--
-- TOC entry 3590 (class 0 OID 0)
-- Dependencies: 234
-- Name: COLUMN mainsettings.reports_url; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN mainsettings.reports_url IS 'reports url';


--
-- TOC entry 235 (class 1259 OID 227734)
-- Name: menus; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE menus (
    id integer NOT NULL,
    menutype smallint,
    menutitle character varying(350),
    ismainmenu boolean DEFAULT false NOT NULL
);


ALTER TABLE menus OWNER TO postgres;

--
-- TOC entry 3591 (class 0 OID 0)
-- Dependencies: 235
-- Name: TABLE menus; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE menus IS 'Projects Menus';


--
-- TOC entry 236 (class 1259 OID 227738)
-- Name: menus_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE menus_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE menus_id_seq OWNER TO postgres;

--
-- TOC entry 3592 (class 0 OID 0)
-- Dependencies: 236
-- Name: menus_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE menus_id_seq OWNED BY menus.id;


--
-- TOC entry 237 (class 1259 OID 227740)
-- Name: menutypes; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE menutypes (
    id smallint NOT NULL,
    mtypename character varying NOT NULL
);


ALTER TABLE menutypes OWNER TO postgres;

--
-- TOC entry 3593 (class 0 OID 0)
-- Dependencies: 237
-- Name: TABLE menutypes; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE menutypes IS 'menu types dictionary';


--
-- TOC entry 238 (class 1259 OID 227746)
-- Name: menutypes_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE menutypes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE menutypes_id_seq OWNER TO postgres;

--
-- TOC entry 3594 (class 0 OID 0)
-- Dependencies: 238
-- Name: menutypes_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE menutypes_id_seq OWNED BY menutypes.id;


--
-- TOC entry 239 (class 1259 OID 227748)
-- Name: methodtypes; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE methodtypes (
    id smallint NOT NULL,
    methotypename character varying(350) NOT NULL
);


ALTER TABLE methodtypes OWNER TO postgres;

--
-- TOC entry 3595 (class 0 OID 0)
-- Dependencies: 239
-- Name: TABLE methodtypes; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE methodtypes IS 'API methods types';


--
-- TOC entry 240 (class 1259 OID 227751)
-- Name: notifications; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE notifications (
    id integer NOT NULL,
    message character varying(1500),
    messagetype character varying(50) DEFAULT 'notifs'::character varying NOT NULL,
    for_userid integer NOT NULL,
    sended_sessions json DEFAULT '[]'::json NOT NULL,
    isread boolean DEFAULT false NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL,
    sessid character(36)
);


ALTER TABLE notifications OWNER TO postgres;

--
-- TOC entry 3596 (class 0 OID 0)
-- Dependencies: 240
-- Name: TABLE notifications; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE notifications IS 'Global notifications for dashboard menu type';


--
-- TOC entry 3597 (class 0 OID 0)
-- Dependencies: 240
-- Name: COLUMN notifications.message; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN notifications.message IS 'notifications message';


--
-- TOC entry 3598 (class 0 OID 0)
-- Dependencies: 240
-- Name: COLUMN notifications.messagetype; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN notifications.messagetype IS 'notifications message types';


--
-- TOC entry 3599 (class 0 OID 0)
-- Dependencies: 240
-- Name: COLUMN notifications.for_userid; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN notifications.for_userid IS 'for user';


--
-- TOC entry 3600 (class 0 OID 0)
-- Dependencies: 240
-- Name: COLUMN notifications.sended_sessions; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN notifications.sended_sessions IS 'what sessions are already gets notification';


--
-- TOC entry 3601 (class 0 OID 0)
-- Dependencies: 240
-- Name: COLUMN notifications.isread; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN notifications.isread IS 'is notification readed by user';


--
-- TOC entry 241 (class 1259 OID 227761)
-- Name: notifications_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE notifications_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE notifications_id_seq OWNER TO postgres;

--
-- TOC entry 3602 (class 0 OID 0)
-- Dependencies: 241
-- Name: notifications_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE notifications_id_seq OWNED BY notifications.id;


--
-- TOC entry 242 (class 1259 OID 227763)
-- Name: operations; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE operations (
    id integer NOT NULL,
    value character varying(35) NOT NULL,
    js character varying(35),
    python character varying(35),
    sql character varying(35)
);


ALTER TABLE operations OWNER TO postgres;

--
-- TOC entry 3603 (class 0 OID 0)
-- Dependencies: 242
-- Name: TABLE operations; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE operations IS 'boolean operations for condinions settings';


--
-- TOC entry 243 (class 1259 OID 227766)
-- Name: operations_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE operations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE operations_id_seq OWNER TO postgres;

--
-- TOC entry 3604 (class 0 OID 0)
-- Dependencies: 243
-- Name: operations_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE operations_id_seq OWNED BY operations.id;


--
-- TOC entry 244 (class 1259 OID 227768)
-- Name: opertypes; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE opertypes (
    id smallint NOT NULL,
    typename character varying(150) NOT NULL,
    alias character varying(150)
);


ALTER TABLE opertypes OWNER TO postgres;

--
-- TOC entry 3605 (class 0 OID 0)
-- Dependencies: 244
-- Name: TABLE opertypes; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE opertypes IS 'operations types for logtable';


--
-- TOC entry 245 (class 1259 OID 227771)
-- Name: orgs; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE orgs (
    id integer DEFAULT nextval(('framework.orgs_id_seq'::text)::regclass) NOT NULL,
    orgname character varying(350) NOT NULL,
    orgtype smallint DEFAULT '1'::smallint NOT NULL,
    parentid integer,
    shortname character varying(150),
    created timestamp(0) without time zone DEFAULT now() NOT NULL,
    userid integer NOT NULL,
    photo json DEFAULT '[]'::json NOT NULL
);


ALTER TABLE orgs OWNER TO postgres;

--
-- TOC entry 3606 (class 0 OID 0)
-- Dependencies: 245
-- Name: TABLE orgs; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE orgs IS 'ORGS';


--
-- TOC entry 3607 (class 0 OID 0)
-- Dependencies: 245
-- Name: COLUMN orgs.orgname; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN orgs.orgname IS 'org title';


--
-- TOC entry 3608 (class 0 OID 0)
-- Dependencies: 245
-- Name: COLUMN orgs.parentid; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN orgs.parentid IS 'major org';


--
-- TOC entry 3609 (class 0 OID 0)
-- Dependencies: 245
-- Name: COLUMN orgs.shortname; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN orgs.shortname IS 'organizations shortname';


--
-- TOC entry 246 (class 1259 OID 227781)
-- Name: orgs_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE orgs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE orgs_id_seq OWNER TO postgres;

--
-- TOC entry 247 (class 1259 OID 227783)
-- Name: orgtypes; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE orgtypes (
    id smallint NOT NULL,
    typename character varying(150) NOT NULL
);


ALTER TABLE orgtypes OWNER TO postgres;

--
-- TOC entry 3610 (class 0 OID 0)
-- Dependencies: 247
-- Name: TABLE orgtypes; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE orgtypes IS 'organizations types';


--
-- TOC entry 248 (class 1259 OID 227786)
-- Name: paramtypes; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE paramtypes (
    id smallint NOT NULL,
    val character varying(150) NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE paramtypes OWNER TO postgres;

--
-- TOC entry 3611 (class 0 OID 0)
-- Dependencies: 248
-- Name: TABLE paramtypes; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE paramtypes IS 'actions parametrs types';


--
-- TOC entry 249 (class 1259 OID 227790)
-- Name: roles; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE roles (
    id smallint NOT NULL,
    rolename character varying(250) NOT NULL,
    hierarchy smallint
);


ALTER TABLE roles OWNER TO postgres;

--
-- TOC entry 3612 (class 0 OID 0)
-- Dependencies: 249
-- Name: TABLE roles; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE roles IS 'project roles';


--
-- TOC entry 3613 (class 0 OID 0)
-- Dependencies: 249
-- Name: COLUMN roles.hierarchy; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN roles.hierarchy IS 'hierarchy';


--
-- TOC entry 250 (class 1259 OID 227793)
-- Name: select_condition; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE select_condition (
    id integer NOT NULL,
    configid integer NOT NULL,
    col character varying(350) NOT NULL,
    operation character varying(30) NOT NULL,
    const character varying(350),
    value character varying(350),
    created timestamp without time zone DEFAULT now() NOT NULL,
    val_desc integer
);


ALTER TABLE select_condition OWNER TO postgres;

--
-- TOC entry 3614 (class 0 OID 0)
-- Dependencies: 250
-- Name: TABLE select_condition; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE select_condition IS 'select form method conditions settings';


--
-- TOC entry 251 (class 1259 OID 227800)
-- Name: select_condition_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE select_condition_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE select_condition_id_seq OWNER TO postgres;

--
-- TOC entry 3615 (class 0 OID 0)
-- Dependencies: 251
-- Name: select_condition_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE select_condition_id_seq OWNED BY select_condition.id;


--
-- TOC entry 252 (class 1259 OID 227802)
-- Name: sess; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE sess (
    id character(36) NOT NULL,
    userid integer NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL,
    killed timestamp without time zone
);


ALTER TABLE sess OWNER TO postgres;

--
-- TOC entry 3616 (class 0 OID 0)
-- Dependencies: 252
-- Name: TABLE sess; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE sess IS 'Sessions table
Please kill in shedules sessions if you need';


--
-- TOC entry 253 (class 1259 OID 227806)
-- Name: spapi; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE spapi (
    id integer NOT NULL,
    methodname character varying(350),
    procedurename character varying(350),
    created timestamp without time zone DEFAULT now() NOT NULL,
    methodtype smallint DEFAULT '1'::smallint NOT NULL,
    roles json
);


ALTER TABLE spapi OWNER TO postgres;

--
-- TOC entry 3617 (class 0 OID 0)
-- Dependencies: 253
-- Name: TABLE spapi; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE spapi IS 'Rest Api methods
call plpg function 
always pass in function injson JSON parametr';


--
-- TOC entry 3618 (class 0 OID 0)
-- Dependencies: 253
-- Name: COLUMN spapi.methodname; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN spapi.methodname IS 'API method name (call like this /api/{methodname})';


--
-- TOC entry 3619 (class 0 OID 0)
-- Dependencies: 253
-- Name: COLUMN spapi.procedurename; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN spapi.procedurename IS 'plpg function name
pass all parametrs in injson type of JSON
';


--
-- TOC entry 3620 (class 0 OID 0)
-- Dependencies: 253
-- Name: COLUMN spapi.methodtype; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN spapi.methodtype IS 'rest method type';


--
-- TOC entry 3621 (class 0 OID 0)
-- Dependencies: 253
-- Name: COLUMN spapi.roles; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN spapi.roles IS 'roles';


--
-- TOC entry 254 (class 1259 OID 227814)
-- Name: spapi_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE spapi_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE spapi_id_seq OWNER TO postgres;

--
-- TOC entry 3622 (class 0 OID 0)
-- Dependencies: 254
-- Name: spapi_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE spapi_id_seq OWNED BY spapi.id;


--
-- TOC entry 255 (class 1259 OID 227816)
-- Name: trees; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE trees (
    id integer NOT NULL,
    title character varying(350),
    url character varying(350),
    descr text,
    roles json DEFAULT '[]'::json NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL,
    userid integer,
    orgid integer,
    acts json DEFAULT '[]'::json
);


ALTER TABLE trees OWNER TO postgres;

--
-- TOC entry 3623 (class 0 OID 0)
-- Dependencies: 255
-- Name: TABLE trees; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE trees IS 'Trees menus';


--
-- TOC entry 3624 (class 0 OID 0)
-- Dependencies: 255
-- Name: COLUMN trees.title; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN trees.title IS 'page title';


--
-- TOC entry 3625 (class 0 OID 0)
-- Dependencies: 255
-- Name: COLUMN trees.url; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN trees.url IS 'path';


--
-- TOC entry 256 (class 1259 OID 227825)
-- Name: trees_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE trees_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE trees_id_seq OWNER TO postgres;

--
-- TOC entry 3626 (class 0 OID 0)
-- Dependencies: 256
-- Name: trees_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE trees_id_seq OWNED BY trees.id;


--
-- TOC entry 257 (class 1259 OID 227827)
-- Name: treesacts; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE treesacts (
    id integer NOT NULL,
    treesid integer,
    title character varying(250),
    icon character varying(250),
    classname character varying(250),
    act character varying(250),
    created timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE treesacts OWNER TO postgres;

--
-- TOC entry 3627 (class 0 OID 0)
-- Dependencies: 257
-- Name: TABLE treesacts; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE treesacts IS 'trees actions';


--
-- TOC entry 258 (class 1259 OID 227834)
-- Name: treesacts_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE treesacts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE treesacts_id_seq OWNER TO postgres;

--
-- TOC entry 3628 (class 0 OID 0)
-- Dependencies: 258
-- Name: treesacts_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE treesacts_id_seq OWNED BY treesacts.id;


--
-- TOC entry 259 (class 1259 OID 227836)
-- Name: treesbranches; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE treesbranches (
    id integer NOT NULL,
    treesid integer NOT NULL,
    title character varying(350),
    parentid integer,
    icon character varying(150),
    created timestamp without time zone DEFAULT now() NOT NULL,
    treeviewtype smallint,
    viewid integer,
    compoid integer,
    orderby smallint,
    ismain boolean DEFAULT false NOT NULL
);


ALTER TABLE treesbranches OWNER TO postgres;

--
-- TOC entry 3629 (class 0 OID 0)
-- Dependencies: 259
-- Name: TABLE treesbranches; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE treesbranches IS 'trees branches';


--
-- TOC entry 3630 (class 0 OID 0)
-- Dependencies: 259
-- Name: COLUMN treesbranches.treesid; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN treesbranches.treesid IS 'tree';


--
-- TOC entry 3631 (class 0 OID 0)
-- Dependencies: 259
-- Name: COLUMN treesbranches.title; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN treesbranches.title IS 'menu item title';


--
-- TOC entry 3632 (class 0 OID 0)
-- Dependencies: 259
-- Name: COLUMN treesbranches.parentid; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN treesbranches.parentid IS 'parent';


--
-- TOC entry 3633 (class 0 OID 0)
-- Dependencies: 259
-- Name: COLUMN treesbranches.treeviewtype; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN treesbranches.treeviewtype IS 'view or composition';


--
-- TOC entry 260 (class 1259 OID 227844)
-- Name: treesbranches_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE treesbranches_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE treesbranches_id_seq OWNER TO postgres;

--
-- TOC entry 3634 (class 0 OID 0)
-- Dependencies: 260
-- Name: treesbranches_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE treesbranches_id_seq OWNED BY treesbranches.id;


--
-- TOC entry 261 (class 1259 OID 227846)
-- Name: treeviewtypes; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE treeviewtypes (
    id smallint NOT NULL,
    typename character varying(35) NOT NULL
);


ALTER TABLE treeviewtypes OWNER TO postgres;

--
-- TOC entry 3635 (class 0 OID 0)
-- Dependencies: 261
-- Name: TABLE treeviewtypes; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE treeviewtypes IS 'treesbranches views types
view or composition';


--
-- TOC entry 262 (class 1259 OID 227849)
-- Name: users; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE users (
    id integer NOT NULL,
    fam character varying(150) DEFAULT ''::character varying NOT NULL,
    im character varying(150) DEFAULT ''::character varying NOT NULL,
    ot character varying(150) DEFAULT ''::character varying,
    login character varying(150),
    password character varying,
    isactive boolean DEFAULT false NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL,
    roles json DEFAULT '[]'::json NOT NULL,
    roleid smallint,
    photo json,
    orgs json DEFAULT '[]'::json NOT NULL,
    usersettings json DEFAULT '{"menu": {}, "trees": {}, "views": {}}'::json NOT NULL,
    orgid integer,
    userid integer NOT NULL,
    thumbprint character varying(200)
);


ALTER TABLE users OWNER TO postgres;

--
-- TOC entry 3636 (class 0 OID 0)
-- Dependencies: 262
-- Name: TABLE users; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE users IS 'USER';


--
-- TOC entry 3637 (class 0 OID 0)
-- Dependencies: 262
-- Name: COLUMN users.fam; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN users.fam IS 'lastname';


--
-- TOC entry 3638 (class 0 OID 0)
-- Dependencies: 262
-- Name: COLUMN users.im; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN users.im IS 'firstname';


--
-- TOC entry 3639 (class 0 OID 0)
-- Dependencies: 262
-- Name: COLUMN users.ot; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN users.ot IS 'secondname';


--
-- TOC entry 3640 (class 0 OID 0)
-- Dependencies: 262
-- Name: COLUMN users.login; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN users.login IS 'login';


--
-- TOC entry 3641 (class 0 OID 0)
-- Dependencies: 262
-- Name: COLUMN users.password; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN users.password IS 'userpas';


--
-- TOC entry 3642 (class 0 OID 0)
-- Dependencies: 262
-- Name: COLUMN users.isactive; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN users.isactive IS 'is active';


--
-- TOC entry 3643 (class 0 OID 0)
-- Dependencies: 262
-- Name: COLUMN users.roles; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN users.roles IS 'roles';


--
-- TOC entry 3644 (class 0 OID 0)
-- Dependencies: 262
-- Name: COLUMN users.photo; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN users.photo IS 'avatar';


--
-- TOC entry 3645 (class 0 OID 0)
-- Dependencies: 262
-- Name: COLUMN users.orgs; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN users.orgs IS 'user orgs';


--
-- TOC entry 3646 (class 0 OID 0)
-- Dependencies: 262
-- Name: COLUMN users.usersettings; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN users.usersettings IS 'this is views interface settings';


--
-- TOC entry 3647 (class 0 OID 0)
-- Dependencies: 262
-- Name: COLUMN users.thumbprint; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN users.thumbprint IS 'certificate';


--
-- TOC entry 263 (class 1259 OID 227863)
-- Name: users_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE users_id_seq OWNER TO postgres;

--
-- TOC entry 3648 (class 0 OID 0)
-- Dependencies: 263
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE users_id_seq OWNED BY users.id;


--
-- TOC entry 264 (class 1259 OID 227865)
-- Name: views; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE views (
    id integer NOT NULL,
    title character varying(150) NOT NULL,
    descr character varying(1500),
    tablename character varying(350) NOT NULL,
    viewtype character varying(200) NOT NULL,
    pagination boolean DEFAULT false NOT NULL,
    config json DEFAULT '[]'::json NOT NULL,
    path character varying(150) DEFAULT ''::character varying NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL,
    groupby json DEFAULT '[]'::json NOT NULL,
    filters json DEFAULT '[]'::json NOT NULL,
    acts json DEFAULT '[]'::json NOT NULL,
    roles json DEFAULT '[]'::json NOT NULL,
    classname character varying(400),
    orderby boolean DEFAULT false NOT NULL,
    ispagesize boolean DEFAULT true NOT NULL,
    pagecount boolean DEFAULT true NOT NULL,
    foundcount boolean DEFAULT true NOT NULL,
    subscrible boolean DEFAULT false NOT NULL,
    checker boolean DEFAULT false NOT NULL,
    api json DEFAULT '{}'::json NOT NULL,
    copy boolean DEFAULT false NOT NULL
);


ALTER TABLE views OWNER TO postgres;

--
-- TOC entry 3649 (class 0 OID 0)
-- Dependencies: 264
-- Name: TABLE views; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE views IS 'views';


--
-- TOC entry 265 (class 1259 OID 227887)
-- Name: views_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE views_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE views_id_seq OWNER TO postgres;

--
-- TOC entry 3650 (class 0 OID 0)
-- Dependencies: 265
-- Name: views_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE views_id_seq OWNED BY views.id;


--
-- TOC entry 266 (class 1259 OID 227889)
-- Name: viewsnotification; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE viewsnotification (
    id integer NOT NULL,
    viewid integer NOT NULL,
    col character varying(150),
    tableid character varying(36),
    notificationtext text DEFAULT ''::text,
    foruser integer,
    issend boolean DEFAULT false NOT NULL,
    isread boolean DEFAULT false NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL,
    sended timestamp without time zone,
    readed timestamp without time zone
);


ALTER TABLE viewsnotification OWNER TO postgres;

--
-- TOC entry 3651 (class 0 OID 0)
-- Dependencies: 266
-- Name: TABLE viewsnotification; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE viewsnotification IS 'notifications for views on ws 
you can add here notification for different views on triggers';


--
-- TOC entry 3652 (class 0 OID 0)
-- Dependencies: 266
-- Name: COLUMN viewsnotification.tableid; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN viewsnotification.tableid IS 'id from table';


--
-- TOC entry 3653 (class 0 OID 0)
-- Dependencies: 266
-- Name: COLUMN viewsnotification.notificationtext; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN viewsnotification.notificationtext IS 'message';


--
-- TOC entry 3654 (class 0 OID 0)
-- Dependencies: 266
-- Name: COLUMN viewsnotification.foruser; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON COLUMN viewsnotification.foruser IS 'user id';


--
-- TOC entry 267 (class 1259 OID 227899)
-- Name: viewsnotification_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE viewsnotification_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE viewsnotification_id_seq OWNER TO postgres;

--
-- TOC entry 3655 (class 0 OID 0)
-- Dependencies: 267
-- Name: viewsnotification_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE viewsnotification_id_seq OWNED BY viewsnotification.id;


--
-- TOC entry 268 (class 1259 OID 227901)
-- Name: viewtypes; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE viewtypes (
    id smallint NOT NULL,
    vtypename character varying(200) NOT NULL,
    viewlink character varying(350)
);


ALTER TABLE viewtypes OWNER TO postgres;

--
-- TOC entry 3656 (class 0 OID 0)
-- Dependencies: 268
-- Name: TABLE viewtypes; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE viewtypes IS 'views types dictionaries';


--
-- TOC entry 269 (class 1259 OID 227907)
-- Name: visible_condition; Type: TABLE; Schema: framework; Owner: postgres
--

CREATE TABLE visible_condition (
    id integer NOT NULL,
    configid integer NOT NULL,
    val_desc integer,
    col character varying(350),
    title character varying(350),
    operation character varying(30),
    value character varying(350),
    created timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE visible_condition OWNER TO postgres;

--
-- TOC entry 3657 (class 0 OID 0)
-- Dependencies: 269
-- Name: TABLE visible_condition; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TABLE visible_condition IS 'form type components columns visible types';


--
-- TOC entry 270 (class 1259 OID 227914)
-- Name: visible_condition_id_seq; Type: SEQUENCE; Schema: framework; Owner: postgres
--

CREATE SEQUENCE visible_condition_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE visible_condition_id_seq OWNER TO postgres;

--
-- TOC entry 3658 (class 0 OID 0)
-- Dependencies: 270
-- Name: visible_condition_id_seq; Type: SEQUENCE OWNED BY; Schema: framework; Owner: postgres
--

ALTER SEQUENCE visible_condition_id_seq OWNED BY visible_condition.id;


SET search_path = reports, pg_catalog;

--
-- TOC entry 271 (class 1259 OID 227916)
-- Name: paramtypes; Type: TABLE; Schema: reports; Owner: postgres
--

CREATE TABLE paramtypes (
    id smallint NOT NULL,
    typename character varying(150) NOT NULL
);


ALTER TABLE paramtypes OWNER TO postgres;

--
-- TOC entry 272 (class 1259 OID 227919)
-- Name: reportlist; Type: TABLE; Schema: reports; Owner: postgres
--

CREATE TABLE reportlist (
    id integer NOT NULL,
    title character varying(350),
    roles json DEFAULT '[]'::json NOT NULL,
    path character varying(150),
    template json,
    template_path character varying(150),
    functitle character varying(150),
    created timestamp without time zone DEFAULT now() NOT NULL,
    section character varying(350),
    completed boolean DEFAULT false NOT NULL,
    filename character varying(200),
    ishtml boolean DEFAULT false NOT NULL
);


ALTER TABLE reportlist OWNER TO postgres;

--
-- TOC entry 3659 (class 0 OID 0)
-- Dependencies: 272
-- Name: TABLE reportlist; Type: COMMENT; Schema: reports; Owner: postgres
--

COMMENT ON TABLE reportlist IS 'reportslist';


--
-- TOC entry 3660 (class 0 OID 0)
-- Dependencies: 272
-- Name: COLUMN reportlist.title; Type: COMMENT; Schema: reports; Owner: postgres
--

COMMENT ON COLUMN reportlist.title IS 'Название';


--
-- TOC entry 3661 (class 0 OID 0)
-- Dependencies: 272
-- Name: COLUMN reportlist.roles; Type: COMMENT; Schema: reports; Owner: postgres
--

COMMENT ON COLUMN reportlist.roles IS 'Роли';


--
-- TOC entry 3662 (class 0 OID 0)
-- Dependencies: 272
-- Name: COLUMN reportlist.path; Type: COMMENT; Schema: reports; Owner: postgres
--

COMMENT ON COLUMN reportlist.path IS 'Путь';


--
-- TOC entry 3663 (class 0 OID 0)
-- Dependencies: 272
-- Name: COLUMN reportlist.template; Type: COMMENT; Schema: reports; Owner: postgres
--

COMMENT ON COLUMN reportlist.template IS 'Файл шаблона';


--
-- TOC entry 3664 (class 0 OID 0)
-- Dependencies: 272
-- Name: COLUMN reportlist.functitle; Type: COMMENT; Schema: reports; Owner: postgres
--

COMMENT ON COLUMN reportlist.functitle IS 'Название функции';


--
-- TOC entry 3665 (class 0 OID 0)
-- Dependencies: 272
-- Name: COLUMN reportlist.section; Type: COMMENT; Schema: reports; Owner: postgres
--

COMMENT ON COLUMN reportlist.section IS 'Секция';


--
-- TOC entry 3666 (class 0 OID 0)
-- Dependencies: 272
-- Name: COLUMN reportlist.ishtml; Type: COMMENT; Schema: reports; Owner: postgres
--

COMMENT ON COLUMN reportlist.ishtml IS 'Печать в html';


--
-- TOC entry 273 (class 1259 OID 227929)
-- Name: reportlist_id_seq; Type: SEQUENCE; Schema: reports; Owner: postgres
--

CREATE SEQUENCE reportlist_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE reportlist_id_seq OWNER TO postgres;

--
-- TOC entry 3667 (class 0 OID 0)
-- Dependencies: 273
-- Name: reportlist_id_seq; Type: SEQUENCE OWNED BY; Schema: reports; Owner: postgres
--

ALTER SEQUENCE reportlist_id_seq OWNED BY reportlist.id;


--
-- TOC entry 274 (class 1259 OID 227931)
-- Name: reportparams; Type: TABLE; Schema: reports; Owner: postgres
--

CREATE TABLE reportparams (
    id integer NOT NULL,
    reportlistid integer,
    ptitle character varying(150),
    func_paramtitle character varying(150),
    ptype smallint,
    created timestamp without time zone DEFAULT now() NOT NULL,
    apimethod integer,
    completed boolean DEFAULT false NOT NULL,
    orderby smallint DEFAULT 1 NOT NULL
);


ALTER TABLE reportparams OWNER TO postgres;

--
-- TOC entry 3668 (class 0 OID 0)
-- Dependencies: 274
-- Name: COLUMN reportparams.ptitle; Type: COMMENT; Schema: reports; Owner: postgres
--

COMMENT ON COLUMN reportparams.ptitle IS 'parametr title';


--
-- TOC entry 3669 (class 0 OID 0)
-- Dependencies: 274
-- Name: COLUMN reportparams.func_paramtitle; Type: COMMENT; Schema: reports; Owner: postgres
--

COMMENT ON COLUMN reportparams.func_paramtitle IS 'param in function';


--
-- TOC entry 3670 (class 0 OID 0)
-- Dependencies: 274
-- Name: COLUMN reportparams.ptype; Type: COMMENT; Schema: reports; Owner: postgres
--

COMMENT ON COLUMN reportparams.ptype IS 'parametr type';


--
-- TOC entry 275 (class 1259 OID 227937)
-- Name: reportparams_id_seq; Type: SEQUENCE; Schema: reports; Owner: postgres
--

CREATE SEQUENCE reportparams_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE reportparams_id_seq OWNER TO postgres;

--
-- TOC entry 3671 (class 0 OID 0)
-- Dependencies: 275
-- Name: reportparams_id_seq; Type: SEQUENCE OWNED BY; Schema: reports; Owner: postgres
--

ALTER SEQUENCE reportparams_id_seq OWNED BY reportparams.id;


SET search_path = sqlmanager, pg_catalog;

--
-- TOC entry 276 (class 1259 OID 227939)
-- Name: foreignkeys; Type: TABLE; Schema: sqlmanager; Owner: postgres
--

CREATE TABLE foreignkeys (
    id integer NOT NULL,
    ftitle character varying(200) NOT NULL,
    maintablename character varying(200) NOT NULL,
    maintableid integer,
    parentablename character varying(200) NOT NULL,
    parenttableid integer,
    maincol character varying(200) NOT NULL,
    parentcol character varying(200) NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL,
    userid integer NOT NULL,
    noscript boolean DEFAULT true NOT NULL
);


ALTER TABLE foreignkeys OWNER TO postgres;

--
-- TOC entry 3672 (class 0 OID 0)
-- Dependencies: 276
-- Name: TABLE foreignkeys; Type: COMMENT; Schema: sqlmanager; Owner: postgres
--

COMMENT ON TABLE foreignkeys IS 'FOREIGN KEYS';


--
-- TOC entry 277 (class 1259 OID 227947)
-- Name: foreignkeys_id_seq; Type: SEQUENCE; Schema: sqlmanager; Owner: postgres
--

CREATE SEQUENCE foreignkeys_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE foreignkeys_id_seq OWNER TO postgres;

--
-- TOC entry 3673 (class 0 OID 0)
-- Dependencies: 277
-- Name: foreignkeys_id_seq; Type: SEQUENCE OWNED BY; Schema: sqlmanager; Owner: postgres
--

ALTER SEQUENCE foreignkeys_id_seq OWNED BY foreignkeys.id;


--
-- TOC entry 278 (class 1259 OID 227949)
-- Name: functionargs; Type: TABLE; Schema: sqlmanager; Owner: postgres
--

CREATE TABLE functionargs (
    id integer NOT NULL,
    oid integer NOT NULL,
    argname character varying(150) NOT NULL,
    argtype character varying(150) NOT NULL,
    argmode character varying(30) NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL,
    userid integer NOT NULL
);


ALTER TABLE functionargs OWNER TO postgres;

--
-- TOC entry 3674 (class 0 OID 0)
-- Dependencies: 278
-- Name: TABLE functionargs; Type: COMMENT; Schema: sqlmanager; Owner: postgres
--

COMMENT ON TABLE functionargs IS 'FUNCTION ARGUMENTS';


--
-- TOC entry 3675 (class 0 OID 0)
-- Dependencies: 278
-- Name: COLUMN functionargs.oid; Type: COMMENT; Schema: sqlmanager; Owner: postgres
--

COMMENT ON COLUMN functionargs.oid IS 'functionlist id';


--
-- TOC entry 279 (class 1259 OID 227953)
-- Name: functionargs_id_seq; Type: SEQUENCE; Schema: sqlmanager; Owner: postgres
--

CREATE SEQUENCE functionargs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE functionargs_id_seq OWNER TO postgres;

--
-- TOC entry 3676 (class 0 OID 0)
-- Dependencies: 279
-- Name: functionargs_id_seq; Type: SEQUENCE OWNED BY; Schema: sqlmanager; Owner: postgres
--

ALTER SEQUENCE functionargs_id_seq OWNED BY functionargs.id;


--
-- TOC entry 280 (class 1259 OID 227955)
-- Name: functionslist; Type: TABLE; Schema: sqlmanager; Owner: postgres
--

CREATE TABLE functionslist (
    id integer NOT NULL,
    functionschema character varying(150) NOT NULL,
    functiontitle character varying NOT NULL,
    fullname character varying(1000) NOT NULL,
    descr character varying DEFAULT '<NO TITLE>'::character varying NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL,
    userid integer NOT NULL,
    noscript boolean DEFAULT true NOT NULL,
    functionfulltitle character varying(1000) NOT NULL,
    dll text NOT NULL,
    args json DEFAULT '[]'::json NOT NULL,
    returntype character varying(150),
    definition text
);


ALTER TABLE functionslist OWNER TO postgres;

--
-- TOC entry 3677 (class 0 OID 0)
-- Dependencies: 280
-- Name: TABLE functionslist; Type: COMMENT; Schema: sqlmanager; Owner: postgres
--

COMMENT ON TABLE functionslist IS 'FUNCTIONS LIST';


--
-- TOC entry 281 (class 1259 OID 227965)
-- Name: functionslist_id_seq; Type: SEQUENCE; Schema: sqlmanager; Owner: postgres
--

CREATE SEQUENCE functionslist_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE functionslist_id_seq OWNER TO postgres;

--
-- TOC entry 3678 (class 0 OID 0)
-- Dependencies: 281
-- Name: functionslist_id_seq; Type: SEQUENCE OWNED BY; Schema: sqlmanager; Owner: postgres
--

ALTER SEQUENCE functionslist_id_seq OWNED BY functionslist.id;


--
-- TOC entry 282 (class 1259 OID 227967)
-- Name: schemalist; Type: TABLE; Schema: sqlmanager; Owner: postgres
--

CREATE TABLE schemalist (
    id integer NOT NULL,
    schemaname character varying(150) NOT NULL,
    schemadescr character varying(350) DEFAULT '<NO DESCR>'::character varying NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL,
    userid integer NOT NULL,
    noscript boolean DEFAULT true NOT NULL
);


ALTER TABLE schemalist OWNER TO postgres;

--
-- TOC entry 3679 (class 0 OID 0)
-- Dependencies: 282
-- Name: TABLE schemalist; Type: COMMENT; Schema: sqlmanager; Owner: postgres
--

COMMENT ON TABLE schemalist IS 'db schemas';


--
-- TOC entry 283 (class 1259 OID 227976)
-- Name: schemalist_id_seq; Type: SEQUENCE; Schema: sqlmanager; Owner: postgres
--

CREATE SEQUENCE schemalist_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE schemalist_id_seq OWNER TO postgres;

--
-- TOC entry 3680 (class 0 OID 0)
-- Dependencies: 283
-- Name: schemalist_id_seq; Type: SEQUENCE OWNED BY; Schema: sqlmanager; Owner: postgres
--

ALTER SEQUENCE schemalist_id_seq OWNED BY schemalist.id;


--
-- TOC entry 284 (class 1259 OID 227978)
-- Name: schemaobjects; Type: TABLE; Schema: sqlmanager; Owner: postgres
--

CREATE TABLE schemaobjects (
    id smallint NOT NULL,
    oname character varying NOT NULL,
    schemaname character varying(150),
    linkurl character varying(150) DEFAULT 'table'::character varying NOT NULL
);


ALTER TABLE schemaobjects OWNER TO postgres;

--
-- TOC entry 3681 (class 0 OID 0)
-- Dependencies: 284
-- Name: TABLE schemaobjects; Type: COMMENT; Schema: sqlmanager; Owner: postgres
--

COMMENT ON TABLE schemaobjects IS 'Objects of schema';


--
-- TOC entry 285 (class 1259 OID 227985)
-- Name: schemaobjects_id_seq; Type: SEQUENCE; Schema: sqlmanager; Owner: postgres
--

CREATE SEQUENCE schemaobjects_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE schemaobjects_id_seq OWNER TO postgres;

--
-- TOC entry 3682 (class 0 OID 0)
-- Dependencies: 285
-- Name: schemaobjects_id_seq; Type: SEQUENCE OWNED BY; Schema: sqlmanager; Owner: postgres
--

ALTER SEQUENCE schemaobjects_id_seq OWNED BY schemaobjects.id;


--
-- TOC entry 286 (class 1259 OID 227987)
-- Name: tablecolumns; Type: TABLE; Schema: sqlmanager; Owner: postgres
--

CREATE TABLE tablecolumns (
    id integer NOT NULL,
    tablename character varying(350) NOT NULL,
    colname character varying(350) NOT NULL,
    coldesc character varying(500) DEFAULT '<NO TITLE>'::character varying NOT NULL,
    coltype character varying(150) NOT NULL,
    size integer,
    accur integer,
    "notnull" boolean DEFAULT false NOT NULL,
    uniq boolean DEFAULT false NOT NULL,
    defval character varying(350),
    userid integer NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL,
    noscript boolean DEFAULT true NOT NULL
);


ALTER TABLE tablecolumns OWNER TO postgres;

--
-- TOC entry 3683 (class 0 OID 0)
-- Dependencies: 286
-- Name: TABLE tablecolumns; Type: COMMENT; Schema: sqlmanager; Owner: postgres
--

COMMENT ON TABLE tablecolumns IS 'tables columns';


--
-- TOC entry 287 (class 1259 OID 227998)
-- Name: tablecolumns_id_seq; Type: SEQUENCE; Schema: sqlmanager; Owner: postgres
--

CREATE SEQUENCE tablecolumns_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tablecolumns_id_seq OWNER TO postgres;

--
-- TOC entry 3684 (class 0 OID 0)
-- Dependencies: 287
-- Name: tablecolumns_id_seq; Type: SEQUENCE OWNED BY; Schema: sqlmanager; Owner: postgres
--

ALTER SEQUENCE tablecolumns_id_seq OWNED BY tablecolumns.id;


--
-- TOC entry 288 (class 1259 OID 228000)
-- Name: tableindexes; Type: TABLE; Schema: sqlmanager; Owner: postgres
--

CREATE TABLE tableindexes (
    id integer NOT NULL,
    tablename character varying(350) NOT NULL,
    index_name character varying(350) NOT NULL,
    columns json DEFAULT '[]'::json NOT NULL,
    typename character varying(150) NOT NULL,
    userid integer NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL,
    noscript boolean DEFAULT true NOT NULL
);


ALTER TABLE tableindexes OWNER TO postgres;

--
-- TOC entry 289 (class 1259 OID 228009)
-- Name: tableindexes_id_seq; Type: SEQUENCE; Schema: sqlmanager; Owner: postgres
--

CREATE SEQUENCE tableindexes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tableindexes_id_seq OWNER TO postgres;

--
-- TOC entry 3685 (class 0 OID 0)
-- Dependencies: 289
-- Name: tableindexes_id_seq; Type: SEQUENCE OWNED BY; Schema: sqlmanager; Owner: postgres
--

ALTER SEQUENCE tableindexes_id_seq OWNED BY tableindexes.id;


--
-- TOC entry 290 (class 1259 OID 228011)
-- Name: tablelist; Type: TABLE; Schema: sqlmanager; Owner: postgres
--

CREATE TABLE tablelist (
    id integer NOT NULL,
    tableschemaname character varying(150) NOT NULL,
    tablename character varying(150) NOT NULL,
    fullname character varying(350) NOT NULL,
    descr character varying(1500) DEFAULT '<NO TITLE>'::character varying NOT NULL,
    userid integer NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL,
    noscript boolean DEFAULT true NOT NULL
);


ALTER TABLE tablelist OWNER TO postgres;

--
-- TOC entry 3686 (class 0 OID 0)
-- Dependencies: 290
-- Name: TABLE tablelist; Type: COMMENT; Schema: sqlmanager; Owner: postgres
--

COMMENT ON TABLE tablelist IS 'tables';


--
-- TOC entry 291 (class 1259 OID 228020)
-- Name: tablelist_id_seq; Type: SEQUENCE; Schema: sqlmanager; Owner: postgres
--

CREATE SEQUENCE tablelist_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tablelist_id_seq OWNER TO postgres;

--
-- TOC entry 3687 (class 0 OID 0)
-- Dependencies: 291
-- Name: tablelist_id_seq; Type: SEQUENCE OWNED BY; Schema: sqlmanager; Owner: postgres
--

ALTER SEQUENCE tablelist_id_seq OWNED BY tablelist.id;


--
-- TOC entry 292 (class 1259 OID 228022)
-- Name: triggers; Type: TABLE; Schema: sqlmanager; Owner: postgres
--

CREATE TABLE triggers (
    id integer DEFAULT nextval(('sqlmanager.triggers_id_seq'::text)::regclass) NOT NULL,
    triggername character varying(150) NOT NULL,
    tablename character varying(350) NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL,
    userid integer NOT NULL,
    functionname character varying(150),
    functionoid integer,
    enables boolean DEFAULT true NOT NULL,
    onbefore boolean DEFAULT true NOT NULL,
    onafter boolean DEFAULT false NOT NULL,
    oninstead boolean DEFAULT false NOT NULL,
    oninsert boolean DEFAULT false NOT NULL,
    onupdate boolean DEFAULT false NOT NULL,
    ondelete boolean DEFAULT false NOT NULL,
    ontruncate boolean DEFAULT false NOT NULL,
    noscript boolean DEFAULT true NOT NULL,
    functiondef text,
    fields json DEFAULT '[]'::json NOT NULL
);


ALTER TABLE triggers OWNER TO postgres;

--
-- TOC entry 3688 (class 0 OID 0)
-- Dependencies: 292
-- Name: TABLE triggers; Type: COMMENT; Schema: sqlmanager; Owner: postgres
--

COMMENT ON TABLE triggers IS 'TRIGGERS';


--
-- TOC entry 293 (class 1259 OID 228039)
-- Name: triggers_id_seq; Type: SEQUENCE; Schema: sqlmanager; Owner: postgres
--

CREATE SEQUENCE triggers_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE triggers_id_seq OWNER TO postgres;

SET search_path = test, pg_catalog;

--
-- TOC entry 294 (class 1259 OID 228041)
-- Name: dictionary_for_select; Type: TABLE; Schema: test; Owner: postgres
--

CREATE TABLE dictionary_for_select (
    id integer NOT NULL,
    dname character varying(150),
    onemoreraltionid integer
);


ALTER TABLE dictionary_for_select OWNER TO postgres;

--
-- TOC entry 3689 (class 0 OID 0)
-- Dependencies: 294
-- Name: TABLE dictionary_for_select; Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON TABLE dictionary_for_select IS 'dictionary for relation ';


--
-- TOC entry 295 (class 1259 OID 228044)
-- Name: dictionary_for_select_id_seq; Type: SEQUENCE; Schema: test; Owner: postgres
--

CREATE SEQUENCE dictionary_for_select_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dictionary_for_select_id_seq OWNER TO postgres;

--
-- TOC entry 3690 (class 0 OID 0)
-- Dependencies: 295
-- Name: dictionary_for_select_id_seq; Type: SEQUENCE OWNED BY; Schema: test; Owner: postgres
--

ALTER SEQUENCE dictionary_for_select_id_seq OWNED BY dictionary_for_select.id;


--
-- TOC entry 296 (class 1259 OID 228046)
-- Name: fel; Type: TABLE; Schema: test; Owner: postgres
--

CREATE TABLE fel (
    id integer NOT NULL,
    logdata json DEFAULT '{}'::json NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE fel OWNER TO postgres;

--
-- TOC entry 3691 (class 0 OID 0)
-- Dependencies: 296
-- Name: TABLE fel; Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON TABLE fel IS 'Fron-ent errors log';


--
-- TOC entry 297 (class 1259 OID 228054)
-- Name: fel_id_seq; Type: SEQUENCE; Schema: test; Owner: postgres
--

CREATE SEQUENCE fel_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE fel_id_seq OWNER TO postgres;

--
-- TOC entry 3692 (class 0 OID 0)
-- Dependencies: 297
-- Name: fel_id_seq; Type: SEQUENCE OWNED BY; Schema: test; Owner: postgres
--

ALTER SEQUENCE fel_id_seq OWNED BY fel.id;


--
-- TOC entry 298 (class 1259 OID 228056)
-- Name: major_table; Type: TABLE; Schema: test; Owner: postgres
--

CREATE TABLE major_table (
    id integer NOT NULL,
    text text,
    data date,
    "check" boolean,
    "time" time without time zone,
    password character varying,
    color character varying(15),
    multiselect json,
    file json,
    typehead integer,
    image json,
    images json,
    gallery json,
    label character varying(350),
    number integer,
    link json,
    texteditor character varying,
    colorrow character varying(15),
    multitypehead_api json,
    multi_select_api json,
    colorpicker character varying(15),
    "select" integer,
    autocomplete character varying(100),
    textarea text,
    files json,
    typehead_api integer,
    select_api integer,
    multitypehead json,
    datetime timestamp without time zone,
    html character varying,
    rate numeric(2,1)
);


ALTER TABLE major_table OWNER TO postgres;

--
-- TOC entry 3693 (class 0 OID 0)
-- Dependencies: 298
-- Name: TABLE major_table; Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON TABLE major_table IS 'table for testing framework interface';


--
-- TOC entry 3694 (class 0 OID 0)
-- Dependencies: 298
-- Name: COLUMN major_table.id; Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON COLUMN major_table.id IS 'iddd';


--
-- TOC entry 3695 (class 0 OID 0)
-- Dependencies: 298
-- Name: COLUMN major_table.text; Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON COLUMN major_table.text IS 'texttt';


--
-- TOC entry 299 (class 1259 OID 228062)
-- Name: major_table_id_seq; Type: SEQUENCE; Schema: test; Owner: postgres
--

CREATE SEQUENCE major_table_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE major_table_id_seq OWNER TO postgres;

--
-- TOC entry 3696 (class 0 OID 0)
-- Dependencies: 299
-- Name: major_table_id_seq; Type: SEQUENCE OWNED BY; Schema: test; Owner: postgres
--

ALTER SEQUENCE major_table_id_seq OWNED BY major_table.id;


--
-- TOC entry 300 (class 1259 OID 228064)
-- Name: onemorerelation; Type: TABLE; Schema: test; Owner: postgres
--

CREATE TABLE onemorerelation (
    id integer NOT NULL,
    oname character varying(35) NOT NULL
);


ALTER TABLE onemorerelation OWNER TO postgres;

--
-- TOC entry 3697 (class 0 OID 0)
-- Dependencies: 300
-- Name: TABLE onemorerelation; Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON TABLE onemorerelation IS 'one more dictionary for tests';


--
-- TOC entry 301 (class 1259 OID 228067)
-- Name: onemorerelation_id_seq; Type: SEQUENCE; Schema: test; Owner: postgres
--

CREATE SEQUENCE onemorerelation_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE onemorerelation_id_seq OWNER TO postgres;

--
-- TOC entry 3698 (class 0 OID 0)
-- Dependencies: 301
-- Name: onemorerelation_id_seq; Type: SEQUENCE OWNED BY; Schema: test; Owner: postgres
--

ALTER SEQUENCE onemorerelation_id_seq OWNED BY onemorerelation.id;


--
-- TOC entry 302 (class 1259 OID 228069)
-- Name: relate_with_major; Type: TABLE; Schema: test; Owner: postgres
--

CREATE TABLE relate_with_major (
    id integer NOT NULL,
    somecolumn character varying(300) NOT NULL,
    major_table_id integer NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE relate_with_major OWNER TO postgres;

--
-- TOC entry 3699 (class 0 OID 0)
-- Dependencies: 302
-- Name: TABLE relate_with_major; Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON TABLE relate_with_major IS 'relate table with major_table';


--
-- TOC entry 303 (class 1259 OID 228073)
-- Name: relate_with_major_id_seq; Type: SEQUENCE; Schema: test; Owner: postgres
--

CREATE SEQUENCE relate_with_major_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE relate_with_major_id_seq OWNER TO postgres;

--
-- TOC entry 3700 (class 0 OID 0)
-- Dependencies: 303
-- Name: relate_with_major_id_seq; Type: SEQUENCE OWNED BY; Schema: test; Owner: postgres
--

ALTER SEQUENCE relate_with_major_id_seq OWNED BY relate_with_major.id;


--
-- TOC entry 304 (class 1259 OID 228075)
-- Name: testmanager; Type: TABLE; Schema: test; Owner: postgres
--

CREATE TABLE testmanager (
    id integer DEFAULT 123,
    col5 character varying(100) NOT NULL,
    textfield1 character varying(200),
    intfield integer,
    "boolField" boolean DEFAULT false NOT NULL
);


ALTER TABLE testmanager OWNER TO postgres;

--
-- TOC entry 3701 (class 0 OID 0)
-- Dependencies: 304
-- Name: COLUMN testmanager.col5; Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON COLUMN testmanager.col5 IS 'column';


--
-- TOC entry 3702 (class 0 OID 0)
-- Dependencies: 304
-- Name: COLUMN testmanager.textfield1; Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON COLUMN testmanager.textfield1 IS '<NO TITLE>';


--
-- TOC entry 3703 (class 0 OID 0)
-- Dependencies: 304
-- Name: COLUMN testmanager.intfield; Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON COLUMN testmanager.intfield IS 'intfield';


--
-- TOC entry 3704 (class 0 OID 0)
-- Dependencies: 304
-- Name: COLUMN testmanager."boolField"; Type: COMMENT; Schema: test; Owner: postgres
--

COMMENT ON COLUMN testmanager."boolField" IS 'bool';


SET search_path = framework, pg_catalog;

--
-- TOC entry 2660 (class 2604 OID 228080)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY act_parametrs ALTER COLUMN id SET DEFAULT nextval('act_parametrs_id_seq'::regclass);


--
-- TOC entry 2661 (class 2604 OID 228081)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY act_visible_condions ALTER COLUMN id SET DEFAULT nextval('act_visible_condions_id_seq'::regclass);


--
-- TOC entry 2670 (class 2604 OID 228082)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY actions ALTER COLUMN id SET DEFAULT nextval('actions_id_seq'::regclass);


--
-- TOC entry 2671 (class 2604 OID 228083)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY actparam_querytypes ALTER COLUMN id SET DEFAULT nextval('actparam_querytypes_id_seq'::regclass);


--
-- TOC entry 2673 (class 2604 OID 228084)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY apicallingmethods ALTER COLUMN id SET DEFAULT nextval('apicallingmethods_id_seq'::regclass);


--
-- TOC entry 2675 (class 2604 OID 228085)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY booloper ALTER COLUMN id SET DEFAULT nextval('booloper_id_seq'::regclass);


--
-- TOC entry 2678 (class 2604 OID 228086)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY calendar_actions ALTER COLUMN id SET DEFAULT nextval('calendar_actions_id_seq'::regclass);


--
-- TOC entry 2679 (class 2604 OID 228087)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY calendar_test ALTER COLUMN id SET DEFAULT nextval('calendar_test_id_seq'::regclass);


--
-- TOC entry 2681 (class 2604 OID 228088)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY columntypes ALTER COLUMN id SET DEFAULT nextval('columntypes_id_seq1'::regclass);


--
-- TOC entry 2685 (class 2604 OID 228089)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY compos ALTER COLUMN id SET DEFAULT nextval('compos_id_seq1'::regclass);


--
-- TOC entry 2704 (class 2604 OID 228090)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY config ALTER COLUMN id SET DEFAULT nextval('config_id_seq'::regclass);


--
-- TOC entry 2705 (class 2604 OID 228091)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY configsettings ALTER COLUMN id SET DEFAULT nextval('configsettings_id_seq'::regclass);


--
-- TOC entry 2706 (class 2604 OID 228092)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY defaultval ALTER COLUMN id SET DEFAULT nextval('defaultval_id_seq'::regclass);


--
-- TOC entry 2714 (class 2604 OID 228093)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY dialog_messages ALTER COLUMN id SET DEFAULT nextval('dialog_messages_id_seq'::regclass);


--
-- TOC entry 2718 (class 2604 OID 228094)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY dialog_notifications ALTER COLUMN id SET DEFAULT nextval('dialog_notifications_id_seq'::regclass);


--
-- TOC entry 2719 (class 2604 OID 228095)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY dialog_statuses ALTER COLUMN id SET DEFAULT nextval('dialog_statuses_id_seq'::regclass);


--
-- TOC entry 2728 (class 2604 OID 228096)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY dialogs ALTER COLUMN id SET DEFAULT nextval('dialogs_id_seq'::regclass);


--
-- TOC entry 2735 (class 2604 OID 228097)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY filters ALTER COLUMN id SET DEFAULT nextval('filters_id_seq'::regclass);


--
-- TOC entry 2745 (class 2604 OID 228098)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY mainmenu ALTER COLUMN id SET DEFAULT nextval('mainmenu_id_seq'::regclass);


--
-- TOC entry 2759 (class 2604 OID 228099)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY menus ALTER COLUMN id SET DEFAULT nextval('menus_id_seq'::regclass);


--
-- TOC entry 2761 (class 2604 OID 228100)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY menutypes ALTER COLUMN id SET DEFAULT nextval('menutypes_id_seq'::regclass);


--
-- TOC entry 2766 (class 2604 OID 228101)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY notifications ALTER COLUMN id SET DEFAULT nextval('notifications_id_seq'::regclass);


--
-- TOC entry 2767 (class 2604 OID 228102)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY operations ALTER COLUMN id SET DEFAULT nextval('operations_id_seq'::regclass);


--
-- TOC entry 2773 (class 2604 OID 228103)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY select_condition ALTER COLUMN id SET DEFAULT nextval('select_condition_id_seq'::regclass);


--
-- TOC entry 2778 (class 2604 OID 228104)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY spapi ALTER COLUMN id SET DEFAULT nextval('spapi_id_seq'::regclass);


--
-- TOC entry 2782 (class 2604 OID 228105)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY trees ALTER COLUMN id SET DEFAULT nextval('trees_id_seq'::regclass);


--
-- TOC entry 2783 (class 2604 OID 228106)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY treesacts ALTER COLUMN id SET DEFAULT nextval('treesacts_id_seq'::regclass);


--
-- TOC entry 2787 (class 2604 OID 228107)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY treesbranches ALTER COLUMN id SET DEFAULT nextval('treesbranches_id_seq'::regclass);


--
-- TOC entry 2796 (class 2604 OID 228108)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY users ALTER COLUMN id SET DEFAULT nextval('users_id_seq'::regclass);


--
-- TOC entry 2813 (class 2604 OID 228109)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY views ALTER COLUMN id SET DEFAULT nextval('views_id_seq'::regclass);


--
-- TOC entry 2818 (class 2604 OID 228110)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY viewsnotification ALTER COLUMN id SET DEFAULT nextval('viewsnotification_id_seq'::regclass);


--
-- TOC entry 2819 (class 2604 OID 228111)
-- Name: id; Type: DEFAULT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY visible_condition ALTER COLUMN id SET DEFAULT nextval('visible_condition_id_seq'::regclass);


SET search_path = reports, pg_catalog;

--
-- TOC entry 2825 (class 2604 OID 228112)
-- Name: id; Type: DEFAULT; Schema: reports; Owner: postgres
--

ALTER TABLE ONLY reportlist ALTER COLUMN id SET DEFAULT nextval('reportlist_id_seq'::regclass);


--
-- TOC entry 2829 (class 2604 OID 228113)
-- Name: id; Type: DEFAULT; Schema: reports; Owner: postgres
--

ALTER TABLE ONLY reportparams ALTER COLUMN id SET DEFAULT nextval('reportparams_id_seq'::regclass);


SET search_path = sqlmanager, pg_catalog;

--
-- TOC entry 2832 (class 2604 OID 228114)
-- Name: id; Type: DEFAULT; Schema: sqlmanager; Owner: postgres
--

ALTER TABLE ONLY foreignkeys ALTER COLUMN id SET DEFAULT nextval('foreignkeys_id_seq'::regclass);


--
-- TOC entry 2833 (class 2604 OID 228115)
-- Name: id; Type: DEFAULT; Schema: sqlmanager; Owner: postgres
--

ALTER TABLE ONLY functionargs ALTER COLUMN id SET DEFAULT nextval('functionargs_id_seq'::regclass);


--
-- TOC entry 2838 (class 2604 OID 228116)
-- Name: id; Type: DEFAULT; Schema: sqlmanager; Owner: postgres
--

ALTER TABLE ONLY functionslist ALTER COLUMN id SET DEFAULT nextval('functionslist_id_seq'::regclass);


--
-- TOC entry 2843 (class 2604 OID 228117)
-- Name: id; Type: DEFAULT; Schema: sqlmanager; Owner: postgres
--

ALTER TABLE ONLY schemalist ALTER COLUMN id SET DEFAULT nextval('schemalist_id_seq'::regclass);


--
-- TOC entry 2844 (class 2604 OID 228118)
-- Name: id; Type: DEFAULT; Schema: sqlmanager; Owner: postgres
--

ALTER TABLE ONLY schemaobjects ALTER COLUMN id SET DEFAULT nextval('schemaobjects_id_seq'::regclass);


--
-- TOC entry 2851 (class 2604 OID 228119)
-- Name: id; Type: DEFAULT; Schema: sqlmanager; Owner: postgres
--

ALTER TABLE ONLY tablecolumns ALTER COLUMN id SET DEFAULT nextval('tablecolumns_id_seq'::regclass);


--
-- TOC entry 2855 (class 2604 OID 228120)
-- Name: id; Type: DEFAULT; Schema: sqlmanager; Owner: postgres
--

ALTER TABLE ONLY tableindexes ALTER COLUMN id SET DEFAULT nextval('tableindexes_id_seq'::regclass);


--
-- TOC entry 2858 (class 2604 OID 228121)
-- Name: id; Type: DEFAULT; Schema: sqlmanager; Owner: postgres
--

ALTER TABLE ONLY tablelist ALTER COLUMN id SET DEFAULT nextval('tablelist_id_seq'::regclass);


SET search_path = test, pg_catalog;

--
-- TOC entry 2872 (class 2604 OID 228122)
-- Name: id; Type: DEFAULT; Schema: test; Owner: postgres
--

ALTER TABLE ONLY dictionary_for_select ALTER COLUMN id SET DEFAULT nextval('dictionary_for_select_id_seq'::regclass);


--
-- TOC entry 2875 (class 2604 OID 228123)
-- Name: id; Type: DEFAULT; Schema: test; Owner: postgres
--

ALTER TABLE ONLY fel ALTER COLUMN id SET DEFAULT nextval('fel_id_seq'::regclass);


--
-- TOC entry 2876 (class 2604 OID 228124)
-- Name: id; Type: DEFAULT; Schema: test; Owner: postgres
--

ALTER TABLE ONLY major_table ALTER COLUMN id SET DEFAULT nextval('major_table_id_seq'::regclass);


--
-- TOC entry 2877 (class 2604 OID 228125)
-- Name: id; Type: DEFAULT; Schema: test; Owner: postgres
--

ALTER TABLE ONLY onemorerelation ALTER COLUMN id SET DEFAULT nextval('onemorerelation_id_seq'::regclass);


--
-- TOC entry 2878 (class 2604 OID 228126)
-- Name: id; Type: DEFAULT; Schema: test; Owner: postgres
--

ALTER TABLE ONLY relate_with_major ALTER COLUMN id SET DEFAULT nextval('relate_with_major_id_seq'::regclass);


SET search_path = framework, pg_catalog;

--
-- TOC entry 3197 (class 0 OID 227483)
-- Dependencies: 186
-- Data for Name: act_parametrs; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY act_parametrs (id, actionid, paramtitle, paramt, paramconst, paraminput, paramcolumn, val_desc, query_type, created, orderby) FROM stdin;
5622	2750	reportlistid	\N	0	\N	\N	\N	query	2019-12-25 11:04:47.818399	0
5623	2751	paramid	\N	-1	\N	\N	\N	query	2019-12-25 11:04:47.818399	0
5624	2751	reportlistid	\N		\N	id	19342	query	2019-12-25 11:04:47.818399	0
5626	2754	id	\N	\N	\N	id	19342	query	2019-12-25 11:04:47.818399	0
5627	2757	paramid	\N	0	\N	\N	\N	query	2019-12-25 11:04:47.818399	0
5628	2757	relation	\N	reportlistid	\N	\N	\N	query	2019-12-25 11:04:47.818399	0
5629	2757	reportlistid	\N		\N	reportlistid	19367	query	2019-12-25 11:04:47.818399	0
5630	2758	paramid	\N		\N	param_id	19406	query	2019-12-25 11:04:47.818399	0
5631	2758	reportlistid	\N		\N	reportlistid	19367	query	2019-12-25 11:04:47.818399	0
5632	2761	paramid	\N	-1	\N	\N	\N	query	2019-12-25 11:04:47.818399	0
5633	2761	reportlistid	\N		\N	reportlistid	19376	query	2019-12-25 11:04:47.818399	0
5049	2141	viewid	\N	\N	viewid	\N	\N	query	2019-12-03 11:11:24.059376	0
5048	2186	viewid	\N	\N	id	\N	\N	query	2019-12-03 11:10:49.325566	0
5054	2092	viewid	\N	\N	viewid	\N	\N	query	2019-12-03 11:15:40.030556	0
5058	2139	viewid	\N	\N	viewid	\N	\N	query	2019-12-03 11:21:39.899014	0
5066	2398	id	\N	\N	viewid	\N	\N	query	2019-12-03 11:26:52.013714	0
5075	2029	_sub_title	\N	\N	_sub_title	\N	\N	query	2019-12-03 11:39:21.168145	0
5050	2397	id	\N	\N	viewid	\N	\N	query	2019-12-03 11:11:43.894366	0
5051	2397	act_id	\N	-1		\N	\N	query	2019-12-03 11:12:10.847087	0
5052	2397	fl_id	\N	-1		\N	\N	query	2019-12-03 11:12:23.352866	0
5062	2152	viewid	\N	\N	viewid	\N	\N	query	2019-12-03 11:25:22.290336	0
5053	2397	N	\N	-1		\N	\N	query	2019-12-03 11:12:39.009882	0
5055	2141	_sub_title	\N	\N	_sub_title	\N	\N	query	2019-12-03 11:19:20.985548	0
4184	2076	id	\N		id	\N	\N	query	2019-11-05 10:00:17.290746	0
5056	2092	_sub_title	\N		_sub_title	\N	\N	query	2019-12-03 11:19:38.113472	0
5061	2143	_sub_title	\N	\N	_sub_title	\N	\N	query	2019-12-03 11:24:50.655449	0
5057	2139	_sub_title	\N	\N	_sub_title	\N	\N	query	2019-12-03 11:21:30.118959	0
5063	2152	_sub_title	\N	\N	_sub_title	\N	\N	query	2019-12-03 11:25:30.098891	0
5068	2398	fl_id	\N	-1	\N	\N	\N	query	2019-12-03 11:28:10.073305	0
5069	2398	act_id	\N	-1	\N	\N	\N	query	2019-12-03 11:28:19.971311	0
4185	2076	N	\N	-1		\N	\N	query	2019-11-05 10:00:17.290746	0
4104	2021	relation	\N	configid		\N	\N	query	2019-11-05 10:00:17.290746	0
4105	2021	configid	\N		configid	\N	\N	query	2019-11-05 10:00:17.290746	0
4106	2021	_sub_title	\N		_sub_title	\N	\N	query	2019-11-05 10:00:17.290746	0
4107	2021	CN	\N			id	12701	query	2019-11-05 10:00:17.290746	0
4108	2021	N	\N		N	\N	\N	query	2019-11-05 10:00:17.290746	0
4109	2021	viewid	\N		viewid	\N	\N	query	2019-11-05 10:00:17.290746	0
4110	2022	id	\N		viewid	\N	\N	query	2019-11-05 10:00:17.290746	0
4111	2022	N	\N		configid	\N	\N	query	2019-11-05 10:00:17.290746	0
4112	2024	configid	\N		configid	\N	\N	query	2019-11-05 10:00:17.290746	0
4113	2024	relation	\N	configid		\N	\N	query	2019-11-05 10:00:17.290746	0
4114	2024	_sub_title	\N		_sub_title	\N	\N	query	2019-11-05 10:00:17.290746	0
4115	2024	CN	\N	0		\N	\N	query	2019-11-05 10:00:17.290746	0
4116	2024	N	\N		N	\N	\N	query	2019-11-05 10:00:17.290746	0
4117	2024	viewid	\N		viewid	\N	\N	query	2019-11-05 10:00:17.290746	0
4118	2025	o	\N			id	12718	query	2019-11-05 10:00:17.290746	0
4119	2026	id	\N		id	\N	\N	query	2019-11-05 10:00:17.290746	0
4120	2027	id	\N			id	12718	query	2019-11-05 10:00:17.290746	0
4121	2029	relation	\N		relation	\N	\N	query	2019-11-05 10:00:17.290746	0
4122	2029	configid	\N		configid	\N	\N	query	2019-11-05 10:00:17.290746	0
4123	2029	CN	\N	0		\N	\N	query	2019-11-05 10:00:17.290746	0
4124	2029	viewid	\N		viewid	\N	\N	query	2019-11-05 10:00:17.290746	0
4125	2030	relation	\N		relation	\N	\N	query	2019-11-05 10:00:17.290746	0
4126	2030	configid	\N		configid	\N	\N	query	2019-11-05 10:00:17.290746	0
4127	2030	CN	\N			id	12753	query	2019-11-05 10:00:17.290746	0
4128	2030	viewid	\N		viewid	\N	\N	query	2019-11-05 10:00:17.290746	0
4129	2031	id	\N		viewid	\N	\N	query	2019-11-05 10:00:17.290746	0
4130	2031	N	\N		configid	\N	\N	query	2019-11-05 10:00:17.290746	0
4132	2033	treesid	\N	\N	\N	treesid	12760	query	2019-11-05 10:00:17.290746	0
4133	2034	relation	\N	treesid	\N	\N	\N	query	2019-11-05 10:00:17.290746	0
4134	2034	treesid	\N	\N	\N	treesid	12760	query	2019-11-05 10:00:17.290746	0
4135	2034	bid	\N	0	\N	\N	\N	query	2019-11-05 10:00:17.290746	0
4136	2035	id	\N	\N	\N	id	12759	query	2019-11-05 10:00:17.290746	0
4137	2040	id	\N	\N	\N	id	12784	query	2019-11-05 10:00:17.290746	0
4138	2041	path	\N	\N	\N	path	12786	query	2019-11-05 10:00:17.290746	0
4139	2042	id	\N	\N	\N	id	12784	query	2019-11-05 10:00:17.290746	0
4140	2044	o	\N			id	12789	query	2019-11-05 10:00:17.290746	0
4141	2045	id	\N		id	\N	\N	query	2019-11-05 10:00:17.290746	0
4142	2046	id	\N			id	12789	query	2019-11-05 10:00:17.290746	0
4143	2047	id	\N			id	12789	query	2019-11-05 10:00:17.290746	0
4144	2048	id	\N	\N	\N	id	12822	query	2019-11-05 10:00:17.290746	0
4145	2049	id	\N		\N	id	12834	query	2019-11-05 10:00:17.290746	0
4146	2050	menuid	\N		\N	id	12834	query	2019-11-05 10:00:17.290746	0
4147	2052	id	\N	0	\N	\N	\N	query	2019-11-05 10:00:17.290746	0
4148	2054	N	\N	\N	\N	id	12839	query	2019-11-05 10:00:17.290746	0
4149	2055	id	\N	\N	\N	id	12839	query	2019-11-05 10:00:17.290746	0
4150	2057	checked	\N	_checked_		\N	\N	query	2019-11-05 10:00:17.290746	0
4151	2058	id	\N	0		\N	\N	query	2019-11-05 10:00:17.290746	0
4152	2058	relation	\N	number,check		\N	\N	query	2019-11-05 10:00:17.290746	0
4153	2058	number	\N	55		\N	\N	query	2019-11-05 10:00:17.290746	0
4154	2058	check	\N	true		\N	\N	query	2019-11-05 10:00:17.290746	0
4155	2059	id	\N		\N	id	12846	query	2019-11-05 10:00:17.290746	0
4156	2060	id	\N			id	12846	query	2019-11-05 10:00:17.290746	0
4157	2061	id	\N			id	12846	query	2019-11-05 10:00:17.290746	0
4158	2063	id	\N	0	\N	\N	\N	query	2019-11-05 10:00:17.290746	0
4159	2065	checked	\N	_checked_		\N	\N	query	2019-11-05 10:00:17.290746	0
4160	2066	id	\N	0		\N	\N	query	2019-11-05 10:00:17.290746	0
4161	2066	relation	\N	number,check		\N	\N	query	2019-11-05 10:00:17.290746	0
4162	2066	number	\N	55		\N	\N	query	2019-11-05 10:00:17.290746	0
4163	2066	check	\N	true		\N	\N	query	2019-11-05 10:00:17.290746	0
4164	2067	id	\N		\N	id	12878	query	2019-11-05 10:00:17.290746	0
4165	2068	id	\N			id	12878	query	2019-11-05 10:00:17.290746	0
4166	2069	id	\N			id	12878	query	2019-11-05 10:00:17.290746	0
4167	2071	id	\N	0	\N	\N	\N	query	2019-11-05 10:00:17.290746	0
4168	2073	relation	\N	configid		\N	\N	query	2019-11-05 10:00:17.290746	0
4169	2073	configid	\N			N	12912	query	2019-11-05 10:00:17.290746	0
4170	2073	CN	\N	-1		\N	\N	query	2019-11-05 10:00:17.290746	0
4171	2073	viewid	\N			id	12913	query	2019-11-05 10:00:17.290746	0
4172	2074	configid	\N			N	12912	query	2019-11-05 10:00:17.290746	0
4173	2074	relation	\N	configid		\N	\N	query	2019-11-05 10:00:17.290746	0
4174	2074	_sub_title	\N			title	12917	query	2019-11-05 10:00:17.290746	0
4175	2074	CN	\N	-1		\N	\N	query	2019-11-05 10:00:17.290746	0
4176	2074	viewid	\N			id	12913	query	2019-11-05 10:00:17.290746	0
4177	2075	N	\N			N	12912	query	2019-11-05 10:00:17.290746	0
4178	2075	configid	\N			N	12912	query	2019-11-05 10:00:17.290746	0
4179	2075	relation	\N	configid		\N	\N	query	2019-11-05 10:00:17.290746	0
4180	2075	CN	\N	-1		\N	\N	query	2019-11-05 10:00:17.290746	0
4181	2075	table	\N			relation table	12931	query	2019-11-05 10:00:17.290746	0
4182	2075	_sub_title	\N			title	12917	query	2019-11-05 10:00:17.290746	0
4183	2075	viewid	\N			id	12913	query	2019-11-05 10:00:17.290746	0
4186	2076	fl_id	\N		fl_id	\N	\N	query	2019-11-05 10:00:17.290746	0
4187	2076	act_id	\N		act_id	\N	\N	query	2019-11-05 10:00:17.290746	0
4188	2078	N	\N		N	\N	\N	query	2019-11-05 10:00:17.290746	0
4189	2078	CN	\N	-1		\N	\N	query	2019-11-05 10:00:17.290746	0
4190	2078	relation	\N	configid		\N	\N	query	2019-11-05 10:00:17.290746	0
4191	2078	configid	\N		configid	\N	\N	query	2019-11-05 10:00:17.290746	0
4192	2078	table	\N		table	\N	\N	query	2019-11-05 10:00:17.290746	0
4193	2078	_sub_title	\N		_sub_title	\N	\N	query	2019-11-05 10:00:17.290746	0
4194	2078	viewid	\N		viewid	\N	\N	query	2019-11-05 10:00:17.290746	0
4195	2080	relation	\N	configid		\N	\N	query	2019-11-05 10:00:17.290746	0
4196	2080	configid	\N		configid	\N	\N	query	2019-11-05 10:00:17.290746	0
4197	2080	_sub_title	\N		_sub_title	\N	\N	query	2019-11-05 10:00:17.290746	0
4198	2080	CN	\N	-1		\N	\N	query	2019-11-05 10:00:17.290746	0
4199	2080	N	\N		N	\N	\N	query	2019-11-05 10:00:17.290746	0
4200	2080	viewid	\N		viewid	\N	\N	query	2019-11-05 10:00:17.290746	0
4201	2082	relation	\N		relation	\N	\N	query	2019-11-05 10:00:17.290746	0
4202	2082	configid	\N		configid	\N	\N	query	2019-11-05 10:00:17.290746	0
4203	2082	CN	\N	-1		\N	\N	query	2019-11-05 10:00:17.290746	0
4204	2082	viewid	\N		viewid	\N	\N	query	2019-11-05 10:00:17.290746	0
5059	2187	viewid	\N	\N	id	\N	\N	query	2019-12-03 11:24:18.469893	0
5065	2153	viewid	\N	\N	viewid	\N	\N	query	2019-12-03 11:26:04.689502	0
4209	2085	id	\N		id	\N	\N	query	2019-11-05 10:00:17.290746	0
4210	2085	N	\N		N	\N	\N	query	2019-11-05 10:00:17.290746	0
4211	2085	fl_id	\N		fl_id	\N	\N	query	2019-11-05 10:00:17.290746	0
4212	2085	act_id	\N	0		\N	\N	query	2019-11-05 10:00:17.290746	0
4213	2085	relation	\N	viewid		\N	\N	query	2019-11-05 10:00:17.290746	0
4214	2085	viewid	\N		id	\N	\N	query	2019-11-05 10:00:17.290746	0
4215	2087	id	\N		id	\N	\N	query	2019-11-05 10:00:17.290746	0
4216	2087	N	\N		N	\N	\N	query	2019-11-05 10:00:17.290746	0
4217	2087	fl_id	\N		fl_id	\N	\N	query	2019-11-05 10:00:17.290746	0
4218	2087	act_id	\N	-1		\N	\N	query	2019-11-05 10:00:17.290746	0
4219	2088	actionid	\N		act_id	\N	\N	query	2019-11-05 10:00:17.290746	0
4220	2088	relation	\N	actionid		\N	\N	query	2019-11-05 10:00:17.290746	0
4221	2088	paramid	\N	-1		\N	\N	query	2019-11-05 10:00:17.290746	0
4222	2088	act_id	\N			act_id	12995	query	2019-11-05 10:00:17.290746	0
4223	2089	actionid	\N			act_id	12995	query	2019-11-05 10:00:17.290746	0
4224	2089	relation	\N	actionid		\N	\N	query	2019-11-05 10:00:17.290746	0
4225	2089	act_id	\N			act_id	12995	query	2019-11-05 10:00:17.290746	0
4226	2089	vs_id	\N	-1		\N	\N	query	2019-11-05 10:00:17.290746	0
4227	2092	actionid	\N		actionid	\N	\N	query	2019-11-05 10:00:17.290746	0
4228	2092	relation	\N	actionid		\N	\N	query	2019-11-05 10:00:17.290746	0
4229	2092	id	\N	-1		\N	\N	query	2019-11-05 10:00:17.290746	0
4233	2093	viewid	\N		id	\N	\N	query	2019-11-05 10:00:17.290746	0
4234	2094	N	\N		N	\N	\N	query	2019-11-05 10:00:17.290746	0
4235	2094	id	\N		id	\N	\N	query	2019-11-05 10:00:17.290746	0
4236	2094	fl_id	\N		fl_id	\N	\N	query	2019-11-05 10:00:17.290746	0
4237	2094	act_id	\N		act_id	\N	\N	query	2019-11-05 10:00:17.290746	0
4238	2094	a	\N	0		\N	\N	query	2019-11-05 10:00:17.290746	0
4239	2095	col	\N			column title	13039	query	2019-11-05 10:00:17.290746	0
4240	2095	viewid	\N		id	\N	\N	query	2019-11-05 10:00:17.290746	0
4241	2096	N	\N		N	\N	\N	query	2019-11-05 10:00:17.290746	0
4242	2096	id	\N		id	\N	\N	query	2019-11-05 10:00:17.290746	0
4243	2096	fl_id	\N		fl_id	\N	\N	query	2019-11-05 10:00:17.290746	0
4244	2096	act_id	\N		act_id	\N	\N	query	2019-11-05 10:00:17.290746	0
4245	2096	i	\N	0		\N	\N	query	2019-11-05 10:00:17.290746	0
4246	2097	viewid	\N		id	\N	\N	query	2019-11-05 10:00:17.290746	0
4247	2097	setting	\N			setting	13043	query	2019-11-05 10:00:17.290746	0
4248	2097	col	\N			column	13044	query	2019-11-05 10:00:17.290746	0
4249	2098	N	\N		N	\N	\N	query	2019-11-05 10:00:17.290746	0
4250	2098	id	\N		id	\N	\N	query	2019-11-05 10:00:17.290746	0
4251	2098	fl_id	\N		fl_id	\N	\N	query	2019-11-05 10:00:17.290746	0
4252	2098	act_id	\N		act_id	\N	\N	query	2019-11-05 10:00:17.290746	0
4253	2098	ttt	\N	1		\N	\N	query	2019-11-05 10:00:17.290746	0
4254	2099	id	\N	0	\N	\N	\N	query	2019-11-05 10:00:17.290746	0
4255	2100	id	\N	\N	\N	id	13045	query	2019-11-05 10:00:17.290746	0
4256	2101	treesid	\N			id	13045	query	2019-11-05 10:00:17.290746	0
4257	2101	bid	\N	-1		\N	\N	query	2019-11-05 10:00:17.290746	0
4258	2102	treesid	\N	\N	\N	id	13045	query	2019-11-05 10:00:17.290746	0
4259	2102	bid	\N	0	\N	\N	\N	query	2019-11-05 10:00:17.290746	0
4260	2103	id	\N	\N	\N	id	13045	query	2019-11-05 10:00:17.290746	0
4261	2107	treesid	\N	\N	\N	treesid	13058	query	2019-11-05 10:00:17.290746	0
4262	2107	bid	\N	\N	\N	id	13057	query	2019-11-05 10:00:17.290746	0
4263	2108	id	\N	\N	\N	id	13057	query	2019-11-05 10:00:17.290746	0
4264	2109	bid	\N	0	\N	\N	\N	query	2019-11-05 10:00:17.290746	0
4265	2109	relation	\N	treesid	\N	\N	\N	query	2019-11-05 10:00:17.290746	0
4266	2109	treesid	\N		treesid	\N	\N	query	2019-11-05 10:00:17.290746	0
4267	2111	bid	\N	-1		\N	\N	query	2019-11-05 10:00:17.290746	0
4268	2111	treesid	\N		treesid	\N	\N	query	2019-11-05 10:00:17.290746	0
4269	2112	treesid	\N	\N	\N	treesid	13079	query	2019-11-05 10:00:17.290746	0
4270	2112	bid	\N	-1	\N	\N	\N	query	2019-11-05 10:00:17.290746	0
4271	2113	id	\N	\N	\N	id	13085	query	2019-11-05 10:00:17.290746	0
4272	2113	o	\N	\N	\N	title	13086	query	2019-11-05 10:00:17.290746	0
4273	2114	id	\N	\N	\N	id	13085	query	2019-11-05 10:00:17.290746	0
4274	2115	id	\N	0	\N	\N	\N	query	2019-11-05 10:00:17.290746	0
4275	2115	relation	\N	menuid	\N	\N	\N	query	2019-11-05 10:00:17.290746	0
4276	2115	menuid	\N		\N	menuid	13095	query	2019-11-05 10:00:17.290746	0
4277	2117	menuid	\N		\N	menuid	13106	query	2019-11-05 10:00:17.290746	0
4278	2118	id	\N	\N	\N	id	13107	query	2019-11-05 10:00:17.290746	0
4279	2119	id	\N	\N	\N	id	13107	query	2019-11-05 10:00:17.290746	0
4280	2120	id	\N	0	\N	\N	\N	query	2019-11-05 10:00:17.290746	0
4231	2093	fn	\N			function	13029	query	2019-11-05 10:00:17.290746	0
4230	2093	title	\N			title	13028	query	2019-11-05 10:00:17.290746	0
4286	2124	id	\N		\N	id	13117	query	2019-11-05 10:00:17.290746	0
5060	2143	viewid	\N	\N	viewid	\N	\N	query	2019-12-03 11:24:39.428532	0
4291	2130	N	\N		N	\N	\N	query	2019-11-05 10:00:17.290746	0
4292	2130	id	\N		viewid	\N	\N	query	2019-11-05 10:00:17.290746	0
4293	2131	N	\N		N	\N	\N	query	2019-11-05 10:00:17.290746	0
4294	2131	CN	\N			cni	13167	query	2019-11-05 10:00:17.290746	0
4295	2131	relation	\N		configid	\N	\N	query	2019-11-05 10:00:17.290746	0
4296	2131	configid	\N		configid	\N	\N	query	2019-11-05 10:00:17.290746	0
4297	2131	table	\N		table	\N	\N	query	2019-11-05 10:00:17.290746	0
4298	2131	_sub_title	\N		_sub_title	\N	\N	query	2019-11-05 10:00:17.290746	0
4299	2131	viewid	\N		viewid	\N	\N	query	2019-11-05 10:00:17.290746	0
4300	2133	N	\N		N	\N	\N	query	2019-11-05 10:00:17.290746	0
4301	2133	CN	\N	0		\N	\N	query	2019-11-05 10:00:17.290746	0
4302	2133	relation	\N	configid		\N	\N	query	2019-11-05 10:00:17.290746	0
4303	2133	configid	\N		configid	\N	\N	query	2019-11-05 10:00:17.290746	0
4304	2133	table	\N		table	\N	\N	query	2019-11-05 10:00:17.290746	0
4305	2133	_sub_title	\N		_sub_title	\N	\N	query	2019-11-05 10:00:17.290746	0
4306	2133	viewid	\N		viewid	\N	\N	query	2019-11-05 10:00:17.290746	0
4311	2136	id	\N		id	\N	\N	query	2019-11-05 10:00:17.290746	0
4312	2136	N	\N		N	\N	\N	query	2019-11-05 10:00:17.290746	0
4313	2136	act_id	\N		act_id	\N	\N	query	2019-11-05 10:00:17.290746	0
4314	2136	relation	\N	viewid		\N	\N	query	2019-11-05 10:00:17.290746	0
4315	2136	viewid	\N		id	\N	\N	query	2019-11-05 10:00:17.290746	0
4316	2136	fl_id	\N	0		\N	\N	query	2019-11-05 10:00:17.290746	0
4317	2138	id	\N		id	\N	\N	query	2019-11-05 10:00:17.290746	0
4318	2138	N	\N		N	\N	\N	query	2019-11-05 10:00:17.290746	0
4319	2138	fl_id	\N	-1		\N	\N	query	2019-11-05 10:00:17.290746	0
4320	2138	act_id	\N	-1		\N	\N	query	2019-11-05 10:00:17.290746	0
4321	2139	actionid	\N		actionid	\N	\N	query	2019-11-05 10:00:17.290746	0
4322	2139	paramid	\N			p_id	13201	query	2019-11-05 10:00:17.290746	0
4323	2139	relation	\N	actionid		\N	\N	query	2019-11-05 10:00:17.290746	0
4324	2141	actionid	\N		actionid	\N	\N	query	2019-11-05 10:00:17.290746	0
4325	2141	relation	\N	actionid		\N	\N	query	2019-11-05 10:00:17.290746	0
4326	2141	paramid	\N	0		\N	\N	query	2019-11-05 10:00:17.290746	0
4327	2143	actionid	\N		actionid	\N	\N	query	2019-11-05 10:00:17.290746	0
4328	2143	relation	\N	actionid		\N	\N	query	2019-11-05 10:00:17.290746	0
4329	2143	vs_id	\N	-1		\N	\N	query	2019-11-05 10:00:17.290746	0
4330	2143	act_id	\N		act_id	\N	\N	query	2019-11-05 10:00:17.290746	0
4333	2123	id	\N	0	\N	\N	\N	query	2019-11-05 11:49:26.003741	0
5064	2153	_sub_title	\N	\N	_sub_title	\N	\N	query	2019-12-03 11:25:45.233795	0
4344	2139	act_id	\N	\N	act_id	\N	\N	query	2019-11-05 17:31:21.8216	0
4345	2141	act_id	\N	\N	act_id	\N	\N	query	2019-11-05 17:32:00.473986	0
4369	2092	paramid	\N	-1	\N	\N	\N	query	2019-11-06 13:45:27.260521	0
4370	2092	act_id	\N	\N	act_id	\N	\N	query	2019-11-06 13:45:50.236083	0
4371	2152	actionid	\N	\N	actionid	\N	\N	query	2019-11-06 13:48:50.435347	0
4372	2152	relation	\N	actionid	\N	\N	\N	query	2019-11-06 13:49:02.617198	0
4373	2152	act_id	\N	\N	act_id	\N	\N	query	2019-11-06 13:49:12.250123	0
4374	2152	vs_id	\N	0	\N	\N	\N	query	2019-11-06 13:49:25.557885	0
4375	2153	act_id	\N	\N	act_id	\N	\N	query	2019-11-06 13:50:48.872392	0
4376	2153	actionid	\N	\N	actionid	\N	\N	query	2019-11-06 13:50:58.50819	0
4377	2153	relation	\N	actionid	\N	\N	\N	query	2019-11-06 13:51:13.255356	0
4378	2153	vs_id	\N	\N	\N	\N	13032	query	2019-11-06 13:51:26.269503	0
4232	2093	fncols	\N			columns	13030	query	2019-11-05 10:00:17.290746	0
4449	2184	_sub_title	\N	\N	\N	\N	13147	query	2019-11-11 16:54:36.90807	0
4450	2184	relation	\N	configid	\N	\N	\N	query	2019-11-11 16:55:08.44819	0
4451	2184	configid	\N	\N	\N	\N	13142	query	2019-11-11 16:55:36.50379	0
4452	2184	CN	\N	-1	\N	\N	\N	query	2019-11-11 16:55:59.399052	0
4453	2184	viewid	\N	\N	\N	\N	13143	query	2019-11-11 16:56:16.105455	0
4455	2185	configid	\N	\N	\N	\N	13142	query	2019-11-11 17:04:23.543054	0
4459	2185	table	\N	\N	\N	\N	13158	query	2019-11-11 17:06:08.439169	0
5067	2398	N	\N	-1		\N	\N	query	2019-12-03 11:27:54.96914	0
5809	2888	id	\N	\N	\N	\N	13011	query	2020-01-15 11:13:15.847567	0
5811	2125	id	\N	\N	\N	\N	13117	query	2020-01-15 17:02:53.697764	0
4454	2185	N	\N	\N	\N	\N	13142	query	2019-11-11 17:04:05.00802	0
4456	2185	relation	\N	configid	\N	\N	\N	query	2019-11-11 17:04:42.114409	0
4457	2185	CN	\N	-1	\N	\N	\N	query	2019-11-11 17:05:14.313201	0
4458	2185	viewid	\N	\N	\N	\N	13143	query	2019-11-11 17:05:46.135291	0
4460	2185	_sub_title	\N		\N	\N	13147	query	2019-11-11 17:06:42.751963	0
4461	2186	actionid	\N	\N	\N	\N	12979	query	2019-11-12 08:38:30.402451	0
4462	2186	relation	\N	actionid	\N	\N	\N	query	2019-11-12 08:39:12.126697	0
4463	2186	paramid	\N	-1	\N	\N	\N	query	2019-11-12 08:39:41.343084	0
4464	2186	act_id	\N	\N	\N	\N	12979	query	2019-11-12 08:39:57.839483	0
4466	2187	actionid	\N	\N	\N	\N	12979	query	2019-11-12 09:41:42.386233	0
4467	2187	relation	\N	actionid	\N	\N	\N	query	2019-11-12 09:42:03.319002	0
4468	2187	act_id	\N	\N	\N	\N	12979	query	2019-11-12 09:42:18.923298	0
4469	2187	vs_id	\N	-1	\N	\N	\N	query	2019-11-12 09:42:30.800282	0
4470	2187	_sub_title	\N	\N	\N	\N	12981	query	2019-11-12 09:42:49.549042	0
4465	2186	_sub_title	\N	\N	\N	\N	12981	query	2019-11-12 08:40:23.705068	0
4472	2189	_sub_title	\N		\N	\N	13145	query	2019-11-12 10:09:02.759353	0
4473	2189	relation	\N	configid	\N	\N	\N	query	2019-11-12 10:10:37.004788	0
4474	2189	configid	\N		\N	\N	13142	query	2019-11-12 10:10:55.269391	0
4475	2189	CN	\N	-1	\N	\N	\N	query	2019-11-12 10:11:33.155995	0
4476	2189	viewid	\N	\N	\N	\N	13143	query	2019-11-12 10:11:49.284601	0
5074	2082	_sub_title	\N	\N	_sub_title	\N	\N	query	2019-12-03 11:38:10.648788	0
4490	2211	id	\N	\N	\N	\N	12979	query	2019-11-12 20:58:51.973144	0
4131	2033	bid	\N	\N	\N	id	12759	query	2019-11-05 10:00:17.290746	0
5810	2888	userid	\N	_userid_	\N	\N	\N	query	2020-01-15 11:13:42.594711	0
5076	2030	_sub_title	\N	\N	_sub_title	\N	\N	query	2019-12-03 11:39:32.394043	0
5812	2125	userid	\N	_userid_	\N	\N	\N	query	2020-01-15 17:03:09.222601	0
5625	2752	id	\N		\N	id	19342	link	2019-12-25 11:04:47.818399	0
6722	3516	usercss	\N	\N	\N	\N	32498	query	2020-03-18 11:36:10.919491	0
6826	3569	items	\N	_checked_	\N	\N	\N	query	2020-03-25 08:55:07.225596	0
11	12066	dsn	\N	\N	\N	\N	601843	query	2020-04-04 21:12:39.695606	0
12	12066	port	\N	\N	\N	\N	601844	query	2020-04-04 21:12:55.747555	0
13	12066	developerRole	\N	\N	\N	\N	601845	query	2020-04-04 21:13:14.165064	0
14	12066	maindomain	\N	\N	\N	\N	601846	query	2020-04-04 21:13:30.113736	0
16	12066	redirect401	\N	\N	\N	\N	601848	query	2020-04-04 21:14:12.635837	0
17	12066	homepage	\N	\N	\N	\N	601852	query	2020-04-04 21:14:36.258423	0
18	12066	primaryAuthorization	\N	\N	\N	\N	601847	query	2020-04-04 21:39:17.246636	0
19	12066	reports_url	\N	\N	\N	\N	601860	query	2020-04-04 22:26:13.25666	0
21	12070	schemaname	\N	\N	\N	\N	601868	query	2020-05-11 17:11:00.53175	0
24	12071	tableschemaname	\N	\N	\N	\N	601875	query	2020-05-11 18:39:50.750475	0
25	12073	functionschema	\N	\N	\N	\N	601875	query	2020-05-11 18:48:20.936461	0
26	12074	_sub_title	\N	\N	\N	\N	601879	query	2020-05-13 13:27:41.055573	0
27	12074	tablename	\N	\N	\N	\N	601879	query	2020-05-13 13:28:25.359968	0
28	12075	tablename	\N	\N	tablename	\N	\N	query	2020-05-13 14:11:09.629009	0
30	12076	tablename	\N	\N	\N	\N	601891	query	2020-05-13 17:57:34.507951	0
31	12076	id	\N	0	\N	\N	\N	query	2020-05-13 17:57:42.313111	0
29	12076	relation	\N	tablename,noscript	\N	\N	\N	query	2020-05-13 17:57:26.389539	0
32	12076	noscript	\N	false	\N	\N	\N	query	2020-05-13 18:02:29.928172	0
33	12077	tablename	\N	\N	tablename	\N	\N	query	2020-05-13 18:07:40.137494	0
34	12078	tablename	\N	\N	tablename	\N	\N	query	2020-05-13 18:07:56.129287	0
35	12068	id	\N	0	\N	\N	\N	query	2020-05-13 18:40:43.258033	0
36	12068	relation	\N	noscript	\N	\N	\N	query	2020-05-13 18:40:55.038547	0
37	12068	noscript	\N	false	\N	\N	\N	query	2020-05-13 18:41:07.213041	0
39	12085	noscript	\N	false	\N	\N	\N	query	2020-05-14 09:55:20.860129	0
41	12085	id	\N	0	\N	\N	\N	query	2020-05-14 09:56:32.67067	0
38	12085	relation	\N	noscript,tableschemaname	\N	\N	\N	query	2020-05-14 09:55:08.329629	0
40	12085	tableschemaname	\N	\N	\N	\N	601877	query	2020-05-14 09:56:10.388105	0
43	12090	id	\N	\N	\N	\N	601883	query	2020-05-14 13:27:17.405756	0
44	12093	id	\N	0	\N	\N	\N	query	2020-05-14 15:15:26.343177	0
45	12093	schemaname	\N	\N	\N	\N	601884	query	2020-05-14 16:06:43.505634	0
46	12093	_sub_title	\N	\N	\N	\N	601884	query	2020-05-14 17:04:03.393626	0
48	12093	noscript	\N	false	\N	\N	\N	query	2020-05-14 17:04:45.979686	0
47	12093	relation	\N	noscript	\N	\N	\N	query	2020-05-14 17:04:38.277188	0
50	12099	oid	\N	\N	id	\N	\N	query	2020-05-15 13:10:05.951883	0
51	12100	id	\N	\N	id	\N	\N	query	2020-05-15 15:44:20.872069	0
57	12106	tablename	\N	\N	tablename	\N	\N	query	2020-05-18 11:53:19.450917	0
58	12106	relation	\N	tablename,noscript	\N	\N	\N	query	2020-05-18 11:53:37.467936	0
59	12106	noscript	\N	false	\N	\N	\N	query	2020-05-18 11:53:54.940144	0
60	12106	id	\N	0	\N	\N	\N	query	2020-05-18 11:54:02.587005	0
61	12106	_sub_title	\N	\N	tablename	\N	\N	query	2020-05-18 13:49:04.018837	0
75	12114	_sub_title	\N	\N	maintablename	\N	\N	query	2020-05-18 18:54:16.601328	3
77	12115	id	\N	0	\N	\N	\N	query	2020-05-18 19:04:59.702178	0
78	12115	maintablename	\N	\N	tablename	\N	\N	query	2020-05-18 19:05:24.077639	0
55	12105	_sub_title	\N	\N	_sub_title	\N	\N	query	2020-05-18 11:50:14.500258	2
54	12105	tablename	\N	\N	tablename	\N	\N	query	2020-05-18 11:49:57.475132	3
56	12105	\N	\N	#3	\N	\N	\N	query	2020-05-18 11:50:36.020258	4
62	12107	_sub_title	\N	\N	_sub_title	\N	\N	query	2020-05-18 14:15:42.915953	1
64	12107	\N	\N	#3	\N	\N	\N	query	2020-05-18 14:16:02.599477	3
63	12107	tablename	\N	\N	tablename	\N	\N	query	2020-05-18 14:15:52.17184	2
65	12108	id	\N	\N	\N	\N	601967	query	2020-05-18 14:23:42.445112	0
66	12110	_sub_title	\N	\N	_sub_title	\N	\N	query	2020-05-18 14:24:59.302723	0
67	12110	tablename	\N	\N	tablename	\N	\N	query	2020-05-18 14:24:59.302723	0
68	12110	\N	\N	#3	\N	\N	\N	query	2020-05-18 14:24:59.302723	0
72	12108	tablename	\N	\N	tablename	\N	\N	query	2020-05-18 14:26:40.14947	0
73	12108	_sub_title	\N	\N	tablename	\N	\N	query	2020-05-18 14:26:49.30837	0
70	12111	\N	\N	#3	\N	\N	\N	query	2020-05-18 14:25:34.584062	4
71	12111	tablename	\N	\N	tablename	\N	\N	query	2020-05-18 14:25:34.584062	3
69	12111	_sub_title	\N	\N	_sub_title	\N	\N	query	2020-05-18 14:25:34.584062	2
74	12114	tablename	\N	\N	maintablename	\N	\N	query	2020-05-18 18:53:30.456626	2
76	12114	\N	\N	#4	\N	\N	\N	query	2020-05-18 18:54:54.540637	4
79	12115	noscript	\N	false	\N	\N	\N	query	2020-05-18 19:05:42.625825	0
80	12115	relation	\N	maintablename,noscript	\N	\N	\N	query	2020-05-18 19:06:32.26811	0
81	12066	ischat	\N	\N	\N	\N	602057	query	2020-05-21 16:35:52.925735	0
\.


--
-- TOC entry 3705 (class 0 OID 0)
-- Dependencies: 187
-- Name: act_parametrs_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('act_parametrs_id_seq', 81, true);


--
-- TOC entry 3199 (class 0 OID 227494)
-- Dependencies: 188
-- Data for Name: act_visible_condions; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY act_visible_condions (id, actionid, val_desc, col, title, operation, value, created) FROM stdin;
770	2026	12719	\N	\N	like	1	2019-11-05 10:00:17.290746
771	2027	12718	\N	\N	is not null	0	2019-11-05 10:00:17.290746
772	2045	12790	\N	\N	like	1	2019-11-05 10:00:17.290746
773	2072	12912	\N	\N	>	-1	2019-11-05 10:00:17.290746
774	2073	12912	\N	\N	>	-1	2019-11-05 10:00:17.290746
775	2074	12941	\N	\N	like	form	2019-11-05 10:00:17.290746
776	2075	12918	\N	\N	in	select,typehead	2019-11-05 10:00:17.290746
777	2075	12941	\N	\N	like	form	2019-11-05 10:00:17.290746
778	2076	12912	\N	\N	>	-1	2019-11-05 10:00:17.290746
779	2077	12942	\N	\N	>	-1	2019-11-05 10:00:17.290746
780	2078	12942	\N	\N	>	-1	2019-11-05 10:00:17.290746
781	2079	12950	\N	\N	>	-1	2019-11-05 10:00:17.290746
782	2080	12950	\N	\N	>	-1	2019-11-05 10:00:17.290746
783	2086	12995	\N	\N	>	-1	2019-11-05 10:00:17.290746
784	2087	12995	\N	\N	>	-1	2019-11-05 10:00:17.290746
785	2088	12995	\N	\N	is not null	\N	2019-11-05 10:00:17.290746
786	2089	12995	\N	\N	>	-1	2019-11-05 10:00:17.290746
787	2089	12995	\N	\N	is not null	\N	2019-11-05 10:00:17.290746
788	2091	13020	\N	\N	>	-1	2019-11-05 10:00:17.290746
789	2092	13020	\N	\N	>	-1	2019-11-05 10:00:17.290746
791	2137	13189	\N	\N	>	-1	2019-11-05 10:00:17.290746
792	2138	13189	\N	\N	>	-1	2019-11-05 10:00:17.290746
793	2142	13210	\N	\N	>	-1	2019-11-05 10:00:17.290746
794	2143	13210	\N	\N	>	-1	2019-11-05 10:00:17.290746
813	2185	13158	\N	\N	is not null		2019-11-11 17:26:10.726976
1073	2752	19351	\N	\N	=	true	2019-12-25 11:04:47.818399
1362	12071	601874	\N	\N	=	tables	2020-05-11 18:32:03.372373
1363	12073	601874	\N	\N	=	functions	2020-05-11 18:48:53.32667
\.


--
-- TOC entry 3706 (class 0 OID 0)
-- Dependencies: 189
-- Name: act_visible_condions_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('act_visible_condions_id_seq', 1363, true);


--
-- TOC entry 3201 (class 0 OID 227503)
-- Dependencies: 190
-- Data for Name: actions; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY actions (id, column_order, title, viewid, icon, classname, act_url, api_method, api_type, refresh_data, ask_confirm, roles, forevery, main_action, created, act_type) FROM stdin;
2136	4	add	241	plus	success	/api/filter_add_untitle	\N	post	t	t	[]	f	f	2019-11-05 10:00:17.290746	API
2095	1	add	232	plus	success	/api/addcol	\N	post	t	t	[]	f	f	2019-11-05 10:00:17.290746	API
12046	2	save	213	save	success	/	\N	\N	f	f	[]	f	f	2020-03-31 10:27:54.144877	Save
12066	2	Save	50783	save	success	/admin/admin	\N	post	f	f	[]	f	f	2020-04-04 21:10:55.11651	API
2398	3	go back	231	arrow left	\N	/composition/view	\N	\N	f	f	[]	f	f	2019-12-03 11:26:13.429586	Link
2397	4	go back	243	arrow-left	\N	/composition/view	\N	\N	f	f	[]	f	f	2019-12-03 11:07:50.785664	Link
2025	1	go back	218	\N	\N	/list/test	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2026	2	visible check	218	\N	\N	/	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2036	4	go back	100	fa fa-arrow-left	\N	/list/trees	\N	get	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2037	2	back	212	fa  fa-arrow-left	btn btn-outline-secondary	/list/spapi	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2052	4	add	150	plus	btn	/getone/projectmenu	\N	get	t	t	[]	f	f	2019-11-05 10:00:17.290746	Link
2044	2	go back	215	\N	\N	/list/test	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2045	3	visible check	215	\N	\N	/	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2048	1	look	216	fa fa-eye	\N	/getone/log	\N	get	f	f	[]	t	t	2019-11-05 10:00:17.290746	Link
2049	1	edit	150	fa fa-edit	btn	/getone/projectmenu	\N	get	t	t	[]	t	t	2019-11-05 10:00:17.290746	Link
2050	2	menu list	150	fa fa-list		/list/menusettings	\N	get	t	t	[]	t	f	2019-11-05 10:00:17.290746	Link
2054	2	edit	217	fa fa-pencil	\N	/getone/spapiform	\N	\N	f	f	[]	t	t	2019-11-05 10:00:17.290746	Link
2053	1	add	217	plus	\N	/getone/spapiform?N=0	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2056	1	show tree	219	\N	\N	/trees/treetest	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2063	8	add	219	plus		/getone/test_add	\N	get	t	t	[]	f	f	2019-11-05 10:00:17.290746	Link
2058	3	add with relations	219	pi pi-plus	\N	/getone/test_add	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2059	4	edit	219	fa fa-edit		/getone/test_edit	\N	get	t	t	[]	t	t	2019-11-05 10:00:17.290746	Link
2071	8	add	220	plus		/getone/test_add	\N	get	t	t	[]	f	f	2019-11-05 10:00:17.290746	Link
2034	2	add	100	plus	\N	/composition/treesacts	\N	get	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2035	3	del	100	delete	danger	/getone/treesact	\N	get	f	f	[]	t	f	2019-11-05 10:00:17.290746	Delete
2051	3	del	150	fa fa-trash	danger	/getone/projectmenu	\N	get	t	t	[]	t	f	2019-11-05 10:00:17.290746	Delete
2073	2	default value	221	pi pi-key	p-button-primary	/composition/defaultval	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2074	3	visible condition	221	pi pi-question	\N	/composition/visible_conditions	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	LinkTo
2075	4	select conditions	221	pi pi-question	p-button-warning	/composition/select_condition	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	LinkTo
2076	5	close	221	\N	\N	/composition/view	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2078	2	close	222	pi pi-cross	\N	/composition/select_condition	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2080	2	close	223	pi pi-cross	\N	/composition/visible_conditions	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2082	2	Close	226	fa fa-cross	\N	/composition/defaultval	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2087	2	close	228	fa fa-cross	\N	/composition/view	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2088	3	parametrs	228	pi pi-primary	p-button-warning	/composition/act_params	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	LinkTo
2089	4	visible condition	228	pi pi-question	\N	/composition/act_visible_conditions	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	LinkTo
2090	1	back	56	fa fa-arrow-left		/list/logs	\N	get	t	t	[]	f	f	2019-11-05 10:00:17.290746	Link
2031	3	Go back	225	\N	\N	/composition/view	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2081	1	Save	226	\N	success	/	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Save
2043	1	save	215	pi pi-check	success	/	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Save
2033	1	edit	100	edit	\N	/composition/treesacts	\N	get	f	f	[]	t	f	2019-11-05 10:00:17.290746	Link
2066	3	add with relations	220	plus	\N	/getone/test_add	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2064	1	show tree	220	eye	\N	/trees/treetest	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2038	3	go back	213	fa fa-arrow-left	btn btn-success	/list/users	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2072	1	save	221	\N	success	/	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Save
2077	1	save	222		success	/	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Save
2079	1	save	223	\N	success	/	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Save
2086	1	save	228	fa fa-check	success	/	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Save
2027	3	set color red (GET TEST)	218	\N	success	/api/gettest	\N	get	t	t	[]	f	f	2019-11-05 10:00:17.290746	API
2046	4	set color red (GET TEST)	215	\N	success	/api/gettest	\N	get	t	t	[]	f	f	2019-11-05 10:00:17.290746	API
2047	5	set color blue (POST TEST)	215	\N	success	/api/posttest	\N	post	t	t	[]	f	f	2019-11-05 10:00:17.290746	API
2092	2	close	229	fa fa-cross	\N	/composition/act_params	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2109	4	add	30	plus	\N	/composition/branches	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2105	2	back	28	fa fa-arrow-left	btn	/list/trees	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2106	1	back	30	fa fa-arrow-left	btn 	/list/trees	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2107	2	edit	30	fa fa-pencil	\N	/composition/branches	\N	\N	f	f	[]	t	t	2019-11-05 10:00:17.290746	Link
2111	2	close	32	\N	\N	/composition/branches	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2113	1	edit	234	fa fa-edit	\N	/getone/menuedit	\N	\N	f	f	[]	t	t	2019-11-05 10:00:17.290746	Link
2120	3	add	236	plus		/getone/userone	\N	get	t	t	[]	f	f	2019-11-05 10:00:17.290746	Link
2115	3	add menu	234	fa fa-plus	\N	/getone/menuedit	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2116	4	back	234	fa fa-arrow-left		/list/projectmenus	\N	get	t	t	[]	f	f	2019-11-05 10:00:17.290746	Link
2117	1	back	235	fa fa-arrow-left	btn	/list/menusettings	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
12067	1	onLoad	50784	default	success	/api/notifications_setreaded_by_userid	\N	get	f	f	[]	f	f	2020-04-04 22:13:02.187512	onLoad
2093	1	add	230	plus	success	/api/addfncol	\N	post	t	t	[]	f	f	2019-11-05 10:00:17.290746	API
2127	2	back to list	238	fa fa-arrow-left	\N	/list/views	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2130	1	go back	240	arrow-left	\N	/composition/view	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2133	4	add	240	plus	\N	/composition/select_condition	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2099	1	add	26	plus	btn btn	/getone/treeform	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2138	2	close	242	fa fa-cross	\N	/composition/view	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2028	1	OK	211	fa fa-	btn btn	/list/projectmenus	\N	get	t	t	[]	f	f	2019-11-05 10:00:17.290746	Save
2108	3	del	30	fa fa-trash	danger	/	\N	\N	f	f	[]	t	f	2019-11-05 10:00:17.290746	Delete
2143	2	close	244	fa fa-cros	\N	/composition/act_visible_conditions	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2145	2	back to list	245	fa fa-arrow-left	\N	/list/views	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2094	2	refresh	230	reload	p-button-primary	/composition/view	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2123	3	create view	237	fa fa-plus		/getone/viewadd	\N	get	t	t	[]	f	f	2019-11-05 10:00:17.290746	Link
2096	2	refresh	232	reload	p-button-primary	/composition/view	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2091	1	save	229	fa fa-check	success	/	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Save
2098	2	refresh	233	reload	\N	/composition/view	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2104	1	save	28		success	/	\N	get	t	t	[]	f	f	2019-11-05 10:00:17.290746	Save
2110	1	save	32	\N	success	/	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Save
2131	2	edit	240	pencil	\N	/composition/select_condition	\N	\N	f	f	[]	t	f	2019-11-05 10:00:17.290746	Link
2126	1	save main info	238	fa fa-check	success	/	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Save
2137	1	save	242	pi pi-check	success	/	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Save
2100	2	edit	26	edit	\N	/getone/treeform	\N	\N	f	f	[]	t	t	2019-11-05 10:00:17.290746	Link
2101	3	branches	26	branches	\N	/composition/branches	\N	\N	f	f	[]	t	f	2019-11-05 10:00:17.290746	Link
2142	1	save	244	fa fa-check	success	/	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Save
2144	1	save main info	245	fa fa-check	success	/	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Save
2097	1	apply to all	233	fa fa-check	success	/api/applysettings	\N	post	t	t	[]	f	f	2019-11-05 10:00:17.290746	API
2153	1	edit	231	fa fa-pencil		/composition/act_visible_conditions	\N	\N	f	f	[]	t	t	2019-11-06 13:50:25.690898	Link
2154	2	delete	231	fa fa-trash	danger	\N	\N	\N	f	f	[]	t	f	2019-11-06 13:52:05.02372	Delete
2152	0	add	231	plus	\N	/composition/act_visible_conditions	\N	\N	f	f	[]	f	f	2019-11-06 13:41:46.193098	Link
2349	1	save	212	default	success	/	\N	\N	f	f	[]	f	f	2019-11-25 08:18:53.335585	Save
2141	3	add	243	plus	\N	/composition/act_params	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2139	1	edit	243	edit	\N	/composition/act_params	\N	\N	f	f	[]	t	t	2019-11-05 10:00:17.290746	Link
2039	1	add	214	plus	\N	/compo/l?id=0	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2041	3	, to compo	214	link	\N	/composition	\N	\N	f	f	[]	t	f	2019-11-05 10:00:17.290746	Link
2040	2	edit	214	edit	\N	/compo/l	\N	\N	f	f	[]	t	t	2019-11-05 10:00:17.290746	Link
2140	2	delete	243	delete	danger	/	\N	\N	f	f	[]	t	f	2019-11-05 10:00:17.290746	Delete
2757	1	add	120	plus		/composition/reportone	\N	get	t	t	[]	f	f	2019-12-25 11:04:47.818399	Link
2750	1	add	118	plus		/getone/reportone	\N	get	t	t	[]	f	f	2019-12-25 11:04:47.818399	Link
2759	3	del	120	delete	danger	/composition/reportone	\N	get	t	t	[]	t	f	2019-12-25 11:04:47.818399	Delete
2753	4	del	118	delete	danger	/	\N	get	t	t	[]	t	f	2019-12-25 11:04:47.818399	Delete
2758	2	edit	120	edit		/composition/reportone	\N	get	t	t	[]	t	f	2019-12-25 11:04:47.818399	Link
2761	2	ok	121	check	btn btn-outline-primary	/composition/reportone	\N	get	t	t	[]	f	f	2019-12-25 11:04:47.818399	Link
2118	1	edit user	236	fa fa-pencil	\N	/getone/userone	\N	\N	f	f	[]	t	t	2019-11-05 10:00:17.290746	Link
2067	4	edit	220	edit		/getone/test_edit	\N	get	t	t	[]	t	t	2019-11-05 10:00:17.290746	Link
2755	1	save	119	save	success	/api/save	\N	\N	f	f	[]	f	f	2019-12-25 11:04:47.818399	Save
2756	2	ok	119	check	btn btn-success	/list/reports	\N	get	t	t	[]	f	f	2019-12-25 11:04:47.818399	Link
2760	1	Save	121	save	success	/api/save	\N	\N	f	f	[]	f	f	2019-12-25 11:04:47.818399	Save
2751	2	edit	118	edit		/composition/reportone	\N	get	t	t	[]	t	t	2019-12-25 11:04:47.818399	Link
2024	4	add	224	plus	\N	/composition/visible_conditions	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2187	3	visible conditions	227	eye	\N	/composition/act_visible_conditions	\N	\N	f	f	[]	t	f	2019-11-12 09:39:59.56735	Link
2084	5	delete	227	delete	danger	/	\N	\N	f	f	[]	t	f	2019-11-05 10:00:17.290746	Delete
2023	3	delete	224	delete	danger	/	\N	\N	f	f	[]	t	f	2019-11-05 10:00:17.290746	Delete
2021	1	edit	224	edit	\N	/composition/visible_conditions	\N	\N	f	f	[]	t	t	2019-11-05 10:00:17.290746	Link
2022	2	go back	224	fa fa-arrow-left	\N	/composition/view	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2185	2	select_condition	239	question	\N	/composition/select_condition	\N	\N	f	f	[]	t	f	2019-11-11 17:02:07.08031	Link
2189	3	default value	239	swap	\N	/composition/defaultval	\N	\N	f	f	[]	t	f	2019-11-12 10:06:06.161021	Link
2184	1	visible condition	239	eye		/composition/visible_conditions	\N	\N	f	f	[]	t	f	2019-11-11 16:53:58.539744	Link
2211	4	copy	227	copy	success	/api/action_copy	\N	post	t	t	[]	t	f	2019-11-12 20:56:46.824784	API
2186	1	parametrs	227	code	\N	/composition/act_params	\N	\N	f	f	[]	t	t	2019-11-12 08:37:53.930855	Link
2085	2	add	227	plus	success	/api/action_add_untitle	\N	post	t	t	[]	f	f	2019-11-05 10:00:17.290746	API
2029	1	Add	225	plus	\N	/composition/defaultval	\N	\N	f	f	[]	f	f	2019-11-05 10:00:17.290746	Link
2030	2	edit	225	edit	\N	/composition/defaultval	\N	\N	f	f	[]	t	t	2019-11-05 10:00:17.290746	Link
2125	5	del	237	fa fa-trash	danger	/api/fn_view_deletebyid	\N	get	t	t	[]	t	f	2019-11-05 10:00:17.290746	API
2888	2	rollback	56	default	success	/api/fn_logtable_rollback	\N	get	t	t	[]	f	f	2020-01-15 11:06:54.14499	API
2119	2	delete	236	fa fa-trash	danger	/schema/deleterow	\N	\N	f	f	[]	t	f	2019-11-05 10:00:17.290746	Delete
2132	3	delete	240	delete	danger	/	\N	\N	f	f	[]	t	f	2019-11-05 10:00:17.290746	Delete
2055	3	del	217	fa fa-trash	danger	/schema/deleterow	\N	\N	f	f	[]	t	f	2019-11-05 10:00:17.290746	Delete
2062	7	delete	219	fa fa-trash	danger	/	\N	\N	f	f	[]	t	f	2019-11-05 10:00:17.290746	Delete
2114	2	delete menu	234	fa fa-trash	danger	/schema/deleterow	\N	\N	f	f	[]	t	f	2019-11-05 10:00:17.290746	Delete
2103	5	delete	26	delete	danger	/	\N	\N	f	f	[]	t	f	2019-11-05 10:00:17.290746	Delete
2042	4	delete	214	delete	danger	/schema/deleterow	\N	\N	f	f	[]	t	f	2019-11-05 10:00:17.290746	Delete
2135	2	delete	241	delete	danger	/	\N	\N	f	f	[]	t	f	2019-11-05 10:00:17.290746	Delete
2129	4	delete	239	fa fa-trash	danger	/	\N	\N	f	f	[]	t	f	2019-11-05 10:00:17.290746	Delete
2032	4	delete	225	delete	danger	/	\N	\N	f	f	[]	t	f	2019-11-05 10:00:17.290746	Delete
2102	4	actions	26	form	\N	/composition/treesacts	\N	get	f	f	[]	t	f	2019-11-05 10:00:17.290746	Link
2057	2	set checke black (POST TEST CHECKED)	219	\N	success	/api/postmethodtest_setselectedcolor_black	\N	post	t	t	[]	f	f	2019-11-05 10:00:17.290746	API
2060	5	set red	219	pi pi-star-o	success	/api/gettest	\N	get	t	t	[]	t	f	2019-11-05 10:00:17.290746	API
2061	6	set blue	219	pi pi-star	success	/api/posttest	\N	post	t	t	[]	t	f	2019-11-05 10:00:17.290746	API
2752	3	go to the report	118	link		/report	\N	get	t	t	[]	t	f	2019-12-25 11:04:47.818399	Link
2070	7	delete	220	delete	danger	/	\N	\N	f	f	[]	t	f	2019-11-05 10:00:17.290746	Delete
2065	2	set checke black (POST TEST CHECKED)	220	bg-colors	success	/api/postmethodtest_setselectedcolor_black	\N	post	t	t	[]	f	f	2019-11-05 10:00:17.290746	API
2124	4	copy	237	copy	success	/api/copyview	\N	post	t	t	[0]	t	f	2019-11-05 10:00:17.290746	API
12065	1	onLoad	50783	default	success	/admin/admin	\N	get	f	f	[]	f	f	2020-04-04 21:07:52.240807	onLoad
3516	2	Save	6424	save	success	/usercss	\N	put	f	f	[]	f	f	2020-03-18 11:35:16.564835	API
3515	1	load	6424	\N	success	/usercss	\N	post	f	f	[]	f	f	2020-03-18 11:04:16.764106	onLoad
3569	5	delete checked	239	delete	danger	/api/deleteconfig	\N	delete	t	t	[]	f	f	2020-03-25 08:53:06.870007	API
2754	5	copy report	118	copy	success	/api/report_copy	\N	post	t	t	[0]	t	f	2019-12-25 11:04:47.818399	API
2068	5	set red	220	bg-colors	success	/api/gettest	\N	get	t	t	[]	t	f	2019-11-05 10:00:17.290746	API
2069	6	set blue	220	bg-colors	success	/api/posttest	\N	post	t	t	[]	t	f	2019-11-05 10:00:17.290746	API
12069	2	onload	50785	default	success	/api/schemalist_onload	\N	get	f	f	[]	f	f	2020-05-11 16:49:38.1243	onLoad
12070	3	expand	50785	default	danger	/list/schemaobjects	\N	\N	f	f	[]	t	f	2020-05-11 17:05:33.459375	Expand
12072	1	onload	50788	default	success	/api/tablelist_onload	\N	get	f	f	[]	f	f	2020-05-11 18:44:12.919324	onLoad
12071	1	table expand	50786	default	danger	/list/tables	\N	\N	f	f	[]	t	f	2020-05-11 17:07:49.076118	Expand
12073	2	function expand	50786	default	danger	/list/functions	\N	\N	f	f	[]	t	f	2020-05-11 18:47:08.383659	Expand
12094	1	add	50796	plus	success	/	\N	\N	f	f	[]	f	f	2020-05-14 17:01:36.34593	Save
12093	4	add	50789	plus	success	/getone/functionadd	\N	get	f	f	[]	f	f	2020-05-14 15:14:48.299739	Link
12074	2	edit	50788	edit	primary	/trees/table	\N	\N	f	f	[]	t	t	2020-05-13 13:26:16.084261	Link
12081	1	Save	50792	save	succes	/list/schemas	\N	\N	f	f	[]	f	f	2020-05-13 18:39:00.739946	Save&Redirect
12082	2	go back	50792	arrow-left	\N	/list/schemas	\N	\N	f	f	[]	f	f	2020-05-13 18:39:45.555553	Link
12100	3	onload	50797	default	success	/api/function_onload	\N	get	f	f	[]	f	f	2020-05-15 15:43:57.895579	onLoad
12068	1	add	50785	plus	success	/getone/schema	\N	put	f	f	[]	f	f	2020-05-11 16:46:47.181031	Link
12095	2	go back	50796	arrow-left	\N	/list/schemas	\N	\N	f	f	[]	f	f	2020-05-14 17:06:15.786139	Link
12083	4	delete	50785	delete	danger	/	\N	\N	f	f	[]	t	f	2020-05-13 18:48:06.418904	Delete
12075	1	onLoad	50790	default	success	/api/tablecols_onload	\N	get	f	f	[]	f	f	2020-05-13 13:53:02.354262	onLoad
12104	2	go back	50799	arrow-left	\N	/list/schemas	\N	\N	f	f	[]	f	f	2020-05-18 08:44:22.23616	Link
12088	3	delete	50789	delete	danger	/	\N	\N	f	f	[]	t	f	2020-05-14 13:08:40.062802	Delete
12076	2	add	50790	plus	\N	/getone/tablecolumn	\N	\N	f	f	[]	f	f	2020-05-13 17:56:31.458088	Link
12111	2	go back	50801	arrow-left	\N	/trees/table	\N	\N	f	f	[]	f	f	2020-05-18 14:25:34.584062	Link
12091	2	go back	50794	arrow-left	\N	/list/schemas	\N	\N	f	f	[]	f	f	2020-05-14 13:33:19.948565	Link
12077	1	Save	50791	save	success	/trees/table	\N	\N	f	f	[]	f	f	2020-05-13 18:00:04.96208	Save&Redirect
12085	3	add	50788	plus	\N	/getone/table	\N	\N	f	f	[]	f	f	2020-05-14 09:54:07.598884	Link
12098	1	delete	50798	delete	danger	/	\N	\N	f	f	[]	t	f	2020-05-15 10:51:40.062366	Delete
12078	2	go back	50791	arrow-left	\N	/trees/table	\N	\N	f	f	[]	f	f	2020-05-13 18:07:04.665218	Link
12084	1	Save	50793	save	success	/list/schemas	\N	\N	f	f	[]	f	f	2020-05-14 09:51:25.999614	Save&Redirect
12079	3	delete	50790	delete	danger	/	\N	\N	f	f	[]	t	f	2020-05-13 18:30:16.306305	Delete
12086	4	delete	50788	delete	danger	/	\N	\N	f	f	[]	t	f	2020-05-14 10:36:59.854916	Delete
12080	4	go back	50790	arrow-left	\N	/list/schemas	\N	\N	f	f	[]	f	f	2020-05-13 18:34:41.158067	Link
12087	1	onLoad	50789	default	success	/api/functions_onload	\N	get	f	f	[]	f	f	2020-05-14 10:40:01.986578	onLoad
12097	2	go back	50797	arrow-left	\N	/list/schemas	\N	\N	f	f	[]	f	f	2020-05-15 10:15:56.440015	Link
12116	3	delete	50802	delete	danger	/	\N	\N	f	f	[]	t	f	2020-05-18 19:16:56.843741	Delete
12105	1	Commit	50800	thunderbolt	commit_btn	/trees/table	\N	\N	f	f	[]	f	f	2020-05-18 11:46:38.726526	Save&Redirect
12090	2	edit	50789	edit	\N	/trees/function	\N	\N	f	f	[]	t	t	2020-05-14 13:26:40.36604	Link
12099	2	add	50798	plus	success	/api/argument_add	\N	get	t	f	[]	f	f	2020-05-15 13:09:15.282047	API
12112	5	delete	50799	delete	danger	/	\N	\N	f	f	[]	t	f	2020-05-18 14:36:59.45301	Delete
12107	1	Commit	50801	thunderbolt	commit_btn	/trees/table	\N	\N	f	f	[]	f	f	2020-05-18 14:14:36.618585	Save&Redirect
12106	3	add	50799	plus	\N	/getone/triggeradd	\N	\N	f	f	[]	f	f	2020-05-18 11:52:02.005634	Link
12089	1	Commit	50794	thunderbolt	commit_btn	/	\N	\N	f	t	[]	f	f	2020-05-14 13:23:51.005116	Save
12103	1	onLoad	50799	default	success	/api/triggers_onload	\N	get	f	f	[]	f	f	2020-05-15 17:08:20.766658	onLoad
12114	1	Commit	50803	thunderbolt	.commit_btn	/trees/table	\N	\N	f	f	[]	f	f	2020-05-18 18:49:05.806229	Save&Redirect
12096	1	commit	50797	thunderbolt	commit_btn	/list/schemas	\N	get	f	f	[]	f	f	2020-05-15 10:15:56.440015	Save&Redirect
12110	2	go back	50800	arrow-left	\N	/trees/table	\N	\N	f	f	[]	f	f	2020-05-18 14:24:59.302723	Link
12113	1	onLoad	50802	default	success	/api/foreignkeys_onload	\N	get	f	f	[]	f	f	2020-05-18 16:23:14.008031	onLoad
12115	2	plus	50802	plus	\N	/getone/foreignkeyadd	\N	\N	f	f	[]	f	f	2020-05-18 19:03:52.008091	Link
12108	4	edit	50799	edit	success	/composition/triggeredit	\N	\N	f	f	[]	t	t	2020-05-18 14:22:34.794303	Link
2112	1	Save	101	fa fa-check	success	/composition/treesacts	\N	get	f	f	[]	f	f	2019-11-05 10:00:17.290746	Save
12117	2	go back	211	default	\N	/list/projectmenus	\N	\N	f	f	[]	f	f	2020-05-21 14:44:06.968216	Link
12118	2	save	235	default	success	/	\N	\N	f	f	[]	f	f	2020-05-21 14:44:54.600868	Save
\.


--
-- TOC entry 3707 (class 0 OID 0)
-- Dependencies: 191
-- Name: actions_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('actions_id_seq', 12118, true);


--
-- TOC entry 3203 (class 0 OID 227518)
-- Dependencies: 192
-- Data for Name: actparam_querytypes; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY actparam_querytypes (id, aqname) FROM stdin;
1	query
2	link
\.


--
-- TOC entry 3708 (class 0 OID 0)
-- Dependencies: 193
-- Name: actparam_querytypes_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('actparam_querytypes_id_seq', 2, true);


--
-- TOC entry 3205 (class 0 OID 227523)
-- Dependencies: 194
-- Data for Name: acttypes; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY acttypes (id, actname, viewtypes) FROM stdin;
1	API	["table","tiles","form full","form not mutable"]
2	Link	["table","tiles","form full","form not mutable"]
4	Delete	["table","tiles"]
5	Save	["form not mutable"]
6	Back	["table","tiles","form full","form not mutable"]
7	LinkTo	["form not mutable"]
8	Print Data	[]
9	Expand	["table"]
10	onLoad	["table","tiles","form full","form not mutable"]
11	Save&Redirect	["form not mutable"]
\.


--
-- TOC entry 3206 (class 0 OID 227530)
-- Dependencies: 195
-- Data for Name: apicallingmethods; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY apicallingmethods (id, aname) FROM stdin;
1	simple
2	mdlp
\.


--
-- TOC entry 3709 (class 0 OID 0)
-- Dependencies: 196
-- Name: apicallingmethods_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('apicallingmethods_id_seq', 2, true);


--
-- TOC entry 3208 (class 0 OID 227535)
-- Dependencies: 197
-- Data for Name: apimethods; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY apimethods (id, val, created) FROM stdin;
1	simple	2019-04-25 08:58:30
2	mdlp	2019-04-25 08:59:56
\.


--
-- TOC entry 3209 (class 0 OID 227539)
-- Dependencies: 198
-- Data for Name: booloper; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY booloper (id, bname) FROM stdin;
2	or
1	and
\.


--
-- TOC entry 3710 (class 0 OID 0)
-- Dependencies: 199
-- Name: booloper_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('booloper_id_seq', 2, true);


--
-- TOC entry 3211 (class 0 OID 227544)
-- Dependencies: 200
-- Data for Name: calendar_actions; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY calendar_actions (id, type, title, start, "end", "desc", current_day) FROM stdin;
\.


--
-- TOC entry 3711 (class 0 OID 0)
-- Dependencies: 201
-- Name: calendar_actions_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('calendar_actions_id_seq', 1, false);


--
-- TOC entry 3213 (class 0 OID 227554)
-- Dependencies: 202
-- Data for Name: calendar_test; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY calendar_test (id, calendar_date, month) FROM stdin;
\.


--
-- TOC entry 3712 (class 0 OID 0)
-- Dependencies: 203
-- Name: calendar_test_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('calendar_test_id_seq', 1, false);


--
-- TOC entry 3215 (class 0 OID 227560)
-- Dependencies: 204
-- Data for Name: columntypes; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY columntypes (id, typename, viewtypes) FROM stdin;
1	text	["form full","form not mutable"]
2	number	["form full","form not mutable"]
3	date	["form full","form not mutable"]
4	checkbox	["form full","form not mutable"]
5	select	["form full","form not mutable"]
6	typehead	["form full","form not mutable"]
9	password	["form full","form not mutable"]
10	autocomplete	["form full","form not mutable"]
11	multiselect	["form full","form not mutable"]
12	multitypehead	["form full","form not mutable"]
2013	datetime	["form full","form not mutable"]
2014	time	["form full","form not mutable"]
15	select_api	["form full","form not mutable"]
16	typehead_api	["form full","form not mutable"]
17	multiselect_api	["form full","form not mutable"]
18	multitypehead_api	["form full","form not mutable"]
20	textarea	["form full","form not mutable"]
21	texteditor	["form full","form not mutable"]
8	label	["form full","form not mutable","tiles","table"]
7	array	["tiles","table"]
13	color	["form full","form not mutable","tiles","table"]
14	colorpicker	["form full","form not mutable","tiles","table"]
19	link	["form full","form not mutable","tiles","table"]
22	colorrow	["form full","form not mutable","tiles","table"]
1010	file	["form full","form not mutable","tiles","table"]
1011	files	["form full","form not mutable","tiles","table"]
1012	image	["form full","form not mutable","tiles","table"]
1013	images	["form full","form not mutable","tiles","table"]
2011	gallery	["form full","form not mutable","tiles","table"]
2012	filelist	["form full","form not mutable","tiles","table"]
23	certificate	["form full","form not mutable"]
24	innerHtml	["form full","form not mutable"]
26	calendarEndDate	["calendar"]
25	calendarStartDate	["calendar"]
27	calendarTitle	["form full","form not mutable"]
28	codeEditor	["form full","form not mutable"]
29	tags	["form full","form not mutable"]
30	rate	["form full","form not mutable"]
31	multidate	["form full","form not mutable"]
\.


--
-- TOC entry 3713 (class 0 OID 0)
-- Dependencies: 205
-- Name: columntypes_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('columntypes_id_seq', 2014, true);


--
-- TOC entry 3714 (class 0 OID 0)
-- Dependencies: 206
-- Name: columntypes_id_seq1; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('columntypes_id_seq1', 3, true);


--
-- TOC entry 3218 (class 0 OID 227571)
-- Dependencies: 207
-- Data for Name: compos; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY compos (id, title, path, config, created) FROM stdin;
2	branches	branches	[{"cols": [{"path": {"id": 32, "path": "branchesform", "descr": "branches form", "label": "branches form", "title": "branches form", "value": "branches form", "rownum": 11, "viewlink": null, "viewtype": "form full", "tablename": "framework.treesbranches", "subscrible": false}, "heigh": null, "width": null, "rownum": 1}], "rownum": 1}, {"cols": [{"path": {"id": 30, "path": "branches", "descr": "branches", "label": "branches", "title": "branches", "value": "branches", "rownum": 10, "viewlink": null, "viewtype": "table", "tablename": "framework.treesbranches", "subscrible": true}, "heigh": null, "width": null, "rownum": 1}], "rownum": 2}]	2019-03-14 13:48:10.468984
6	Tree Acts	treesacts	[{"cols": [{"path": {"id": 101, "path": "treesact", "descr": "Trees Act", "label": "Trees Act", "title": "Trees Act", "value": "Trees Act", "rownum": 48, "viewlink": null, "viewtype": "form full", "tablename": "framework.treesacts", "subscrible": false}, "heigh": null, "width": null, "rownum": 1}], "rownum": 1}, {"cols": [{"path": {"id": 100, "path": "treesacts", "descr": "Trees Acts", "label": "Trees Acts", "title": "Trees Acts", "value": "Trees Acts", "rownum": 47, "viewlink": null, "viewtype": "table", "tablename": "framework.treesacts", "subscrible": false}, "heigh": null, "width": null, "rownum": 1}], "rownum": 2}]	2019-04-17 10:28:01.836527
10	select condition	select_condition	[{"cols": [{"path": {"id": 5066, "path": "select_condition_edit", "descr": "select condition edit", "label": "select condition edit", "title": "select condition edit", "value": "select condition edit", "rownum": 30, "viewlink": "", "viewtype": "form not mutable", "tablename": "framework.select_condition", "subscrible": false}, "heigh": null, "width": null, "rownum": 1}], "rownum": 1}, {"cols": [{"path": {"id": 5065, "path": "select_condition", "descr": "select condition", "label": "select condition", "title": "select condition", "value": "select condition", "rownum": 29, "viewlink": "", "viewtype": "table", "tablename": "framework.select_condition", "subscrible": false}, "heigh": null, "width": null, "rownum": 1}], "rownum": 2}]	2019-10-27 14:36:37
11	visible conditions	visible_conditions	[{"cols": [{"path": {"id": 5068, "path": "visibles_condition", "descr": "visibles condition", "label": "visibles condition", "title": "visibles condition", "value": "visibles condition", "rownum": 32, "viewlink": "", "viewtype": "form full", "tablename": "framework.visible_condition", "subscrible": false}, "heigh": null, "width": null, "rownum": 1}], "rownum": 1}, {"cols": [{"path": {"id": 5067, "path": "visibles_conditions", "descr": "visibles conditions", "label": "visibles conditions", "title": "visibles conditions", "value": "visibles conditions", "rownum": 31, "viewlink": "", "viewtype": "table", "tablename": "framework.visible_condition", "subscrible": false}, "heigh": null, "width": null, "rownum": 1}], "rownum": 2}]	2019-10-27 17:14:47
12	default value	defaultval	[{"cols": [{"path": {"id": 5070, "path": "default_value", "descr": "default value", "label": "default value", "title": "default value", "value": "default value", "rownum": 34, "viewlink": "", "viewtype": "form not mutable", "tablename": "framework.defaultval", "subscrible": false}, "heigh": null, "width": null, "rownum": 1}], "rownum": 1}, {"cols": [{"path": {"id": 5069, "path": "default_values", "descr": "default values", "label": "default values", "title": "default values", "value": "default values", "rownum": 33, "viewlink": "", "viewtype": "table", "tablename": "framework.defaultval", "subscrible": false}, "heigh": null, "width": null, "rownum": 1}], "rownum": 2}]	2019-10-27 21:27:14
26	act visible conditions	act_visible_conditions	[{"cols": [{"path": {"id": 5079, "path": "act_visible", "descr": "act visible condition", "label": "act visible condition", "title": "act visible condition", "value": "act visible condition", "rownum": 42, "viewlink": "", "viewtype": "form not mutable", "tablename": "framework.act_visible_condions", "subscrible": false}, "heigh": null, "width": null, "rownum": 1}], "rownum": 1}, {"cols": [{"path": {"id": 5077, "path": "act_visible_condition", "descr": "visible condition (act)", "label": "visible condition (act)", "title": "visible condition (act)", "value": "visible condition (act)", "rownum": 41, "viewlink": "", "viewtype": "table", "tablename": "framework.act_visible_condions", "subscrible": false}, "heigh": null, "width": null, "rownum": 1}], "rownum": 2}]	2019-10-29 17:48:04
8	action parametrs	act_params	[{"cols": [{"path": {"id": 5076, "path": "action's parametr", "descr": "action's parametr", "label": "parametr", "title": "parametr", "value": "parametr", "rownum": 40, "viewlink": "", "viewtype": "form not mutable", "tablename": "framework.act_parametrs", "subscrible": false}, "heigh": null, "width": null, "rownum": 1}], "rownum": 1}, {"cols": [{"path": {"id": 243, "key": "parametrs", "path": "parametrs", "descr": "ACTIONS PARAMETERS", "title": "parametrs", "rownum": 133, "viewlink": "", "viewtype": "table", "tablename": "framework.act_parametrs", "subscrible": false}, "heigh": null, "width": null, "rownum": 1}], "rownum": 2}]	2019-10-29 16:36:50
1	View	view	[{"cols": [{"path": {"id": 5060, "path": "view", "descr": "this is for admins views main information", "label": "View", "title": "View", "value": "View", "rownum": 26, "viewlink": "", "viewtype": "form not mutable", "tablename": "framework.views", "subscrible": false}, "heigh": null, "width": null, "rownum": 1}], "rownum": 1}, {"cols": [], "rownum": 2}, {"cols": [], "rownum": 3}, {"cols": [{"path": {"id": 5081, "path": "colinconf", "descr": "add column in config", "label": "add column", "title": "add column", "value": "add column", "rownum": 44, "viewlink": "", "viewtype": "form not mutable", "tablename": "framework.config", "subscrible": false}, "heigh": null, "width": null, "rownum": 1}], "rownum": 5}, {"cols": [{"path": {"id": 5061, "path": "configs", "descr": "View's column's configuration", "label": "Columns config", "title": "Columns config", "value": "Columns config", "rownum": 27, "viewlink": "", "viewtype": "table", "tablename": "framework.config", "subscrible": false}, "heigh": null, "width": null, "rownum": 1}], "rownum": 7}, {"cols": [{"path": {"id": 5080, "path": "fncol", "descr": "add function column in config", "label": "add function column", "title": "add function column", "value": "add function column", "rownum": 43, "viewlink": "", "viewtype": "form not mutable", "tablename": "framework.config", "subscrible": false}, "heigh": null, "width": "", "rownum": 1}], "rownum": 8}, {"cols": [{"path": {"id": 5071, "path": "filters", "descr": "filters", "label": "filters", "title": "filters", "value": "filters", "rownum": 35, "viewlink": "", "viewtype": "table", "tablename": "framework.filters", "subscrible": false}, "heigh": null, "width": null, "rownum": 1}], "rownum": 10}, {"cols": [{"path": {"id": 5073, "path": "acts", "descr": "view's actions", "label": "actions", "title": "actions", "value": "actions", "rownum": 37, "viewlink": "", "viewtype": "table", "tablename": "framework.actions", "subscrible": false}, "heigh": null, "width": null, "rownum": 1}], "rownum": 12}]	2019-10-24 16:16:10
240	Home Page	home	[]	2020-03-25 11:15:06.617226
247	function	Function	[{"cols": [{"path": {"id": 50798, "key": "Arguments", "path": "functionargs", "descr": "Arguments", "title": "Arguments", "rownum": 66, "viewlink": "", "viewtype": "table", "tablename": "sqlmanager.functionargs", "subscrible": false}, "heigh": null, "width": null, "rownum": 1}, {"path": {"id": 50797, "key": "Function Main", "path": "functioneditmain", "descr": "Function Main", "title": "Function Main", "rownum": 65, "viewlink": "", "viewtype": "form not mutable", "tablename": "sqlmanager.functionslist", "subscrible": false}, "heigh": null, "width": 24, "rownum": 2}], "rownum": 1}]	2020-05-15 10:37:34.913295
248	Trigger Edit	triggeredit	[{"cols": [{"path": {"id": 50804, "key": "Trigger Fields", "path": "triggerfields", "descr": "Trigger Fields", "title": "Trigger Fields", "rownum": 72, "viewlink": "", "viewtype": "form full", "tablename": "sqlmanager.triggers", "subscrible": false}, "heigh": null, "width": null, "rownum": 1}, {"path": {"id": 50801, "key": "Trigger Edit", "path": "triggeredit", "descr": "Trigger Edit", "title": "Trigger Edit", "rownum": 69, "viewlink": "", "viewtype": "form not mutable", "tablename": "sqlmanager.triggers", "subscrible": false}, "heigh": null, "width": 24, "rownum": 2}], "rownum": 1}]	2020-05-21 14:03:13.603442
\.


--
-- TOC entry 3715 (class 0 OID 0)
-- Dependencies: 208
-- Name: compos_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('compos_id_seq', 248, true);


--
-- TOC entry 3716 (class 0 OID 0)
-- Dependencies: 209
-- Name: compos_id_seq1; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('compos_id_seq1', 1, false);


--
-- TOC entry 3221 (class 0 OID 227583)
-- Dependencies: 210
-- Data for Name: config; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY config (id, viewid, t, col, column_id, title, type, roles, visible, required, width, "join", classname, updatable, relation, select_api, multiselecttable, orderby, orderbydesc, relcol, depency, created, relationcolums, multicolums, depencycol, column_order, fn, fncolumns, relatecolumn, "table", related, tpath, editable, copy) FROM stdin;
13108	236	2	fam	2	lastname	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	20	\N	\N	\N	\N	f	[]	f	f
13111	236	11	photo	14	photo	image	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	50	\N	\N	\N	\N	f	[]	f	f
601841	236	15	roles	\N	user roles	label	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2020-04-04 16:30:33.64911	[]	[]	\N	72	public.fn_users_getroles	["13113"]	\N	\N	f	[]	f	f
13576	221	4	col	4	col title fn	text	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-07 15:37:15.70217	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
601851	50783	9	id	9	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-04-04 21:05:33.699555	[]	[]	\N	90	\N	\N	\N	\N	f	[]	f	f
13644	228	9	api_type	9	api_type	select	[]	t	f	\N	f	\N	f	framework.methodtypes	\N	\N	f	f	methotypename	f	2019-11-08 11:08:46.710689	["methotypename"]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
601852	50783	10	homepage	10	home page	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-04-04 21:05:33.699555	[]	[]	\N	11	\N	\N	\N	\N	f	[]	f	f
12879	220	2	text	2	text title	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	t	f
601843	50783	1	dsn	1	db connection string	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-04-04 21:05:33.699555	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
13577	242	13	val_desc	13	col	select_api	[]	t	f	\N	f	\N	f	framework.config	/api/tabcolumns_for_filters	\N	f	f	id	f	2019-11-07 16:03:45.333515	[]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
601844	50783	2	port	2	project server port	number	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-04-04 21:05:33.699555	[]	[]	\N	20	\N	\N	\N	\N	f	[]	f	f
601845	50783	3	developerRole	3	developer role id	number	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-04-04 21:05:33.699555	[]	[]	\N	30	\N	\N	\N	\N	f	[]	f	f
13647	239	30	table	30	table	label	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-09 09:06:53.086775	[]	[]	\N	28	\N	\N	\N	\N	f	[]	f	f
601846	50783	4	maindomain	4	main domain	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-04-04 21:05:33.699555	[]	[]	\N	40	\N	\N	\N	\N	f	[]	f	f
601848	50783	6	redirect401	6	redirect when status 401	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-04-04 21:05:33.699555	[]	[]	\N	60	\N	\N	\N	\N	f	[]	f	f
601849	50783	7	isactiv	7	isactiv	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-04-04 21:05:33.699555	[]	[]	\N	70	\N	\N	\N	\N	f	[]	f	f
601847	50783	5	primaryAuthorization	5	primary authorization	number	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-04-04 21:05:33.699555	[]	[]	\N	50	\N	\N	\N	\N	f	[]	f	f
12914	221	3	t	3	t	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
601706	235	12	nosession	11	no session	checkbox	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2020-03-31 10:34:48.063871	[]	[]	\N	12	\N	\N	\N	\N	f	[]	f	f
12741	218	7	color	7	color title	color	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	24	\N	\N	\N	\N	f	[]	f	f
12701	224	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
12702	224	2	configid	2	configid	label	[]	f	t		f		f	framework.config	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	["title"]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
12704	224	5	operation	5	operation	label	[]	t	f		f		f	framework.operations	\N	\N	f	f	value	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
12705	224	6	value	6	value	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
12872	219	28	multitypehead	28	multitypehead	multitypehead	[]	f	f		f		f	\N	\N	test.dictionary_for_select	f	f	\N	f	2019-11-05 10:00:17.290746	[]	["dname"]	\N	27	\N	\N	\N	\N	f	[]	f	f
13011	56	1	id	1	id	label	[]	t	f		f	col-md-12	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
13067	32	1	id	1	bid	label	[]	f	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
13189	242	1	id	1	fl_id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
13190	242	12	column_order	2	column_order	number	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
12878	220	1	id	1	test	checkbox	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
13196	242	7	columns	7	columns	multiselect_api	[]	t	f		f		f	\N	/api/tabcolumns_for_filters_arr	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	8	\N	\N	\N	\N	f	[]	f	f
13197	242	8	roles	8	roles	multiselect	[]	t	f		f		f	\N	\N	framework.roles	f	f	\N	f	2019-11-05 10:00:17.290746	[]	["id","rolename"]	\N	9	\N	\N	\N	\N	f	[]	f	f
13239	224	3	val_desc	3	val_desc	select	[]	f	f	\N	f	\N	f	framework.config	\N	\N	f	f	id	f	2019-11-05 13:50:29.934237	["title"]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
13198	242	9	t	9	t	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
13199	242	10	table	10	table	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	11	\N	\N	\N	\N	f	[]	f	f
13200	242	11	created	11	created	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	12	\N	\N	\N	\N	f	[]	f	f
13210	244	1	id	1	vs_id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
13023	229	8	val_desc	8	val_desc	select_api	[]	t	f		f		f	framework.config	/api/view_cols_for_param	\N	f	f	id	f	2019-11-05 10:00:17.290746	["id", "title"]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
13119	237	\N	tit	\N	view title	link	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	framework.fn_view_title_link	[13117,13118]		\N	t	null	f	f
601842	236	16	user orgs	\N	user orgs	label	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2020-04-04 16:31:42.88825	[]	[]	\N	82	public.fn_users_getorgs	["13114"]	\N	\N	f	[]	f	f
19392	118	21	created	8	Created Date	date	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 11:04:47.818399	[]	[]	\N	9	\N	\N	\N	\N	f	[]	f	f
13261	238	1	SHOW SQL	\N	SHOW SQL	link	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-06 09:00:53.832788	[]	[]	\N	21	framework.fn_view_link_showsql	[13130]	\N	\N	f	[]	f	f
12706	224	7	created	7	created	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
13240	224	3	title	\N	title	label	[]	t	f	\N	f		f	\N	\N	\N	f	f	\N	f	2019-11-05 13:57:11.162051	[]	[]	\N	1	\N	\N	val_desc	framework.config	t	[]	f	f
12707	44	1	id	1	id	number	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
12708	44	2	viewid	2	viewid	number	[]	f	f		f	\N	f	framework.views	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
12709	44	3	col	3	col	text	[]	f	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
12710	44	4	tableid	4	tableid	text	[]	f	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
12711	44	5	notificationtext	5	notificationtext	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
12713	44	7	issend	7	issend	checkbox	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
12714	44	8	isread	8	isread	checkbox	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	8	\N	\N	\N	\N	f	[]	f	f
12715	44	9	created	9	created	date	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	9	\N	\N	\N	\N	f	[]	f	f
12716	44	10	sended	10	sended	date	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
12717	44	11	readed	11	readed	date	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	11	\N	\N	\N	\N	f	[]	f	f
12749	211	1	id	1	id	number	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
12750	211	3	menutitle	3	menu title	text	[]	t	f		f	col-md-11	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
12751	211	2	menutype	2	menu type	select	[]	t	f		f	col-md-11	f	framework.menutypes	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	["id","mtypename"]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
12752	211	4	ismainmenu	4	is main menu	checkbox	[]	t	f		f	col-md-11	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
12718	218	1	id	1	id	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
12719	218	2	text	2	text title	text	[]	t	f		f		t	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
12720	218	15	number	15	number title	number	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
12721	218	3	data	3	date title	date	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
12722	218	29	datetime	29	datetime	datetime	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
12723	218	5	time	5	time title	time	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
12724	218	4	check	4	check title	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
12725	218	6	password	6	password title visible check	password	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	8	\N	\N	\N	\N	f	[]	f	f
12726	218	10	typehead	10	typehead title	typehead	[]	t	f		f		f	test.dictionary_for_select	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	["id","dname"]	[]	\N	9	\N	\N	\N	\N	f	[]	f	f
12727	218	22	select	22	select title	select	[]	t	f		f		f	test.dictionary_for_select	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	["id","dname"]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
13017	56	6	oldata	6	oldata	label	[]	t	f		f	col-md-12	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
12728	218	8	multiselect	8	multiselect title	multiselect	[]	t	f		f		f	\N	\N	test.dictionary_for_select	f	f	\N	f	2019-11-05 10:00:17.290746	[]	["id","dname"]	\N	11	\N	\N	\N	\N	f	[]	f	f
12729	218	28	multitypehead	28	multitypehead title	multitypehead	[]	t	f		f		f	\N	\N	test.dictionary_for_select	f	f	\N	f	2019-11-05 10:00:17.290746	[]	["id","dname"]	\N	12	\N	\N	\N	\N	f	[]	f	f
601856	50784	4	for_userid	4	for user	label	[]	f	f		f		f	framework.users	\N	\N	f	f	id	f	2020-04-04 22:00:08.558568	[]	[]	\N	40	\N	\N	\N	\N	f	[]	f	f
601858	50784	6	isread	6	readed	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-04-04 22:00:08.558568	[]	[]	\N	60	\N	\N	\N	\N	f	[]	f	f
601859	50784	7	created	7	created	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-04-04 22:00:08.558568	[]	[]	\N	70	\N	\N	\N	\N	f	[]	f	f
601855	50784	3	messagetype	3	message type	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-04-04 22:00:08.558568	[]	[]	\N	30	\N	\N	\N	\N	f	[]	f	f
13068	32	2	treesid	2	treesid	label	[]	f	f		f	col-md-12	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
13069	32	3	title	3	title	text	[]	t	f		f	col-md-12	t	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
13070	32	5	parentid	5	parentid	select	[]	t	f		f	col-md-12	f	framework.treesbranches	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	["id","title"]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
13071	32	6	icon	6	icon	text	[]	t	f		f	col-md-12	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
13072	32	7	created	7	created	label	[]	t	f		f	col-md-12	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
601854	50784	2	message	2	message	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-04-04 22:00:08.558568	[]	[]	\N	20	\N	\N	\N	\N	f	[]	f	f
601853	50784	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-04-04 22:00:08.558568	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
13073	32	15	treeviewtype	8	treeviewtype	select	[]	t	f		f	col-md-12	f	framework.treeviewtypes	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	["id","typename"]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
13075	32	14	compoid	10	compoid	select	[]	t	f		f	col-md-12	f	framework.compos	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	["id","title"]	[]	\N	9	\N	\N	\N	\N	f	[]	f	f
13076	32	10	orderby	11	orderby	number	[]	t	f		f	col-md-12	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
13077	32	11	ismain	12	ismain	checkbox	[]	t	f		f	col-md-12	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	11	\N	\N	\N	\N	f	[]	f	f
12833	34	2	orgname	2	orgname	label	[]	t	f		f	col-md-12	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
12958	55	1	id	1	id	number	[]	f	f		f	col-md-11 form-group row	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
12832	34	1	id	1	id	label	[]	t	f		f	col-md-12	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
12964	55	7	isactive	8	isactive	checkbox	[]	f	f		f	col-md-11 form-group row	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
12965	55	8	created	9	created	label	[]	t	f		f	col-md-11 form-group row	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	8	\N	\N	\N	\N	f	[]	f	f
12966	55	9	roles	11	roles	label	[]	f	f		f	col-md-11 form-group row	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	9	\N	\N	\N	\N	f	[]	f	f
12967	55	10	roleid	12	roleid	number	[]	f	f		f	col-md-11 form-group row	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
12968	55	12	orgs	15	orgs	label	[]	f	f		f	col-md-11 form-group row	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	11	\N	\N	\N	\N	f	[]	f	f
12969	55	13	usersettings	16	usersettings	text	[]	f	f		f	col-md-11 form-group row	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	12	\N	\N	\N	\N	f	[]	f	f
12970	55	14	orgid	17	orgid	number	[]	f	f		f	col-md-11 form-group row	f	framework.orgs	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	["orgname"]	[]	\N	13	\N	\N	\N	\N	f	[]	f	f
12971	55	14	orgname	\N	orgname	label	[]	t	f	\N	f	col-md-11 form-group row	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	14	\N	\N	orgid	framework.orgs	t	[]	f	f
12972	55	11	photo	14	photo	image	[]	t	f		f	col-md-11 form-group row	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	15	\N	\N	\N	\N	f	[]	f	f
13012	56	10	userid	10	userid	number	[]	f	f		f	col-md-12	f	framework.users	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	["login"]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
13013	56	2	tablename	2	tablename	label	[]	t	f		f	col-md-12	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
13014	56	3	tableid	3	tableid	label	[]	t	f		f	col-md-12	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
13015	56	4	opertype	4	opertype	label	[]	f	f		f	col-md-12	f	framework.opertypes	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	["typename"]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
13016	56	10	login	\N	login	label	[]	t	f		f	col-md-12	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	userid	framework.users	t	[]	f	f
13018	56	7	newdata	7	newdata	label	[]	t	f		f	col-md-12	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	8	\N	\N	\N	\N	f	[]	f	f
13019	56	8	created	8	created	label	[]	t	f		f	col-md-12	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	9	\N	\N	\N	\N	f	[]	f	f
12960	55	3	im	3	FirstName	label	[]	t	f		f	col-md-11 form-group row	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
12961	55	4	ot	4	SecondName	label	[]	t	f		f	col-md-11 form-group row	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
12784	214	1	id	1	id	number	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
12785	214	2	title	2	title	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
12786	214	3	path	3	path	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
12787	214	4	config	4	config	text	[]	f	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
12788	214	5	created	5	created	date	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
12846	219	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	t	t	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
12847	219	2	text	2	text title	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
12848	219	3	data	3	data	date	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
12849	219	4	check	4	check	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
12850	219	5	time	5	time	time	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
12851	219	6	password	6	password	password	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
12852	219	7	color	7	color	color	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
12853	219	8	multiselect	8	multiselect	multiselect	[]	f	f		f		f	\N	\N	test.dictionary_for_select	f	f	\N	f	2019-11-05 10:00:17.290746	[]	["dname"]	\N	8	\N	\N	\N	\N	f	[]	f	f
12854	219	9	file	9	file	file	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	9	\N	\N	\N	\N	f	[]	f	f
12855	219	10	typehead	10	typehead	typehead	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
12856	219	11	image	11	image	image	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	11	\N	\N	\N	\N	f	[]	f	f
12857	219	12	images	12	images	images	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	12	\N	\N	\N	\N	f	[]	f	f
12858	219	13	gallery	13	gallery	gallery	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	13	\N	\N	\N	\N	f	[]	f	f
12859	219	14	label	14	label	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	14	\N	\N	\N	\N	f	[]	f	f
12860	219	15	number	15	number	number	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	15	\N	\N	\N	\N	f	[]	f	f
12861	219	16	link	16	link	link	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	16	\N	\N	\N	\N	f	[]	f	f
12862	219	17	texteditor	17	texteditor	texteditor	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	17	\N	\N	\N	\N	f	[]	f	f
12863	219	18	colorrow	18	color row	colorrow	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	18	\N	\N	\N	\N	f	[]	f	f
12864	219	19	multitypehead_api	19	multitypehead_api	multiselect_api	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	19	\N	\N	\N	\N	f	[]	f	f
12865	219	20	multi_select_api	20	multi_select_api	multiselect_api	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	20	\N	\N	\N	\N	f	[]	f	f
12866	219	21	colorpicker	21	colorpicker	colorpicker	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	21	\N	\N	\N	\N	f	[]	f	f
12867	219	23	autocomplete	23	autocomplete	autocomplete	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	22	\N	\N	\N	\N	f	[]	f	f
12868	219	24	textarea	24	textarea	textarea	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	23	\N	\N	\N	\N	f	[]	f	f
12869	219	25	files	25	files	files	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	24	\N	\N	\N	\N	f	[]	f	f
12870	219	26	typehead_api	26	typehead_api	typehead_api	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	25	\N	\N	\N	\N	f	[]	f	f
12871	219	27	select_api	27	select_api	select_api	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	26	\N	\N	\N	\N	f	[]	f	f
12873	219	29	datetime	29	datetime	datetime	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	28	\N	\N	\N	\N	f	[]	f	f
12874	219	31	relate_with_major	31	relate_with_major	array	[]	t	f		f		f	test.relate_with_major	\N	\N	f	f	\N	t	2019-11-05 10:00:17.290746	["id","somecolumn","major_table_id","created"]	[]	major_table_id	29	\N	\N	\N	\N	f	[]	f	f
12875	219	22	select	22	select	label	[]	f	f		f		f	test.dictionary_for_select	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	["dname","id"]	[]	\N	30	\N	\N	\N	\N	f	[]	f	f
12962	55	5	login	5	Login	label	[]	t	f		f	col-md-11 form-group row	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
12963	55	6	password	6	Password	password	[]	t	f		f	col-md-11 form-group row	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
601860	50783	11	reports_url	11	reports url	text	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2020-04-04 22:25:29.950382	[]	[]	\N	91	\N	\N	\N	\N	f	[]	f	f
12876	219	22	dname	\N	dname	text	[]	t	f	\N	f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	31	\N	\N	select	test.dictionary_for_select	t	[]	f	f
12877	219	22	id	\N	id_	label	[]	t	f	\N	f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	32	\N	\N	select	test.dictionary_for_select	t	[]	f	f
12973	226	1	id	1	CN	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
12974	226	2	configid	2	configid	label	[]	f	t		f		f	framework.config	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
12978	226	6	created	6	created	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
12995	228	1	id	1	act_id	label	[]	f	f		f		f	\N	\N	\N	t	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
12996	228	2	column_order	2	order by	number	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
12997	228	3	title	3	act title	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
12998	228	16	act_type	16	act_type	select	[]	t	f		f		f	framework.acttypes	\N	\N	f	f	actname	f	2019-11-05 10:00:17.290746	["actname"]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
12999	228	4	viewid	4	id	label	[]	f	t		f		f	framework.views	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
13000	228	5	icon	5	act icon	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
13001	228	6	classname	6	class name	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
13002	228	7	act_url	7	act url	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	8	\N	\N	\N	\N	f	[]	f	f
13003	228	8	api_method	8	api method	select	[]	t	f		f		f	framework.apicallingmethods	\N	\N	f	f	aname	f	2019-11-05 10:00:17.290746	["aname"]	[]	\N	9	\N	\N	\N	\N	f	[]	f	f
13005	228	10	refresh_data	10	refresh data	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	11	\N	\N	\N	\N	f	[]	f	f
13006	228	11	ask_confirm	11	ask confirm	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	12	\N	\N	\N	\N	f	[]	f	f
13007	228	12	roles	12	roles	multiselect	[]	t	f		f		f	\N	\N	framework.roles	f	f	\N	f	2019-11-05 10:00:17.290746	[]	["id","rolename"]	\N	13	\N	\N	\N	\N	f	[]	f	f
13008	228	13	forevery	13	for every row	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	14	\N	\N	\N	\N	f	[]	f	f
13009	228	14	main_action	14	main_action	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	15	\N	\N	\N	\N	f	[]	f	f
13010	228	15	created	15	created	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	16	\N	\N	\N	\N	f	[]	f	f
13028	230	6	title	6	title	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
13029	230	27	fn	27	function	select_api	[]	t	f		f		f	\N	/api/getfunctions	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
13030	230	28	fncolumns	28	columns	multiselect_api	[]	t	f		f		f	\N	/api/view_cols_for_fn	framework.config	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
13031	230	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
13032	231	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
13033	231	3	val_desc	3	val_desc	label	[]	t	f		f		f	framework.config	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	["title"]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
13034	231	2	actionid	2	act_id	label	[]	f	t		f		f	framework.actions	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
13035	231	3	title	\N	column title	label	[]	t	f	\N	f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	val_desc	framework.config	t	[]	f	f
13036	231	6	operation	6	operation	label	[]	t	f		f		f	framework.operations	\N	\N	f	f	value	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
13037	231	7	value	7	value	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
13038	231	8	created	8	created	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
13039	232	4	col	4	column title	select_api	[]	t	f		f		f	\N	/api/config_selectapi	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
12976	226	4	act	4	Action	select	[]	t	f		f		f	framework.operations	\N	\N	f	f	value	f	2019-11-05 10:00:17.290746	["value"]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
12977	226	5	value	5	Value	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
13040	232	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
13085	234	1	id	1	id	number	[]	f	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
13086	234	2	title	2	title	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
13087	234	8	path	8	path	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
13088	234	4	roles	4	roles	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
13089	234	6	systemfield	6	systemfield	checkbox	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
13090	234	9	icon	10	icon	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
13091	234	3	parentid	3	parentid	select	[]	f	f		f	\N	f	framework.mainmenu	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	["title"]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
13092	234	3	title	\N	parent	text	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	8	\N	\N	parentid	framework.mainmenu	t	[]	f	f
13093	234	7	orderby	7	orderby	number	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	9	\N	\N	\N	\N	f	[]	f	f
13094	234	5	created	5	created	date	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
13212	244	3	val_desc	3	val_desc	select_api	[]	t	f		f		f	framework.config	/api/view_cols_for_param	\N	f	f	id	f	2019-11-05 10:00:17.290746	["id", "title"]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
13095	234	10	menuid	10	menuid	number	[]	f	f		f		f	framework.menus	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	[]	[]	\N	11	\N	\N	\N	\N	f	[]	f	f
13191	242	2	viewid	2	id	label	[]	f	t		f		f	framework.views	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
13192	242	3	title	3	title	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
13193	242	4	type	4	type	select	[]	t	f		f		f	framework.filtertypes	\N	\N	f	f	ftname	f	2019-11-05 10:00:17.290746	["ftname"]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
13194	242	5	classname	5	classname	text	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
13211	244	2	actionid	2	actionid	label	[]	f	t		f		f	framework.actions	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
13213	244	6	operation	6	operation	select	[]	t	f		f		f	framework.operations	\N	\N	f	f	value	f	2019-11-05 10:00:17.290746	["value"]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
13214	244	7	value	7	value	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
13215	244	8	created	8	created	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
13118	237	2	title	2	title	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
13120	237	4	tablename	4	tablename	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
13121	237	5	vtypename	\N	view type	text	[]	t	f	\N	f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	viewtype	framework.viewtypes	t	[]	f	f
13122	237	3	descr	3	descr	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
13124	237	5	viewtype	5	viewtype	label	[]	f	f		f		f	framework.viewtypes	\N	\N	f	f	vtypename	f	2019-11-05 10:00:17.290746	["vtypename"]	[]	\N	8	\N	\N	\N	\N	f	[]	f	f
12839	217	1	id	1	id	number	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
12840	217	6	methodtype	6	methodtype	select	[]	f	f		f	\N	f	framework.methodtypes	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	["methotypename"]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
12841	217	2	methodname	2	method name	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
12842	217	3	procedurename	3	procedure name	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
12843	217	6	methotypename	\N	methotypename	text	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	methodtype	framework.methodtypes	t	[]	f	f
12844	217	4	roles	4	roles	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
12845	217	5	created	5	created	date	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
601835	239	7	typename	\N	typename	label	[]	f	f	\N	f		f	\N	\N	\N	f	f	typename	f	2020-04-03 12:33:29.81526	[]	[]	\N	31	\N	\N	type	framework.columntypes	t	[]	f	f
601839	235	13	ws	13	ws messagetype	text	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2020-04-03 14:31:40.101312	[]	[]	\N	13	\N	\N	\N	\N	f	[]	f	f
601840	235	14	istitle	14	is title	checkbox	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2020-04-03 14:31:49.306246	[]	[]	\N	14	\N	\N	\N	\N	f	[]	f	f
12757	225	5	value	5	Value	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
601836	227	16	actname	\N	actname	label	[]	f	f	\N	f		f	\N	\N	\N	f	f	actname	f	2020-04-03 12:39:37.338658	[]	[]	\N	16	\N	\N	act_type	framework.acttypes	t	[]	f	f
601837	227	8	aname	\N	aname	label	[]	f	f	\N	f		f	\N	\N	\N	f	f	aname	f	2020-04-03 12:39:57.452917	[]	[]	\N	17	\N	\N	api_method	framework.apicallingmethods	t	[]	f	f
601838	227	9	methotypename	\N	methotypename	label	[]	f	f	\N	f		f	\N	\N	\N	f	f	methotypename	f	2020-04-03 12:40:17.479944	[]	[]	\N	18	\N	\N	api_type	framework.methodtypes	t	[]	f	f
12730	218	27	select_api	27	select_api title	select_api	[]	t	f		f		f	\N	/api/select_api_test	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	13	\N	\N	\N	\N	f	[]	f	f
12731	218	26	typehead_api	26	typehead_api title	typehead_api	[]	t	f		f		f	\N	/api/select_api_test	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	14	\N	\N	\N	\N	f	[]	f	f
12732	218	20	multi_select_api	20	multi_select_api	multiselect_api	[]	t	f		f		f	\N	/api/select_api_test	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	15	\N	\N	\N	\N	f	[]	f	f
12783	213	12	photo	13	photo	image	[]	t	f		f	col-md-11	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	12	\N	\N	\N	\N	f	[]	f	f
16468	5542	15	userid	15	userid	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-09 18:09:00.445033	[]	[]	\N	15	\N	\N	\N	\N	f	[]	f	f
12733	218	19	multitypehead_api	19	multitypehead_api	multitypehead_api	[]	t	f		f		f	\N	/api/select_api_test	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	16	\N	\N	\N	\N	f	[]	f	f
12734	218	23	autocomplete	23	autocomplete title	autocomplete	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	17	\N	\N	\N	\N	f	[]	f	f
12735	218	16	link	16	link title	link	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	18	\N	\N	\N	\N	f	[]	f	f
12736	218	14	label	14	label title	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	19	\N	\N	\N	\N	f	[]	f	f
12737	218	17	texteditor	17	texteditor title	texteditor	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	20	\N	\N	\N	\N	f	[]	f	f
12738	218	31	html	30	html title	innerHtml	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	21	\N	\N	\N	\N	f	[]	f	f
12739	218	24	textarea	24	textarea title	textarea	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	22	\N	\N	\N	\N	f	[]	f	f
12740	218	21	colorpicker	21	colorpicker title	colorpicker	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	23	\N	\N	\N	\N	f	[]	f	f
12742	218	18	colorrow	18	colorrow title	color	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	25	\N	\N	\N	\N	f	[]	f	f
12743	218	9	file	9	file title	file	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	26	\N	\N	\N	\N	f	[]	f	f
12744	218	25	files	25	files title	files	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	27	\N	\N	\N	\N	f	[]	f	f
12745	218	30	files	25	filelist title	filelist	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	28	\N	\N	\N	\N	f	[]	f	f
12746	218	11	image	11	image title	image	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	29	\N	\N	\N	\N	f	[]	f	f
12747	218	12	images	12	images title	images	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	30	\N	\N	\N	\N	f	[]	f	f
12748	218	13	gallery	13	gallery title	gallery	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	31	\N	\N	\N	\N	f	[]	f	f
12753	225	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
12754	225	2	configid	2	configid	label	[]	f	f		f		f	framework.config	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
12758	225	6	created	6	created	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
12759	100	1	id	1	id	number	[]	f	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
12760	100	2	treesid	2	treesid	number	[]	f	f		f	\N	f	framework.trees	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
12761	100	3	title	3	title	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
12762	100	4	icon	4	icon	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
12763	100	5	classname	5	classname	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
12764	100	6	act	6	act	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
12765	100	7	created	7	created	date	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
12766	212	1	id	1	N	number	[]	f	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
12768	212	2	methodname	2	method name	text	[]	t	f		f	col-md-11	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
12769	212	6	methodtype	6	methodtype	select	[]	t	f		f	col-md-11	f	framework.methodtypes	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	["id","methotypename"]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
12770	212	4	roles	4	roles	multiselect	[]	t	f		f	col-md-11	f	\N	\N	framework.roles	f	f	\N	f	2019-11-05 10:00:17.290746	[]	["id","rolename"]	\N	5	\N	\N	\N	\N	f	[]	f	f
12771	212	5	created	5	created	label	[]	f	f		f	col-md-11	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
12772	213	2	fam	2	fam	text	[]	t	f		f	col-md-11	t	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
12773	213	3	im	3	im	text	[]	t	f		f	col-md-11	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
12774	213	4	ot	4	ot	text	[]	t	f		f	col-md-11	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
12775	213	5	login	5	login	text	[]	t	f		f	col-md-11	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
12776	213	6	password	6	password	password	[]	t	f		f	col-md-11	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
12777	213	8	isactive	8	isactive	checkbox	[]	t	f		f	col-md-11	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
12778	213	9	created	9	created	label	[]	t	f		f	col-md-11	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
12779	213	10	roles	11	roles	multiselect	[]	t	f		f	col-md-11	f	\N	\N	framework.roles	f	f	\N	f	2019-11-05 10:00:17.290746	[]	["id","rolename"]	\N	8	\N	\N	\N	\N	f	[]	f	f
12780	213	12	orgs	12	orgs	multiselect	[]	t	f		f	col-md-11	f	\N	\N	framework.orgs	f	f	\N	f	2019-11-05 10:00:17.290746	[]	["id","orgname"]	\N	9	\N	\N	\N	\N	f	[]	f	f
12781	213	1	id	1	id	number	[]	f	f		f	col-md-11	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
12782	213	11	roleid	12	roleid	number	[]	f	f		f	col-md-11	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	11	\N	\N	\N	\N	f	[]	f	f
12756	225	4	act	4	Action	select	[]	t	f		f		f	framework.operations	\N	\N	f	f	value	f	2019-11-05 10:00:17.290746	["id","value"]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
16469	5542	16	thumbprint	17	thumbprint	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-09 18:09:00.445033	[]	[]	\N	16	\N	\N	\N	\N	f	[]	f	f
12807	215	14	label	14	label title	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	19	\N	\N	\N	\N	f	[]	f	f
12801	215	27	select_api	27	select_api title	select_api	[]	t	f		f		f	\N	/api/select_api_test	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	13	\N	\N	\N	\N	f	[]	f	f
12824	216	3	tableid	3	tableid	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
12834	150	1	id	1	id	number	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
12835	150	3	menutitle	3	menu title	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
12836	150	2	mtypename	\N	menu type	text	[]	t	f	\N	f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	menutype	framework.menutypes	t	[]	f	f
12837	150	4	ismainmenu	4	is main menu	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
12838	150	2	menutype	2	menutype	number	[]	f	f		f		f	framework.menutypes	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	["mtypename"]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
12887	220	10	typehead	10	typehead	typehead	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
12910	220	\N	func test	\N	func test	text	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	33	concat	[12879,12892]		\N	t	null	f	f
12799	215	8	multiselect	8	multiselect title	multiselect	[]	t	f		f		f	\N	\N	test.dictionary_for_select	f	f	\N	f	2019-11-05 10:00:17.290746	[]	["id","dname"]	\N	11	\N	\N	\N	\N	f	[]	f	f
12800	215	28	multitypehead	28	multitypehead title	multitypehead	[]	t	f		f		f	\N	\N	test.dictionary_for_select	f	f	\N	f	2019-11-05 10:00:17.290746	[]	["id","dname"]	\N	12	\N	\N	\N	\N	f	[]	f	f
12802	215	26	typehead_api	26	typehead_api title	typehead_api	[]	t	f		f		f	\N	/api/select_api_test	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	14	\N	\N	\N	\N	f	[]	f	f
12803	215	20	multi_select_api	20	multi_select_api	multiselect_api	[]	t	f		f		f	\N	/api/select_api_test	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	15	\N	\N	\N	\N	f	[]	f	f
12805	215	23	autocomplete	23	autocomplete title	autocomplete	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	17	\N	\N	\N	\N	f	[]	f	f
12806	215	16	link	16	link title	link	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	18	\N	\N	\N	\N	f	[]	f	f
12808	215	17	texteditor	17	texteditor title	texteditor	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	20	\N	\N	\N	\N	f	[]	f	f
12809	215	31	html	30	html title	innerHtml	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	21	\N	\N	\N	\N	f	[]	f	f
12810	215	24	textarea	24	textarea title	textarea	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	22	\N	\N	\N	\N	f	[]	f	f
12811	215	21	colorpicker	21	colorpicker title	colorpicker	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	23	\N	\N	\N	\N	f	[]	f	f
12812	215	7	color	7	color title	color	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	24	\N	\N	\N	\N	f	[]	f	f
12813	215	18	colorrow	18	colorrow title	color	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	25	\N	\N	\N	\N	f	[]	f	f
12814	215	9	file	9	file title	file	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	26	\N	\N	\N	\N	f	[]	f	f
12817	215	11	image	11	image title	image	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	29	\N	\N	\N	\N	f	[]	f	f
12818	215	12	images	12	images title	images	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	30	\N	\N	\N	\N	f	[]	f	f
12819	215	13	gallery	13	gallery title	gallery	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	31	\N	\N	\N	\N	f	[]	f	f
12816	215	30	files	25	filelist title	filelist	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	28	\N	\N	\N	\N	f	[]	f	f
12821	215	33	relate_with_major	31	relate_with_major	array	[]	t	f		f		f	test.relate_with_major	\N	\N	f	f	\N	t	2019-11-05 10:00:17.290746	["id","somecolumn","major_table_id","created"]	[]	major_table_id	33	\N	\N	\N	\N	f	[]	f	f
12822	216	1	id	1	id	number	[0]	f	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
12823	216	2	tablename	2	tablename	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
12825	216	4	typename	\N	typename	text	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	opertype	framework.opertypes	t	[]	f	f
12826	216	10	userid	10	userid	number	[]	f	f		f	\N	f	framework.users	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	["login"]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
12827	216	4	opertype	4	opertype	select	[]	f	f		f	\N	f	framework.opertypes	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	["typename"]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
12828	216	10	login	\N	login	text	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	7	\N	\N	userid	framework.users	t	[]	f	f
12829	216	6	oldata	6	oldata	text	[]	f	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	8	\N	\N	\N	\N	f	[]	f	f
12830	216	7	newdata	7	newdata	text	[]	f	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	9	\N	\N	\N	\N	f	[]	f	f
12831	216	8	created	8	created	date	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
12880	220	3	data	3	data	date	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
12882	220	5	time	5	time	time	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
12883	220	6	password	6	password	password	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
12884	220	7	color	7	color	color	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
12886	220	9	file	9	file	file	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	9	\N	\N	\N	\N	f	[]	f	f
12888	220	11	image	11	image	image	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	11	\N	\N	\N	\N	f	[]	f	f
12889	220	12	images	12	images	images	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	12	\N	\N	\N	\N	f	[]	f	f
12890	220	13	gallery	13	gallery	gallery	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	13	\N	\N	\N	\N	f	[]	f	f
12891	220	14	label	14	label	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	14	\N	\N	\N	\N	f	[]	f	f
12892	220	15	number	15	number	number	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	15	\N	\N	\N	\N	f	[]	f	f
12893	220	16	link	16	link	link	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	16	\N	\N	\N	\N	f	[]	f	f
12894	220	17	texteditor	17	texteditor	texteditor	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	17	\N	\N	\N	\N	f	[]	f	f
12895	220	18	colorrow	18	color row	colorrow	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	18	\N	\N	\N	\N	f	[]	f	f
12896	220	19	multitypehead_api	19	multitypehead_api	multiselect_api	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	19	\N	\N	\N	\N	f	[]	f	f
12897	220	20	multi_select_api	20	multi_select_api	multiselect_api	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	20	\N	\N	\N	\N	f	[]	f	f
12898	220	21	colorpicker	21	colorpicker	colorpicker	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	21	\N	\N	\N	\N	f	[]	f	f
12899	220	23	autocomplete	23	autocomplete	autocomplete	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	22	\N	\N	\N	\N	f	[]	f	f
12900	220	24	textarea	24	textarea	textarea	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	23	\N	\N	\N	\N	f	[]	f	f
12792	215	3	data	3	date title	date	[]	t	f	6	f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
12797	215	10	typehead	10	typehead title	typehead	[]	t	f	6	f		f	test.dictionary_for_select	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	["id","dname"]	[]	\N	9	\N	\N	\N	\N	f	[]	f	f
12815	215	25	files	25	files title	files	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	27	\N	\N	\N	\N	f	[]	f	f
12790	215	2	text	2	text title	text	[]	t	f	6	f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
12794	215	5	time	5	time title	time	[]	t	f	6	f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
12795	215	4	check	4	check title	checkbox	[]	t	f	6	f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
12796	215	6	password	6	password title visible check	password	[]	t	f	6	f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	8	\N	\N	\N	\N	f	[]	f	f
12793	215	29	datetime	29	datetime 12345678900000000000000000000000000 qwerty jaksdf jdkjfka kadfkasdjf knrenr kvvfdfd dfkk jdf kf jdk kdfjk d ijijgt djnjrfnrjfrnf 	datetime	[]	t	f	6	f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
12798	215	22	select	22	select title	select	[]	t	f	6	f		f	test.dictionary_for_select	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	["id","dname"]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
12901	220	25	files	25	files	files	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	24	\N	\N	\N	\N	f	[]	f	f
12902	220	26	typehead_api	26	typehead_api	typehead_api	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	25	\N	\N	\N	\N	f	[]	f	f
12903	220	27	select_api	27	select_api	select_api	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	26	\N	\N	\N	\N	f	[]	f	f
12904	220	28	multitypehead	28	multitypehead	multitypehead	[]	f	f		f		f	\N	\N	test.dictionary_for_select	f	f	\N	f	2019-11-05 10:00:17.290746	[]	["dname"]	\N	27	\N	\N	\N	\N	f	[]	f	f
12906	220	31	relate_with_major	31	relate_with_major	array	[]	t	f		f		f	test.relate_with_major	\N	\N	f	f	\N	t	2019-11-05 10:00:17.290746	["id","somecolumn","major_table_id","created"]	[]	major_table_id	29	\N	\N	\N	\N	f	[]	f	f
12905	220	29	datetime	29	datetime	datetime	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	10	\N	\N	\N	\N	f	[]	t	f
12908	220	22	dname	\N	dname	text	[]	t	f	\N	f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	31	\N	\N	select	test.dictionary_for_select	t	[]	f	f
12909	220	22	id	\N	id_	label	[]	t	f	\N	f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	32	\N	\N	select	test.dictionary_for_select	t	[]	f	f
12912	221	1	id	1	N	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
12913	221	2	viewid	2	id	label	[]	f	f		f		f	framework.views	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	["viewtype"]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
12915	221	4	col	4	column title	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
12916	221	5	column_id	5	column_id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
12917	221	6	title	6	title	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
12918	221	7	type	7	type	select	[]	t	f		f		f	framework.columntypes	\N	\N	f	f	typename	f	2019-11-05 10:00:17.290746	["typename"]	[]	\N	8	\N	\N	\N	\N	f	[]	f	f
12919	221	27	fn	27	fn	select_api	[]	t	f		f		f	\N	/api/getfunctions	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	9	\N	\N	\N	\N	f	[]	f	f
12921	221	8	roles	8	roles	multiselect	[]	t	f		f		f	\N	\N	framework.roles	f	f	\N	f	2019-11-05 10:00:17.290746	[]	["id","rolename"]	\N	11	\N	\N	\N	\N	f	[]	f	f
12922	221	9	visible	9	visible	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	12	\N	\N	\N	\N	f	[]	f	f
12923	221	10	required	10	is required	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	13	\N	\N	\N	\N	f	[]	f	f
12924	221	11	width	11	width	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	14	\N	\N	\N	\N	f	[]	f	f
12925	221	12	join	12	join	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	15	\N	\N	\N	\N	f	[]	f	f
12926	221	13	classname	13	classname	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	16	\N	\N	\N	\N	f	[]	f	f
12927	221	14	updatable	14	updatable	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	17	\N	\N	\N	\N	f	[]	f	f
12928	221	16	select_api	16	select_api	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	18	\N	\N	\N	\N	f	[]	f	f
12929	221	18	orderby	18	order by	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	19	\N	\N	\N	\N	f	[]	f	f
12930	221	19	orderbydesc	19	order by desc	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	20	\N	\N	\N	\N	f	[]	f	f
12931	221	15	relation	15	relation table	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	21	\N	\N	\N	\N	f	[]	f	f
12932	221	17	multiselecttable	17	multiselecttable	select_api	[]	t	f		f		f	\N	/api/gettables	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	22	\N	\N	\N	\N	f	[]	f	f
12933	221	20	relcol	20	relcol	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	23	\N	\N	\N	\N	f	[]	f	f
12934	221	21	depency	21	 is depency	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	24	\N	\N	\N	\N	f	[]	f	f
12935	221	24	multicolums	24	multicolums	multiselect_api	[]	t	f		f		f	\N	/api/multi_tabcolumns	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	25	\N	\N	\N	\N	f	[]	f	f
12936	221	23	relationcolums	23	relationcolums	multiselect_api	[]	t	f		f		f	\N	/api/rel_tabcolumns	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	26	\N	\N	\N	\N	f	[]	f	f
12937	221	25	depencycol	25	depencycol	label	[]	f	f		f		f	\N	/api/dep_tabcolumns	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	27	\N	\N	\N	\N	f	[]	f	f
12938	221	29	defaultval	29	defaultval	array	[]	t	f		f		f	framework.defaultval	\N	\N	f	f	\N	t	2019-11-05 10:00:17.290746	[]	[]	configid	28	\N	\N	\N	\N	f	[]	f	f
12939	221	30	select_condition	29	select_condition	array	[]	t	f		f		f	framework.select_condition	\N	\N	f	f	\N	t	2019-11-05 10:00:17.290746	["col","operation","const","val_desc"]	[]	configid	29	\N	\N	\N	\N	f	[]	f	f
12940	221	31	visible_condition	29	visible_condition	array	[]	t	f		f		f	framework.visible_condition	\N	\N	f	f	\N	t	2019-11-05 10:00:17.290746	[]	[]	configid	30	\N	\N	\N	\N	f	[]	f	f
12942	222	1	id	1	CN	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
12943	222	2	configid	2	N	label	[]	f	t		f		f	framework.config	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
12944	222	3	col	3	col	select_api	[]	t	f		f		f	\N	/api/tabcolumns_for_sc	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
12945	222	5	operation	5	operation	select	[]	t	f		f		f	framework.operations	\N	\N	f	f	value	f	2019-11-05 10:00:17.290746	["value"]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
12946	222	9	val_desc	9	val_desc	select_api	[]	t	f		f		f	\N	/api/view_cols_for_sc	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
12947	222	6	const	6	const	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
12948	222	7	value	7	value	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
12949	222	8	created	8	created	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	8	\N	\N	\N	\N	f	[]	f	f
12950	223	1	id	1	CN	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
12951	223	2	configid	2	configid	label	[]	f	t		f		f	framework.config	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
12952	223	8	val_desc	3	val_desc	select_api	[]	t	f		f		f	framework.config	/api/view_cols_for_sc	\N	f	f	id	f	2019-11-05 10:00:17.290746	["id","title"]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
12953	223	3	col	3	col	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
12954	223	4	title	4	title	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
12955	223	5	operation	5	operation	select	[]	t	f		f		f	framework.operations	\N	\N	f	f	value	f	2019-11-05 10:00:17.290746	["value"]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
12956	223	6	value	6	value	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
12957	223	7	created	7	created	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	8	\N	\N	\N	\N	f	[]	f	f
12983	227	4	viewid	4	id	label	[]	f	t		f		f	framework.views	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
13020	229	1	id	1	paramid	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
13021	229	2	actionid	2	act_id	label	[]	f	t		f		f	framework.actions	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
13022	229	3	paramtitle	3	title	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
13024	229	5	paramconst	5	const	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
13025	229	6	paraminput	6	input	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
13026	229	4	paramt	4	method type	select	[]	t	f		f		f	framework.paramtypes	\N	\N	f	f	val	f	2019-11-05 10:00:17.290746	["val"]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
13027	229	9	query_type	9	query type	select	[]	t	f		f		f	framework.actparam_querytypes	\N	\N	f	f	aqname	f	2019-11-05 10:00:17.290746	["aqname"]	[]	\N	8	\N	\N	\N	\N	f	[]	f	f
13045	26	1	id	1	id	number	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
13046	26	2	title	2	title	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
13047	26	3	url	3	url	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
13048	26	4	descr	4	descr	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
13049	26	5	roles	5	roles	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
13050	26	6	created	6	created	date	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
13051	28	1	id	1	id	label	[]	f	f		f	col-md-11	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
13052	28	2	title	2	title	text	[]	t	f		f	col-md-11	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
13053	28	3	url	3	url	text	[]	t	f		f	col-md-11	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
13054	28	4	descr	4	descr	textarea	[]	t	f		f	col-md-11	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
13055	28	5	roles	5	roles	multiselect	[]	t	f		f	col-md-11	f	\N	\N	framework.roles	f	f	\N	f	2019-11-05 10:00:17.290746	[]	["id","rolename"]	\N	5	\N	\N	\N	\N	f	[]	f	f
13056	28	6	created	6	created	label	[]	f	f		f	col-md-11	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
13057	30	1	id	1	id	number	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
13058	30	2	treesid	2	treesid	number	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
13059	30	3	title	3	title	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
13061	30	6	icon	6	icon	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
13062	30	7	created	7	created	date	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
13063	30	7	treeviewtype	8	treeviewtype	number	[]	t	f		f	\N	f	framework.treeviewtypes	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
13065	30	9	compoid	10	compoid	number	[]	f	f		f	\N	f	framework.compos	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	9	\N	\N	\N	\N	f	[]	f	f
13041	233	2	viewid	2	viewid	label	[]	f	f		f		f	framework.views	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
13042	233	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
13043	233	6	title	6	setting	select_api	[]	t	f		f		f	\N	/api/configsettings_selectapi	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
13044	233	4	col	4	column	select_api	[]	t	f		f		f	\N	/api/view_cols_for_fn	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
13078	101	1	id	1	bid	number	[]	f	f	30%	f	col-md-11	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
13079	101	2	treesid	2	treesid	number	[]	f	f	30%	f	col-md-11	f	framework.trees	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
13081	101	4	icon	4	icon	text	[]	t	f	30%	f	col-md-11	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
13082	101	5	classname	5	classname	text	[]	t	f	30%	f	col-md-11	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
13083	101	6	act	6	act	text	[]	t	f	30%	f	col-md-11	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
13084	101	7	created	7	created	date	[]	f	f		f	col-md-11	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
13096	235	1	id	1	id	label	[]	f	f		f	col-md-12	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
13097	235	2	title	2	title	text	[]	t	f		f	col-md-12	t	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
13098	235	3	parentid	3	parent	select	[]	t	f		f	col-md-12	f	framework.mainmenu	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	["id","title"]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
13099	235	4	roles	4	roles	multiselect	[]	t	f		f	col-md-12	f	\N	\N	framework.roles	f	f	\N	f	2019-11-05 10:00:17.290746	[]	["id","rolename"]	\N	4	\N	\N	\N	\N	f	[]	f	f
13100	235	5	created	5	created	label	[]	f	f		f	col-md-12	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
13101	235	6	systemfield	6	system field	checkbox	[]	f	f		f	col-md-12	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
13102	235	7	orderby	7	order by	number	[]	t	f		f	col-md-12	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
13103	235	8	path	8	path	text	[]	t	f		f	col-md-12	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	8	\N	\N	\N	\N	f	[]	f	f
13104	235	10	test	10	test	array	[]	f	f		f	col-md-12	f	framework.test	\N	\N	f	f	\N	t	2019-11-05 10:00:17.290746	[]	[]	relat	9	\N	\N	\N	\N	f	[]	f	f
13105	235	9	icon	10	icon	text	[]	t	f		f	col-md-12	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
13106	235	11	menuid	10	menuid	number	[]	f	f		f	col-md-12	f	framework.menus	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	[]	[]	\N	11	\N	\N	\N	\N	f	[]	f	f
13129	238	3	descr	3	descr	textarea	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
13125	238	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
13127	238	21	tablename	4	tablename	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
13130	238	8	path	8	path	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
13131	238	5	viewtype	5	viewtype	select	[]	t	f		f		f	framework.viewtypes	\N	\N	f	f	vtypename	f	2019-11-05 10:00:17.290746	["vtypename"]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
13132	238	13	roles	13	roles	multiselect	[]	t	f		f		f	\N	\N	framework.roles	f	f	\N	f	2019-11-05 10:00:17.290746	[]	["id","rolename"]	\N	8	\N	\N	\N	\N	f	[]	f	f
13133	238	14	classname	14	classname	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	9	\N	\N	\N	\N	f	[]	f	f
13134	238	6	pagination	6	pagination	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
13135	238	15	orderby	15	orderby	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	11	\N	\N	\N	\N	f	[]	f	f
13136	238	16	ispagesize	16	ispagesize	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	12	\N	\N	\N	\N	f	[]	f	f
13137	238	17	pagecount	17	pagecount	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	13	\N	\N	\N	\N	f	[]	f	f
13138	238	18	foundcount	18	foundcount	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	14	\N	\N	\N	\N	f	[]	f	f
13139	238	19	subscrible	19	subscrible	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	15	\N	\N	\N	\N	f	[]	f	f
13140	238	20	checker	20	checker	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	16	\N	\N	\N	\N	f	[]	f	f
13060	30	5	parentid	5	parentid	number	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	t	f
13116	236	9	created	9	created	date	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	100	\N	\N	\N	\N	f	[]	f	f
13115	236	8	isactive	8	isactive	checkbox	[]	f	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	90	\N	\N	\N	\N	f	[]	f	f
13114	236	12	orgs	15	orgs	multiselect	[]	f	f		f	\N	f	\N	\N	framework.orgs	f	f	\N	f	2019-11-05 10:00:17.290746	[]	["orgname"]	\N	80	\N	\N	\N	\N	f	[]	f	f
13112	236	5	login	5	login	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	60	\N	\N	\N	\N	f	[]	f	f
13107	236	1	id	1	id	number	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
13113	236	9	roles	11	roles	multiselect	[]	f	f		f	\N	f	\N	\N	framework.roles	f	f	\N	f	2019-11-05 10:00:17.290746	[]	["rolename"]	\N	70	\N	\N	\N	\N	f	[]	f	f
13163	239	21	depency	21	depency	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	23	\N	\N	\N	\N	f	[]	f	f
13167	240	1	id	1	cni	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
13168	240	2	configid	2	N	label	[]	f	t		f		f	framework.config	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	["viewid"]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
13169	240	3	col	3	col	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
13170	240	5	operation	5	operation	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
13171	240	9	val_desc	10	val_desc	label	[]	f	f		f		f	framework.config	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	["title"]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
13172	240	6	const	6	const	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
13173	240	7	value	7	val	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
13174	240	8	created	8	created	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	8	\N	\N	\N	\N	f	[]	f	f
13175	240	9	title	\N	value	label	[]	t	f	\N	f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	9	\N	\N	val_desc	framework.config	t	[]	f	f
13176	240	2	viewid	\N	viewid	label	[]	f	f	\N	f		f	framework.views	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	10	\N	\N	configid	framework.config	t	[]	f	f
13178	241	2	viewid	2	id	label	[]	f	t		f		f	framework.views	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
13202	243	2	actionid	2	act_id	label	[]	f	t		f		f	framework.actions	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
13203	243	3	paramtitle	3	title	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
13204	243	8	title	\N	column	label	[]	t	f	\N	f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	val_desc	framework.config	t	[]	f	f
13109	236	3	im	3	firstname	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	30	\N	\N	\N	\N	f	[]	f	f
13110	236	4	ot	4	secondname	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	40	\N	\N	\N	\N	f	[]	f	f
13205	243	5	paramconst	5	const	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
13206	243	6	paraminput	6	input	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
13207	243	4	paramt	4	method type	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
13208	243	8	val_desc	8	val_desc	label	[]	f	f		f		f	framework.config	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	["title"]	[]	\N	8	\N	\N	\N	\N	f	[]	f	f
13209	243	9	query_type	9	query type	label	[]	t	f		f		f	framework.actparam_querytypes	\N	\N	f	f	aqname	f	2019-11-05 10:00:17.290746	[]	[]	\N	9	\N	\N	\N	\N	f	[]	f	f
13216	245	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
13217	245	4	tablename	4	table name	select_api	[]	t	f		f		f	\N	/api/gettables	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
13218	245	21	tablename	4	tablename	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
13219	245	2	title	2	title	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
13220	245	3	descr	3	descr	textarea	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
13221	245	8	path	8	path	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
13222	245	5	viewtype	5	viewtype	select	[]	t	f		f		f	framework.viewtypes	\N	\N	f	f	vtypename	f	2019-11-05 10:00:17.290746	["vtypename"]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
13223	245	13	roles	13	roles	multiselect	[]	t	f		f		f	\N	\N	framework.roles	f	f	\N	f	2019-11-05 10:00:17.290746	[]	["id","rolename"]	\N	8	\N	\N	\N	\N	f	[]	f	f
13224	245	14	classname	14	classname	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	9	\N	\N	\N	\N	f	[]	f	f
13225	245	6	pagination	6	pagination	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
13226	245	15	orderby	15	orderby	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	11	\N	\N	\N	\N	f	[]	f	f
13227	245	16	ispagesize	16	ispagesize	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	12	\N	\N	\N	\N	f	[]	f	f
13228	245	17	pagecount	17	pagecount	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	13	\N	\N	\N	\N	f	[]	f	f
13229	245	18	foundcount	18	foundcount	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	14	\N	\N	\N	\N	f	[]	f	f
13230	245	19	subscrible	19	subscrible	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	15	\N	\N	\N	\N	f	[]	f	f
13231	245	20	checker	20	checker	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	16	\N	\N	\N	\N	f	[]	f	f
13663	221	40	editable	34	is editable cell	checkbox	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-09 09:35:28.103632	[]	[]	\N	21	\N	\N	\N	\N	f	[]	f	f
13689	220	3	data	3	data_33	date	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-09 10:59:05.158573	[]	[]	\N	6	\N	\N	\N	\N	f	[]	t	f
13703	220	15	number	15	number_34	number	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-09 11:31:40.154123	[]	[]	\N	7	\N	\N	\N	\N	f	[]	t	f
12907	220	22	select	22	select	select	[]	t	f		f		f	test.dictionary_for_select	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	["id", "dname"]	[]	\N	11	\N	\N	\N	\N	f	[]	t	f
13201	243	1	id	1	p_id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
13145	239	4	col	4	column	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
13165	239	25	depencycol	25	depencycol	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	25	\N	\N	\N	\N	f	[]	f	f
13183	241	6	column	6	column	select_api	[]	t	f		f		f	\N	/api/tabcolumns_for_filters	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	8	\N	\N	\N	\N	f	[]	f	f
13182	241	5	classname	5	classname	text	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	t	f
12911	221	26	column_order	26	column order	number	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
12982	227	16	act_type	16	act_type	select	[]	t	f		f		f	framework.acttypes	\N	\N	f	f	actname	f	2019-11-05 10:00:17.290746	["actname"]	[]	\N	4	\N	\N	\N	\N	f	[]	t	f
13185	241	8	roles	8	roles	multiselect	[]	t	f		f		f	\N	\N	framework.roles	f	f	\N	f	2019-11-05 10:00:17.290746	["id", "rolename"]	[]	\N	10	\N	\N	\N	\N	f	[]	t	f
12987	227	8	api_method	8	api method	select	[]	t	f		f		f	framework.apicallingmethods	\N	\N	f	f	aname	f	2019-11-05 10:00:17.290746	["aname"]	[]	\N	9	\N	\N	\N	\N	f	[]	t	f
13179	241	12	column_order	2	column_order	number	[]	t	f		f		f	\N	\N	\N	t	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	t	f
13180	241	3	title	3	title	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	t	f
13773	239	2	viewtype	\N	viewtype	label	[]	f	f	\N	f		f	\N	\N	\N	f	f	\N	f	2019-11-11 17:02:52.048476	[]	[]	\N	29	\N	\N	viewid	framework.views	t	[]	f	f
12981	227	3	title	3	act title	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	t	f
12984	227	5	icon	5	act icon	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	t	f
12985	227	6	classname	6	class name	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	7	\N	\N	\N	\N	f	[]	t	f
12986	227	7	act_url	7	act url	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	8	\N	\N	\N	\N	f	[]	t	f
12980	227	2	column_order	2	order by	number	[]	t	f		f		f	\N	\N	\N	t	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	t	f
13152	239	11	width	11	width	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	17	\N	\N	\N	\N	f	[]	t	f
19344	118	3	roles	3	Roles	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:56:42.165857	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
13789	241	13	val_desc	13	col	select	[]	t	f	\N	f	\N	f	framework.config	\N	\N	f	f	id	f	2019-11-11 21:53:56.51403	["id", "title"]	[]	\N	7	\N	\N	\N	\N	f	[]	t	f
13166	239	27	defaultval	27	default value	array	[]	t	f		f		f	framework.defaultval	\N	\N	f	f	\N	t	2019-11-05 10:00:17.290746	["bool", "act", "value"]	[]	configid	26	\N	\N	\N	\N	f	[]	f	f
13796	227	9	api_type	9	api_type	select	[]	t	f	\N	f	\N	f	framework.methodtypes	\N	\N	f	f	methotypename	f	2019-11-11 22:21:30.217723	["methotypename"]	[]	\N	10	\N	\N	\N	\N	f	[]	t	f
12920	221	28	fncolumns	28	fn columns	multiselect_api	[]	t	f		f		f	\N	/api/view_cols_for_fn	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
13184	241	7	columns	7	columns	multiselect_api	[]	t	f		f		f	\N	/api/tabcolumns_for_filters_arr	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	9	\N	\N	\N	\N	f	[]	t	f
12992	227	13	forevery	13	for every row	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	14	\N	\N	\N	\N	f	[]	t	f
12993	227	14	main_action	14	main_action	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	15	\N	\N	\N	\N	f	[]	t	f
12989	227	10	refresh_data	10	refresh data	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	11	\N	\N	\N	\N	f	[]	t	f
12990	227	11	ask_confirm	11	ask confirm	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	12	\N	\N	\N	\N	f	[]	t	f
12991	227	12	roles	12	roles	multiselect	[]	t	f		f		f	\N	\N	framework.roles	f	f	\N	f	2019-11-05 10:00:17.290746	["id", "rolename"]	[]	\N	13	\N	\N	\N	\N	f	[]	t	f
13177	241	1	id	1	f_id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
13847	221	28	fncolumns	28	Function input parametrs	label	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-12 11:19:41.149179	[]	[]	\N	34	\N	\N	\N	\N	f	[]	f	f
12941	221	2	viewtype	\N	viewtype	label	[]	f	f	\N	f		f	framework.viewtypes	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	0	\N	\N	viewid	framework.views	t	[]	f	f
13142	239	1	id	1	key	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
12979	227	1	id	1	a_id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
16458	5542	5	login	5	login	label	[]	t	f	24	f		f	\N	\N	\N	f	f	\N	f	2019-12-09 18:09:00.445033	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
13146	239	5	column_id	5	column_id	label	[]	f	f	\N	f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
13733	239	7	type	7	type	select	[]	t	f	\N	f	\N	f	framework.columntypes	\N	\N	f	f	typename	f	2019-11-11 09:30:09.143427	["typename"]	[]	\N	8	\N	\N	\N	\N	f	[]	t	f
16153	239	28	fncolumns	28	fn_columns	label	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2019-12-05 15:54:51.85706	[]	[]	\N	30	\N	\N	\N	\N	f	[]	f	f
16466	5542	13	usersettings	13	usersettings	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-09 18:09:00.445033	[]	[]	\N	13	\N	\N	\N	\N	f	[]	f	f
13147	239	6	title	6	title	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	7	\N	\N	\N	\N	f	[]	t	f
13150	239	9	visible	9	visible	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	9	\N	\N	\N	\N	f	[]	t	f
13156	239	18	orderby	18	order by	checkbox	[]	t	f	\N	f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	11	\N	\N	\N	\N	f	[]	t	f
13155	239	14	updatable	14	updatable	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	13	\N	\N	\N	\N	f	[]	t	f
13157	239	19	orderbydesc	19	desc	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	12	\N	\N	\N	\N	f	[]	t	f
13151	239	10	required	10	required	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	10	\N	\N	\N	\N	f	[]	t	f
13153	239	12	join	12	join	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	16	\N	\N	\N	\N	f	[]	t	f
13158	239	\N	relation	\N	relation table	text	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	19	framework.fn_config_relation	[13142]		\N	t	null	t	f
13143	239	2	viewid	2	id	label	[]	f	t		f		f	framework.views	\N	\N	f	f	id	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
13149	239	8	roles	8	roles	multiselect	[]	t	f		f		f	\N	\N	framework.roles	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	18	\N	\N	\N	\N	f	[]	t	f
13751	239	23	relationcolums	23	relation columns	multiselect_api	[]	t	f	\N	f	\N	f	\N	/api/rel_tabcolumns	\N	f	f	\N	f	2019-11-11 14:49:20.081457	[]	[]	\N	20	\N	\N	\N	\N	f	[]	t	f
13160	239	28	select_condition	27	select condition	text	[]	t	f		f		f	framework.select_condition	\N	\N	f	f	\N	t	2019-11-05 10:00:17.290746	["val_desc", "operation", "value"]	[]	configid	21	\N	\N	\N	\N	f	[]	f	f
13161	239	29	visible_condition	27	visible condition	array	[]	t	f		f		f	framework.visible_condition	\N	\N	f	f	\N	t	2019-11-05 10:00:17.290746	["val_desc", "operation", "value"]	[]	configid	22	\N	\N	\N	\N	f	[]	f	f
16465	5542	12	orgs	12	orgs	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-09 18:09:00.445033	[]	[]	\N	12	\N	\N	\N	\N	f	[]	f	f
13064	30	8	viewid	9	viewid	number	[]	t	f		f	\N	f	framework.views	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	8	\N	\N	\N	\N	f	[]	t	f
12804	215	19	multitypehead_api	19	multitypehead_api	multitypehead_api	[]	t	f		f		f	\N	/api/select_api_test	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	16	\N	\N	\N	\N	f	[]	f	f
16454	5542	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-09 18:09:00.445033	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
12767	212	3	procedurename	3	function	select_api	[]	t	f		f	col-md-11	f	\N	/api/functions_getall_spapi	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
16467	5542	14	orgid	14	user org	select_api	[]	t	f	24	f		f	framework.orgs	/api/userorgss	\N	f	f	id	f	2019-12-09 18:09:00.445033	["id", "orgname"]	[]	\N	14	\N	\N	\N	\N	f	[]	f	f
16455	5542	2	fam	2	fam	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-09 18:09:00.445033	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
16457	5542	4	ot	4	ot	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-09 18:09:00.445033	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
16463	5542	10	roleid	10	roleid	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-09 18:09:00.445033	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
16462	5542	9	roles	9	roles	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-09 18:09:00.445033	[]	[]	\N	9	\N	\N	\N	\N	f	[]	f	f
16464	5542	11	photo	11	photo	image	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-09 18:09:00.445033	[]	[]	\N	11	\N	\N	\N	\N	f	[]	f	f
16456	5542	3	im	3	im	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-09 18:09:00.445033	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
12959	55	2	fam	2	LastName	label	[]	t	f		f	col-md-11 form-group row	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
12755	225	3	bool	3	Bool operator	select	[]	t	f		f		f	framework.booloper	\N	\N	f	f	bname	f	2019-11-05 10:00:17.290746	["id","bname"]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
13662	239	40	editable	34	editable cell	checkbox	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-09 09:34:37.399096	[]	[]	\N	15	\N	\N	\N	\N	f	[]	t	f
12975	226	3	bool	3	Bool operator	select	[]	t	f		f		f	framework.booloper	\N	\N	f	f	bname	f	2019-11-05 10:00:17.290746	["bname"]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
16656	55	16	thumbprint	17	Certificate	certificate	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2019-12-11 11:15:13.088394	[]	[]	\N	16	\N	\N	\N	\N	f	[]	f	f
13066	30	10	orderby	11	orderby	number	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	10	\N	\N	\N	\N	f	[]	t	f
19355	119	2	title	2	Title	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:56:44.415375	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
19398	119	15	functitle	7	Function	select_api	[]	t	f		f	col-md-12	f	\N	/api/getreports_fn	\N	f	f	\N	f	2019-12-25 11:04:47.818399	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
19356	119	3	roles	3	Roles	multiselect	[]	t	f		f		f	\N	\N	framework.roles	f	f	\N	f	2019-12-25 10:56:44.415375	["id", "rolename"]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
19357	119	4	path	4	Path	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:56:44.415375	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
19358	119	5	template	5	Template	file	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:56:44.415375	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
19362	119	9	section	9	Section	autocomplete	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:56:44.415375	[]	[]	\N	9	\N	\N	\N	\N	f	[]	f	f
19377	121	3	ptitle	3	Title	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:57:10.533471	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
19378	121	4	func_paramtitle	4	Function parametr	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:57:10.533471	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
19423	121	17	orderby	9	Order By	number	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 11:04:47.818399	[]	[]	\N	8	\N	\N	\N	\N	f	[]	f	f
12789	215	1	id	1	id	label	[]	t	f	6	f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
12820	215	32	link	16	link sdkfjkqjkefmrfkefkdsfk dfkjsdkfj knksdj fksak jdk234 2jkk23 rk2j k32j k23j jk jr 	link	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	32	\N	\N	\N	\N	f	[]	f	f
19343	118	2	title	2	Title	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:56:42.165857	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
12791	215	15	number	15	number title	number	[]	t	f	6	f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
19345	118	4	path	4	Path	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:56:42.165857	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
19388	118	17	filename	13	File name	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 11:04:47.818399	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
19346	118	5	template	5	Template name	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:56:42.165857	[]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
19342	118	1	id	1	id	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:56:42.165857	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
19374	120	9	orderby	9	Order By	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:56:45.989848	[]	[]	\N	9	\N	\N	\N	\N	f	[]	f	f
19370	120	5	ptype	5	Param Type	label	[]	f	f		f		f	reports.paramtypes	\N	\N	f	f	id	f	2019-12-25 10:56:45.989848	["typename"]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
19348	118	7	functitle	7	Function name	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:56:42.165857	[]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
19426	120	18	colorr	\N	colorr	colorrow	[]	f	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2019-12-25 11:15:57.01164	[]	[]	\N	10	public.fn_completed_colorblack	[19373]	\N	\N	f	[]	f	f
19350	118	9	section	9	Section	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:56:42.165857	[]	[]	\N	9	\N	\N	\N	\N	f	[]	f	f
19364	119	11	filename	11	filename	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:56:44.415375	[]	[]	\N	11	\N	\N	\N	\N	f	[]	f	f
19382	121	8	completed	8	completed	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:57:10.533471	[]	[]	\N	8	\N	\N	\N	\N	f	[]	f	f
19369	120	4	func_paramtitle	4	Function Param	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:56:45.989848	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
19368	120	3	ptitle	3	Title	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:56:45.989848	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
19353	118	12	reportparams	12	reportparams	array	[]	f	f		f		f	reports.reportparams	\N	\N	f	f	\N	t	2019-12-25 10:56:42.165857	[]	[]	reportlistid	12	\N	\N	\N	\N	f	[]	f	f
19365	119	12	reportparams	12	reportparams	array	[]	f	f		f		f	reports.reportparams	\N	\N	f	f	\N	t	2019-12-25 10:56:44.415375	[]	[]	reportlistid	12	\N	\N	\N	\N	f	[]	f	f
19363	119	10	completed	10	completed	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:56:44.415375	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
19354	119	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:56:44.415375	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
19373	120	8	completed	8	completed	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:56:45.989848	[]	[]	\N	8	\N	\N	\N	\N	f	[]	f	f
19371	120	6	created	6	created	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:56:45.989848	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
19367	120	2	reportlistid	2	reportlistid	label	[]	f	f		f		f	reports.reportlist	\N	\N	f	f	id	f	2019-12-25 10:56:45.989848	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
19366	120	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:56:45.989848	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
19376	121	2	reportlistid	2	reportlistid	label	[]	f	f		f		f	reports.reportlist	\N	\N	f	f	id	f	2019-12-25 10:57:10.533471	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
19375	121	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:57:10.533471	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
19352	118	11	filename	11	filename	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:56:42.165857	[]	[]	\N	11	\N	\N	\N	\N	f	[]	f	f
19351	118	10	completed	10	completed	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:56:42.165857	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
19349	118	8	created	8	created	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:56:42.165857	[]	[]	\N	8	\N	\N	\N	\N	f	[]	f	f
19347	118	6	template_path	6	template_path	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 10:56:42.165857	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
19396	119	13	id	1	reportlistid	number	[]	f	f		f	col-md-12	f	\N	\N	\N	f	f	\N	f	2019-12-25 11:04:47.818399	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
19406	120	10	id	1	param_id	number	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 11:04:47.818399	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
19416	121	10	id	1	paramid	number	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 11:04:47.818399	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
19421	121	15	created	7	created	date	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2019-12-25 11:04:47.818399	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
19427	120	5	typename	\N	Type	label	[]	t	f	\N	f		f	\N	\N	\N	f	f	id	f	2019-12-25 11:24:06.247663	[]	[]	\N	5	\N	\N	ptype	reports.paramtypes	t	[]	f	f
32354	119	16	ishtml	12	Out in html	checkbox	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2020-03-17 06:07:34.112362	[]	[]	\N	13	\N	\N	\N	\N	f	[]	f	f
19379	121	5	ptype	5	Type	select	[]	t	f		f		f	reports.paramtypes	\N	\N	f	f	id	f	2019-12-25 10:57:10.533471	["id", "typename"]	[]	\N	5	\N	\N	\N	\N	f	[]	f	f
19381	121	7	apimethod	7	Method	typehead	[]	t	f		f		f	framework.spapi	\N	\N	f	f	id	f	2019-12-25 10:57:10.533471	["id", "methodname", "procedurename"]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
32438	120	19	Метод API	\N	API	label	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2020-03-18 03:06:22.700614	[]	[]	\N	7	concat	["32437", "32436"]	\N	\N	f	[]	f	f
13074	32	23	viewid	9	viewid	typehead	[]	t	f		f	col-md-12	f	framework.views	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	["id","title","path"]	[]	\N	8	\N	\N	\N	\N	f	[]	f	f
12885	220	8	multiselect	8	multiselect	multiselect	[]	t	f		f		f	\N	\N	test.dictionary_for_select	f	f	\N	f	2019-11-05 10:00:17.290746	[]	["dname"]	\N	8	\N	\N	\N	\N	f	[]	t	f
12712	44	6	foruser	6	foruser	number	[]	f	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	6	\N	\N	\N	\N	f	[]	f	f
13154	239	13	classname	13	classname	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	14	\N	\N	\N	\N	f	[]	t	f
13241	239	27	fn	27	fn	select_api	[]	t	f	50px	f	break_word	f	\N	/api/getfunctions	\N	f	f	\N	f	2019-11-05 14:31:51.940762	[]	[]	\N	1	\N	\N	\N	\N	f	[]	t	f
13141	239	26	column_order	26	column order	number	[]	t	f	80px	f	\N	f	\N	\N	\N	t	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	0	\N	\N	\N	\N	f	[]	t	f
13123	237	8	path	8	path	link	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
32437	120	7	procedurename	\N	procedurename	label	[]	f	f	\N	f		f	\N	\N	\N	f	f	id	f	2020-03-18 03:05:28.411065	[]	[]	\N	11	\N	\N	apimethod	framework.spapi	t	[]	f	f
32436	120	7	methodname	\N	methodname	label	[]	t	f	\N	f		f	\N	\N	\N	f	f	id	f	2020-03-18 03:04:18.994558	[]	[]	\N	7	\N	\N	apimethod	framework.spapi	t	[]	f	f
19372	120	7	apimethod	7	apimethod	label	[]	f	f		f		f	framework.spapi	\N	\N	f	f	id	f	2019-12-25 10:56:45.989848	["methodname", "procedurename"]	[]	\N	7	\N	\N	\N	\N	f	[]	f	f
32523	6424	9	id	9	id	label	[]	f	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2020-03-18 11:47:27.067402	[]	[]	\N	81	\N	\N	\N	\N	f	[]	f	f
32497	6424	7	isactiv	7	isactiv	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-03-18 11:03:14.765649	[]	[]	\N	70	\N	\N	\N	\N	f	[]	f	f
32496	6424	6	redirect401	6	redirect when status 401	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-03-18 11:03:14.765649	[]	[]	\N	60	\N	\N	\N	\N	f	[]	f	f
32495	6424	5	primaryAuthorization	5	primary authorization	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-03-18 11:03:14.765649	[]	[]	\N	50	\N	\N	\N	\N	f	[]	f	f
32494	6424	4	maindomain	4	main domain	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-03-18 11:03:14.765649	[]	[]	\N	40	\N	\N	\N	\N	f	[]	f	f
32493	6424	3	developerRole	3	developer role id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-03-18 11:03:14.765649	[]	[]	\N	30	\N	\N	\N	\N	f	[]	f	f
32492	6424	2	port	2	project server port	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-03-18 11:03:14.765649	[]	[]	\N	20	\N	\N	\N	\N	f	[]	f	f
32491	6424	1	dsn	1	db connection string	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-03-18 11:03:14.765649	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
32498	6424	8	usercss	8	css file	codeEditor	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2020-03-18 11:03:14.765649	[]	[]	\N	80	\N	\N	\N	\N	f	[]	f	f
32603	243	12	orderby	12	orderby	number	[]	t	f	\N	f	\N	f	\N	\N	\N	t	f	\N	f	2020-03-19 08:09:28.571976	[]	[]	\N	11	\N	\N	\N	\N	f	[]	t	f
12881	220	4	check	4	check	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	t	f
13126	238	4	tablename	4	table name	select_api	[]	t	f		f	\N	f	\N	/api/gettables	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	2	\N	\N	\N	\N	f	[]	f	f
13128	238	2	title	2	title	text	[]	t	f		f	\N	f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	4	\N	\N	\N	\N	f	[]	f	f
13117	237	1	id	1	id	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	1	\N	\N	\N	\N	f	[]	f	f
33336	237	9	created	9	created_8	label	[]	f	f	\N	f	\N	f	\N	\N	\N	t	t	\N	f	2020-03-23 03:39:48.434754	[]	[]	\N	9	\N	\N	\N	\N	f	[]	f	f
33582	220	32	text	2	text_35	label	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2020-03-25 08:56:48.322494	[]	[]	\N	34	\N	\N	\N	\N	f	[]	f	f
33583	220	33	text	2	text_36	label	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2020-03-25 08:57:46.025617	[]	[]	\N	35	\N	\N	\N	\N	f	[]	f	f
601862	218	32	rate	31	rate	rate	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2020-05-06 20:35:47.50216	[]	[]	\N	32	\N	\N	\N	\N	f	[]	f	f
32490	215	35	texteditor	17	texteditor_34	codeEditor	[]	f	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2020-03-18 10:24:26.490987	[]	[]	\N	35	\N	\N	\N	\N	f	[]	f	f
601861	215	36	rate	31	rate	rate	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2020-05-06 20:33:35.54051	[]	[]	\N	36	\N	\N	\N	\N	f	[]	f	f
13181	241	4	type	4	type	select	[]	t	f		f		f	framework.filtertypes	\N	\N	f	f	ftname	f	2019-11-05 10:00:17.290746	["ftname"]	[]	\N	5	\N	\N	\N	\N	f	[]	t	f
601863	241	4	ftname	\N	ftname	label	[]	f	f	\N	f		f	\N	\N	\N	f	f	ftname	f	2020-05-06 22:14:58.609463	[]	[]	\N	11	\N	\N	type	framework.filtertypes	t	[]	f	f
601865	241	13	title	\N	title_13789	label	[]	f	f	\N	f		f	\N	\N	\N	f	f	id	f	2020-05-06 22:15:40.056	[]	[]	\N	13	\N	\N	val_desc	framework.config	t	[]	f	f
601864	241	13	id	\N	id_13789	label	[]	f	f	\N	f		f	\N	\N	\N	f	f	id	f	2020-05-06 22:15:32.776994	[]	[]	\N	12	\N	\N	val_desc	framework.config	t	[]	f	f
601869	50785	3	schemadescr	3	schemadescr	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-11 16:45:27.915281	[]	[]	\N	30	\N	\N	\N	\N	f	[]	t	f
601874	50786	3	linkurl	3	linkurl	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-11 16:53:08.044615	[]	[]	\N	30	\N	\N	\N	\N	f	[]	f	f
601872	50786	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	t	f	\N	f	2020-05-11 16:53:08.044615	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
601873	50786	2	oname	2	 	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-11 16:53:08.044615	[]	[]	\N	20	\N	\N	\N	\N	f	[]	f	f
601875	50786	4	schemaname	4	schemaname	label	[]	f	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2020-05-11 17:36:42.392127	[]	[]	\N	31	\N	\N	\N	\N	f	[]	f	f
601876	50788	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-11 18:07:01.30863	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
601884	50789	2	functionschema	2	functionschema	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-11 18:46:40.658036	[]	[]	\N	20	\N	\N	\N	\N	f	[]	f	f
601883	50789	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-11 18:46:40.658036	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
601867	50785	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-11 16:45:27.915281	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
601868	50785	2	schemaname	2	schemaname	text	[]	t	f		f		f	\N	\N	\N	t	f	\N	f	2020-05-11 16:45:27.915281	[]	[]	\N	20	\N	\N	\N	\N	f	[]	t	f
601877	50788	2	tableschemaname	2	tableschemaname	label	[]	f	f		f		f	\N	\N	\N	t	f	\N	f	2020-05-11 18:07:01.30863	[]	[]	\N	20	\N	\N	\N	\N	f	[]	f	f
601879	50788	4	fullname	4	fullname	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-11 18:07:01.30863	[]	[]	\N	40	\N	\N	\N	\N	f	[]	f	f
601903	50791	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-13 17:58:34.996501	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
601878	50788	3	tablename	3	tablename	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-11 18:07:01.30863	[]	[]	\N	30	\N	\N	\N	\N	f	[]	t	f
601904	50791	2	tablename	2	tablename	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-13 17:58:34.996501	[]	[]	\N	20	\N	\N	\N	\N	f	[]	f	f
601880	50788	5	descr	5	descr	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-11 18:07:01.30863	[]	[]	\N	50	\N	\N	\N	\N	f	[]	t	f
601890	50790	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-13 09:32:22.479359	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
601902	50790	13	noscript	13	noscript	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-13 09:32:22.479359	[]	[]	\N	130	\N	\N	\N	\N	f	[]	f	f
601905	50791	3	colname	3	Field Name	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-13 17:58:34.996501	[]	[]	\N	30	\N	\N	\N	\N	f	[]	f	f
601912	50791	10	defval	10	Default	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-13 17:58:34.996501	[]	[]	\N	100	\N	\N	\N	\N	f	[]	f	f
601892	50790	3	colname	3	Field  Name	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-13 09:32:22.479359	[]	[]	\N	30	\N	\N	\N	\N	f	[]	t	f
601917	50792	2	schemaname	2	Schema Name	text	[]	t	f	24	f		f	\N	\N	\N	f	f	\N	f	2020-05-13 18:38:40.005858	[]	[]	\N	20	\N	\N	\N	\N	f	[]	f	f
601918	50792	3	schemadescr	3	Description	textarea	[]	t	f	24	f		f	\N	\N	\N	f	f	\N	f	2020-05-13 18:38:40.005858	[]	[]	\N	30	\N	\N	\N	\N	f	[]	f	f
601907	50791	5	coltype	5	Field Type	select_api	[]	t	f		f		f	\N	/api/types_sel	\N	f	f	\N	f	2020-05-13 17:58:34.996501	[]	[]	\N	50	\N	\N	\N	\N	f	[]	f	f
601891	50790	2	tablename	2	tablename	text	[]	f	t		f		f	\N	\N	\N	f	f	\N	f	2020-05-13 09:32:22.479359	[]	[]	\N	20	\N	\N	\N	\N	f	[]	f	f
601911	50791	9	uniq	9	uniq	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-13 17:58:34.996501	[]	[]	\N	90	\N	\N	\N	\N	f	[]	f	f
601910	50791	8	notnull	8	Not Null	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-13 17:58:34.996501	[]	[]	\N	80	\N	\N	\N	\N	f	[]	f	f
601909	50791	7	accur	7	Accur	number	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-13 17:58:34.996501	[]	[]	\N	70	\N	\N	\N	\N	f	[]	f	f
601908	50791	6	size	6	Size	number	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-13 17:58:34.996501	[]	[]	\N	60	\N	\N	\N	\N	f	[]	f	f
601894	50790	5	coltype	5	Field Type	select_api	[]	t	f		f		f	\N	/api/types_sel	\N	f	f	\N	f	2020-05-13 09:32:22.479359	[]	[]	\N	50	\N	\N	\N	\N	f	[]	t	f
601893	50790	4	coldesc	4	Description	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-13 09:32:22.479359	[]	[]	\N	40	\N	\N	\N	\N	f	[]	t	f
601895	50790	6	size	6	Size	number	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-13 09:32:22.479359	[]	[]	\N	60	\N	\N	\N	\N	f	[]	t	f
601896	50790	7	accur	7	Accur	number	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-13 09:32:22.479359	[]	[]	\N	70	\N	\N	\N	\N	f	[]	t	f
601897	50790	8	notnull	8	Not Null	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-13 09:32:22.479359	[]	[]	\N	80	\N	\N	\N	\N	f	[]	t	f
601898	50790	9	uniq	9	Uniq	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-13 09:32:22.479359	[]	[]	\N	90	\N	\N	\N	\N	f	[]	t	f
601899	50790	10	defval	10	Default	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-13 09:32:22.479359	[]	[]	\N	100	\N	\N	\N	\N	f	[]	t	f
601906	50791	4	coldesc	4	Description	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-13 17:58:34.996501	[]	[]	\N	40	\N	\N	\N	\N	f	[]	f	f
601916	50792	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-13 18:38:40.005858	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
601930	50793	4	fullname	4	fullname	label	[]	f	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2020-05-14 10:32:19.679899	[]	[]	\N	81	\N	\N	\N	\N	f	[]	f	f
601922	50793	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-14 09:50:06.44016	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
601923	50793	2	tableschemaname	2	tableschemaname	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-14 09:50:06.44016	[]	[]	\N	20	\N	\N	\N	\N	f	[]	f	f
601929	50793	8	noscript	8	noscript	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-14 09:50:06.44016	[]	[]	\N	80	\N	\N	\N	\N	f	[]	f	f
601924	50793	3	tablename	3	Table name	text	[]	t	f	24	f		f	\N	\N	\N	f	f	\N	f	2020-05-14 09:50:06.44016	[]	[]	\N	30	\N	\N	\N	\N	f	[]	f	f
601931	50789	9	functionfulltitle	9	title	label	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2020-05-14 12:10:53.300908	[]	[]	\N	45	\N	\N	\N	\N	f	[]	f	f
601926	50793	5	descr	5	Description	textarea	[]	t	f	24	f		f	\N	\N	\N	f	f	\N	f	2020-05-14 09:50:06.44016	[]	[]	\N	50	\N	\N	\N	\N	f	[]	f	f
601886	50789	4	fullname	4	fullname	label	[]	f	f		f		f	\N	\N	\N	t	f	\N	f	2020-05-11 18:46:40.658036	[]	[]	\N	40	\N	\N	\N	\N	f	[]	f	f
601885	50789	3	functiontitle	3	functiontitle	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-11 18:46:40.658036	[]	[]	\N	30	\N	\N	\N	\N	f	[]	f	f
601932	50794	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-14 13:19:40.032952	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
601934	50794	3	functiontitle	3	functiontitle	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-14 13:19:40.032952	[]	[]	\N	30	\N	\N	\N	\N	f	[]	f	f
601933	50794	2	functionschema	2	functionschema	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-14 13:19:40.032952	[]	[]	\N	20	\N	\N	\N	\N	f	[]	f	f
601935	50794	4	fullname	4	fullname	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-14 13:19:40.032952	[]	[]	\N	40	\N	\N	\N	\N	f	[]	f	f
601936	50794	5	descr	5	descr	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-14 13:19:40.032952	[]	[]	\N	50	\N	\N	\N	\N	f	[]	f	f
601940	50794	9	functionfulltitle	9	functionfulltitle	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-14 13:19:40.032952	[]	[]	\N	90	\N	\N	\N	\N	f	[]	f	f
601887	50789	5	descr	5	descr	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-11 18:46:40.658036	[]	[]	\N	50	\N	\N	\N	\N	f	[]	t	f
601941	50794	10	dll	10	DLL	codeEditor	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-14 13:19:40.032952	[]	[]	\N	100	\N	\N	\N	\N	f	[]	f	f
601944	50796	2	functionschema	2	schema	select_api	[]	t	f	12	f		f	\N	/api/schemas_sel	\N	f	f	\N	f	2020-05-14 17:00:53.37245	[]	[]	\N	20	\N	\N	\N	\N	f	[]	f	f
601947	50796	5	descr	5	descr	textarea	[]	f	f	24	f		f	\N	\N	\N	f	f	\N	f	2020-05-14 17:00:53.37245	[]	[]	\N	50	\N	\N	\N	\N	f	[]	f	f
601946	50796	4	fullname	4	fullname	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-14 17:00:53.37245	[]	[]	\N	40	\N	\N	\N	\N	f	[]	f	f
601945	50796	3	functiontitle	3	title	text	[]	t	f	12	f		f	\N	\N	\N	f	f	\N	f	2020-05-14 17:00:53.37245	[]	[]	\N	30	\N	\N	\N	\N	f	[]	f	f
601943	50796	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-14 17:00:53.37245	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
601957	50797	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-15 10:15:56.440015	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
601956	50797	4	fullname	4	fullname	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-15 10:15:56.440015	[]	[]	\N	40	\N	\N	\N	\N	f	[]	f	f
601955	50797	5	descr	5	descr	textarea	[]	f	f	24	f		f	\N	\N	\N	f	f	\N	f	2020-05-15 10:15:56.440015	[]	[]	\N	50	\N	\N	\N	\N	f	[]	f	f
601958	50797	12	returntype	13	Return	select_api	[]	t	f	24	f	\N	f	\N	/api/types_sel	\N	f	f	\N	f	2020-05-15 10:35:58.563052	[]	[]	\N	51	\N	\N	\N	\N	f	[]	f	f
601953	50797	3	functiontitle	3	Title	text	[]	t	f	12	f		f	\N	\N	\N	f	f	\N	f	2020-05-15 10:15:56.440015	[]	[]	\N	30	\N	\N	\N	\N	f	[]	f	f
601954	50797	2	functionschema	2	Schema	select_api	[]	t	f	12	f		f	\N	/api/schemas_sel	\N	f	f	\N	f	2020-05-15 10:15:56.440015	[]	[]	\N	20	\N	\N	\N	\N	f	[]	f	f
601961	50798	3	argname	3	Name	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-15 10:41:27.990213	[]	[]	\N	30	\N	\N	\N	\N	f	[]	t	f
601967	50799	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-15 17:03:32.139491	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
601968	50799	2	triggername	2	Name	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-15 17:03:32.139491	[]	[]	\N	20	\N	\N	\N	\N	f	[]	t	f
601972	50799	6	functionname	7	Function	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-15 17:03:32.139491	[]	[]	\N	60	\N	\N	\N	\N	f	[]	f	f
601962	50798	4	argtype	4	Type	select_api	[]	t	f		f		f	\N	/api/types_sel	\N	f	f	\N	f	2020-05-15 10:41:27.990213	[]	[]	\N	40	\N	\N	\N	\N	f	[]	t	f
601973	50799	7	functionoid	8	functionoid	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-15 17:03:32.139491	[]	[]	\N	70	\N	\N	\N	\N	f	[]	f	f
601959	50798	1	id	1	aid	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-15 10:41:27.990213	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
601960	50798	2	oid	2	id	label	[]	f	t		f		f	\N	\N	\N	f	f	\N	f	2020-05-15 10:41:27.990213	[]	[]	\N	20	\N	\N	\N	\N	f	[]	f	f
601963	50798	5	argmode	5	Mode	select_api	[]	t	f		f		f	\N	/api/modes_sel	\N	t	f	\N	f	2020-05-15 10:41:27.990213	[]	[]	\N	50	\N	\N	\N	\N	f	[]	t	f
601966	50797	13	definition	14	Definition	codeEditor	[]	t	f	24	f	\N	t	\N	\N	\N	f	f	\N	f	2020-05-15 11:16:42.567809	[]	[]	\N	52	\N	\N	\N	\N	f	[]	f	f
601977	50799	11	oninstead	12	Instead	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-15 17:03:32.139491	[]	[]	\N	110	\N	\N	\N	\N	f	[]	f	f
601974	50799	8	enables	9	Enable	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-15 17:03:32.139491	[]	[]	\N	80	\N	\N	\N	\N	f	[]	t	f
601975	50799	9	onbefore	10	Before	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-15 17:03:32.139491	[]	[]	\N	90	\N	\N	\N	\N	f	[]	t	f
601976	50799	10	onafter	11	After	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-15 17:03:32.139491	[]	[]	\N	100	\N	\N	\N	\N	f	[]	t	f
601978	50799	12	oninsert	13	Insert	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-15 17:03:32.139491	[]	[]	\N	120	\N	\N	\N	\N	f	[]	t	f
601979	50799	13	onupdate	14	Update	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-15 17:03:32.139491	[]	[]	\N	130	\N	\N	\N	\N	f	[]	t	f
601980	50799	14	ondelete	15	Delete	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-15 17:03:32.139491	[]	[]	\N	140	\N	\N	\N	\N	f	[]	t	f
601981	50799	15	ontruncate	16	Truncate	checkbox	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-15 17:03:32.139491	[]	[]	\N	150	\N	\N	\N	\N	f	[]	t	f
601982	50800	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-18 11:44:13.185014	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
601984	50800	3	tablename	4	tablename	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-18 11:44:13.185014	[]	[]	\N	30	\N	\N	\N	\N	f	[]	f	f
601997	50800	16	noscript	17	noscript	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-18 11:44:13.185014	[]	[]	\N	160	\N	\N	\N	\N	f	[]	f	f
601983	50800	2	triggername	2	Name	text	[]	t	f	24	f		f	\N	\N	\N	f	f	\N	f	2020-05-18 11:44:13.185014	[]	[]	\N	20	\N	\N	\N	\N	f	[]	f	f
601993	50800	12	oninsert	13	On Insert	checkbox	[]	t	f	2	f		f	\N	\N	\N	f	f	\N	f	2020-05-18 11:44:13.185014	[]	[]	\N	120	\N	\N	\N	\N	f	[]	f	f
601994	50800	13	onupdate	14	On Update	checkbox	[]	t	f	2	f		f	\N	\N	\N	f	f	\N	f	2020-05-18 11:44:13.185014	[]	[]	\N	130	\N	\N	\N	\N	f	[]	f	f
601995	50800	14	ondelete	15	On Delete	checkbox	[]	t	f	2	f		f	\N	\N	\N	f	f	\N	f	2020-05-18 11:44:13.185014	[]	[]	\N	140	\N	\N	\N	\N	f	[]	f	f
601996	50800	15	ontruncate	16	On Truncate	checkbox	[]	t	f	2	f		f	\N	\N	\N	f	f	\N	f	2020-05-18 11:44:13.185014	[]	[]	\N	150	\N	\N	\N	\N	f	[]	f	f
601990	50800	9	onbefore	10	Before	checkbox	[]	t	f	24	f		f	\N	\N	\N	f	f	\N	f	2020-05-18 11:44:13.185014	[]	[]	\N	90	\N	\N	\N	\N	f	[]	f	f
601991	50800	10	onafter	11	After	checkbox	[]	t	f	24	f		f	\N	\N	\N	f	f	\N	f	2020-05-18 11:44:13.185014	[]	[]	\N	100	\N	\N	\N	\N	f	[]	f	f
601998	50801	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-18 14:11:08.704342	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
602014	50801	17	functiondef	18	Definition	codeEditor	[]	t	f	24	f		f	\N	\N	\N	f	f	\N	f	2020-05-18 14:11:08.704342	[]	[]	\N	170	\N	\N	\N	\N	f	[]	f	f
602000	50801	3	tablename	4	Table	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-18 14:11:08.704342	[]	[]	\N	15	\N	\N	\N	\N	f	[]	f	f
601999	50801	2	triggername	2	Trigger Name	label	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-18 14:11:08.704342	[]	[]	\N	20	\N	\N	\N	\N	f	[]	f	f
602003	50801	6	functionname	7	Function	label	[]	t	f	24	f		f	\N	\N	\N	f	f	\N	f	2020-05-18 14:11:08.704342	[]	[]	\N	60	\N	\N	\N	\N	f	[]	f	f
602015	50802	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-18 16:10:55.732921	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
602018	50802	4	maintableid	4	maintableid	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-18 16:10:55.732921	[]	[]	\N	40	\N	\N	\N	\N	f	[]	f	f
602020	50802	6	parenttableid	6	parenttableid	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-18 16:10:55.732921	[]	[]	\N	60	\N	\N	\N	\N	f	[]	f	f
602030	50803	5	parentablename	5	Foreign Table	select_api	[]	t	f		f		f	\N	/api/fk_tables_sel	\N	f	f	\N	f	2020-05-18 17:26:37.113545	[]	[]	\N	50	\N	\N	\N	\N	f	[]	f	f
602033	50803	8	parentcol	8	Foreign Field	select_api	[]	t	f		f		f	\N	/api/fk_parentcols_sel	\N	f	f	\N	f	2020-05-18 17:26:37.113545	[]	[]	\N	80	\N	\N	\N	\N	f	[]	f	f
602016	50802	2	ftitle	2	Foreign Key Name	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-18 16:10:55.732921	[]	[]	\N	20	\N	\N	\N	\N	f	[]	t	f
602017	50802	3	maintablename	3	tablename	label	[]	f	t		f		f	\N	\N	\N	f	f	\N	f	2020-05-18 16:10:55.732921	[]	[]	\N	30	\N	\N	\N	\N	f	[]	f	f
602021	50802	7	maincol	7	On Field	select_api	[]	t	f		f		f	\N	/api/fk_maintablecols_select	\N	f	f	\N	f	2020-05-18 16:10:55.732921	[]	[]	\N	23	\N	\N	\N	\N	f	[]	t	f
602026	50803	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-18 17:26:37.113545	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
602031	50803	6	parenttableid	6	parenttableid	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-18 17:26:37.113545	[]	[]	\N	60	\N	\N	\N	\N	f	[]	f	f
602019	50802	5	parentablename	5	FK Table	select_api	[]	t	f		f		f	\N	/api/fk_tables_sel	\N	f	f	\N	f	2020-05-18 16:10:55.732921	[]	[]	\N	33	\N	\N	\N	\N	f	[]	t	f
602027	50803	2	ftitle	2	FK Name	text	[]	t	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-18 17:26:37.113545	[]	[]	\N	20	\N	\N	\N	\N	f	[]	f	f
602022	50802	8	parentcol	8	FK Field	select_api	[]	t	f		f		f	\N	/api/fk_parentcols_sel	\N	f	f	\N	f	2020-05-18 16:10:55.732921	[]	[]	\N	35	\N	\N	\N	\N	f	[]	t	f
602032	50803	7	maincol	7	Main Field	select_api	[]	t	f		f		f	\N	/api/fk_maintablecols_select	\N	f	f	\N	f	2020-05-18 17:26:37.113545	[]	[]	\N	30	\N	\N	\N	\N	f	[]	f	f
602038	50804	1	id	1	id	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-21 14:00:19.69668	[]	[]	\N	10	\N	\N	\N	\N	f	[]	f	f
601969	50799	3	tablename	4	tablename	label	[]	t	t		f		f	\N	\N	\N	f	f	\N	f	2020-05-15 17:03:32.139491	[]	[]	\N	30	\N	\N	\N	\N	f	[]	f	f
602040	50804	3	tablename	3	Table	label	[]	f	f		f		f	\N	\N	\N	f	f	\N	f	2020-05-21 14:00:19.69668	[]	[]	\N	30	\N	\N	\N	\N	f	[]	f	f
602056	50799	18	fields	18	Fields	multiselect_api	[]	t	f	\N	f	\N	f	\N	/api/trigger_fields	\N	f	f	\N	f	2020-05-21 14:11:42.745277	[]	[]	\N	151	\N	\N	\N	\N	f	[]	t	f
13080	101	3	title	3	title	text	[]	t	f	30%	f	col-md-11	t	\N	\N	\N	f	f	\N	f	2019-11-05 10:00:17.290746	[]	[]	\N	3	\N	\N	\N	\N	f	[]	f	f
602055	50804	18	fields	18	Fields	multiselect_api	[]	t	f		f		t	\N	/api/trigger_fields	\N	f	f	\N	f	2020-05-21 14:00:19.69668	[]	[]	\N	180	\N	\N	\N	\N	f	[]	f	f
602057	50783	13	ischat	13	ischat	checkbox	[]	t	f	\N	f	\N	f	\N	\N	\N	f	f	\N	f	2020-05-21 16:28:46.985152	[]	[]	\N	92	\N	\N	\N	\N	f	[]	f	f
\.


--
-- TOC entry 3717 (class 0 OID 0)
-- Dependencies: 211
-- Name: config_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('config_id_seq', 602057, true);


--
-- TOC entry 3223 (class 0 OID 227609)
-- Dependencies: 212
-- Data for Name: configsettings; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY configsettings (id, sname) FROM stdin;
1	types
2	roles
3	visible
4	default value
5	width
6	visible condition
7	select condition
8	join
9	updatable
10	class name
\.


--
-- TOC entry 3718 (class 0 OID 0)
-- Dependencies: 213
-- Name: configsettings_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('configsettings_id_seq', 10, true);


--
-- TOC entry 3225 (class 0 OID 227614)
-- Dependencies: 214
-- Data for Name: defaultval; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY defaultval (id, configid, bool, act, value, created) FROM stdin;
86	12712	and	=	_userid_	2019-11-05 10:00:17.290746
87	12878	and	>	0	2019-11-05 10:00:17.290746
88	12970	and	=	_orgid_	2019-11-05 10:00:17.290746
89	13031	and	=	0	2019-11-05 10:00:17.290746
90	13040	and	=	0	2019-11-05 10:00:17.290746
131	16454	and	=	_userid_	2019-12-09 18:27:06.480899
337	32497	and	=	true	2020-03-18 12:02:01.783885
725	601849	and	=	true	2020-04-04 21:07:39.15532
726	601856	and	=	_userid_	2020-04-04 22:01:15.864934
\.


--
-- TOC entry 3719 (class 0 OID 0)
-- Dependencies: 215
-- Name: defaultval_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('defaultval_id_seq', 726, true);


--
-- TOC entry 3227 (class 0 OID 227620)
-- Dependencies: 216
-- Data for Name: dialog_messages; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY dialog_messages (id, userid, message_text, reply_to, forwarded_from, dialog_id, files, images, created, isread, isupdated, user_reads) FROM stdin;
\.


--
-- TOC entry 3720 (class 0 OID 0)
-- Dependencies: 217
-- Name: dialog_messages_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('dialog_messages_id_seq', 1, false);


--
-- TOC entry 3229 (class 0 OID 227634)
-- Dependencies: 218
-- Data for Name: dialog_notifications; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY dialog_notifications (id, dialog_id, sender_userid, userid, message_text, created, issend, message_id, isread) FROM stdin;
\.


--
-- TOC entry 3721 (class 0 OID 0)
-- Dependencies: 219
-- Name: dialog_notifications_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('dialog_notifications_id_seq', 1, false);


--
-- TOC entry 3231 (class 0 OID 227645)
-- Dependencies: 220
-- Data for Name: dialog_statuses; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY dialog_statuses (id, sname) FROM stdin;
\.


--
-- TOC entry 3722 (class 0 OID 0)
-- Dependencies: 221
-- Name: dialog_statuses_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('dialog_statuses_id_seq', 1, false);


--
-- TOC entry 3233 (class 0 OID 227650)
-- Dependencies: 222
-- Data for Name: dialog_types; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY dialog_types (id, tname) FROM stdin;
\.


--
-- TOC entry 3234 (class 0 OID 227653)
-- Dependencies: 223
-- Data for Name: dialogs; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY dialogs (id, title, users, dtype, userid, created, status, first_message, last_message_date, photo, dialog_admins, creator) FROM stdin;
\.


--
-- TOC entry 3723 (class 0 OID 0)
-- Dependencies: 224
-- Name: dialogs_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('dialogs_id_seq', 1, false);


--
-- TOC entry 3724 (class 0 OID 0)
-- Dependencies: 225
-- Name: dialogs_status_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('dialogs_status_seq', 1, false);


--
-- TOC entry 3237 (class 0 OID 227671)
-- Dependencies: 226
-- Data for Name: filters; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY filters (id, column_order, viewid, title, type, classname, "column", columns, roles, t, "table", created, val_desc) FROM stdin;
132	1	214	found	typehead	\N	\N	["path","title"]	[0]	\N	{}	2019-11-05 10:00:17.290746	\N
137	1	217	found	typehead	form-control	\N	["methodname","procedure name"]	[]	\N	{}	2019-11-05 10:00:17.290746	\N
139	2	219	TYPEHEAD TEXT NUMBER COLOR	typehead		\N	["text","number","color"]	[]	\N	{}	2019-11-05 10:00:17.290746	\N
146	2	220	TYPEHEAD TEXT NUMBER COLOR	typehead		\N	["text","number","color"]	[]	\N	{}	2019-11-05 10:00:17.290746	\N
152	1	26	found	typehead	\N	\N	["title","url","descr"]	[]	\N	{}	2019-11-05 10:00:17.290746	\N
154	2	234	search	typehead		\N	["title","path"]	[]	\N	{}	2019-11-05 10:00:17.290746	\N
159	1	239	seach	typehead	\N	\N	["column title","title"]	[]	\N	{}	2019-11-05 10:00:17.290746	\N
133	1	216	table name	substr	\N	tablename	[]	[]	1	null	2019-11-05 10:00:17.290746	12823
309	1	241	untitled_309	substr	\N	\N	[]	[]	1	{}	2020-03-11 17:42:20.599337	\N
130	1	44	sended	check	\N	issend	[]	[]	1	null	2019-11-05 10:00:17.290746	12713
131	2	44	readed	check	\N	isread	[]	[]	1	null	2019-11-05 10:00:17.290746	12714
134	2	216	operation type	select	\N	opertype	[]	[]	4	{"t": 4, "col": "opertype", "join": 0, "type": "select", "roles": "[]", "title": "opertype", "width": "", "depency": null, "visible": 0, "relation": "framework.opertypes", "classname": null, "column_id": 4, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "typename", "value": "typename"}]}	2019-11-05 10:00:17.290746	12827
135	3	216	created	period	\N	created	[]	[]	1	null	2019-11-05 10:00:17.290746	12831
136	4	216	table id	substr	form-control	tableid	[]	[]	1	{"t": 3, "col": "tableid", "join": 0, "type": "text", "roles": "[]", "title": "tableid", "width": "", "depency": null, "visible": 1, "relation": null, "classname": null, "column_id": 3, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"}	2019-11-05 10:00:17.290746	12824
138	1	219	SUBSTR TEXT	substr		text	[]	[]	1	{"t": 2, "col": "text", "join": false, "type": "text", "roles": "[]", "title": "text", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}	2019-11-05 10:00:17.290746	12847
140	3	219	check	check		check	[]	[]	1	{"t": 4, "col": "check", "join": false, "type": "checkbox", "roles": "[]", "title": "check", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}	2019-11-05 10:00:17.290746	12849
141	4	219	PERIOD	period		data	[]	[]	1	{"t": 3, "col": "data", "join": false, "type": "date", "roles": "[]", "title": "data", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}	2019-11-05 10:00:17.290746	12848
142	5	219	select filter	select		select	[]	[]	22	{"t": 22, "col": "select", "join": false, "type": "label", "label": "select || select", "roles": "[]", "title": "select", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "test.dictionary_for_select", "classname": "", "column_id": 22, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "dname", "title": "dname", "value": "dname"}]}	2019-11-05 10:00:17.290746	12875
143	6	219	multi	multiselect		multiselect	[]	[]	1	{"t": 8, "col": "multiselect", "join": false, "type": "multiselect", "roles": "[]", "title": "multiselect", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "multicolums": [{"label": "dname", "value": "dname"}], "relationcolums": "[]", "multiselecttable": "test.dictionary_for_select"}	2019-11-05 10:00:17.290746	12853
144	7	219	multi json	multijson		multitypehead	[]	[]	1	{"t": 28, "col": "multitypehead", "join": false, "type": "multitypehead", "roles": "[]", "title": "multitypehead", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 28, "onetomany": false, "defaultval": null, "depencycol": null, "multicolums": [{"label": "dname", "value": "dname"}], "relationcolums": "[]", "multiselecttable": "test.dictionary_for_select"}	2019-11-05 10:00:17.290746	12872
145	1	220	SUBSTR TEXT	substr		text	[]	[]	1	{"t": 2, "col": "text", "join": false, "type": "text", "roles": "[]", "title": "text", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}	2019-11-05 10:00:17.290746	12879
147	3	220	check	check		check	[]	[]	1	{"t": 4, "col": "check", "join": false, "type": "checkbox", "roles": "[]", "title": "check", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}	2019-11-05 10:00:17.290746	12881
148	4	220	PERIOD	period		data	[]	[]	1	{"t": 3, "col": "data", "join": false, "type": "date", "roles": "[]", "title": "data", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}	2019-11-05 10:00:17.290746	12880
149	5	220	select filter	select		select	[]	[]	22	{"t": 22, "col": "select", "join": false, "type": "label", "label": "select || select", "roles": "[]", "title": "select", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "test.dictionary_for_select", "classname": "", "column_id": 22, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "dname", "title": "dname", "value": "dname"}]}	2019-11-05 10:00:17.290746	12907
151	7	220	multi json	multijson		multitypehead	[]	[]	1	{"t": 28, "col": "multitypehead", "join": false, "type": "multitypehead", "roles": "[]", "title": "multitypehead", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 28, "onetomany": false, "defaultval": null, "depencycol": null, "multicolums": [{"label": "dname", "value": "dname"}], "relationcolums": "[]", "multiselecttable": "test.dictionary_for_select"}	2019-11-05 10:00:17.290746	12904
155	1	236	isactive	check	\N	isactive	[]	[]	1	null	2019-11-05 10:00:17.290746	13115
156	2	236	login	substr	form-control	login	[]	[]	1	null	2019-11-05 10:00:17.290746	13112
157	3	236	roles	multijson	\N	roles	[]	[]	1	null	2019-11-05 10:00:17.290746	13113
153	1	234	parent	multiselect	\N	parentid	[]	[0]	3	"framework.mainmenu"	2019-11-05 10:00:17.290746	13091
162	0	237	Title	substr	\N	title	[]	[]	1	{}	2019-11-07 14:34:20.394455	13118
187	1	237	Path	substr	\N	path	[]	[]	1	{}	2019-12-02 09:01:54.162823	13123
188	2	237	Table	substr	\N	tablename	[]	[]	1	{}	2019-12-02 09:06:20.264493	13120
217	1	118	Search	typehead		\N	["Название", "Название функции", "Путь", 19343, 19348]	[]	\N	{}	2019-12-25 11:04:47.818399	\N
6033	8	220	date between	date_between	\N	data	[]	[]	1	{}	2020-05-06 22:12:59.427085	12880
6034	1	50788	search	substr	\N	tablename	[]	[]	1	{}	2020-05-13 08:37:08.679362	601878
6035	1	50789	search	substr	\N	fullname	[]	[]	1	{}	2020-05-13 08:37:35.466803	601886
\.


--
-- TOC entry 3725 (class 0 OID 0)
-- Dependencies: 227
-- Name: filters_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('filters_id_seq', 6035, true);


--
-- TOC entry 3239 (class 0 OID 227685)
-- Dependencies: 228
-- Data for Name: filtertypes; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY filtertypes (id, ftname) FROM stdin;
1	select
2	substr
3	period
4	multiselect
5	check
6	typehead
7	multijson
8	date_between
\.


--
-- TOC entry 3240 (class 0 OID 227688)
-- Dependencies: 229
-- Data for Name: functions; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY functions (id, funcname, functype) FROM stdin;
1	concat	concat
7	count	groupby
8	sum	groupby
9	max	groupby
10	min	groupby
\.


--
-- TOC entry 3241 (class 0 OID 227691)
-- Dependencies: 230
-- Data for Name: logtable; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY logtable (id, tablename, tableid, opertype, oldata, newdata, created, colname, userid) FROM stdin;
\.


--
-- TOC entry 3726 (class 0 OID 0)
-- Dependencies: 231
-- Name: logtable_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('logtable_id_seq', 2140, true);


--
-- TOC entry 3243 (class 0 OID 227701)
-- Dependencies: 232
-- Data for Name: mainmenu; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY mainmenu (id, title, parentid, created, systemfield, orderby, path, roles, icon, menuid, nosession, ws, istitle) FROM stdin;
145	Test	6	2019-11-05 11:36:25	f	1000	/list/test	[0]	rocket	2	f	\N	t
72	Framework Documentation	6	2019-03-22 09:22:48	f	200	/	[0]	cn_dictionary	2	f	\N	t
6	Project Settings	\N	2020-03-27 07:32:06	f	500	/	[0]	global	2	f	\N	t
262	Project Main Settings	6	2020-04-04 20:03:16.497542	f	0	/	[0]	bank	2	f	\N	t
250	User Css	262	2020-03-18 12:01:08	f	50	/getone/usercss	[0]	html5	2	f	\N	t
263	Components	6	2020-04-04 20:08:41.747039	f	2	/	[0]	code	2	f	\N	t
82	Views	263	2019-08-08 15:37:47	f	1	/list/views	[0]	cn_viewlist	2	f	\N	t
7	Compositions	263	2018-12-11 08:40:45	f	4	/list/compos	[0]	cn_web-grid	2	f	\N	t
47	Trees	263	2019-03-14 11:33:25	f	3	/list/trees	[0]	cn_tree-table	2	f	\N	t
264	Auxiliary Settings	6	2020-04-04 20:11:57.268672	f	3	/	[0]	control	2	f	\N	t
9	SP API	264	2018-12-21 14:32:59	f	7	/list/spapi	[0]	cn_api-1	2	f	\N	t
81	Reports constructor	264	2019-07-30 13:30:47	f	185	/list/reports	[0]	cn_paper-report	2	f	\N	t
8	Logs	264	2018-12-17 16:59:24	f	9	/list/logs	[0]	cn_logs	2	f	\N	t
11	Users	264	2018-11-30 15:19:17	f	11	/list/users	[0]	cn_users-group	2	f	\N	t
4	Menu Settings	264	2018-11-30 12:44:57	t	1	/list/projectmenus	[0]	menu	2	f	\N	t
1	Home	\N	2020-03-26 13:34:15	f	1	/	\N	home	1	f	\N	t
3	Logout	\N	2020-03-26 14:03:06	f	100	/logout	[0,1,2,3,4,5,6,7,8,9,10]	poweroff	1	f	\N	t
5	Account	\N	2020-03-27 07:29:41	f	2	/getone/account	[0, 1]	user	1	f	\N	t
69	Global Settings	262	2019-03-15 11:41:44	f	0	/getone/mainsettings	[0]	cn_global	2	f	\N	t
265	SQL Manager	6	2020-05-13 13:24:22.306667	f	5	/list/schemas	[0]	android	2	f	\N	t
261	Notifications	\N	2020-04-03 14:29:49.000778	f	3	/list/notifications	[0, 1]	bell	1	f	notifs	f
\.


--
-- TOC entry 3727 (class 0 OID 0)
-- Dependencies: 233
-- Name: mainmenu_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('mainmenu_id_seq', 265, true);


--
-- TOC entry 3245 (class 0 OID 227716)
-- Dependencies: 234
-- Data for Name: mainsettings; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY mainsettings (id, dsn, port, "developerRole", maindomain, "primaryAuthorization", redirect401, isactiv, usercss, homepage, reports_url, login_url, ischat) FROM stdin;
1	host=127.0.0.1 dbname=framework user=postgres password=Qwerty123 port=5432	8080	0	http://127.0.0.1:8080	1	/login	t	/* YOU CAN ADD YOUR CLASSES HERE  */\n\n.flex_tiles {\n  display: flex;\n  overflow-x: auto;\n}\n.test_test {\n\tcursor:pointer;\n\tcolor:black;\n}\n\n/* SQL MANAGER */\n.schema_table {\n  font-size: 11px;\n}\n\n.schema_table tbody {\n  color: #1c92ff;\n}\n\n.schema_table td, th {\n  border-style: none;\n}\n\n.args_table {\n  font-size: 11px;\n  width:100%;\n}\n\n.args_table tbody {\n  color: #1c92ff;\n}\n\n.args_table td, th {\n  border-style: none;\n}\n\n.t_table {\n  font-size: 11px;\n}\n\n.t_table tbody {\n  color: #1c92ff;\n}\n\n.t_table tr {\n  border-style: outset;\n  border-color: #68ff00;\n  border-width: 1px;\n  cursor: pointer;\n\n}\n\n.et_table tr:hover {\n  background:#b5d9db;\n}\n\n.et_table {\n  font-size: 11px;\n}\n\n.et_table tbody {\n  color: #170653;\n}\n\n.et_table td {\n  border-style: outset;\n  border-color: #626262;\n  border-width: 1px;\n  cursor: pointer;\n  padding: 5px;\n\n}\n\n.t_table tr:hover {\n  background:#b5d9db;\n}\n\n.commit_btn {\n  background-color: #fff44c;\n  color: #000;\n}\n\n/* SQL MANAGER */\n\n.aa {}\n\n\n.resizable, div[id^="ace-editor"] {\n  overflow: hidden;\n  resize: both;\n}\n\n@font-face {\n  font-family: RMIASFont;\n  src: url('build/17487.ttf');\n}\n\n@font-face {\n  font-family: RM2;\n  src: url('build/17493.otf');\n}\n\n@font-face {\n  font-family: RM3;\n  src: url('build/17428.ttf');\n}\n\n@font-face {\n  font-family: RM4;\n  src: url('build/16864.ttf');\n}\n\n@font-face {\n  font-family: RM5;\n  src: url('build/16658.otf');\n}\n\n@font-face {\n  font-family: RM6;\n  src: url('build/16198.ttf');\n}\n\n\n@font-face {\n  font-family: RM7;\n  src: url('build/17338.otf');\n}\n\n\n\n\n/*\nspan {\n\tfont-size: 16px;\n}\ndiv, span {\n  font-family: RM7;\n\n}*/\n\n\n\n.content_app {\n  padding:2px;\n }\n\n .paleturquoise {\n  background-color:#AFEEEE;\n }\n\n .title22 {\n  font-size: 22px;\n }\n\n .title22 b {\n  display:none;\n }\n\n .nob {\n\n }\n\n .nob b {\n  display:none;\n }\n\n .lil_list_text {\n   font-size: 10px;\n }\n\n .lil_list_text span {\n    color: #557c9e;\n }\n\n\n .green_prety_b {\n\n }\n\n .green_prety_b b {\n   color: #2be242;\n }\n\n .green_prety_b span {\n    color: #0824ec;\n    font-size: 17px;\n }\n\n\n .bigtitle25 {\n    font-size: 25px;\n    color: #06a7b7d9;\n }\n\n .basket {\n    background: #fff705;\n    width: 300px;\n }\n\n .basket i {\n  font-size: 20px;\n  color: #ca3e09;\n }\n\n .contents {\n  display:contents;\n }\n\n .smaller {\n  font-size: smaller;\n }\n\n .food_table {\n  width:100%;\n }\n\n\n\n.food_table th, td {\n   border:none;\n}\n\n.food_table th:hover {\n   background:#ffff002e;\n   cursor:pointer;\n}\n\n.food_table td:hover {\n   background:#f5eff5;\n   cursor:pointer;\n}\n\nbody {\n  background:black;\n}\n\n.food_table tr{\n    border-style: groove;\n    border-width: thin;\n    border-color: #b3aace8c;\n    text-align: center;\n\n}\n\n.food_table thead {\n    background:#f0fff28a;\n}\n\n.food_table tbody tr:hover {\n    background:#cffdcf;\n}\n\n.del_color {\n    background: #000652;\n    color: aliceblue;\n    text-align: center;\n    font-size: 17px;\n    font-family: cursive;\n}\n\n.big_s_button {\n    min-height: 40px;\n    min-width: 40px;\n    font-size: 20px;\n    color: #fdfdfd;\n    background: #0cbf22;\n}\n\n.notitle {\n\n}\n\n.notitle label {\n  display:none;\n}\n\n\n@media screen\n  and (max-device-width: 1080px)\n  and (max-device-height: 1920px)\n\n {\n  span, b, label, .ant-col, .ant-collapse-header {\n    font-size:25px;\n   /* margin-left:72px;*/\n  }\n\n  .css-1kdo2r7 {\n    font-size:25px;\n  }\n\n\n  .get_one_form .ant-form-item-label>label {\n      font-size:25px;\n  }\n\n  .ant-form-item-control input {\n      font-size:25px;\n      height:45px;\n  }\n\n  li, a, i, icon, tr, .ant-popover-message-title {\n    font-size:25px;\n  }\n\n  .ant-form label {\n    font-size:25px;\n  }\n\n  .fr_tiles .ant-card {\n\n      margin-bottom:25px;\n\n  }\n\n  /*.nob span {\n    padding-left:40px;\n  }\n\n  .lil_list_text span, b {\n    padding-left:40px;\n  }*/\n\n  button {\n    min-width:100px;\n    min-height:55px;\n\n  }\n  img {\n    width:170px;\n    height:170px;\n  }\n\n\n}\n\n\n.p11 {\n    font-size: 11px;\n}\n\n\n.p11 span {\n    font-size: 11px;\n}\n\n.commit_btn {\n  background-color: #fff44c;\n  color: #000;\n}\n	/composition/home	http://127.0.0.1:12318/report	/login	t
\.


--
-- TOC entry 3246 (class 0 OID 227734)
-- Dependencies: 235
-- Data for Name: menus; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY menus (id, menutype, menutitle, ismainmenu) FROM stdin;
1	2	Header	t
2	1	User Menu	f
\.


--
-- TOC entry 3728 (class 0 OID 0)
-- Dependencies: 236
-- Name: menus_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('menus_id_seq', 3, true);


--
-- TOC entry 3248 (class 0 OID 227740)
-- Dependencies: 237
-- Data for Name: menutypes; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY menutypes (id, mtypename) FROM stdin;
1	Left Menu
2	Header Menu
3	Footer Menu
\.


--
-- TOC entry 3729 (class 0 OID 0)
-- Dependencies: 238
-- Name: menutypes_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('menutypes_id_seq', 4, true);


--
-- TOC entry 3250 (class 0 OID 227748)
-- Dependencies: 239
-- Data for Name: methodtypes; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY methodtypes (id, methotypename) FROM stdin;
1	get
2	post
3	put
4	delete
\.


--
-- TOC entry 3251 (class 0 OID 227751)
-- Dependencies: 240
-- Data for Name: notifications; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY notifications (id, message, messagetype, for_userid, sended_sessions, isread, created, sessid) FROM stdin;
5	test	notifs	1	["ae51d81d-547d-e4fe-ece0-1668e1fd741d", "67e1a534-d51f-8276-9a9b-fad1179a0734", "19ae6b49-e250-29e8-0e15-6b4a0fb4b843", "bc7bbe80-9214-e4b0-f237-8763fda68add", "c2f6c23e-576d-fe44-f023-70a24d57d15a", "bc0f5a9f-da91-a787-0303-592e3c72c6f2"]	t	2020-04-04 22:03:21	\N
\.


--
-- TOC entry 3730 (class 0 OID 0)
-- Dependencies: 241
-- Name: notifications_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('notifications_id_seq', 5, true);


--
-- TOC entry 3253 (class 0 OID 227763)
-- Dependencies: 242
-- Data for Name: operations; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY operations (id, value, js, python, sql) FROM stdin;
1	=	===	==	=
2	<>	!==	!=	<>
3	>	>	>	>
4	<	<	<	<
5	>=	>=	>=	>=
6	<=	<=	<=	<=
7	like	indexOf	find	like
8	like in	indexOfSubstr	find in	like in
9	in	in	in	in
10	not in	not in	not in	not in
11	is null	===null	is None	is null
12	is not null	!==null	is not None	is not null
13	likeOr	likeOr	likeOr	likeOr
14	contain	contain	contain	contain
\.


--
-- TOC entry 3731 (class 0 OID 0)
-- Dependencies: 243
-- Name: operations_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('operations_id_seq', 14, true);


--
-- TOC entry 3255 (class 0 OID 227768)
-- Dependencies: 244
-- Data for Name: opertypes; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY opertypes (id, typename, alias) FROM stdin;
1	add	add
2	update	edit
3	delete	delete
4	rollback	rollback
\.


--
-- TOC entry 3256 (class 0 OID 227771)
-- Dependencies: 245
-- Data for Name: orgs; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY orgs (id, orgname, orgtype, parentid, shortname, created, userid, photo) FROM stdin;
1	Jelata	1	\N	\N	2020-03-31 10:28:56	1	[]
\.


--
-- TOC entry 3732 (class 0 OID 0)
-- Dependencies: 246
-- Name: orgs_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('orgs_id_seq', 11, true);


--
-- TOC entry 3258 (class 0 OID 227783)
-- Dependencies: 247
-- Data for Name: orgtypes; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY orgtypes (id, typename) FROM stdin;
1	Entity
\.


--
-- TOC entry 3259 (class 0 OID 227786)
-- Dependencies: 248
-- Data for Name: paramtypes; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY paramtypes (id, val, created) FROM stdin;
1	simple	2019-04-25 10:54:32
2	sign	2019-04-25 10:54:41
\.


--
-- TOC entry 3260 (class 0 OID 227790)
-- Dependencies: 249
-- Data for Name: roles; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY roles (id, rolename, hierarchy) FROM stdin;
0	developer	\N
\.


--
-- TOC entry 3261 (class 0 OID 227793)
-- Dependencies: 250
-- Data for Name: select_condition; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY select_condition (id, configid, col, operation, const, value, created, val_desc) FROM stdin;
571	12726	dname	like	T	\N	2019-11-05 10:00:17.290746	\N
572	12726	id	not in	3	\N	2019-11-05 10:00:17.290746	\N
573	12797	dname	like	T	\N	2019-11-05 10:00:17.290746	\N
574	12797	id	not in	3	\N	2019-11-05 10:00:17.290746	\N
577	13098	menuid	=	\N	{"t": 1, "label": "menuid", "value": "menuid"}	2019-11-05 10:00:17.290746	13106
576	13070	id	<>	\N	{"t": 1, "key": "id_512cb", "label": "id", "value": "bid"}	2019-11-05 10:00:17.290746	13067
575	13070	treesid	=	\N	{"t": 1, "key": "treesid_9766c", "label": "treesid", "value": "treesid"}	2019-11-05 10:00:17.290746	13068
654	13789	viewid	=	\N	\N	2019-12-02 09:04:50.152974	13178
\.


--
-- TOC entry 3733 (class 0 OID 0)
-- Dependencies: 251
-- Name: select_condition_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('select_condition_id_seq', 1197, true);


--
-- TOC entry 3263 (class 0 OID 227802)
-- Dependencies: 252
-- Data for Name: sess; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY sess (id, userid, created, killed) FROM stdin;
19ae6b49-e250-29e8-0e15-6b4a0fb4b843	1	2020-04-05 14:35:46.234079	\N
bc7bbe80-9214-e4b0-f237-8763fda68add	1	2020-04-05 17:12:17.373163	\N
c2f6c23e-576d-fe44-f023-70a24d57d15a	1	2020-04-05 17:13:02.600435	2020-04-05 17:23:36.312453
bc0f5a9f-da91-a787-0303-592e3c72c6f2	1	2020-04-05 17:23:45.794019	\N
6e8fec61-0a12-404b-8ffb-3600c8aa25ef	1	2020-05-06 20:31:58.31026	\N
cbd7b547-6c97-43dd-89fb-ec310b7c475c	1	2020-05-06 20:50:27.147316	\N
5a2c4958-0a09-4722-9390-de87a9c121fa	1	2020-05-06 23:05:01.329555	\N
37c9e6f6-1332-4c32-960a-dbeec0c848bf	1	2020-05-11 16:21:44.09523	\N
b862b41d-4cd5-426b-a8f1-f7210da3c9d6	1	2020-05-13 08:16:23.797262	\N
594f402a-1892-4bd0-8863-f74ad52483d3	1	2020-05-13 17:41:07.721227	\N
26ee178b-5932-4c64-92a8-81e151056b66	1	2020-05-14 15:23:47.294085	\N
\.


--
-- TOC entry 3264 (class 0 OID 227806)
-- Dependencies: 253
-- Data for Name: spapi; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY spapi (id, methodname, procedurename, created, methodtype, roles) FROM stdin;
22	notifs	framework.fn_viewnotif_get	2019-03-07 15:10:09	1	\N
9	view	framework.fn_viewsave	2019-02-21 13:45:47	2	[0]
12	getcolumnconfig	framework.get_colcongif	2019-02-21 16:50:33	1	\N
214	action_add_untitle	framework.fn_action_add_untitle	2019-11-12 09:59:10	2	[0]
219	action_copy	framework.fn_action_copy	2019-11-12 21:36:08	2	[0]
1	allviews	framework.fn_allviews	2019-02-04 22:54:58	1	[0]
29	views	framework.fn_allviews_sel	2019-04-04 08:59:51	1	\N
31	apimethods	framework.fn_apimethods	2019-04-25 09:36:33	1	[0]
11	autocomplete	framework.fn_autocomplete	2019-02-21 16:25:42	2	\N
190	col_add_select_condition	framework.fn_col_add_select_condition	2019-10-27 15:05:50	2	[0]
18	compo	framework.fn_compo	2019-02-28 11:23:58	1	\N
20	compobypath	framework.fn_compo_bypath	2019-02-28 11:58:34	1	\N
19	compo	framework.fn_compo_save	2019-02-28 11:55:23	2	\N
194	addfncol	framework.fn_config_fncol_add	2019-10-31 11:32:29	2	[0]
198	addcol	framework.fn_config_inscol	2019-10-31 16:20:21	2	[0]
195	config_selectapi	framework.fn_config_selectapi	2019-10-31 12:03:51	2	[0]
192	applysettings	framework.fn_config_settings_apply	2019-10-31 18:32:45	2	[0]
201	configsettings_selectapi	framework.fn_configsettings_selectapi	2019-10-31 18:25:09	2	[0]
39	copyview	framework.fn_copyview	2019-07-12 17:34:25	2	[0]
8	createconfig	framework.fn_createconfig	2019-02-20 18:43:46	1	[0]
37	cryptotoken	framework.fn_crypto_token	2019-06-25 08:43:14	1	\N
21	deleterow	framework.fn_deleterow	2019-03-05 16:10:43	4	\N
411	dialog_addadmin	framework.fn_dialog_addadmin	2019-12-30 10:55:51	2	\N
403	dialog_adduser	framework.fn_dialog_adduser	2019-12-25 14:29:03	2	\N
320	dialog_edit	framework.fn_dialog_edit	2019-12-08 15:42:26	2	\N
313	dialog_group_create	framework.fn_dialog_group_create	2019-12-07 11:50:48	2	\N
407	dialog_leave	framework.fn_dialog_leave	2019-12-27 15:56:11	2	\N
309	dialog_messages	framework.fn_dialog_message_bydialog	2019-12-06 15:11:01	1	\N
312	dialog_delete_message	framework.fn_dialog_message_delete	2019-12-07 11:41:53	4	\N
311	dialog_message_edit	framework.fn_dialog_message_edit	2019-12-07 11:36:22	2	\N
310	dialog_message_send	framework.fn_dialog_message_send	2019-12-06 15:22:25	2	\N
323	dialog_message_setreaded	framework.fn_dialog_message_setread	2019-12-08 16:53:21	1	\N
307	dialog_personal_create	framework.fn_dialog_personal_create	2019-12-06 11:31:12	2	\N
412	dialog_removeadmin	framework.fn_dialog_removeadmin	2019-12-30 10:56:55	4	\N
404	dialog_removeuser	framework.fn_dialog_removeuser	2019-12-25 14:34:21	4	\N
308	dialogs	framework.fn_dialogs_byuser	2019-12-06 14:14:16	1	\N
375	chats_messages	framework.fn_dialogs_chatsmessages_ws	2019-12-16 13:37:44	1	\N
321	chats	framework.fn_dialogs_chats_ws	2019-12-08 16:36:48	1	\N
322	dialog_notif_setsended	framework.fn_dialogs_notif_setsended	2019-12-08 16:47:24	1	\N
324	dialogs_usersearch	framework.fn_dialogs_usersearch	2019-12-09 08:47:08	1	\N
215	filter_add_untitle	framework.fn_filter_add_untitle	2019-11-12 10:27:28	2	[0]
153	formparams	framework.fn_formparams	2019-02-20 10:58:19	1	[0]
3	formparams	framework.fn_formparams	2019-02-20 10:58:19	1	[0]
10	select	framework.fn_formselect	2019-02-21 16:02:11	2	\N
182	select	framework.fn_formselect	2019-02-21 16:02:11	2	\N
237	functions_getall_spapi	framework.fn_functions_getall_spapi	2019-11-25 08:29:48	2	[0]
7	getactypes	framework.fn_getacttypes	2019-02-20 11:34:20	1	[0]
6	getfunctions	framework.fn_getfunctions	2019-02-20 11:28:12	1	[0]
197	getfunctions	framework.fn_getfunctions	2019-10-31 10:19:17	2	[0]
16	gettable	framework.fn_getselect	2019-02-26 12:26:42	1	\N
180	gettables	framework.fn_gettables_sel	2019-10-24 16:20:45	2	[0]
34	getusersettings	framework.fn_getusersettings	2019-05-31 10:08:08	1	\N
424	fn_logtable_rollback	framework.fn_logtable_rollback	2020-01-15 11:08:00	1	[0]
2	mainmenu	framework.fn_mainmenu	2019-02-18 11:27:07	1	\N
23	mainmenusigma	framework.fn_mainmenusigma	2019-03-15 09:44:59	1	\N
65	menus	framework.fn_menus	2019-08-11 20:10:23	1	\N
27	setsended	framework.fn_notif_setsended	2019-03-19 15:34:21	2	\N
32	paramtypes	framework.fn_paramtypes	2019-04-25 10:56:08	1	[0]
15	refreshconfig	framework.fn_refreshconfig	2019-02-25 18:03:41	2	[0]
415	fn_roles_fetch	framework.fn_roles_fetch	2019-12-30 15:24:40	2	[]
178	allroles	framework.fn_roles_getall	2019-09-22 13:51:55	1	[0]
78	savestate	framework.fn_savestate	2019-08-17 22:53:29	2	\N
35	saveusersettings	framework.fn_saveusersettings	2019-05-31 10:08:28	2	\N
13	saverow	framework.fn_savevalue	2019-02-22 11:12:43	2	\N
603	savefile	framework.fn_savevalue	2020-03-12 10:03:24	2	\N
5	tablecolums	framework.fn_tabcolumns	2019-02-20 11:13:53	1	[0]
193	tabcolumns_for_filters	framework.fn_tabcolumns_for_filters	2019-10-28 16:29:47	2	[0]
196	tabcolumns_for_filters_arr	framework.fn_tabcolumns_for_filters_arr	2019-10-28 17:12:40	2	[0]
191	tabcolumns_for_sc	framework.fn_tabcolumns_for_sc	2019-10-27 15:33:47	2	[0]
189	dep_tabcolumns	framework.fn_tabcolumns_selforconfig_depselect	2019-10-25 15:29:47	2	[0]
186	rel_tabcolumns	framework.fn_tabcolumns_selforconfig_relselect	2019-10-25 15:27:39	2	[0]
26	treesbypath	framework.fn_trees_bypath	2019-03-18 14:05:40	1	\N
24	userorgss	framework.fn_userorgs	2019-03-18 08:10:12	2	\N
25	userorgs	framework.fn_userorg_upd	2019-03-18 09:10:27	2	\N
4	view	framework.fn_view_byid	2019-02-20 11:02:43	1	[0]
200	view_cols_for_fn	framework.fn_view_cols_for_fn	2019-10-31 10:27:32	2	[0]
203	view_cols_for_param	framework.fn_view_cols_for_param	2019-11-04 15:27:09	2	[0]
199	view_cols_for_sc	framework.fn_view_cols_for_sc	2019-10-27 16:03:03	2	[0]
427	fn_view_deletebyid	framework.fn_view_deletebyid	2020-01-15 17:02:16	1	\N
181	select_api_test	test.fn_select_api	2019-10-14 09:37:37	2	[]
184	gettest	test.fn_getmethodtest_setcolorblack	2019-10-16 14:27:52	1	[]
185	posttest	test.fn_postmethodtest_setcolorblue	2019-10-17 13:48:35	2	[0]
187	gettestsetcolor	test.fn_gettest_setallcolor_red	2019-10-17 14:13:25	1	[0]
188	postmethodtest_setselectedcolor_black	test.fn_postmethodtest_setselectedcolor_black	2019-10-17 16:04:04	2	[0]
785	notifications_setreaded_by_userid	framework.fn_notifications_setreaded_by_userid	2020-04-04 22:12:41.016576	1	\N
786	deleteconfig	framework.fn_deleteconfig_checked	2020-05-11 16:34:18	4	[0]
789	tablelist_onload	sqlmanager.fn_tablelist_onload	2020-05-11 18:42:40	1	[0]
787	schemalist_onload	sqlmanager.fn_schemalist_onload	2020-05-11 16:50:58	1	[0]
60	methodinfo	reports.fn_getmethod_info	2019-07-30 10:18:39	1	\N
58	getreports_fn	reports.fn_getreports_fn	2019-07-26 16:33:17	2	[0]
97	report_copy	reports.fn_report_copy	2019-11-25 14:50:07	2	[0]
59	report	reports.fn_report_getone	2019-07-29 17:23:49	1	\N
795	tablecols_onload	sqlmanager.fn_tablecols_onload	2020-05-13 14:12:07	1	[0]
797	types_sel	sqlmanager.fn_types_sel	2020-05-13 14:37:27	2	[0]
798	functions_onload	sqlmanager.fn_functions_onload	2020-05-14 10:43:08	1	[0]
799	function_add	sqlmanager.fn_function_add	2020-05-14 16:42:06	1	[0]
800	schemas_sel	sqlmanager.fn_schemas_sel	2020-05-15 08:42:38	2	[0]
801	modes_sel	sqlmanager.fn_modes_sel	2020-05-15 10:46:21	2	[0]
802	argument_add	sqlmanager.fn_function_argadd	2020-05-15 13:45:48	1	[0]
803	function_onload	sqlmanager.fn_function_onload	2020-05-15 15:43:26	1	[0]
804	triggers_onload	sqlmanager.fn_triggers_onload	2020-05-15 17:01:57	1	[0]
805	foreignkeys_onload	sqlmanager.fn_foreignkeys_onload	2020-05-18 16:09:37	1	[0]
806	fk_maintablecols_select	sqlmanager.fn_fk_maintablecols_select	2020-05-18 16:58:37	2	[0]
807	fk_tables_sel	sqlmanager.fn_fk_tables_sel	2020-05-18 17:10:45	2	[0]
808	fk_parentcols_sel	sqlmanager.fn_fk_parentcols_sel	2020-05-18 17:18:58	2	[0]
809	trigger_fields	sqlmanager.fn_trigger_fields	2020-05-21 11:43:06	2	[0]
\.


--
-- TOC entry 3734 (class 0 OID 0)
-- Dependencies: 254
-- Name: spapi_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('spapi_id_seq', 809, true);


--
-- TOC entry 3266 (class 0 OID 227816)
-- Dependencies: 255
-- Data for Name: trees; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY trees (id, title, url, descr, roles, created, userid, orgid, acts) FROM stdin;
2	Table	table	table properties	[0]	2020-05-13 13:20:25.042661	1	1	[]
3	Function	function	function	[0]	2020-05-14 14:42:37.130439	1	1	[]
\.


--
-- TOC entry 3735 (class 0 OID 0)
-- Dependencies: 256
-- Name: trees_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('trees_id_seq', 3, true);


--
-- TOC entry 3268 (class 0 OID 227827)
-- Dependencies: 257
-- Data for Name: treesacts; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY treesacts (id, treesid, title, icon, classname, act, created) FROM stdin;
\.


--
-- TOC entry 3736 (class 0 OID 0)
-- Dependencies: 258
-- Name: treesacts_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('treesacts_id_seq', 1, false);


--
-- TOC entry 3270 (class 0 OID 227836)
-- Dependencies: 259
-- Data for Name: treesbranches; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY treesbranches (id, treesid, title, parentid, icon, created, treeviewtype, viewid, compoid, orderby, ismain) FROM stdin;
1	2	Fields	\N	menu	2020-05-13 13:23:31.366732	1	50790	\N	1	t
2	3	Code	\N	code	2020-05-14 14:43:06.897803	2	\N	247	1	t
3	2	Triggers	\N	font-size	2020-05-15 17:07:20.980474	1	50799	\N	2	f
4	2	Foreign Keys	\N	calculator	2020-05-18 16:21:42.461183	1	50802	\N	3	f
\.


--
-- TOC entry 3737 (class 0 OID 0)
-- Dependencies: 260
-- Name: treesbranches_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('treesbranches_id_seq', 4, true);


--
-- TOC entry 3272 (class 0 OID 227846)
-- Dependencies: 261
-- Data for Name: treeviewtypes; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY treeviewtypes (id, typename) FROM stdin;
1	simple view
2	composition view
\.


--
-- TOC entry 3273 (class 0 OID 227849)
-- Dependencies: 262
-- Data for Name: users; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY users (id, fam, im, ot, login, password, isactive, created, roles, roleid, photo, orgs, usersettings, orgid, userid, thumbprint) FROM stdin;
1	admin	admin	\N	admin	78d8045d684abd2eece923758f3cd781489df3a48e1278982466017f	t	2018-12-28 12:57:07	[0]	0	[{"src": "http://127.0.0.1:8080/files/0a495c01-c0c7-42d6-9355-f7d1885321b5photo_2020-02-01_16-10-52.jpg", "uri": "/files/0a495c01-c0c7-42d6-9355-f7d1885321b5photo_2020-02-01_16-10-52.jpg", "size": 49370, "filename": "photo_2020-02-01_16-10-52.jpg", "original": "http://127.0.0.1:8080/files/0a495c01-c0c7-42d6-9355-f7d1885321b5photo_2020-02-01_16-10-52.jpg", "thumbnail": "http://127.0.0.1:8080/files/0a495c01-c0c7-42d6-9355-f7d1885321b5photo_2020-02-01_16-10-52.jpg", "content_type": "image/jpeg", "thumbnailWidth": 100, "thumbnailHeight": 100}]	[1]	{"menu": {}, "trees": {}, "views": {"/list/spapi": {"pagesize": 100}, "/list/views": {"hide": [], "pagesize": 100}, "/composition/home": {"hide": ["Категория"]}, "/composition/view": {"collapse": {"localActiveKey": [], "localChangeCollapse": true}}, "/composition/dogovor": {"pagesize": 20}}, "compositions": {}}	1	1	\N
\.


--
-- TOC entry 3738 (class 0 OID 0)
-- Dependencies: 263
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('users_id_seq', 6, true);


--
-- TOC entry 3275 (class 0 OID 227865)
-- Dependencies: 264
-- Data for Name: views; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY views (id, title, descr, tablename, viewtype, pagination, config, path, created, groupby, filters, acts, roles, classname, orderby, ispagesize, pagecount, foundcount, subscrible, checker, api, copy) FROM stdin;
32	branches form	branches form	framework.treesbranches	form not mutable	f	[{"t": 1, "col": "id", "key": "id_512cb", "join": false, "type": "label", "roles": "[]", "title": "bid", "width": "", "depency": null, "visible": false, "relation": null, "classname": null, "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "label": "id", "value": "bid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 2, "col": "treesid", "key": "treesid_9766c", "join": false, "type": "label", "roles": "[]", "title": "treesid", "width": "", "depency": null, "visible": false, "relation": null, "classname": "col-md-12", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "label": "id", "value": "bid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 3, "col": "title", "key": "title_2598c", "join": false, "type": "text", "roles": "[]", "title": "title", "width": "", "depency": null, "visible": true, "relation": null, "classname": "col-md-12", "column_id": 3, "onetomany": false, "updatable": true, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "label": "id", "value": "bid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 5, "col": "parentid", "key": "parentid_953d6", "join": false, "type": "select", "roles": "[]", "title": "parentid", "width": "", "depency": null, "visible": true, "relation": "framework.treesbranches", "classname": "col-md-12", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "id", "title": "id_", "value": "id"}, {"label": "title", "title": "title_", "value": "title"}], "select_condition": [{"col": {"label": "treesid", "value": "treesid"}, "value": {"t": 1, "key": "treesid_9766c", "label": "treesid", "value": "treesid"}, "operation": {"js": "===", "label": "=", "value": "=", "python": "=="}}, {"col": {"label": "id", "value": "id"}, "value": {"t": 1, "key": "id_512cb", "label": "id", "value": "bid"}, "operation": {"js": "!==", "label": "!=", "value": "<>", "python": "!="}}], "visible_condition": [{"col": {"t": 1, "key": "id_512cb", "label": "id", "value": "bid"}, "value": "0", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 6, "col": "icon", "key": "icon_aa86a", "join": false, "type": "text", "roles": "[]", "title": "icon", "width": "", "depency": null, "visible": true, "relation": null, "classname": "col-md-12", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "label": "id", "value": "bid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 7, "col": "created", "key": "created_f5070", "join": false, "type": "label", "roles": "[]", "title": "created", "width": "", "depency": null, "visible": true, "relation": null, "classname": "col-md-12", "column_id": 7, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "label": "id", "value": "bid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 15, "col": "treeviewtype", "key": "treeviewtype_5b5be", "join": false, "type": "select", "roles": "[]", "title": "treeviewtype", "width": "", "depency": null, "visible": true, "relation": "framework.treeviewtypes", "classname": "col-md-12", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "id", "title": "id", "value": "id"}, {"label": "typename", "title": "typename", "value": "typename"}], "visible_condition": [{"col": {"t": 1, "label": "id", "value": "bid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 23, "col": "viewid", "key": "viewid_ffae0", "join": false, "type": "select", "roles": "[]", "title": "viewid", "width": "", "depency": null, "visible": true, "relation": "framework.views", "classname": "col-md-12", "column_id": 9, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "id", "title": "id", "value": "id"}, {"label": "title", "title": "title_", "value": "title"}, {"label": "path", "title": "path", "value": "path"}], "visible_condition": [{"col": {"t": 1, "key": "treeviewtype_5b5be", "label": "treeviewtype", "value": "treeviewtype"}, "const": null, "value": "1", "operation": {"js": "===", "label": "=", "value": "=", "python": "=="}}, {"col": {"t": 1, "key": "id_512cb", "label": "id", "value": "bid"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 14, "col": "compoid", "key": "compoid_50bd6", "join": false, "type": "select", "roles": "[]", "title": "compoid", "width": "", "depency": false, "visible": true, "relation": "framework.compos", "classname": "col-md-12", "column_id": 10, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "id", "title": "id", "value": "id"}, {"label": "title", "title": "title_", "value": "title"}], "visible_condition": [{"col": {"t": 1, "key": "id_512cb", "label": "id", "value": "bid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}, {"col": {"t": 1, "key": "treeviewtype_5b5be", "label": "treeviewtype", "value": "treeviewtype"}, "const": null, "value": "2", "operation": {"js": "===", "label": "=", "value": "=", "python": "=="}}]}, {"t": 10, "col": "orderby", "key": "orderby_0bae7", "join": false, "type": "number", "roles": "[]", "title": "orderby", "width": "", "depency": false, "visible": true, "relation": null, "classname": "col-md-12", "column_id": 11, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "label": "id", "value": "bid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 11, "col": "ismain", "key": "ismain_9701e", "join": false, "type": "checkbox", "roles": "[]", "title": "ismain", "width": "", "depency": false, "visible": true, "relation": null, "classname": "col-md-12", "column_id": 12, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "label": "id", "value": "bid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}]	branchesform	2019-03-14 13:46:57.627	[]	[]	[{"act": "/", "type": "Save", "title": "save", "parametrs": [], "isforevery": false}, {"act": "/composition/branches", "type": "Link", "title": "close", "parametrs": [{"paramt": null, "paramconst": "-1", "paraminput": "", "paramtitle": "bid", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "treesid", "paramtitle": "treesid", "paramcolumn": null}], "isforevery": false}]	[0]	\N	f	t	t	t	f	f	{}	f
34	My organization	user org	framework.orgs	form full	f	[{"t": 1, "col": "id", "key": "id_71c9c", "join": false, "type": "label", "roles": "[]", "title": "id", "width": "", "depency": null, "visible": true, "relation": null, "classname": "col-md-12", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 2, "col": "orgname", "key": "orgname_d3ca6", "join": false, "type": "label", "roles": "[]", "title": "orgname", "width": "", "depency": null, "visible": true, "relation": null, "classname": "col-md-12", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}]	myorg	2019-03-18 09:42:45.156	[]	[]	[]	[0]	\N	f	t	t	t	f	f	{}	f
56	log	log	framework.logtable	form full	f	[{"t": 1, "col": "id", "key": "id_7f4b6", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "id", "width": "", "depency": false, "visible": true, "relation": null, "classname": "col-md-12", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 10, "col": "userid", "key": "userid_c3ff5", "join": false, "type": "number", "chckd": true, "roles": "[]", "title": "userid", "width": "", "depency": false, "visible": false, "relation": "framework.users", "classname": "col-md-12", "column_id": 10, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "login", "title": "login", "value": "login"}]},{"t": 2, "col": "tablename", "key": "tablename_35983", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "tablename", "width": "", "depency": false, "visible": true, "relation": null, "classname": "col-md-12", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 3, "col": "tableid", "key": "tableid_0c4b4", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "tableid", "width": "", "depency": false, "visible": true, "relation": null, "classname": "col-md-12", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 4, "col": "opertype", "key": "opertype_19d0d", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "opertype", "width": "", "depency": false, "visible": false, "relation": "framework.opertypes", "classname": "col-md-12", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "typename", "title": "typename", "value": "typename"}]},{"t": 10, "col": "login", "key": "login_60bb9", "type": "label", "chckd": true, "input": 0, "roles": [], "table": "framework.users", "title": "login", "tpath": [], "width": "", "output": 0, "related": true, "visible": 1, "relation": null, "classname": "col-md-12", "notaddable": false, "relatecolumn": "userid", "relationcolums": "[]"},{"t": 6, "col": "oldata", "key": "oldata_6bcc6", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "oldata", "width": "", "depency": false, "visible": true, "relation": null, "classname": "col-md-12", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 7, "col": "newdata", "key": "newdata_402ca", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "newdata", "width": "", "depency": false, "visible": true, "relation": null, "classname": "col-md-12", "column_id": 7, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 8, "col": "created", "key": "created_9ad7e", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "created", "width": "", "depency": false, "visible": true, "relation": null, "classname": "col-md-12", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}]	log	2019-03-19 16:34:03.671	[]	[]	[{"act": "/list/logs", "icon": "fa fa-arrow-left", "type": "Link", "roles": [], "title": "back", "ismain": false, "classname": "", "parametrs": [], "paramtype": null, "actapitype": "GET", "isforevery": false, "actapimethod": null, "actapiconfirm": true, "actapirefresh": true}]	[0]	\N	f	t	t	t	f	f	{}	f
214	Views compositions	Views compositions	framework.compos	table	t	[{"t": 1, "col": "id", "key": "id_4403a", "join": 0, "type": "number", "roles": "[]", "title": "id", "width": "", "depency": null, "visible": 1, "relation": null, "classname": null, "column_id": 1, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 2, "col": "title", "key": "title_8020b", "join": 0, "type": "text", "roles": "[]", "title": "title", "width": "", "depency": null, "visible": 1, "relation": null, "classname": null, "column_id": 2, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 3, "col": "path", "key": "path_67f8c", "join": 0, "type": "text", "roles": "[]", "title": "path", "width": "", "depency": null, "visible": 1, "relation": null, "classname": null, "column_id": 3, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 4, "col": "config", "key": "config_8368c", "join": 0, "type": "text", "roles": "[]", "title": "config", "width": "", "depency": null, "visible": 0, "relation": null, "classname": null, "column_id": 4, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 5, "col": "created", "key": "created_d5ec8", "join": 0, "type": "date", "roles": "[]", "title": "created", "width": "", "depency": null, "visible": 1, "relation": null, "classname": null, "column_id": 5, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"}]	compos	2018-12-11 08:37:44.077	[]	[{"type": "typehead", "roles": [{"label": "developer", "value": 0}], "title": "found", "column": [{"t": 1, "label": "path", "value": "path"}, {"t": 1, "label": "title", "value": "title"}], "classname": null}]	[{"act": "/compo/l?id=0", "icon": "fa fa-plus", "type": "Link", "roles": [], "title": "add", "ismain": false, "classname": null, "parametrs": [], "isforevery": 0}, {"act": "/compo/l", "icon": "fa fa-pencil", "type": "Link", "roles": [], "title": "edit", "ismain": true, "classname": null, "parametrs": [{"paramtitle": "id", "paramcolumn": {"t": 1, "key": "id_4403a", "label": "id", "value": "id"}}], "isforevery": 1}, {"act": "/composition", "icon": "fa fa-link", "type": "Link", "roles": [], "title": ", to compo", "ismain": false, "classname": null, "parametrs": [{"paramtype": "link", "paramconst": null, "paramtitle": "path", "paramcolumn": {"t": 1, "key": "path_67f8c", "label": "path", "value": "path"}}], "paramtype": "link", "isforevery": 1}, {"act": "/schema/deleterow", "icon": "fa fa-trash", "type": "Delete", "roles": [], "title": "delete", "ismain": false, "classname": null, "parametrs": [{"paramconst": null, "paramtitle": "id", "paramcolumn": {"t": 1, "key": "id_4403a", "label": "id", "value": "id"}}], "paramtype": null, "isforevery": 1}]	[0]	\N	t	t	t	t	f	f	{}	f
219	Test tiles	Test	test.major_table	tiles	t	[{"t": 1, "col": "id", "key": "id_3a31e", "join": false, "type": "label", "roles": "[]", "title": "id", "width": "", "relcol": null, "depency": false, "orderby": true, "visible": false, "relation": null, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "orderbydesc": true, "relationcolums": "[]"}, {"t": 2, "col": "text", "key": "text_84820", "join": false, "type": "text", "roles": "[]", "title": "text title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 3, "col": "data", "key": "data_9ef12", "join": false, "type": "date", "roles": "[]", "title": "data", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 4, "col": "check", "key": "check_c0adb", "join": false, "type": "checkbox", "roles": "[]", "title": "check", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 5, "col": "time", "key": "time_8c9c9", "join": false, "type": "time", "roles": "[]", "title": "time", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 6, "col": "password", "key": "password_3cd1a", "join": false, "type": "password", "roles": "[]", "title": "password", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 7, "col": "color", "key": "color_70c0b", "join": false, "type": "color", "roles": "[]", "title": "color", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 7, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 8, "col": "multiselect", "key": "multiselect_3da94", "join": false, "type": "multiselect", "roles": "[]", "title": "multiselect", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "multicolums": [{"label": "dname", "value": "dname"}], "relationcolums": "[]", "multiselecttable": "test.dictionary_for_select"}, {"t": 9, "col": "file", "key": "file_5d459", "join": false, "type": "file", "roles": "[]", "title": "file", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 9, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 10, "col": "typehead", "key": "typehead_e6558", "join": false, "type": "typehead", "roles": "[]", "title": "typehead", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 10, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 11, "col": "image", "key": "image_a483e", "join": false, "type": "image", "roles": "[]", "title": "image", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 11, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 12, "col": "images", "key": "images_4e4d0", "join": false, "type": "images", "roles": "[]", "title": "images", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 12, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 13, "col": "gallery", "key": "gallery_1cbc1", "join": false, "type": "gallery", "roles": "[]", "title": "gallery", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 13, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 14, "col": "label", "key": "label_b8274", "join": false, "type": "label", "roles": "[]", "title": "label", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 14, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 15, "col": "number", "key": "number_5a12a", "join": false, "type": "number", "roles": "[]", "title": "number", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 15, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 16, "col": "link", "key": "link_e7018", "join": false, "type": "link", "roles": "[]", "title": "link", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 16, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 17, "col": "texteditor", "key": "texteditor_377da", "join": false, "type": "texteditor", "roles": "[]", "title": "texteditor", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 17, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 18, "col": "colorrow", "key": "colorrow_b394b", "join": false, "type": "colorrow", "roles": "[]", "title": "color row", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 18, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 19, "col": "multitypehead_api", "key": "multitypehead_api_c7189", "join": false, "type": "multiselect_api", "roles": "[]", "title": "multitypehead_api", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 19, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 20, "col": "multi_select_api", "key": "multi_select_api_2c6b3", "join": false, "type": "multiselect_api", "roles": "[]", "title": "multi_select_api", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 20, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 21, "col": "colorpicker", "key": "colorpicker_d4763", "join": false, "type": "colorpicker", "roles": "[]", "title": "colorpicker", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 21, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 23, "col": "autocomplete", "key": "autocomplete_9bde0", "join": false, "type": "autocomplete", "roles": "[]", "title": "autocomplete", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 23, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 24, "col": "textarea", "key": "textarea_b7429", "join": false, "type": "textarea", "roles": "[]", "title": "textarea", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 24, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 25, "col": "files", "key": "files_68ff8", "join": false, "type": "files", "roles": "[]", "title": "files", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 25, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 26, "col": "typehead_api", "key": "typehead_api_6730b", "join": false, "type": "typehead_api", "roles": "[]", "title": "typehead_api", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 26, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 27, "col": "select_api", "key": "select_api_762ba", "join": false, "type": "select_api", "roles": "[]", "title": "select_api", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 27, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 28, "col": "multitypehead", "key": "multitypehead_0a55e", "join": false, "type": "multitypehead", "roles": "[]", "title": "multitypehead", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 28, "onetomany": false, "defaultval": null, "depencycol": null, "multicolums": [{"label": "dname", "value": "dname"}], "relationcolums": "[]", "multiselecttable": "test.dictionary_for_select"}, {"t": 29, "col": "datetime", "key": "datetime_388e5", "join": false, "type": "datetime", "roles": "[]", "title": "datetime", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 29, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 31, "col": "relate_with_major", "key": "relate_with_major_f4f4c", "join": false, "type": "array", "label": "relate_with_major || relate_with_major", "roles": "[]", "title": "relate_with_major", "width": "", "relcol": null, "depency": true, "visible": true, "relation": "test.relate_with_major", "required": false, "classname": "", "column_id": 31, "onetomany": true, "defaultval": null, "depencycol": "major_table_id", "relationcolums": [{"label": "id", "value": "id"}, {"label": "somecolumn", "value": "somecolumn"}, {"label": "major_table_id", "value": "major_table_id"}, {"label": "created", "value": "created"}]}, {"t": 22, "col": "select", "key": "select_b1405", "join": false, "type": "label", "label": "select || select", "roles": "[]", "title": "select", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "test.dictionary_for_select", "classname": "", "column_id": 22, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "dname", "title": "dname", "value": "dname"}, {"label": "id", "title": "id_", "value": "id"}]}, {"t": 22, "col": "dname", "key": "dname_c5340", "type": "text", "input": 0, "roles": [], "table": "test.dictionary_for_select", "title": "dname", "tpath": [], "output": 0, "relcol": null, "related": true, "visible": 1, "relation": null, "classname": "", "notaddable": false, "relatecolumn": "select", "relationcolums": "[]"}, {"t": 22, "col": "id", "key": "id_0.16492845318532945", "type": "label", "input": 0, "roles": [], "table": "test.dictionary_for_select", "title": "id_", "tpath": [], "output": 0, "relcol": null, "related": true, "visible": true, "relation": null, "classname": "", "notaddable": false, "relatecolumn": "select", "relationcolums": "[]"}]	testtiles	2019-10-22 08:09:09.114	[]	[{"t": 1, "type": "substr", "roles": [], "table": {"t": 2, "col": "text", "join": false, "type": "text", "roles": "[]", "title": "text", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, "title": "SUBSTR TEXT", "column": "text", "classname": ""}, {"type": "typehead", "roles": [], "title": "TYPEHEAD TEXT NUMBER COLOR", "column": [{"t": 1, "label": "text", "value": "text"}, {"t": 1, "label": "number", "value": "number"}, {"t": 1, "label": "color", "value": "color"}], "classname": ""}, {"t": 1, "type": "check", "roles": [], "table": {"t": 4, "col": "check", "join": false, "type": "checkbox", "roles": "[]", "title": "check", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, "title": "check", "column": "check", "classname": ""}, {"t": 1, "type": "period", "roles": [], "table": {"t": 3, "col": "data", "join": false, "type": "date", "roles": "[]", "title": "data", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, "title": "PERIOD", "column": "data", "classname": ""}, {"t": 1, "type": "select", "roles": [], "table": {"t": 22, "col": "select", "join": false, "type": "label", "label": "select || select", "roles": "[]", "title": "select", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "test.dictionary_for_select", "classname": "", "column_id": 22, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "dname", "title": "dname", "value": "dname"}]}, "title": "select filter", "column": "select", "classname": ""}, {"t": 1, "type": "multiselect", "roles": [], "table": {"t": 8, "col": "multiselect", "join": false, "type": "multiselect", "roles": "[]", "title": "multiselect", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "multicolums": [{"label": "dname", "value": "dname"}], "relationcolums": "[]", "multiselecttable": "test.dictionary_for_select"}, "title": "multi", "column": "multiselect", "classname": ""}, {"t": 1, "type": "multijson", "roles": [], "table": {"t": 28, "col": "multitypehead", "join": false, "type": "multitypehead", "roles": "[]", "title": "multitypehead", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 28, "onetomany": false, "defaultval": null, "depencycol": null, "multicolums": [{"label": "dname", "value": "dname"}], "relationcolums": "[]", "multiselecttable": "test.dictionary_for_select"}, "title": "multi json", "column": "multitypehead", "classname": ""}]	[{"act": "/trees/treetest", "type": "Link", "title": "show tree", "parametrs": [], "isforevery": false}, {"act": "/api/postmethodtest_setselectedcolor_black", "type": "API", "title": "set checke black (POST TEST CHECKED)", "parametrs": [{"paramt": null, "paramconst": "_checked_", "paraminput": "", "paramtitle": "checked", "paramcolumn": null}], "actapitype": "POST", "isforevery": false, "actapiconfirm": true, "actapirefresh": true}, {"act": "/getone/test_add", "icon": "pi pi-plus", "type": "Link", "title": "add with relations", "parametrs": [{"paramt": null, "paramconst": "0", "paraminput": "", "paramtitle": "id", "paramcolumn": null}, {"paramt": null, "paramconst": "number,check", "paraminput": "", "paramtitle": "relation", "paramcolumn": null}, {"paramt": null, "paramconst": "55", "paraminput": "", "paramtitle": "number", "paramcolumn": null}, {"paramt": null, "paramconst": "true", "paraminput": "", "paramtitle": "check", "paramcolumn": null}], "isforevery": false}, {"act": "/getone/test_edit", "icon": "fa fa-edit", "type": "Link", "roles": [], "title": "edit", "ismain": true, "classname": "", "parametrs": [{"paramt": null, "paramconst": "", "paramtitle": "id", "paramcolumn": {"t": 1, "key": "id_3a31e", "label": "id", "value": "id"}}], "paramtype": "query", "actapitype": "GET", "isforevery": true, "actapimethod": null, "actapiconfirm": true, "actapirefresh": true}, {"act": "/api/gettest", "icon": "pi pi-star-o", "type": "API", "title": "set red", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "id", "paramcolumn": {"t": 1, "key": "id_3a31e", "label": "id", "value": "id"}}], "actapitype": "GET", "isforevery": true, "actapiconfirm": true, "actapirefresh": true}, {"act": "/api/posttest", "icon": "pi pi-star", "type": "API", "title": "set blue", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "id", "paramcolumn": {"t": 1, "key": "id_3a31e", "label": "id", "value": "id"}}], "actapitype": "POST", "isforevery": true, "actapiconfirm": true, "actapirefresh": true}, {"act": "/", "icon": "fa fa-trash", "type": "Delete", "title": "delete", "classname": "p-button-danger", "parametrs": [], "isforevery": true}, {"act": "/getone/test_add", "icon": "fa fa-plus", "type": "Link", "roles": [], "title": "add", "ismain": false, "classname": "", "parametrs": [{"paramt": null, "paramconst": "0", "paramtitle": "id", "paramcolumn": null}], "paramtype": null, "actapitype": "GET", "isforevery": false, "actapimethod": null, "actapiconfirm": true, "actapirefresh": true}]	[0]	\N	t	t	t	t	f	t	{}	f
226	default value	default value	framework.defaultval	form not mutable	f	[{"t": 1, "col": "id", "key": "id_24be4", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "CN", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_24be4", "label": "id", "value": "CN"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 2, "col": "configid", "key": "configid_0c694", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "configid", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "framework.config", "required": true, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_24be4", "label": "id", "value": "CN"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 3, "col": "bool", "key": "bool_c1bb5", "join": false, "type": "select", "chckd": true, "roles": "[]", "title": "bool operator", "width": "", "relcol": "bname", "depency": false, "visible": true, "relation": "framework.booloper", "required": false, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "bname", "title": "bname", "value": "bname"}], "visible_condition": [{"col": {"t": 1, "key": "id_24be4", "label": "id", "value": "CN"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 4, "col": "act", "key": "act_1ae13", "join": false, "type": "select", "chckd": true, "roles": "[]", "title": "action", "width": "", "relcol": "value", "depency": false, "visible": true, "relation": "framework.operations", "required": false, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "value", "title": "value_", "value": "value"}], "visible_condition": [{"col": {"t": 1, "key": "id_24be4", "label": "id", "value": "CN"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 5, "col": "value", "key": "value_25aea", "join": false, "type": "text", "chckd": true, "roles": "[]", "title": "value", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_24be4", "label": "id", "value": "CN"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 6, "col": "created", "key": "created_946c2", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "created", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_24be4", "label": "id", "value": "CN"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}]	default_value	2019-10-27 21:28:41.788	[]	[]	[{"act": "/", "type": "Save", "title": "save", "classname": "p-button-success", "parametrs": [], "isforevery": false}, {"act": "/composition/defaultval", "icon": "fa fa-cross", "type": "Link", "title": "close", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "relation", "paramtitle": "relation", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "configid", "paramtitle": "configid", "paramcolumn": null}, {"paramt": null, "paramconst": "-1", "paraminput": "", "paramtitle": "CN", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "viewid", "paramtitle": "viewid", "paramcolumn": null}], "isforevery": false}]	[0]	\N	f	t	t	t	f	f	{}	f
228	action	view's action	framework.actions	form not mutable	f	[{"t": 1, "col": "id", "key": "id_24289", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "act_id", "width": "", "relcol": null, "depency": false, "orderby": true, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_24289", "label": "id", "value": "act_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 2, "col": "column_order", "key": "column_order_12d84", "join": false, "type": "number", "chckd": true, "roles": "[]", "title": "order by", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_24289", "label": "id", "value": "act_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 3, "col": "title", "key": "title_2f66f", "join": false, "type": "text", "chckd": true, "roles": "[]", "title": "act title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_24289", "label": "id", "value": "act_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 16, "col": "act_type", "key": "act_type_5c4e4", "join": false, "type": "select", "label": "act_type || act_type", "roles": "[]", "title": "act_type", "width": "", "relcol": "actname", "depency": false, "visible": true, "relation": "framework.acttypes", "required": false, "classname": "", "column_id": 16, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "actname", "title": "actname", "value": "actname"}], "visible_condition": [{"col": {"t": 1, "key": "id_24289", "label": "id", "value": "act_id"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 4, "col": "viewid", "key": "viewid_377d6", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "id", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "framework.views", "required": true, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_24289", "label": "id", "value": "act_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 5, "col": "icon", "key": "icon_04596", "join": false, "type": "text", "chckd": true, "roles": "[]", "title": "act icon", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_24289", "label": "id", "value": "act_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 6, "col": "classname", "key": "classname_1a0ce", "join": false, "type": "text", "chckd": true, "roles": "[]", "title": "class name", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_24289", "label": "id", "value": "act_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 7, "col": "act_url", "key": "act_url_29725", "join": false, "type": "text", "chckd": true, "roles": "[]", "title": "act url", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 7, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_24289", "label": "id", "value": "act_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}, {"col": {"t": 1, "key": "act_type_5c4e4", "label": "act_type", "value": "act_type"}, "const": null, "value": "Save,Delete", "operation": {"js": "", "label": "not in", "value": "not in", "python": "in"}}]}, {"t": 8, "col": "api_method", "key": "api_method_5aea3", "join": false, "type": "select", "chckd": true, "roles": "[]", "title": "api method", "width": "", "relcol": "aname", "depency": false, "visible": true, "relation": "framework.apicallingmethods", "required": false, "classname": "", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "aname", "title": "aname", "value": "aname"}], "visible_condition": [{"col": {"t": 1, "key": "id_24289", "label": "id", "value": "act_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}, {"col": {"t": 1, "key": "act_type_5c4e4", "label": "act_type", "value": "act_type"}, "const": null, "value": "API", "operation": {"js": "===", "label": "=", "value": "=", "python": "=="}}]}, {"t": 9, "col": "api_type", "key": "api_type_494c8", "join": false, "type": "select", "chckd": true, "roles": "[]", "title": "api type", "width": "", "relcol": "val", "depency": false, "visible": true, "relation": "framework.apimethods", "required": false, "classname": "", "column_id": 9, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "val", "title": "val", "value": "val"}], "visible_condition": [{"col": {"t": 1, "key": "id_24289", "label": "id", "value": "act_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}, {"col": {"t": 1, "key": "act_type_5c4e4", "label": "act_type", "value": "act_type"}, "const": null, "value": "API", "operation": {"js": "===", "label": "=", "value": "=", "python": "=="}}]}, {"t": 10, "col": "refresh_data", "key": "refresh_data_605f9", "join": false, "type": "checkbox", "chckd": true, "roles": "[]", "title": "refresh data", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 10, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_24289", "label": "id", "value": "act_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}, {"col": {"t": 1, "key": "act_type_5c4e4", "label": "act_type", "value": "act_type"}, "const": null, "value": "API", "operation": {"js": "===", "label": "=", "value": "=", "python": "=="}}]}, {"t": 11, "col": "ask_confirm", "key": "ask_confirm_a1e8d", "join": false, "type": "checkbox", "chckd": true, "roles": "[]", "title": "ask confirm", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 11, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_24289", "label": "id", "value": "act_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}, {"col": {"t": 1, "key": "act_type_5c4e4", "label": "act_type", "value": "act_type"}, "const": null, "value": "API", "operation": {"js": "===", "label": "=", "value": "=", "python": "=="}}]}, {"t": 12, "col": "roles", "key": "roles_01ded", "join": false, "type": "multiselect", "chckd": true, "roles": "[]", "title": "roles", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 12, "onetomany": false, "defaultval": null, "depencycol": null, "multicolums": [{"label": "id", "value": "id"}, {"label": "rolename", "value": "rolename"}], "relationcolums": "[]", "multiselecttable": "framework.roles", "visible_condition": [{"col": {"t": 1, "key": "id_24289", "label": "id", "value": "act_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 13, "col": "forevery", "key": "forevery_ddd3c", "join": false, "type": "checkbox", "chckd": true, "roles": "[]", "title": "for every row", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 13, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_24289", "label": "id", "value": "act_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 14, "col": "main_action", "key": "main_action_2a926", "join": false, "type": "checkbox", "chckd": true, "roles": "[]", "title": "main_action", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 14, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_24289", "label": "id", "value": "act_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 15, "col": "created", "key": "created_b5a98", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "created", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 15, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_24289", "label": "id", "value": "act_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}]	act	2019-10-29 15:47:40.911	[]	[]	[{"act": "/", "icon": "fa fa-check", "type": "Save", "title": "save", "classname": "p-button-success", "parametrs": [], "isforevery": false, "act_visible_condition": [{"col": {"t": 1, "key": "id_24289", "label": "id", "value": "act_id"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"act": "/composition/view", "icon": "fa fa-cross", "type": "Link", "title": "close", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "id", "paramtitle": "id", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "N", "paramtitle": "N", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "fl_id", "paramtitle": "fl_id", "paramcolumn": null}, {"paramt": null, "paramconst": "-1", "paraminput": "", "paramtitle": "act_id", "paramcolumn": null}], "isforevery": false, "act_visible_condition": [{"col": {"t": 1, "key": "id_24289", "label": "id", "value": "act_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"act": "/composition/act_params", "icon": "pi pi-primary", "type": "LinkTo", "title": "parametrs", "classname": "p-button-warning", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "act_id", "paramtitle": "actionid", "paramcolumn": null}, {"paramt": null, "paramconst": "actionid", "paraminput": "", "paramtitle": "relation", "paramcolumn": null}, {"paramt": null, "paramconst": "-1", "paraminput": "", "paramtitle": "paramid", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "act_id", "paramcolumn": {"t": 1, "key": "id_24289", "label": "id", "value": "act_id"}}], "isforevery": false, "act_visible_condition": [{"col": {"t": 1, "key": "id_24289", "label": "id", "value": "act_id"}, "const": null, "value": null, "operation": {"js": "!==null", "label": "is not null", "value": "is not null", "python": "is not None"}}]}, {"act": "/composition/act_visible_conditions", "icon": "pi pi-question", "type": "LinkTo", "title": "visible condition", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "actionid", "paramcolumn": {"t": 1, "key": "id_24289", "label": "id", "value": "act_id"}}, {"paramt": null, "paramconst": "actionid", "paraminput": "", "paramtitle": "relation", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "act_id", "paramcolumn": {"t": 1, "key": "id_24289", "label": "id", "value": "act_id"}}, {"paramt": null, "paramconst": "-1", "paraminput": "", "paramtitle": "vs_id", "paramcolumn": null}], "isforevery": false, "act_visible_condition": [{"col": {"t": 1, "key": "id_24289", "label": "id", "value": "act_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}, {"col": {"t": 1, "key": "id_24289", "label": "id", "value": "act_id"}, "const": null, "value": null, "operation": {"js": "!==null", "label": "is not null", "value": "is not null", "python": "is not None"}}]}]	[0]	\N	f	t	t	t	f	f	{}	f
230	add function column	add function column in config	framework.config	form not mutable	f	[{"t": 6, "col": "title", "key": "title_c9365", "join": false, "type": "text", "label": "title || title", "roles": "[]", "title": "title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 27, "col": "fn", "key": "fn_89c39", "join": false, "type": "select_api", "label": "fn || function is SELECT", "roles": "[]", "title": "function", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 27, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/getfunctions", "relationcolums": "[]"}, {"t": 28, "col": "fncolumns", "key": "fncolumns_f5959", "join": false, "type": "multiselect_api", "label": "fncolumns || Function input parametrs", "roles": "[]", "title": "columns", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 28, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/view_cols_for_fn", "relationcolums": "[]", "multiselecttable": "framework.config"}, {"t": 1, "col": "id", "key": "id_55faa", "join": false, "type": "label", "label": "id || id", "roles": "[]", "title": "id", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 1, "onetomany": false, "defaultval": [{"act": {"label": "=", "value": "="}, "bool": {"label": "and", "value": "and"}, "value": "0"}], "depencycol": null, "relationcolums": "[]"}]	fncol	2019-10-31 08:50:24.041	[]	[]	[{"act": "/api/addfncol", "icon": "pi pi-plus", "type": "API", "title": "add", "classname": "p-button-success", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "title", "paramcolumn": {"t": 1, "key": "title_c9365", "label": "title", "value": "title"}}, {"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "fn", "paramcolumn": {"t": 1, "key": "fn_89c39", "label": "fn", "value": "function"}}, {"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "fncols", "paramcolumn": {"t": 1, "key": "fncolumns_f5959", "label": "fncolumns", "value": "columns"}}, {"paramt": null, "paramconst": "", "paraminput": "id", "paramtitle": "viewid", "paramcolumn": null}], "actapitype": "POST", "isforevery": false, "actapiconfirm": true, "actapirefresh": true}, {"act": "/composition/view", "icon": "fa fa-refresh", "type": "Link", "title": "refresh", "classname": "p-button-primary", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "N", "paramtitle": "N", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "id", "paramtitle": "id", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "fl_id", "paramtitle": "fl_id", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "act_id", "paramtitle": "act_id", "paramcolumn": null}, {"paramt": null, "paramconst": "0", "paraminput": "", "paramtitle": "a", "paramcolumn": null}], "isforevery": false}]	[0]	\N	f	t	t	t	f	f	{}	f
232	add column	add column in config	framework.config	form not mutable	f	[{"t": 4, "col": "col", "key": "col_0e29d", "join": false, "type": "select_api", "label": "col || column title", "roles": "[]", "title": "column title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/config_selectapi", "relationcolums": "[]"}, {"t": 1, "col": "id", "key": "id_f9b44", "join": false, "type": "label", "label": "id || id", "roles": "[]", "title": "id", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 1, "onetomany": false, "defaultval": [{"act": {"label": "=", "value": "="}, "bool": {"label": "and", "value": "and"}, "value": "0"}], "depencycol": null, "relationcolums": "[]"}]	colinconf	2019-10-31 11:48:07.894	[]	[]	[{"act": "/api/addcol", "icon": "pi pi-plus", "type": "API", "title": "add", "classname": "p-button-success", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "col", "paramcolumn": {"t": 1, "key": "col_0e29d", "label": "col", "value": "column title"}}, {"paramt": null, "paramconst": "", "paraminput": "id", "paramtitle": "viewid", "paramcolumn": null}], "actapitype": "POST", "isforevery": false, "actapiconfirm": true, "actapirefresh": true}, {"act": "/composition/view", "icon": "fa fa-refresh", "type": "Link", "title": "refresh", "classname": "p-button-primary", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "N", "paramtitle": "N", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "id", "paramtitle": "id", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "fl_id", "paramtitle": "fl_id", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "act_id", "paramtitle": "act_id", "paramcolumn": null}, {"paramt": null, "paramconst": "0", "paraminput": "", "paramtitle": "i", "paramcolumn": null}], "isforevery": false}]	[0]	\N	f	t	t	t	f	f	{}	f
234	MainMenu	Menu list	framework.mainmenu	table	f	[{"t": 1, "col": "id", "key": "id_735c4", "join": 0, "type": "number", "input": 1, "roles": [], "title": "id", "width": "", "output": 1, "depency": null, "visible": 0, "relation": null, "column_id": 1, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": []},{"t": 2, "col": "title", "key": "title_89c08", "join": 0, "type": "text", "input": 0, "roles": [], "title": "title", "width": "", "output": 0, "depency": null, "visible": 1, "relation": null, "column_id": 2, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": []},{"t": 8, "col": "path", "key": "path_7a002", "join": 0, "type": "text", "input": 0, "roles": [], "title": "path", "width": "", "output": 0, "depency": null, "visible": 1, "relation": null, "column_id": 8, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": []},{"t": 4, "col": "roles", "key": "roles_a4e0d", "join": 0, "type": "text", "input": 0, "roles": [], "title": "roles", "width": "", "output": 0, "depency": null, "visible": 1, "relation": null, "column_id": 4, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": []},{"t": 6, "col": "systemfield", "key": "systemfield_0fd10", "join": 0, "type": "checkbox", "input": 0, "roles": [], "title": "systemfield", "width": "", "output": 0, "depency": null, "visible": 1, "relation": null, "column_id": 6, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": []},{"t": 9, "col": "icon", "key": "icon_96cd7", "join": false, "type": "text", "roles": [], "title": "icon", "width": "", "depency": null, "visible": true, "relation": null, "classname": null, "column_id": 10, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": []},{"t": 3, "col": "parentid", "key": "parentid_a25dc", "join": 0, "type": "select", "input": 0, "roles": [], "title": "parentid", "width": "", "output": 0, "depency": null, "visible": false, "relation": "framework.mainmenu", "column_id": 3, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "title", "title": "title_", "value": "title"}]},{"t": 3, "col": "title", "key": "title_d0cd9", "type": "text", "input": 0, "roles": [], "table": "framework.mainmenu", "title": "parent", "tpath": [], "output": 0, "related": true, "visible": 1, "relation": null, "classname": null, "notaddable": false, "relatecolumn": "parentid", "relationcolums": []},{"t": 7, "col": "orderby", "key": "orderby_8b3ef", "join": 0, "type": "number", "input": 0, "roles": [], "title": "orderby", "width": "", "output": 0, "depency": null, "visible": 1, "relation": null, "column_id": 7, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": []},{"t": 5, "col": "created", "key": "created_01666", "join": 0, "type": "date", "input": 0, "roles": [], "title": "created", "width": "", "output": 0, "depency": null, "visible": 1, "relation": null, "column_id": 5, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": []},{"t": 10, "col": "menuid", "key": "menuid_ac20c", "join": false, "type": "number", "label": "menuid || menuid", "roles": "[]", "title": "menuid", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "framework.menus", "classname": "", "column_id": 10, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}]	menusettings	2018-11-30 12:50:20	[]	[{"t": 1, "key": "4iwOLNx3K", "type": "multiselect", "roles": [{"label": "developer", "value": 0}], "table": "framework.mainmenu", "title": "parent", "column": "parentid", "classname": null}, {"type": "typehead", "roles": [], "title": "search", "column": [{"t": 1, "label": "title", "value": "title"}, {"t": 1, "label": "path", "value": "path"}], "classname": ""}]	[{"act": "/getone/menuedit", "icon": "fa fa-edit", "type": "Link", "roles": [], "title": "edit", "ismain": true, "classname": null, "parametrs": [{"paramtitle": "id", "paramcolumn": {"t": 1, "key": "id_735c4", "label": "id", "value": "id"}}, {"paramtitle": "o", "paramcolumn": {"t": 1, "key": "title_89c08", "label": "title", "value": "title"}}], "isforevery": 1}, {"act": "/schema/deleterow", "icon": "fa fa-trash", "type": "Delete", "roles": [], "title": "delete menu", "ismain": false, "classname": "btn", "parametrs": [{"paramconst": null, "paramtitle": "id", "paramcolumn": {"t": 1, "key": "id_735c4", "label": "id", "value": "id"}}], "isforevery": 1}, {"act": "/getone/menuedit", "icon": "fa fa-plus", "type": "Link", "roles": [], "title": "add menu", "ismain": false, "classname": null, "parametrs": [{"paramt": null, "paramconst": "0", "paramtitle": "id", "paramcolumn": null}, {"paramt": null, "paramconst": "menuid", "paramtitle": "relation", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paramtitle": "menuid", "paramcolumn": {"t": 1, "key": "menuid_ac20c", "label": "menuid", "value": "menuid"}}], "isforevery": 0}, {"act": "/list/projectmenus", "icon": "fa fa-arrow-left", "type": "Link", "roles": [], "title": "back", "ismain": false, "classname": "", "parametrs": [], "paramtype": null, "actapitype": "GET", "isforevery": false, "actapimethod": null, "actapiconfirm": true, "actapirefresh": true}]	[0]	\N	f	t	t	t	f	f	{}	f
242	filter	filter edit/add	framework.filters	form not mutable	f	[{"t": 1, "col": "id", "key": "id_06102", "join": false, "type": "label", "chckd": false, "roles": "[]", "title": "fl_id", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_06102", "label": "id", "value": "fl_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 12, "col": "column_order", "key": "column_order_ca9cc", "join": false, "type": "number", "label": "column_order || column_order", "roles": "[]", "title": "column_order", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_06102", "label": "id", "value": "fl_id"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 2, "col": "viewid", "key": "viewid_04c9d", "join": false, "type": "label", "chckd": false, "roles": "[]", "title": "id", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "framework.views", "required": true, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_06102", "label": "id", "value": "fl_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 3, "col": "title", "key": "title_769d5", "join": false, "type": "text", "chckd": false, "roles": "[]", "title": "title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_06102", "label": "id", "value": "fl_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 4, "col": "type", "key": "type_6ac01", "join": false, "type": "select", "chckd": false, "roles": "[]", "title": "type", "width": "", "relcol": "ftname", "depency": false, "visible": true, "relation": "framework.filtertypes", "required": false, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "ftname", "title": "ftname", "value": "ftname"}], "visible_condition": [{"col": {"t": 1, "key": "id_06102", "label": "id", "value": "fl_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 5, "col": "classname", "key": "classname_fa186", "join": false, "type": "text", "chckd": false, "roles": "[]", "title": "classname", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_06102", "label": "id", "value": "fl_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 6, "col": "column", "key": "column_a844c", "join": false, "type": "select_api", "chckd": false, "roles": "[]", "title": "column", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/tabcolumns_for_filters", "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_06102", "label": "id", "value": "fl_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}, {"col": {"t": 1, "key": "type_6ac01", "label": "type", "value": "type"}, "const": null, "value": "typehead", "operation": {"js": "!==", "label": "!=", "value": "<>", "python": "!="}}]}, {"t": 7, "col": "columns", "key": "columns_3048c", "join": false, "type": "multiselect_api", "chckd": false, "roles": "[]", "title": "columns", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 7, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/tabcolumns_for_filters_arr", "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_06102", "label": "id", "value": "fl_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}, {"col": {"t": 1, "key": "type_6ac01", "label": "type", "value": "type"}, "const": null, "value": "typehead", "operation": {"js": "===", "label": "=", "value": "=", "python": "=="}}]}, {"t": 8, "col": "roles", "key": "roles_628d8", "join": false, "type": "multiselect", "chckd": false, "roles": "[]", "title": "roles", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "multicolums": [{"label": "id", "value": "id"}, {"label": "rolename", "value": "rolename"}], "relationcolums": "[]", "multiselecttable": "framework.roles", "visible_condition": [{"col": {"t": 1, "key": "id_06102", "label": "id", "value": "fl_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 9, "col": "t", "key": "t_ed9da", "join": false, "type": "label", "chckd": false, "roles": "[]", "title": "t", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 9, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_06102", "label": "id", "value": "fl_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 10, "col": "table", "key": "table_49b09", "join": false, "type": "label", "chckd": false, "roles": "[]", "title": "table", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 10, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_06102", "label": "id", "value": "fl_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 11, "col": "created", "key": "created_9dfd6", "join": false, "type": "label", "chckd": false, "roles": "[]", "title": "created", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 11, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_06102", "label": "id", "value": "fl_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}]	filter	2019-10-28 15:41:00.635	[]	[]	[{"act": "/", "icon": "pi pi-check", "type": "Save", "title": "save", "classname": "p-button-success", "parametrs": [], "isforevery": false, "act_visible_condition": [{"col": {"t": 1, "key": "id_06102", "label": "id", "value": "fl_id"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"act": "/composition/view", "icon": "fa fa-cross", "type": "Link", "title": "close", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "id", "paramtitle": "id", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "N", "paramtitle": "N", "paramcolumn": null}, {"paramt": null, "paramconst": "-1", "paraminput": "", "paramtitle": "fl_id", "paramcolumn": null}, {"paramt": null, "paramconst": "-1", "paraminput": "", "paramtitle": "act_id", "paramcolumn": null}], "isforevery": false, "act_visible_condition": [{"col": {"t": 1, "key": "id_06102", "label": "id", "value": "fl_id"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}]	[0]	\N	f	t	t	t	f	f	{}	f
50785	schemas	schemas list	sqlmanager.schemalist	table	f	[]	schemas	2020-05-11 16:45:27.915281	[]	[]	[]	[0]	schema_table	f	t	t	t	f	f	{}	f
50793	Table Add	Table Add	sqlmanager.tablelist	form not mutable	f	[]	table	2020-05-14 09:50:06.44016	[]	[]	[]	[0]	\N	f	t	t	t	f	f	{}	f
244	act visible condition	act visible condition	framework.act_visible_condions	form not mutable	f	[{"t": 1, "col": "id", "key": "id_99ad9", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "vs_id", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_99ad9", "label": "id", "value": "vs_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 2, "col": "actionid", "key": "actionid_79ee8", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "actionid", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "framework.actions", "required": true, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_99ad9", "label": "id", "value": "vs_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 3, "col": "val_desc", "key": "val_desc_241f6", "join": false, "type": "select", "chckd": true, "roles": "[]", "title": "val_desc", "width": "", "relcol": "id", "depency": false, "visible": true, "relation": "framework.config", "required": false, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "id", "title": "id", "value": "id"}, {"label": "title", "title": "title_", "value": "title"}], "visible_condition": [{"col": {"t": 1, "key": "id_99ad9", "label": "id", "value": "vs_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 6, "col": "operation", "key": "operation_b171e", "join": false, "type": "select", "chckd": true, "roles": "[]", "title": "operation", "width": "", "relcol": "value", "depency": false, "visible": true, "relation": "framework.operations", "required": false, "classname": "", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "value", "title": "value_", "value": "value"}], "visible_condition": [{"col": {"t": 1, "key": "id_99ad9", "label": "id", "value": "vs_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 7, "col": "value", "key": "value_2cf11", "join": false, "type": "text", "chckd": true, "roles": "[]", "title": "value", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 7, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_99ad9", "label": "id", "value": "vs_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 8, "col": "created", "key": "created_dcab2", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "created", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_99ad9", "label": "id", "value": "vs_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}]	act_visible	2019-10-29 18:07:07.283	[]	[]	[{"act": "/", "icon": "fa fa-check", "type": "Save", "title": "save", "classname": "p-button-success", "parametrs": [], "isforevery": false, "act_visible_condition": [{"col": {"t": 1, "key": "id_99ad9", "label": "id", "value": "vs_id"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"act": "/composition/act_visible_conditions", "icon": "fa fa-cros", "type": "Link", "title": "close", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "actionid", "paramtitle": "actionid", "paramcolumn": null}, {"paramt": null, "paramconst": "actionid", "paraminput": "", "paramtitle": "relation", "paramcolumn": null}, {"paramt": null, "paramconst": "-1", "paraminput": "", "paramtitle": "vs_id", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "act_id", "paramtitle": "act_id", "paramcolumn": null}], "isforevery": false, "act_visible_condition": [{"col": {"t": 1, "key": "id_99ad9", "label": "id", "value": "vs_id"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}]	[0]	\N	f	t	t	t	f	f	{}	f
217	SP API	API methods Storage procedures	framework.spapi	table	t	[{"t": 1, "col": "id", "key": "id_64329", "join": 0, "type": "number", "roles": "[]", "title": "id", "width": "", "depency": null, "visible": 1, "relation": null, "classname": null, "column_id": 1, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 6, "col": "methodtype", "key": "methodtype_2e0fc", "join": 0, "type": "select", "roles": "[]", "title": "methodtype", "width": "", "depency": null, "visible": 0, "relation": "framework.methodtypes", "classname": null, "column_id": 6, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "methotypename", "value": "methotypename"}]},{"t": 2, "col": "methodname", "key": "methodname_06743", "join": 0, "type": "text", "roles": "[]", "title": "method name", "width": "", "depency": null, "visible": 1, "relation": null, "classname": null, "column_id": 2, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 3, "col": "procedurename", "key": "procedurename_a1796", "join": 0, "type": "text", "roles": "[]", "title": "procedure name", "width": "", "depency": null, "visible": 1, "relation": null, "classname": null, "column_id": 3, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 6, "col": "methotypename", "key": "methotypename_4f63d", "type": "text", "input": 0, "roles": [], "table": "framework.methodtypes", "title": "methotypename", "tpath": [], "output": 0, "related": 1, "visible": true, "relation": null, "classname": null, "notaddable": 0, "relatecolumn": "methodtype", "relationcolums": "[]"},{"t": 4, "col": "roles", "key": "roles_391ac", "join": 0, "type": "text", "roles": "[]", "title": "roles", "width": "", "depency": null, "visible": 1, "relation": null, "classname": null, "column_id": 4, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 5, "col": "created", "key": "created_72941", "join": 0, "type": "date", "roles": "[]", "title": "created", "width": "", "depency": null, "visible": 1, "relation": null, "classname": null, "column_id": 5, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"}]	spapi	2018-12-21 14:27:50.79	[]	[{"type": "typehead", "roles": [], "title": "found", "column": [{"t": 1, "label": "methodname", "value": "methodname"}, {"t": 1, "label": "procedurename", "value": "procedure name"}], "classname": "form-control"}]	[{"act": "/getone/spapiform?N=0", "icon": "fa fa-plus", "type": "Link", "roles": [], "title": "add", "ismain": false, "classname": null, "parametrs": [], "paramtype": null, "isforevery": 0}, {"act": "/getone/spapiform", "icon": "fa fa-pencil", "type": "Link", "roles": [], "title": "edit", "ismain": true, "classname": null, "parametrs": [{"paramconst": null, "paramtitle": "N", "paramcolumn": {"t": 1, "key": "id_64329", "label": "id", "value": "id"}}], "paramtype": "query", "isforevery": 1}, {"act": "/schema/deleterow", "icon": "fa fa-trash", "type": "Delete", "roles": [], "title": "del", "ismain": false, "classname": null, "parametrs": [{"paramconst": null, "paramtitle": "id", "paramcolumn": {"t": 1, "key": "id_64329", "label": "id", "value": "id"}}], "paramtype": null, "isforevery": 1}]	[0]	\N	f	t	t	t	f	f	{}	f
44	Notifications	Notifications	framework.viewsnotification	table	t	[{"t": 1, "col": "id", "key": "id_d4be3", "join": false, "type": "number", "roles": "[]", "title": "id", "width": "", "depency": false, "visible": true, "relation": null, "classname": null, "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 2, "col": "viewid", "key": "viewid_f2004", "join": false, "type": "number", "roles": "[]", "title": "viewid", "width": "", "depency": false, "visible": false, "relation": "framework.views", "classname": null, "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 3, "col": "col", "key": "col_186f8", "join": false, "type": "text", "roles": "[]", "title": "col", "width": "", "depency": false, "visible": false, "relation": null, "classname": null, "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 4, "col": "tableid", "key": "tableid_aa778", "join": false, "type": "text", "roles": "[]", "title": "tableid", "width": "", "depency": false, "visible": false, "relation": null, "classname": null, "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 5, "col": "notificationtext", "key": "notificationtext_3e718", "join": false, "type": "text", "roles": "[]", "title": "notificationtext", "width": "", "depency": false, "visible": true, "relation": null, "classname": null, "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 6, "col": "foruser", "key": "foruser_91970", "join": false, "type": "number", "roles": "[]", "title": "foruser", "width": "", "depency": false, "visible": false, "relation": null, "classname": null, "column_id": 6, "onetomany": false, "defaultval": [{"act": {"label": "=", "value": "="}, "bool": {"label": "and", "value": "and"}, "value": "_userid_"}], "depencycol": null, "relationcolums": "[]"},{"t": 7, "col": "issend", "key": "issend_a7456", "join": false, "type": "checkbox", "roles": "[]", "title": "issend", "width": "", "depency": false, "visible": true, "relation": null, "classname": null, "column_id": 7, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 8, "col": "isread", "key": "isread_f1224", "join": false, "type": "checkbox", "roles": "[]", "title": "isread", "width": "", "depency": false, "visible": true, "relation": null, "classname": null, "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 9, "col": "created", "key": "created_ebdeb", "join": false, "type": "date", "roles": "[]", "title": "created", "width": "", "depency": false, "visible": true, "relation": null, "classname": null, "column_id": 9, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 10, "col": "sended", "key": "sended_d9382", "join": false, "type": "date", "roles": "[]", "title": "sended", "width": "", "depency": false, "visible": true, "relation": null, "classname": null, "column_id": 10, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 11, "col": "readed", "key": "readed_ee0ca", "join": false, "type": "date", "roles": "[]", "title": "readed", "width": "", "depency": false, "visible": true, "relation": null, "classname": null, "column_id": 11, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}]	notifs	2019-03-19 16:03:31.905	[]	[{"t": 1, "type": "check", "roles": [], "table": null, "title": "sended", "column": "issend", "classname": null}, {"t": 1, "type": "check", "roles": [], "table": null, "title": "readed", "column": "isread", "classname": null}]	[]	[0]	\N	t	t	t	t	f	f	{}	f
218	Add Test	Test add form	test.major_table	form full	f	[{"t": 1, "col": "id", "key": "id_8ddb9", "join": false, "type": "label", "roles": "[]", "title": "id", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 1, "onetomany": false, "updatable": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 2, "col": "text", "key": "text_1b65e", "join": false, "type": "text", "roles": "[]", "title": "text title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 2, "onetomany": false, "updatable": true, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 15, "col": "number", "key": "number_991fb", "join": false, "type": "number", "chckd": false, "roles": "[]", "title": "number title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 15, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 3, "col": "data", "key": "data_a366d", "join": false, "type": "date", "roles": "[]", "title": "date title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 29, "col": "datetime", "key": "datetime_2a4ce", "join": false, "type": "datetime", "roles": "[]", "title": "datetime", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 29, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 5, "col": "time", "key": "time_9e903", "join": false, "type": "time", "roles": "[]", "title": "time title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 4, "col": "check", "key": "check_21497", "join": false, "type": "checkbox", "roles": "[]", "title": "check title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 6, "col": "password", "key": "password_ba7eb", "join": false, "type": "password", "roles": "[]", "title": "password title visible check", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "text_1b65e", "label": "text", "value": "text title"}, "const": null, "value": "1", "operation": {"js": "indexOf", "label": "like", "value": "like", "python": "find"}}]}, {"t": 10, "col": "typehead", "key": "typehead_32a4a", "join": false, "type": "typehead", "label": "typehead || typehead", "roles": "[]", "title": "typehead title", "width": "", "relcol": "id", "depency": false, "visible": true, "relation": "test.dictionary_for_select", "required": false, "classname": "", "column_id": 10, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "id", "title": "id_", "value": "id"}, {"label": "dname", "title": "dname", "value": "dname"}], "select_condition": [{"col": {"label": "dname", "value": "dname"}, "const": "T", "value": null, "operation": {"js": "indexOf", "label": "like", "value": "like", "python": "find"}}, {"col": {"label": "id", "value": "id"}, "const": "3", "value": null, "operation": {"js": "", "label": "not in", "value": "not in", "python": "in"}}]}, {"t": 22, "col": "select", "key": "select_9c133", "join": false, "type": "select", "chckd": false, "roles": "[]", "title": "select title", "width": "", "relcol": "id", "depency": false, "visible": true, "relation": "test.dictionary_for_select", "required": false, "classname": "", "column_id": 22, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "id", "title": "id_", "value": "id"}, {"label": "dname", "title": "dname", "value": "dname"}]}, {"t": 8, "col": "multiselect", "key": "multiselect_71f34", "join": false, "type": "multiselect", "roles": "[]", "title": "multiselect title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "multicolums": [{"label": "id", "title": "id_", "value": "id"}, {"label": "dname", "title": "dname", "value": "dname"}], "relationcolums": "[]", "multiselecttable": "test.dictionary_for_select"}, {"t": 28, "col": "multitypehead", "key": "multitypehead_2f343", "join": false, "type": "multitypehead", "roles": "[]", "title": "multitypehead title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 28, "onetomany": false, "defaultval": null, "depencycol": null, "multicolums": [{"label": "id", "value": "id"}, {"label": "dname", "value": "dname"}], "relationcolums": "[]", "multiselecttable": "test.dictionary_for_select"}, {"t": 27, "col": "select_api", "key": "select_api_a0d95", "join": false, "type": "select_api", "roles": "[]", "title": "select_api title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 27, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/select_api_test", "relationcolums": "[]"}, {"t": 26, "col": "typehead_api", "key": "typehead_api_1a8a1", "join": false, "type": "typehead_api", "roles": "[]", "title": "typehead_api title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 26, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/select_api_test", "relationcolums": "[]"}, {"t": 20, "col": "multi_select_api", "key": "multi_select_api_990f5", "join": false, "type": "multiselect_api", "roles": "[]", "title": "multi_select_api", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 20, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/select_api_test", "relationcolums": "[]"}, {"t": 19, "col": "multitypehead_api", "key": "multitypehead_api_dc5d0", "join": false, "type": "multitypehead_api", "roles": "[]", "title": "multitypehead_api", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 19, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/select_api_test", "relationcolums": "[]"}, {"t": 23, "col": "autocomplete", "key": "autocomplete_963d3", "join": false, "type": "autocomplete", "roles": "[]", "title": "autocomplete title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 23, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 16, "col": "link", "key": "link_a992a", "join": false, "type": "link", "chckd": false, "roles": "[]", "title": "link title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 16, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 14, "col": "label", "key": "label_c82e8", "join": false, "type": "label", "roles": "[]", "title": "label title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 14, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 17, "col": "texteditor", "key": "texteditor_185bd", "join": false, "type": "texteditor", "roles": "[]", "title": "texteditor title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 17, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 31, "col": "html", "key": "html_9f66a", "join": false, "type": "innerHtml", "label": "html || html", "roles": "[]", "title": "html title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 30, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 24, "col": "textarea", "key": "textarea_0425d", "join": false, "type": "textarea", "roles": "[]", "title": "textarea title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 24, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 21, "col": "colorpicker", "key": "colorpicker_daa19", "join": false, "type": "colorpicker", "roles": "[]", "title": "colorpicker title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 21, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 7, "col": "color", "key": "color_1fd98", "join": false, "type": "color", "roles": "[]", "title": "color title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 7, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 18, "col": "colorrow", "key": "colorrow_27de8", "join": false, "type": "color", "chckd": false, "roles": "[]", "title": "colorrow title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 18, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 9, "col": "file", "key": "file_ee82c", "join": false, "type": "file", "roles": "[]", "title": "file title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 9, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 25, "col": "files", "key": "files_c1997", "join": false, "type": "files", "roles": "[]", "title": "files title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 25, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 30, "col": "files", "key": "files_d18ec", "join": false, "type": "filelist", "label": "files || files", "roles": "[]", "title": "filelist title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 25, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 11, "col": "image", "key": "image_b7bd1", "join": false, "type": "image", "roles": "[]", "title": "image title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 11, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 12, "col": "images", "key": "images_fda10", "join": false, "type": "images", "roles": "[]", "title": "images title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 12, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 13, "col": "gallery", "key": "gallery_39fb0", "join": false, "type": "gallery", "roles": "[]", "title": "gallery title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 13, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}]	test_add	2019-10-17 09:33:25.059	[]	[]	[{"act": "/list/test", "type": "Link", "title": "go back", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "o", "paramcolumn": {"t": 1, "key": "id_8ddb9", "label": "id", "value": "id"}}], "isforevery": false}, {"act": "/", "type": "Link", "title": "visible check", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "id", "paramtitle": "id", "paramcolumn": null}], "isforevery": false, "act_visible_condition": [{"col": {"t": 1, "key": "text_1b65e", "label": "text", "value": "text title"}, "const": null, "value": "1", "operation": {"js": "indexOf", "label": "like", "value": "like", "python": "find"}}]}, {"act": "/api/gettest", "type": "API", "title": "set color red (GET TEST)", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "id", "paramcolumn": {"t": 1, "key": "id_8ddb9", "label": "id", "value": "id"}}], "actapitype": "GET", "isforevery": false, "actapiconfirm": true, "actapirefresh": true, "act_visible_condition": [{"col": {"t": 1, "key": "id_8ddb9", "label": "id", "value": "id"}, "value": "0", "operation": {"js": "!==null", "label": "is not null", "value": "is not null", "python": "is not None"}}]}]	[0]	\N	f	t	t	t	f	f	{}	f
231	visible condition (act)	visible condition (act)	framework.act_visible_condions	table	f	[{"t": 1, "col": "id", "key": "id_65b40", "join": false, "type": "label", "roles": "[]", "title": "id", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 3, "col": "val_desc", "key": "val_desc_6e0f4", "join": false, "type": "label", "roles": "[]", "title": "val_desc", "width": "", "relcol": "id", "depency": false, "visible": true, "relation": "framework.config", "required": false, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "title", "title": "title_", "value": "title"}]}, {"t": 2, "col": "actionid", "key": "actionid_c3a88", "join": false, "type": "label", "label": "actionid || actionid", "roles": "[]", "title": "act_id", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "framework.actions", "required": true, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 3, "col": "title", "key": "title_0.009939721068436658", "join": false, "type": "label", "input": 0, "roles": [], "table": "framework.config", "title": "column title", "tpath": [], "output": 0, "relcol": null, "related": true, "visible": true, "relation": null, "classname": "", "notaddable": false, "relatecolumn": "val_desc", "relationcolums": "[]"}, {"t": 6, "col": "operation", "key": "operation_36434", "join": false, "type": "label", "roles": "[]", "title": "operation", "width": "", "relcol": "value", "depency": false, "visible": true, "relation": "framework.operations", "required": false, "classname": "", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 7, "col": "value", "key": "value_d4bd2", "join": false, "type": "label", "roles": "[]", "title": "value", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 7, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 8, "col": "created", "key": "created_e0db0", "join": false, "type": "label", "roles": "[]", "title": "created", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}]	act_visible_condition	2019-10-29 17:47:17.834	[]	[]	[]	[0]	config_table	f	t	t	t	f	f	{}	f
100	Trees Acts	Trees Acts	framework.treesacts	table	f	[{"t": 1, "col": "id", "key": "id_a639b", "join": false, "type": "number", "roles": "[]", "title": "id", "width": "", "depency": false, "visible": false, "relation": null, "classname": null, "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 2, "col": "treesid", "key": "treesid_1d756", "join": false, "type": "number", "roles": "[]", "title": "treesid", "width": "", "depency": false, "visible": false, "relation": "framework.trees", "classname": null, "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 3, "col": "title", "key": "title_1556d", "join": false, "type": "text", "roles": "[]", "title": "title", "width": "", "depency": false, "visible": true, "relation": null, "classname": null, "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 4, "col": "icon", "key": "icon_69668", "join": false, "type": "text", "roles": "[]", "title": "icon", "width": "", "depency": false, "visible": true, "relation": null, "classname": null, "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 5, "col": "classname", "key": "classname_12bbd", "join": false, "type": "text", "roles": "[]", "title": "classname", "width": "", "depency": false, "visible": true, "relation": null, "classname": null, "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 6, "col": "act", "key": "act_3f5aa", "join": false, "type": "text", "roles": "[]", "title": "act", "width": "", "depency": false, "visible": true, "relation": null, "classname": null, "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 7, "col": "created", "key": "created_e51e6", "join": false, "type": "date", "roles": "[]", "title": "created", "width": "", "depency": false, "visible": true, "relation": null, "classname": null, "column_id": 7, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}]	treesacts	2019-04-17 10:05:28.002	[]	[]	[{"act": "/composition/treesacts", "icon": "fa fa-edit", "type": "Link", "roles": [], "title": "edit", "classname": null, "parametrs": [{"paramconst": null, "paramtitle": "id", "paramcolumn": {"t": 1, "key": "id_a639b", "label": "id", "value": "id"}}, {"paramconst": null, "paramtitle": "treesid", "paramcolumn": {"t": 1, "key": "treesid_1d756", "label": "treesid", "value": "treesid"}}], "paramtype": null, "actapitype": "GET", "isforevery": true}, {"act": "/composition/treesacts", "icon": "fa fa-plus", "type": "Link", "roles": [], "title": "add", "classname": null, "parametrs": [{"paramconst": "treesid", "paramtitle": "relation", "paramcolumn": null}, {"paramconst": null, "paramtitle": "treesid", "paramcolumn": {"t": 1, "key": "treesid_1d756", "label": "treesid", "value": "treesid"}}, {"paramconst": "0", "paramtitle": "bid", "paramcolumn": null}], "paramtype": null, "actapitype": "GET", "isforevery": false}, {"act": "/getone/treesact", "icon": "fa fa-trash", "type": "Delete", "roles": [], "title": "del", "classname": null, "parametrs": [{"paramconst": null, "paramtitle": "id", "paramcolumn": {"t": 1, "key": "id_a639b", "label": "id", "value": "id"}}], "paramtype": null, "actapitype": "GET", "isforevery": true}, {"act": "/list/trees", "icon": "fa fa-arrow-left", "type": "Link", "roles": [], "title": "go back", "classname": null, "parametrs": [], "paramtype": null, "actapitype": "GET", "isforevery": false}]	[0]	\N	f	f	f	f	f	f	{}	f
212	sp api form	sp api form	framework.spapi	form not mutable	f	[{"t": 1, "col": "id", "key": "id_2f194", "join": 0, "type": "number", "roles": "[]", "title": "N", "width": "", "depency": null, "visible": 0, "relation": null, "classname": null, "column_id": 1, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 3, "col": "procedurename", "key": "procedurename_f7596", "join": 0, "type": "text", "roles": "[]", "title": "procedure name", "width": "", "depency": null, "visible": 1, "relation": null, "classname": "col-md-11", "column_id": 3, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 2, "col": "methodname", "key": "methodname_d29f9", "join": 0, "type": "text", "roles": "[]", "title": "method name", "width": "", "depency": null, "visible": 1, "relation": null, "classname": "col-md-11", "column_id": 2, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 6, "col": "methodtype", "key": "methodtype_0f8c0", "join": 0, "type": "select", "roles": "[]", "title": "methodtype", "width": "", "depency": null, "visible": true, "relation": "framework.methodtypes", "classname": "col-md-11", "column_id": 6, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "id", "title": "id", "value": "id"}, {"label": "methotypename", "value": "methotypename"}]},{"t": 4, "col": "roles", "key": "roles_11b3a", "join": 0, "type": "multiselect", "roles": "[]", "title": "roles", "width": "", "depency": null, "visible": 1, "relation": null, "classname": "col-md-11", "column_id": 4, "onetomany": 0, "defaultval": null, "depencycol": null, "multicolums": [{"label": "id", "value": "id"}, {"label": "rolename", "value": "rolename"}], "relationcolums": "[]", "multiselecttable": "framework.roles"},{"t": 5, "col": "created", "key": "created_cea86", "join": 0, "type": "label", "roles": "[]", "title": "created", "width": "", "depency": null, "visible": false, "relation": null, "classname": "col-md-11", "column_id": 5, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"}]	spapiform	2018-12-21 15:40:13.427	[]	[]	[{"act": "/list/spapi", "icon": "fa  fa-arrow-left", "type": "Link", "roles": [], "title": "back", "classname": "btn btn-outline-secondary", "parametrs": [], "paramtype": "query", "isforevery": 0}]	[0]	\N	f	t	t	t	f	f	{}	f
213	profile detail	profile detail	framework.users	form not mutable	f	[{"t": 2, "col": "fam", "key": "fam_1fdd0", "join": false, "type": "text", "chckd": true, "roles": "[]", "title": "fam", "width": "", "depency": null, "visible": 1, "relation": null, "classname": "col-md-11", "column_id": 2, "onetomany": 0, "updatable": true, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 3, "col": "im", "key": "im_97e79", "join": false, "type": "text", "chckd": true, "roles": "[]", "title": "im", "width": "", "depency": null, "visible": 1, "relation": null, "classname": "col-md-11", "column_id": 3, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 4, "col": "ot", "key": "ot_3dc36", "join": 0, "type": "text", "chckd": true, "roles": "[]", "title": "ot", "width": "", "depency": null, "visible": 1, "relation": null, "classname": "col-md-11", "column_id": 4, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 5, "col": "login", "key": "login_668a5", "join": 0, "type": "text", "chckd": true, "roles": "[]", "title": "login", "width": "", "depency": null, "visible": 1, "relation": null, "classname": "col-md-11", "column_id": 5, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 6, "col": "password", "key": "password_e8a55", "join": 0, "type": "password", "chckd": true, "roles": "[]", "title": "password", "width": "", "depency": null, "visible": 1, "relation": null, "classname": "col-md-11", "column_id": 6, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 8, "col": "isactive", "key": "isactive_4fd3c", "join": 0, "type": "checkbox", "chckd": true, "roles": "[]", "title": "isactive", "width": "", "depency": null, "visible": 1, "relation": null, "classname": "col-md-11", "column_id": 8, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 9, "col": "created", "key": "created_6eef3", "join": 0, "type": "label", "chckd": true, "roles": "[]", "title": "created", "width": "", "depency": null, "visible": 1, "relation": null, "classname": "col-md-11", "column_id": 9, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 10, "col": "roles", "key": "roles_38fa7", "join": false, "type": "multiselect", "chckd": true, "roles": "[]", "title": "roles", "width": "", "depency": null, "visible": true, "relation": null, "classname": "col-md-11", "column_id": 11, "onetomany": false, "defaultval": null, "depencycol": null, "multicolums": [{"label": "id", "value": "id"}, {"label": "rolename", "value": "rolename"}], "relationcolums": "[]", "multiselecttable": "framework.roles"},{"t": 12, "col": "orgs", "key": "orgs_a0379", "join": false, "type": "multiselect", "chckd": true, "roles": "[]", "title": "orgs", "width": "", "depency": false, "visible": true, "relation": null, "classname": "col-md-11", "column_id": 12, "onetomany": false, "defaultval": null, "depencycol": null, "multicolums": [{"label": "id", "value": "id"}, {"label": "orgname", "value": "orgname"}], "relationcolums": "[]", "multiselecttable": "framework.orgs"},{"t": 1, "col": "id", "key": "id_e5b0b", "join": 0, "type": "number", "chckd": true, "roles": "[]", "title": "id", "width": "", "depency": null, "visible": 0, "relation": null, "classname": "col-md-11", "column_id": 1, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 11, "col": "roleid", "key": "roleid_b85e3", "join": false, "type": "number", "chckd": true, "roles": "[]", "title": "roleid", "width": "", "depency": null, "visible": false, "relation": null, "classname": "col-md-11", "column_id": 12, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 12, "col": "photo", "key": "photo_89f6d", "join": false, "type": "image", "chckd": true, "roles": "[]", "title": "photo", "width": "", "depency": null, "visible": true, "relation": null, "classname": "col-md-11", "column_id": 13, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}]	userone	2018-12-28 13:19:10.513	[]	[]	[{"act": "/list/users", "icon": "fa fa-arrow-left", "type": "Link", "roles": [], "title": "назад", "classname": "btn btn-success", "parametrs": [], "paramtype": null, "isforevery": 0}]	[0]	\N	f	t	t	t	f	f	{}	f
119	Report	Report	reports.reportlist	form not mutable	f	[{"t": 1, "col": "id", "key": "JOnGSRyKG", "join": false, "type": "number", "chckd": true, "roles": [], "title": "reportlistid", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "col-md-12", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": []}, {"t": 2, "col": "title", "key": "dlOopwPw0", "join": false, "type": "text", "chckd": true, "roles": [], "title": "Название", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "col-md-12", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": []}, {"t": 7, "col": "functitle", "key": "aED8FkNoc", "join": false, "type": "select_api", "chckd": true, "roles": [], "title": "Название функции", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "col-md-12", "column_id": 7, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/getreports_fn", "relationcolums": []}, {"t": 4, "col": "path", "key": "_2r2cfWZF", "join": false, "type": "text", "chckd": true, "roles": [], "title": "Путь", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "col-md-12", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": []}, {"t": 12, "col": "filename", "key": "huoS5sxK-", "join": false, "type": "text", "label": "filename || filename", "roles": "[]", "title": "Название файла", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 13, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 5, "col": "template", "key": "2JgoKkLvf", "join": false, "type": "file", "chckd": true, "roles": [], "title": "Файл шаблона", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "col-md-12", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": []}, {"t": 3, "col": "roles", "key": "pOfNaTK_F", "join": false, "type": "multiselect", "chckd": true, "roles": [], "title": "Роли", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "col-md-12", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "multicolums": [{"label": "id", "value": "id"}, {"label": "rolename", "value": "rolename"}], "relationcolums": [], "multiselecttable": "framework.roles"}, {"t": 6, "col": "template_path", "key": "9hr4DsPxc", "join": false, "type": "text", "chckd": true, "roles": [], "title": "template_path", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "col-md-12", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": []}, {"t": 8, "col": "created", "key": "NhxnO78Eh", "join": false, "type": "date", "chckd": true, "roles": [], "title": "created", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "col-md-12", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": []}, {"t": 9, "col": "section", "key": "XYWGF5Nqn", "join": false, "type": "autocomplete", "label": "section || Секция", "roles": "[]", "title": "Секция", "width": "150", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 10, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}]	reportone	2019-06-25 15:50:17	[]	[]	[{"act": "/api/save", "icon": "save", "type": "Save", "roles": [], "title": "Сохранить изменения", "classname": "btn-success", "parametrs": [], "paramtype": null, "isforevery": false}, {"act": "/list/reports", "icon": "check", "type": "Link", "roles": [], "title": "готово", "classname": "btn btn-success", "parametrs": [], "paramtype": null, "actapitype": "GET", "isforevery": false, "actapimethod": null, "actapiconfirm": true, "actapirefresh": true}]	[{"key": 0, "label": "developer", "value": 0}, 0]	\N	f	t	t	t	f	f	{}	f
120	Reports Parametrs	Reports Parametrs	reports.reportparams	table	f	[{"t": 1, "col": "id", "key": "Kn0NKmUSY", "join": false, "type": "number", "roles": [], "title": "param_id", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": []}, {"t": 2, "col": "reportlistid", "key": "_fubFUahh", "join": false, "type": "number", "roles": [], "title": "reportlistid", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "reports.reportlist", "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": []}, {"t": 3, "col": "ptitle", "key": "Y53QrH5AS", "join": false, "type": "text", "roles": [], "title": "Название параметра", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": []}, {"t": 4, "col": "func_paramtitle", "key": "B430_9kWT", "join": false, "type": "text", "roles": [], "title": "Название параметра в функции", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": []}, {"t": 5, "col": "ptype", "key": "iN1LdDyCY", "join": false, "type": "select", "roles": [], "title": "Тип параметра", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "reports.paramtypes", "classname": "", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "typename", "title": "typename", "value": "typename"}]}, {"t": 5, "col": "typename", "key": "A-sfj5QVm", "type": "text", "input": 0, "roles": [], "table": "reports.paramtypes", "title": "Тип", "tpath": [], "output": 0, "related": true, "visible": 1, "relation": null, "classname": "", "notaddable": false, "relatecolumn": "ptype", "relationcolums": "[]"}, {"t": 7, "col": "created", "key": "3524oX6-O", "join": false, "type": "date", "roles": [], "title": "created", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 7, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": []}, {"t": 8, "col": "completed", "key": "gGy_ho08n", "join": false, "type": "checkbox", "label": "completed || completed", "roles": "[]", "title": "completed", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 9, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": null, "fn": {"label": "public.fn_completed_colorblack", "value": "public.fn_completed_colorblack", "functype": "user"}, "col": "color", "key": "7E6EUp7C5", "type": "colorrow", "input": 0, "roles": [], "table": null, "title": "color", "tpath": null, "output": 0, "related": true, "visible": false, "relation": null, "fncolumns": [{"t": 1, "label": "completed", "value": "completed"}], "relatecolumn": "", "relationcolums": "[]"}, {"t": 9, "col": "orderby", "join": false, "type": "label", "label": "orderby || orderby", "roles": "[]", "title": "orderby", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 9, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}]	reportparams	2019-06-25 16:04:11	[]	[]	[{"act": "/composition/reportone", "icon": "plus", "type": "Link", "roles": [], "title": "add", "classname": "", "parametrs": [{"key": "uqR4O", "paramt": null, "paramconst": "0", "paramtitle": "paramid", "paramcolumn": ""}, {"key": "h0Ont", "paramt": null, "paramconst": "reportlistid", "paramtitle": "relation", "paramcolumn": ""}, {"key": "jVgA_", "paramt": null, "paramconst": "", "paramtitle": "reportlistid", "paramcolumn": {"t": 1, "label": "reportlistid", "value": "reportlistid"}}], "paramtype": null, "actapitype": "GET", "isforevery": false, "actapimethod": null, "actapiconfirm": true, "actapirefresh": true}, {"act": "/composition/reportone", "icon": "edit", "type": "Link", "roles": [], "title": "edit", "classname": "", "parametrs": [{"key": "f6QyW", "paramt": null, "paramconst": "", "paramtitle": "paramid", "paramcolumn": {"t": 1, "label": "id", "value": "param_id"}}, {"key": "M8e9t", "paramt": null, "paramconst": "", "paramtitle": "reportlistid", "paramcolumn": {"t": 1, "label": "reportlistid", "value": "reportlistid"}}], "paramtype": null, "actapitype": "GET", "isforevery": true, "actapimethod": null, "actapiconfirm": true, "actapirefresh": true}, {"act": "/composition/reportone", "icon": "delete", "type": "Delete", "roles": [], "title": "del", "classname": "", "parametrs": [], "paramtype": null, "actapitype": "GET", "isforevery": true, "actapimethod": null, "actapiconfirm": true, "actapirefresh": true}]	[{"key": 0, "label": "developer", "value": 0}, 0]	\N	t	f	f	t	f	f	{}	f
150	Project menus	all menu settings	framework.menus	table	f	[{"t": 1, "col": "id", "key": "id_45b9e", "join": false, "type": "number", "roles": "[]", "title": "id", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 3, "col": "menutitle", "key": "menutitle_dbef5", "join": false, "type": "text", "roles": "[]", "title": "menu title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 2, "col": "mtypename", "key": "mtypename_c7b5a", "type": "text", "input": 0, "roles": [], "table": "framework.menutypes", "title": "menu type", "tpath": [], "output": 0, "relcol": null, "related": true, "visible": 1, "relation": null, "classname": "", "notaddable": false, "relatecolumn": "menutype", "relationcolums": "[]"},{"t": 4, "col": "ismainmenu", "key": "ismainmenu_6f900", "join": false, "type": "checkbox", "roles": "[]", "title": "is main menu", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 2, "col": "menutype", "key": "menutype_08fc0", "join": false, "type": "number", "label": "menutype || menutype", "roles": "[]", "title": "menutype", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "framework.menutypes", "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "mtypename", "title": "mtypename", "value": "mtypename"}]}]	projectmenus	2019-08-11 18:25:07	[]	[]	[{"act": "/getone/projectmenu", "icon": "fa fa-edit", "type": "Link", "roles": [], "title": "edit", "ismain": true, "classname": "btn", "parametrs": [{"paramt": null, "paramconst": "", "paramtitle": "id", "paramcolumn": {"t": 1, "key": "id_45b9e", "label": "id", "value": "id"}}], "paramtype": null, "actapitype": "GET", "isforevery": true, "actapimethod": null, "actapiconfirm": true, "actapirefresh": true}, {"act": "/list/menusettings", "icon": "fa fa-list", "type": "Link", "roles": [], "title": "menu list", "ismain": false, "classname": "", "parametrs": [{"paramt": null, "paramconst": "", "paramtitle": "menuid", "paramcolumn": {"t": 1, "key": "id_45b9e", "label": "id", "value": "id"}}], "paramtype": null, "actapitype": "GET", "isforevery": true, "actapimethod": null, "actapiconfirm": true, "actapirefresh": true}, {"act": "/getone/projectmenu", "icon": "fa fa-trash", "type": "Delete", "roles": [], "title": "del", "ismain": false, "classname": "btn", "parametrs": [], "paramtype": null, "actapitype": "GET", "isforevery": true, "actapimethod": null, "actapiconfirm": true, "actapirefresh": true}, {"act": "/getone/projectmenu", "icon": "fa fa-plus", "type": "Link", "roles": [], "title": "add", "ismain": false, "classname": "btn", "parametrs": [{"paramt": null, "paramconst": "0", "paramtitle": "id", "paramcolumn": null}], "paramtype": null, "actapitype": "GET", "isforevery": false, "actapimethod": null, "actapiconfirm": true, "actapirefresh": true}]	[0]	\N	t	f	f	f	f	f	{}	f
215	Edit Test	Test edit form	test.major_table	form not mutable	f	[{"t": 1, "col": "id", "key": "id_8ddb9", "join": false, "type": "label", "roles": "[]", "title": "id", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 2, "col": "text", "key": "text_1b65e", "join": false, "type": "text", "roles": "[]", "title": "text title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 15, "col": "number", "key": "number_991fb", "join": false, "type": "number", "chckd": false, "roles": "[]", "title": "number title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 15, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 3, "col": "data", "key": "data_a366d", "join": false, "type": "date", "roles": "[]", "title": "date title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 29, "col": "datetime", "key": "datetime_2a4ce", "join": false, "type": "datetime", "roles": "[]", "title": "datetime", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 29, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 5, "col": "time", "key": "time_9e903", "join": false, "type": "time", "roles": "[]", "title": "time title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 4, "col": "check", "key": "check_21497", "join": false, "type": "checkbox", "roles": "[]", "title": "check title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 6, "col": "password", "key": "password_ba7eb", "join": false, "type": "password", "roles": "[]", "title": "password title visible check", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "text_1b65e", "label": "text", "value": "text title"}, "const": null, "value": "1", "operation": {"js": "indexOf", "label": "like", "value": "like", "python": "find"}}]}, {"t": 10, "col": "typehead", "key": "typehead_32a4a", "join": false, "type": "typehead", "label": "typehead || typehead", "roles": "[]", "title": "typehead title", "width": "", "relcol": "id", "depency": false, "visible": true, "relation": "test.dictionary_for_select", "required": false, "classname": "", "column_id": 10, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "id", "title": "id_", "value": "id"}, {"label": "dname", "title": "dname", "value": "dname"}], "select_condition": [{"col": {"label": "dname", "value": "dname"}, "const": "T", "value": null, "operation": {"js": "indexOf", "label": "like", "value": "like", "python": "find"}}, {"col": {"label": "id", "value": "id"}, "const": "3", "value": null, "operation": {"js": "", "label": "not in", "value": "not in", "python": "in"}}]}, {"t": 22, "col": "select", "key": "select_9c133", "join": false, "type": "select", "chckd": false, "roles": "[]", "title": "select title", "width": "", "relcol": "id", "depency": false, "visible": true, "relation": "test.dictionary_for_select", "required": false, "classname": "", "column_id": 22, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "id", "title": "id_", "value": "id"}, {"label": "dname", "title": "dname", "value": "dname"}]}, {"t": 8, "col": "multiselect", "key": "multiselect_71f34", "join": false, "type": "multiselect", "roles": "[]", "title": "multiselect title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "multicolums": [{"label": "id", "title": "id_", "value": "id"}, {"label": "dname", "title": "dname", "value": "dname"}], "relationcolums": "[]", "multiselecttable": "test.dictionary_for_select"}, {"t": 28, "col": "multitypehead", "key": "multitypehead_2f343", "join": false, "type": "multitypehead", "roles": "[]", "title": "multitypehead title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 28, "onetomany": false, "defaultval": null, "depencycol": null, "multicolums": [{"label": "id", "value": "id"}, {"label": "dname", "value": "dname"}], "relationcolums": "[]", "multiselecttable": "test.dictionary_for_select"}, {"t": 27, "col": "select_api", "key": "select_api_a0d95", "join": false, "type": "select_api", "roles": "[]", "title": "select_api title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 27, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/select_api_test", "relationcolums": "[]"}, {"t": 26, "col": "typehead_api", "key": "typehead_api_1a8a1", "join": false, "type": "typehead_api", "roles": "[]", "title": "typehead_api title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 26, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/select_api_test", "relationcolums": "[]"}, {"t": 20, "col": "multi_select_api", "key": "multi_select_api_990f5", "join": false, "type": "multiselect_api", "roles": "[]", "title": "multi_select_api", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 20, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/select_api_test", "relationcolums": "[]"}, {"t": 19, "col": "multitypehead_api", "key": "multitypehead_api_dc5d0", "join": false, "type": "multitypehead_api", "roles": "[]", "title": "multitypehead_api", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 19, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/select_api_test", "relationcolums": "[]"}, {"t": 23, "col": "autocomplete", "key": "autocomplete_963d3", "join": false, "type": "autocomplete", "roles": "[]", "title": "autocomplete title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 23, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 16, "col": "link", "key": "link_a992a", "join": false, "type": "link", "chckd": false, "roles": "[]", "title": "link title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 16, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 14, "col": "label", "key": "label_c82e8", "join": false, "type": "label", "roles": "[]", "title": "label title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 14, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 17, "col": "texteditor", "key": "texteditor_185bd", "join": false, "type": "texteditor", "roles": "[]", "title": "texteditor title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 17, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 31, "col": "html", "key": "html_9f66a", "join": false, "type": "innerHtml", "label": "html || html", "roles": "[]", "title": "html title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 30, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 24, "col": "textarea", "key": "textarea_0425d", "join": false, "type": "textarea", "roles": "[]", "title": "textarea title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 24, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 21, "col": "colorpicker", "key": "colorpicker_daa19", "join": false, "type": "colorpicker", "roles": "[]", "title": "colorpicker title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 21, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 7, "col": "color", "key": "color_1fd98", "join": false, "type": "color", "roles": "[]", "title": "color title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 7, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 18, "col": "colorrow", "key": "colorrow_27de8", "join": false, "type": "color", "chckd": false, "roles": "[]", "title": "colorrow title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 18, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 9, "col": "file", "key": "file_ee82c", "join": false, "type": "file", "roles": "[]", "title": "file title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 9, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 25, "col": "files", "key": "files_c1997", "join": false, "type": "files", "roles": "[]", "title": "files title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 25, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 30, "col": "files", "key": "files_d18ec", "join": false, "type": "filelist", "label": "files || files", "roles": "[]", "title": "filelist title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 25, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 11, "col": "image", "key": "image_b7bd1", "join": false, "type": "image", "roles": "[]", "title": "image title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 11, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 12, "col": "images", "key": "images_fda10", "join": false, "type": "images", "roles": "[]", "title": "images title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 12, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 13, "col": "gallery", "key": "gallery_39fb0", "join": false, "type": "gallery", "roles": "[]", "title": "gallery title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 13, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 32, "col": "link", "key": "link_31a7a", "join": false, "type": "link", "label": "link || link", "roles": "[]", "title": "link", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 16, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 33, "col": "relate_with_major", "key": "relate_with_major_767d7", "join": false, "type": "array", "label": "relate_with_major || relate_with_major", "roles": "[]", "title": "relate_with_major", "width": "", "relcol": null, "depency": true, "visible": true, "relation": "test.relate_with_major", "required": false, "classname": "", "column_id": 31, "onetomany": true, "defaultval": null, "depencycol": "major_table_id", "relationcolums": [{"label": "id", "value": "id"}, {"label": "somecolumn", "value": "somecolumn"}, {"label": "major_table_id", "value": "major_table_id"}, {"label": "created", "value": "created"}]}]	test_edit	2019-10-13 18:23:51.794	[]	[]	[{"act": "/", "icon": "pi pi-check", "type": "Save", "title": "save", "classname": "p-button-success", "parametrs": [], "isforevery": false}, {"act": "/list/test", "type": "Link", "title": "go back", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "o", "paramcolumn": {"t": 1, "key": "id_8ddb9", "label": "id", "value": "id"}}], "isforevery": false}, {"act": "/", "type": "Link", "title": "visible check", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "id", "paramtitle": "id", "paramcolumn": null}], "isforevery": false, "act_visible_condition": [{"col": {"t": 1, "key": "text_1b65e", "label": "text", "value": "text title"}, "const": null, "value": "1", "operation": {"js": "indexOf", "label": "like", "value": "like", "python": "find"}}]}, {"act": "/api/gettest", "type": "API", "title": "set color red (GET TEST)", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "id", "paramcolumn": {"t": 1, "key": "id_8ddb9", "label": "id", "value": "id"}}], "actapitype": "GET", "isforevery": false, "actapiconfirm": true, "actapirefresh": true}, {"act": "/api/posttest", "type": "API", "title": "set color blue (POST TEST)", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "id", "paramcolumn": {"t": 1, "key": "id_8ddb9", "label": "id", "value": "id"}}], "actapitype": "POST", "isforevery": false, "actapiconfirm": true, "actapirefresh": true}]	[0]	\N	f	t	t	t	f	f	{}	f
216	Logs	logs	framework.logtable	table	t	[{"t": 1, "col": "id", "key": "id_34b32", "join": 0, "type": "number", "roles": [{"label": "developer", "value": 0}], "title": "id", "width": "", "depency": null, "visible": false, "relation": null, "classname": null, "column_id": 1, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 2, "col": "tablename", "key": "tablename_ebb38", "join": 0, "type": "text", "roles": "[]", "title": "tablename", "width": "", "depency": null, "visible": 1, "relation": null, "classname": null, "column_id": 2, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 3, "col": "tableid", "key": "tableid_fde82", "join": 0, "type": "text", "roles": "[]", "title": "tableid", "width": "", "depency": null, "visible": 1, "relation": null, "classname": null, "column_id": 3, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 4, "col": "typename", "key": "typename_5e1dd", "type": "text", "input": 0, "roles": [], "table": "framework.opertypes", "title": "typename", "tpath": [], "output": 0, "related": true, "visible": 1, "relation": null, "classname": null, "notaddable": false, "relatecolumn": "opertype", "relationcolums": "[]"},{"t": 10, "col": "userid", "key": "userid_ef191", "join": false, "type": "number", "roles": "[]", "title": "userid", "width": "", "depency": false, "visible": false, "relation": "framework.users", "classname": null, "column_id": 10, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "login", "title": "login", "value": "login"}]},{"t": 4, "col": "opertype", "key": "opertype_fd401", "join": 0, "type": "select", "roles": "[]", "title": "opertype", "width": "", "depency": null, "visible": 0, "relation": "framework.opertypes", "classname": null, "column_id": 4, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "typename", "value": "typename"}]},{"t": 10, "col": "login", "key": "login_a0df0", "type": "text", "input": 0, "roles": [], "table": "framework.users", "title": "login", "tpath": [], "output": 0, "related": true, "visible": 1, "relation": null, "classname": null, "notaddable": false, "relatecolumn": "userid", "relationcolums": "[]"},{"t": 6, "col": "oldata", "key": "oldata_0d446", "join": 0, "type": "text", "roles": "[]", "title": "oldata", "width": "", "depency": null, "visible": false, "relation": null, "classname": null, "column_id": 6, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 7, "col": "newdata", "key": "newdata_19fbf", "join": 0, "type": "text", "roles": "[]", "title": "newdata", "width": "", "depency": null, "visible": false, "relation": null, "classname": null, "column_id": 7, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 8, "col": "created", "key": "created_2e98e", "join": 0, "type": "date", "roles": "[]", "title": "created", "width": "", "depency": null, "visible": 1, "relation": null, "classname": null, "column_id": 8, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"}]	logs	2018-12-17 16:10:52.48	[]	[{"t": 1, "type": "substr", "roles": [], "table": null, "title": "table name", "column": "tablename", "classname": null}, {"t": 1, "type": "select", "roles": [], "table": {"t": 4, "col": "opertype", "join": 0, "type": "select", "roles": "[]", "title": "opertype", "width": "", "depency": null, "visible": 0, "relation": "framework.opertypes", "classname": null, "column_id": 4, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "typename", "value": "typename"}]}, "title": "operation type", "column": "opertype", "classname": null}, {"t": 1, "type": "period", "roles": [], "table": null, "title": "created", "column": "created", "classname": null}, {"t": 1, "type": "substr", "roles": [], "table": {"t": 3, "col": "tableid", "join": 0, "type": "text", "roles": "[]", "title": "tableid", "width": "", "depency": null, "visible": 1, "relation": null, "classname": null, "column_id": 3, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, "title": "table id", "column": "tableid", "classname": "form-control"}]	[{"act": "/getone/log", "icon": "fa fa-eye", "type": "Link", "roles": [], "title": "look", "ismain": true, "classname": null, "parametrs": [{"paramconst": null, "paramtitle": "id", "paramcolumn": {"t": 1, "key": "id_34b32", "label": "id", "value": "id"}}], "paramtype": null, "actapitype": "GET", "isforevery": true}]	[0]	\N	t	t	f	t	f	f	{}	f
221	Edit configs column	Edit config col	framework.config	form not mutable	f	[{"t": 26, "col": "column_order", "key": "column_order_c7f83", "join": false, "type": "number", "roles": "[]", "title": "column order", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 26, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 1, "col": "id", "key": "id_e0e06", "join": false, "type": "label", "roles": "[]", "title": "N", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 2, "col": "viewid", "key": "viewid_daea5", "join": false, "type": "label", "roles": "[]", "title": "id", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "framework.views", "required": false, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "viewtype", "title": "viewtype", "value": "viewtype"}]}, {"t": 3, "col": "t", "key": "t_3e499", "join": false, "type": "label", "roles": "[]", "title": "t", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 4, "col": "col", "key": "col_e6d58", "join": false, "type": "label", "roles": "[]", "title": "column title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 5, "col": "column_id", "key": "column_id_465e6", "join": false, "type": "label", "roles": "[]", "title": "column_id", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 6, "col": "title", "key": "title_2c03d", "join": false, "type": "text", "chckd": true, "roles": "[]", "title": "title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 7, "col": "type", "key": "type_67120", "join": false, "type": "select", "chckd": true, "label": "type || type", "roles": "[]", "title": "type", "width": "", "relcol": "typename", "depency": false, "visible": true, "relation": "framework.columntypes", "required": false, "classname": "", "column_id": 7, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "typename", "title": "typename", "value": "typename"}], "visible_condition": [{"col": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 27, "col": "fn", "key": "fn_74402", "join": false, "type": "select_api", "label": "fn || function is SELECT", "roles": "[]", "title": "fn", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 27, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/getfunctions", "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "fn_74402", "label": "fn", "value": "fn"}, "value": null, "operation": {"js": "!==null", "label": "is not null", "value": "is not null", "python": "is not None"}}]}, {"t": 28, "col": "fncolumns", "key": "fncolumns_ab6fc", "join": false, "type": "multiselect_api", "label": "fncolumns || Function input parametrs", "roles": "[]", "title": "fn columns", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 28, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/view_cols_for_fn", "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "fncolumns_ab6fc", "label": "fncolumns", "value": "fn columns"}, "const": null, "value": null, "operation": {"js": "!==null", "label": "is not null", "value": "is not null", "python": "is not None"}}]}, {"t": 8, "col": "roles", "key": "roles_75a89", "join": false, "type": "multiselect", "chckd": true, "roles": "[]", "title": "roles", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "multicolums": [{"label": "id", "value": "id"}, {"label": "rolename", "value": "rolename"}], "relationcolums": "[]", "multiselecttable": "framework.roles", "visible_condition": [{"col": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 9, "col": "visible", "key": "visible_523ef", "join": false, "type": "checkbox", "chckd": true, "roles": "[]", "title": "visible", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 9, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 10, "col": "required", "key": "required_00bf1", "join": false, "type": "checkbox", "chckd": true, "roles": "[]", "title": "is required", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 10, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 11, "col": "width", "key": "width_ff86c", "join": false, "type": "text", "chckd": true, "roles": "[]", "title": "width", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 11, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 12, "col": "join", "key": "join_be1e1", "join": false, "type": "checkbox", "chckd": true, "roles": "[]", "title": "join", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 12, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 13, "col": "classname", "key": "classname_c29c2", "join": false, "type": "text", "chckd": true, "roles": "[]", "title": "classname", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 13, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 14, "col": "updatable", "key": "updatable_51ca3", "join": false, "type": "checkbox", "chckd": true, "roles": "[]", "title": "updatable", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 14, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 16, "col": "select_api", "key": "select_api_1f4cb", "join": false, "type": "text", "roles": "[]", "title": "select_api", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 16, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "type_67120", "label": "type", "value": "type"}, "value": "_api", "operation": {"js": "indexOf", "label": "like", "value": "like", "python": "find"}}, {"col": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 18, "col": "orderby", "key": "orderby_98fc5", "join": false, "type": "checkbox", "chckd": true, "roles": "[]", "title": "order by", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 18, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 19, "col": "orderbydesc", "key": "orderbydesc_7433a", "join": false, "type": "checkbox", "chckd": true, "roles": "[]", "title": "order by desc", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 19, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 15, "col": "relation", "key": "relation_db866", "join": false, "type": "label", "roles": "[]", "title": "relation table", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 15, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "relation_db866", "label": "relation", "value": "relation table"}, "const": null, "value": "", "operation": {"js": "!==null", "label": "is not null", "value": "is not null", "python": "is not None"}}, {"col": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 17, "col": "multiselecttable", "key": "multiselecttable_9f5f9", "join": false, "type": "select_api", "roles": "[]", "title": "multiselecttable", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 17, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/gettables", "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "type_67120", "label": "type", "value": "type"}, "value": "multiselect,multitypehead", "operation": {"js": "", "label": "in", "value": "in", "python": "in"}}, {"col": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 20, "col": "relcol", "key": "relcol_3cf99", "join": false, "type": "label", "roles": "[]", "title": "relcol", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 20, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 21, "col": "depency", "key": "depency_76519", "join": false, "type": "label", "roles": "[]", "title": " is depency", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 21, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 24, "col": "multicolums", "key": "multicolums_aac16", "join": false, "type": "multiselect_api", "roles": "[]", "title": "multicolums", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 24, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/multi_tabcolumns", "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "type_67120", "label": "type", "value": "type"}, "const": null, "value": "multiselect,multitypehead", "operation": {"js": "", "label": "in", "value": "in", "python": "in"}}, {"col": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 23, "col": "relationcolums", "key": "relationcolums_69b4d", "join": false, "type": "multiselect_api", "roles": "[]", "title": "relationcolums", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 23, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/rel_tabcolumns", "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "type_67120", "label": "type", "value": "type"}, "value": "select,typehead,array", "operation": {"js": "", "label": "in", "value": "in", "python": "in"}}, {"col": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 25, "col": "depencycol", "key": "depencycol_7f6a2", "join": false, "type": "label", "roles": "[]", "title": "depencycol", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 25, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/dep_tabcolumns", "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "depency_76519", "label": "depency", "value": " is depency"}, "const": null, "value": "true", "operation": {"js": "===", "label": "=", "value": "=", "python": "=="}}, {"col": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 29, "col": "defaultval", "key": "defaultval_bceff", "join": false, "type": "array", "chckd": true, "roles": "[]", "title": "defaultval", "width": "", "relcol": null, "depency": true, "visible": true, "relation": "framework.defaultval", "required": false, "classname": "", "column_id": 29, "onetomany": true, "defaultval": null, "depencycol": "configid", "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 30, "col": "select_condition", "key": "select_condition_7e9fa", "join": false, "type": "array", "chckd": true, "roles": "[]", "title": "select_condition", "width": "", "relcol": null, "depency": true, "visible": true, "relation": "framework.select_condition", "required": false, "classname": "", "column_id": 29, "onetomany": true, "defaultval": null, "depencycol": "configid", "relationcolums": [{"label": "col", "value": "col"}, {"label": "operation", "value": "operation"}, {"label": "const", "value": "const"}, {"label": "val_desc", "value": "val_desc"}], "visible_condition": [{"col": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 31, "col": "visible_condition", "key": "visible_condition_a7c9f", "join": false, "type": "array", "chckd": true, "roles": "[]", "title": "visible_condition", "width": "", "relcol": null, "depency": true, "visible": true, "relation": "framework.visible_condition", "required": false, "classname": "", "column_id": 29, "onetomany": true, "defaultval": null, "depencycol": "configid", "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 2, "col": "viewtype", "key": "viewtype_0.1904830102583417", "join": false, "type": "label", "input": 0, "roles": [], "table": "framework.views", "title": "viewtype", "tpath": [], "output": 0, "relcol": null, "related": true, "visible": false, "relation": "framework.viewtypes", "classname": "", "notaddable": true, "relatecolumn": "viewid", "relationcolums": "[]"}]	config	2019-10-25 11:50:39.116	[]	[]	[{"act": "/", "type": "Save", "title": "save", "classname": "p-button-success", "parametrs": [], "isforevery": false, "act_visible_condition": [{"col": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"act": "/composition/defaultval", "icon": "pi pi-key", "type": "Link", "title": "default value", "classname": "p-button-primary", "parametrs": [{"paramt": null, "paramconst": "configid", "paraminput": "", "paramtitle": "relation", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "configid", "paramcolumn": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}}, {"paramt": null, "paramconst": "-1", "paraminput": "", "paramtitle": "CN", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "viewid", "paramcolumn": {"t": 1, "key": "viewid_daea5", "label": "viewid", "value": "id"}}], "isforevery": false, "act_visible_condition": [{"col": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"act": "/composition/visible_conditions", "icon": "pi pi-question", "type": "LinkTo", "title": "visible condition", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "configid", "paramcolumn": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}}, {"paramt": null, "paramconst": "configid", "paraminput": "", "paramtitle": "relation", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "_sub_title", "paramcolumn": {"t": 1, "key": "title_2c03d", "label": "title", "value": "title"}}, {"paramt": null, "paramconst": "-1", "paraminput": "", "paramtitle": "CN", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "viewid", "paramcolumn": {"t": 1, "key": "viewid_daea5", "label": "viewid", "value": "id"}}], "isforevery": false, "act_visible_condition": [{"col": {"t": 2, "key": "viewtype_0.1904830102583417", "label": "viewtype", "value": "viewtype"}, "const": null, "value": "form", "operation": {"js": "indexOf", "label": "like", "value": "like", "python": "find"}}]}, {"act": "/composition/select_condition", "icon": "pi pi-question", "type": "LinkTo", "title": "select conditions", "classname": "p-button-warning", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "N", "paramcolumn": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}}, {"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "configid", "paramcolumn": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}}, {"paramt": null, "paramconst": "configid", "paraminput": "", "paramtitle": "relation", "paramcolumn": null}, {"paramt": null, "paramconst": "-1", "paraminput": "", "paramtitle": "CN", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "table", "paramcolumn": {"t": 1, "key": "relation_db866", "label": "relation", "value": "relation table"}}, {"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "_sub_title", "paramcolumn": {"t": 1, "key": "title_2c03d", "label": "title", "value": "title"}}, {"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "viewid", "paramcolumn": {"t": 1, "key": "viewid_daea5", "label": "viewid", "value": "id"}}], "isforevery": false, "act_visible_condition": [{"col": {"t": 1, "key": "type_67120", "label": "type", "value": "type"}, "const": null, "value": "select,typehead", "operation": {"js": "", "label": "in", "value": "in", "python": "in"}}, {"col": {"t": 2, "key": "viewtype_0.1904830102583417", "label": "viewtype", "value": "viewtype"}, "const": null, "value": "form", "operation": {"js": "indexOf", "label": "like", "value": "like", "python": "find"}}]}, {"act": "/composition/view", "type": "Link", "title": "close", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "id", "paramtitle": "id", "paramcolumn": null}, {"paramt": null, "paramconst": "-1", "paraminput": "", "paramtitle": "N", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "fl_id", "paramtitle": "fl_id", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "act_id", "paramtitle": "act_id", "paramcolumn": null}], "isforevery": false, "act_visible_condition": [{"col": {"t": 1, "key": "id_e0e06", "label": "id", "value": "N"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}]	[0]	\N	f	t	t	t	f	f	{}	f
222	select condition edit	select condition edit	framework.select_condition	form not mutable	f	[{"t": 1, "col": "id", "key": "id_e7177", "join": false, "type": "label", "chckd": false, "roles": "[]", "title": "CN", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_e7177", "label": "id", "value": "CN"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 2, "col": "configid", "key": "configid_ac752", "join": false, "type": "label", "chckd": false, "roles": "[]", "title": "N", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "framework.config", "required": true, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_e7177", "label": "id", "value": "CN"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 3, "col": "col", "key": "col_c07f8", "join": false, "type": "select_api", "chckd": false, "roles": "[]", "title": "col", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/tabcolumns_for_sc", "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_e7177", "label": "id", "value": "CN"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 5, "col": "operation", "key": "operation_ccf99", "join": false, "type": "select", "chckd": false, "label": "operation || operation", "roles": "[]", "title": "operation", "width": "", "relcol": "value", "depency": false, "visible": true, "relation": "framework.operations", "required": false, "classname": "", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "value", "title": "value_", "value": "value"}], "visible_condition": [{"col": {"t": 1, "key": "id_e7177", "label": "id", "value": "CN"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 9, "col": "val_desc", "key": "val_desc_ccaab", "join": false, "type": "select_api", "label": "val_desc || val_desc", "roles": "[]", "title": "val_desc", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 9, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/view_cols_for_sc", "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_e7177", "label": "id", "value": "CN"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 6, "col": "const", "key": "const_6d101", "join": false, "type": "text", "chckd": false, "roles": "[]", "title": "const", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_e7177", "label": "id", "value": "CN"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 7, "col": "value", "key": "value_f930f", "join": false, "type": "label", "chckd": false, "roles": "[]", "title": "value", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 7, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_e7177", "label": "id", "value": "CN"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 8, "col": "created", "key": "created_e5c66", "join": false, "type": "label", "chckd": false, "roles": "[]", "title": "created", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_e7177", "label": "id", "value": "CN"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}]	select_condition_edit	2019-10-27 13:25:37.106	[]	[]	[{"act": "/", "icon": "", "type": "Save", "title": "save", "classname": "p-button-success", "parametrs": [], "isforevery": false, "act_visible_condition": [{"col": {"t": 1, "key": "id_e7177", "label": "id", "value": "CN"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"act": "/composition/select_condition", "icon": "pi pi-cross", "type": "Link", "title": "close", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "N", "paramtitle": "N", "paramcolumn": null}, {"paramt": null, "paramconst": "-1", "paraminput": "", "paramtitle": "CN", "paramcolumn": null}, {"paramt": null, "paramconst": "configid", "paraminput": "", "paramtitle": "relation", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "configid", "paramtitle": "configid", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "table", "paramtitle": "table", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "_sub_title", "paramtitle": "_sub_title", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "viewid", "paramtitle": "viewid", "paramcolumn": null}], "isforevery": false, "act_visible_condition": [{"col": {"t": 1, "key": "id_e7177", "label": "id", "value": "CN"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}]	[0]	\N	f	t	t	t	f	f	{}	f
223	visible condition	visibles condition	framework.visible_condition	form not mutable	f	[{"t": 1, "col": "id", "key": "id_ca616", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "CN", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_ca616", "label": "id", "value": "CN"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 2, "col": "configid", "key": "configid_0e8a3", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "configid", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "framework.config", "required": true, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_ca616", "label": "id", "value": "CN"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 8, "col": "val_desc", "key": "val_desc_e509e", "join": false, "type": "select_api", "chckd": true, "label": "val_desc || val_desc", "roles": "[]", "title": "val_desc", "width": "", "relcol": "id", "depency": false, "visible": true, "relation": "framework.config", "required": false, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/view_cols_for_sc", "relationcolums": [{"label": "id", "title": "id_", "value": "id"}, {"label": "title", "title": "title_", "value": "title"}], "visible_condition": [{"col": {"t": 1, "key": "id_ca616", "label": "id", "value": "CN"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 3, "col": "col", "key": "col_c9f97", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "col", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_ca616", "label": "id", "value": "CN"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 4, "col": "title", "key": "title_0e56d", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "title", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_ca616", "label": "id", "value": "CN"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 5, "col": "operation", "key": "operation_e0a2e", "join": false, "type": "select", "chckd": true, "label": "operation || operation", "roles": "[]", "title": "operation", "width": "", "relcol": "value", "depency": false, "visible": true, "relation": "framework.operations", "required": false, "classname": "", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "value", "title": "value_", "value": "value"}], "visible_condition": [{"col": {"t": 1, "key": "id_ca616", "label": "id", "value": "CN"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 6, "col": "value", "key": "value_5e039", "join": false, "type": "text", "chckd": true, "roles": "[]", "title": "value", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_ca616", "label": "id", "value": "CN"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 7, "col": "created", "key": "created_470de", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "created", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 7, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_ca616", "label": "id", "value": "CN"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}]	visibles_condition	2019-10-27 20:11:08.191	[]	[]	[{"act": "/", "type": "Save", "title": "save", "classname": "p-button-success", "parametrs": [], "isforevery": false, "act_visible_condition": [{"col": {"t": 1, "key": "id_ca616", "label": "id", "value": "CN"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"act": "/composition/visible_conditions", "icon": "pi pi-cross", "type": "Link", "title": "close", "parametrs": [{"paramt": null, "paramconst": "configid", "paraminput": "", "paramtitle": "relation", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "configid", "paramtitle": "configid", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "_sub_title", "paramtitle": "_sub_title", "paramcolumn": null}, {"paramt": null, "paramconst": "-1", "paraminput": "", "paramtitle": "CN", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "N", "paramtitle": "N", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "viewid", "paramtitle": "viewid", "paramcolumn": null}], "isforevery": false, "act_visible_condition": [{"col": {"t": 1, "key": "id_ca616", "label": "id", "value": "CN"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}]	[0]	\N	f	t	t	t	f	f	{}	f
55	account	account	framework.users	form full	f	[{"t": 1, "col": "id", "key": "id_29869", "join": false, "type": "number", "chckd": true, "roles": "[]", "title": "id", "width": "", "depency": false, "visible": false, "relation": null, "classname": "col-md-11 form-group row", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 2, "col": "fam", "key": "fam_4c0c1", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "fam", "width": "", "depency": false, "visible": true, "relation": null, "classname": "col-md-11 form-group row", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 3, "col": "im", "key": "im_7cba0", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "im", "width": "", "depency": false, "visible": true, "relation": null, "classname": "col-md-11 form-group row", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 4, "col": "ot", "key": "ot_c76fa", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "ot", "width": "", "depency": false, "visible": true, "relation": null, "classname": "col-md-11 form-group row", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 5, "col": "login", "key": "login_d1b0a", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "login", "width": "", "depency": false, "visible": true, "relation": null, "classname": "col-md-11 form-group row", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 6, "col": "password", "key": "password_ba841", "join": false, "type": "password", "chckd": true, "roles": "[]", "title": "password", "width": "", "depency": false, "visible": true, "relation": null, "classname": "col-md-11 form-group row", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 7, "col": "isactive", "key": "isactive_aff55", "join": false, "type": "checkbox", "chckd": true, "roles": "[]", "title": "isactive", "width": "", "depency": false, "visible": false, "relation": null, "classname": "col-md-11 form-group row", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 8, "col": "created", "key": "created_262dc", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "created", "width": "", "depency": false, "visible": true, "relation": null, "classname": "col-md-11 form-group row", "column_id": 9, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 9, "col": "roles", "key": "roles_edfa4", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "roles", "width": "", "depency": false, "visible": false, "relation": null, "classname": "col-md-11 form-group row", "column_id": 11, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 10, "col": "roleid", "key": "roleid_40f86", "join": false, "type": "number", "chckd": true, "roles": "[]", "title": "roleid", "width": "", "depency": false, "visible": false, "relation": null, "classname": "col-md-11 form-group row", "column_id": 12, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 12, "col": "orgs", "key": "orgs_054a9", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "orgs", "width": "", "depency": false, "visible": false, "relation": null, "classname": "col-md-11 form-group row", "column_id": 15, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 13, "col": "usersettings", "key": "usersettings_2d728", "join": false, "type": "text", "chckd": true, "roles": "[]", "title": "usersettings", "width": "", "depency": false, "visible": false, "relation": null, "classname": "col-md-11 form-group row", "column_id": 16, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 14, "col": "orgid", "key": "orgid_922b4", "join": false, "type": "number", "chckd": true, "roles": "[]", "title": "orgid", "width": "", "depency": false, "visible": false, "relation": "framework.orgs", "classname": "col-md-11 form-group row", "column_id": 17, "onetomany": false, "defaultval": [{"act": {"label": "=", "value": "="}, "bool": {"label": "and", "value": "and"}, "value": "_orgid_"}], "depencycol": null, "relationcolums": [{"label": "orgname", "title": "orgname", "value": "orgname"}]}, {"t": 14, "col": "orgname", "key": "orgname_d1896", "type": "label", "chckd": true, "input": 0, "roles": [], "table": "framework.orgs", "title": "orgname", "tpath": [], "output": 0, "related": true, "visible": 1, "relation": null, "classname": "col-md-11 form-group row", "notaddable": false, "relatecolumn": "orgid", "relationcolums": "[]"}, {"t": 11, "col": "photo", "key": "photo_6dda5", "join": false, "type": "image", "chckd": true, "roles": "[]", "title": "photo", "width": "", "depency": false, "visible": true, "relation": null, "classname": "col-md-11 form-group row", "column_id": 14, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}]	account	2019-03-19 16:09:24.897	[]	[]	[]	[]	card	f	t	t	t	f	f	{}	f
227	actions	view's actions	framework.actions	table	f	[{"t": 1, "col": "id", "key": "id_24289", "join": false, "type": "label", "roles": "[]", "title": "a_id", "width": "", "relcol": null, "depency": false, "orderby": true, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 2, "col": "column_order", "key": "column_order_12d84", "join": false, "type": "label", "roles": "[]", "title": "order by", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 3, "col": "title", "key": "title_2f66f", "join": false, "type": "label", "roles": "[]", "title": "act title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 16, "col": "act_type", "key": "act_type_f5f68", "join": false, "type": "label", "label": "act_type || act_type", "roles": "[]", "title": "act_type", "width": "", "relcol": "actname", "depency": false, "visible": true, "relation": "framework.acttypes", "required": false, "classname": "", "column_id": 16, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 4, "col": "viewid", "key": "viewid_377d6", "join": false, "type": "label", "roles": "[]", "title": "id", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "framework.views", "required": true, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 5, "col": "icon", "key": "icon_04596", "join": false, "type": "label", "roles": "[]", "title": "act icon", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 6, "col": "classname", "key": "classname_1a0ce", "join": false, "type": "label", "roles": "[]", "title": "class name", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 7, "col": "act_url", "key": "act_url_29725", "join": false, "type": "label", "roles": "[]", "title": "act url", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 7, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 8, "col": "api_method", "key": "api_method_5aea3", "join": false, "type": "label", "roles": "[]", "title": "api method", "width": "", "relcol": "aname", "depency": false, "visible": true, "relation": "framework.apicallingmethods", "required": false, "classname": "", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 9, "col": "api_type", "key": "api_type_494c8", "join": false, "type": "label", "roles": "[]", "title": "api type", "width": "", "relcol": "val", "depency": false, "visible": true, "relation": "framework.apimethods", "required": false, "classname": "", "column_id": 9, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 10, "col": "refresh_data", "key": "refresh_data_605f9", "join": false, "type": "label", "roles": "[]", "title": "refresh data", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 10, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 11, "col": "ask_confirm", "key": "ask_confirm_a1e8d", "join": false, "type": "label", "roles": "[]", "title": "ask confirm", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 11, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 12, "col": "roles", "key": "roles_01ded", "join": false, "type": "label", "roles": "[]", "title": "roles", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 12, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 13, "col": "forevery", "key": "forevery_ddd3c", "join": false, "type": "label", "roles": "[]", "title": "for every row", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 13, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 14, "col": "main_action", "key": "main_action_2a926", "join": false, "type": "label", "roles": "[]", "title": "main_action", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 14, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 15, "col": "created", "key": "created_b5a98", "join": false, "type": "label", "roles": "[]", "title": "created", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 15, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}]	acts	2019-10-29 15:07:19.109	[]	[]	[{"act": "/composition/view", "icon": "pi pi-pencil", "type": "Link", "title": "edit", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "id", "paramtitle": "id", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "N", "paramtitle": "N", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "fl_id", "paramtitle": "fl_id", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "act_id", "paramcolumn": {"t": 1, "key": "id_24289", "label": "id", "value": "a_id"}}], "isforevery": true}, {"act": "/", "icon": "pi pi-trash", "type": "Delete", "title": "delete", "classname": "p-button-danger", "parametrs": [], "isforevery": true}, {"act": "/composition/view", "icon": "pi pi-plus", "type": "Link", "title": "add", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "id", "paramtitle": "id", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "N", "paramtitle": "N", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "fl_id", "paramtitle": "fl_id", "paramcolumn": null}, {"paramt": null, "paramconst": "0", "paraminput": "", "paramtitle": "act_id", "paramcolumn": null}, {"paramt": null, "paramconst": "viewid", "paraminput": "", "paramtitle": "relation", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "id", "paramtitle": "viewid", "paramcolumn": null}], "isforevery": false}]	[0]	config_table	f	t	t	t	f	f	{}	f
229	parametr	action's parametr	framework.act_parametrs	form not mutable	f	[{"t": 1, "col": "id", "key": "id_7989b", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "paramid", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_7989b", "label": "id", "value": "paramid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 2, "col": "actionid", "key": "actionid_06ea1", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "act_id", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "framework.actions", "required": true, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_7989b", "label": "id", "value": "paramid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 3, "col": "paramtitle", "key": "paramtitle_5ce20", "join": false, "type": "text", "chckd": true, "roles": "[]", "title": "title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_7989b", "label": "id", "value": "paramid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 8, "col": "val_desc", "key": "val_desc_912b4", "join": false, "type": "select", "chckd": true, "label": "val_desc || val_desc", "roles": "[]", "title": "val_desc", "width": "", "relcol": "id", "depency": false, "visible": true, "relation": "framework.config", "required": false, "classname": "", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "id", "title": "id", "value": "id"}, {"label": "title", "title": "title_", "value": "title"}], "visible_condition": [{"col": {"t": 1, "key": "id_7989b", "label": "id", "value": "paramid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}, {"col": {"t": 1, "key": "paramconst_0ddc7", "label": "paramconst", "value": "const"}, "value": null, "operation": {"js": "===null", "label": "is null", "value": "is null", "python": "is None"}}, {"col": {"t": 1, "key": "paraminput_6fde9", "label": "paraminput", "value": "input"}, "const": null, "value": null, "operation": {"js": "===null", "label": "is null", "value": "is null", "python": "is None"}}]}, {"t": 5, "col": "paramconst", "key": "paramconst_0ddc7", "join": false, "type": "text", "chckd": true, "roles": "[]", "title": "const", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_7989b", "label": "id", "value": "paramid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}, {"col": {"t": 1, "key": "paraminput_6fde9", "label": "paraminput", "value": "input"}, "const": null, "value": null, "operation": {"js": "===null", "label": "is null", "value": "is null", "python": "is None"}}, {"col": {"t": 1, "key": "val_desc_912b4", "label": "val_desc", "value": "val_desc"}, "const": null, "value": null, "operation": {"js": "===null", "label": "is null", "value": "is null", "python": "is None"}}]}, {"t": 6, "col": "paraminput", "key": "paraminput_6fde9", "join": false, "type": "text", "chckd": true, "roles": "[]", "title": "input", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_7989b", "label": "id", "value": "paramid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}, {"col": {"t": 1, "key": "paramconst_0ddc7", "label": "paramconst", "value": "const"}, "const": null, "value": null, "operation": {"js": "===null", "label": "is null", "value": "is null", "python": "is None"}}, {"col": {"t": 1, "key": "val_desc_912b4", "label": "val_desc", "value": "val_desc"}, "const": null, "value": null, "operation": {"js": "===null", "label": "is null", "value": "is null", "python": "is None"}}]}, {"t": 4, "col": "paramt", "key": "paramt_03cdd", "join": false, "type": "select", "chckd": true, "label": "paramt || paramt", "roles": "[]", "title": "method type", "width": "", "relcol": "val", "depency": false, "visible": true, "relation": "framework.paramtypes", "required": false, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "val", "title": "val", "value": "val"}], "visible_condition": [{"col": {"t": 1, "key": "id_7989b", "label": "id", "value": "paramid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 9, "col": "query_type", "key": "query_type_8c815", "join": false, "type": "select", "chckd": true, "label": "query_type || query_type", "roles": "[]", "title": "query type", "width": "", "relcol": "aqname", "depency": false, "visible": true, "relation": "framework.actparam_querytypes", "required": false, "classname": "", "column_id": 9, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "aqname", "title": "aqname", "value": "aqname"}], "visible_condition": [{"col": {"t": 1, "key": "id_7989b", "label": "id", "value": "paramid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}]	action's parametr	2019-10-29 17:17:54.145	[]	[]	[{"act": "/", "icon": "fa fa-check", "type": "Save", "title": "save", "classname": "p-button-success", "parametrs": [], "isforevery": false, "act_visible_condition": [{"col": {"t": 1, "key": "id_7989b", "label": "id", "value": "paramid"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"act": "/composition/act_params", "icon": "fa fa-cross", "type": "Link", "title": "close", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "actionid", "paramtitle": "actionid", "paramcolumn": null}, {"paramt": null, "paramconst": "actionid", "paraminput": "", "paramtitle": "relation", "paramcolumn": null}, {"paramt": null, "paramconst": "-1", "paraminput": "", "paramtitle": "id", "paramcolumn": null}], "isforevery": false, "act_visible_condition": [{"col": {"t": 1, "key": "id_7989b", "label": "id", "value": "paramid"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}]	[0]	\N	f	t	t	t	f	f	{}	f
26	trees	trees components	framework.trees	table	t	[{"t": 1, "col": "id", "key": "id_4725c", "join": false, "type": "number", "roles": "[]", "title": "id", "width": "", "depency": null, "visible": true, "relation": null, "classname": null, "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 2, "col": "title", "key": "title_f9eb1", "join": false, "type": "text", "roles": "[]", "title": "title", "width": "", "depency": null, "visible": true, "relation": null, "classname": null, "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 3, "col": "url", "key": "url_1baec", "join": false, "type": "text", "roles": "[]", "title": "url", "width": "", "depency": null, "visible": true, "relation": null, "classname": null, "column_id": 3, "onetomany": false, "defaultval": [], "depencycol": null, "relationcolums": "[]"}, {"t": 4, "col": "descr", "key": "descr_5ba2c", "join": false, "type": "text", "roles": "[]", "title": "descr", "width": "", "depency": null, "visible": true, "relation": null, "classname": null, "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 5, "col": "roles", "key": "roles_027bc", "join": false, "type": "text", "roles": "[]", "title": "roles", "width": "", "depency": null, "visible": true, "relation": null, "classname": null, "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 6, "col": "created", "key": "created_071e8", "join": false, "type": "date", "roles": "[]", "title": "created", "width": "", "depency": null, "visible": true, "relation": null, "classname": null, "column_id": 6, "onetomany": false, "defaultval": [], "depencycol": null, "relationcolums": "[]"}]	trees	2019-03-14 11:21:06.46	[]	[{"type": "typehead", "roles": [], "title": "found", "column": [{"t": 1, "label": "title", "value": "title"}, {"t": 1, "label": "url", "value": "url"}, {"t": 1, "label": "descr", "value": "descr"}], "classname": null}]	[{"act": "/getone/treeform", "icon": "fa fa-plus", "type": "Link", "roles": [], "title": "add", "classname": "btn btn", "parametrs": [{"paramconst": "0", "paramtitle": "id", "paramcolumn": null}], "paramtype": null, "isforevery": false}, {"act": "/getone/treeform", "icon": "fa fa-pencil", "type": "Link", "roles": [], "title": "edit", "ismain": true, "classname": null, "parametrs": [{"paramconst": null, "paramtitle": "id", "paramcolumn": {"t": 1, "key": "id_4725c", "label": "id", "value": "id"}}], "paramtype": null, "isforevery": true}, {"act": "/composition/branches", "icon": "fa fa-code-fork", "type": "Link", "roles": [], "title": "branches", "classname": null, "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "treesid", "paramcolumn": {"t": 1, "key": "id_4725c", "label": "id", "value": "id"}}, {"paramt": null, "paramconst": "-1", "paraminput": "", "paramtitle": "bid", "paramcolumn": null}], "paramtype": null, "isforevery": true}, {"act": "/composition/treesacts", "icon": "fa fa-asterisk", "type": "Link", "roles": [], "title": "actions", "classname": null, "parametrs": [{"paramconst": null, "paramtitle": "treesid", "paramcolumn": {"t": 1, "key": "id_4725c", "label": "id", "value": "id"}}, {"paramconst": "0", "paramtitle": "bid", "paramcolumn": null}], "paramtype": null, "actapitype": "GET", "isforevery": true}, {"act": "/", "icon": "fa fa-trash", "type": "Delete", "roles": [], "title": "delete", "classname": null, "parametrs": [{"paramconst": null, "paramtitle": "id", "paramcolumn": {"t": 1, "key": "id_4725c", "label": "id", "value": "id"}}], "paramtype": null, "isforevery": true}]	[0]	\N	t	t	t	t	f	f	{}	f
28	tree from	tree from	framework.trees	form not mutable	f	[{"t": 1, "col": "id", "key": "id_70eda", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "id", "width": "", "depency": null, "visible": false, "relation": null, "classname": "col-md-11", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 2, "col": "title", "key": "title_0cc41", "join": false, "type": "text", "chckd": true, "roles": "[]", "title": "title", "width": "", "depency": null, "visible": true, "relation": null, "classname": "col-md-11", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 3, "col": "url", "key": "url_12622", "join": false, "type": "text", "chckd": true, "roles": "[]", "title": "url", "width": "", "depency": null, "visible": true, "relation": null, "classname": "col-md-11", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 4, "col": "descr", "key": "descr_06b13", "join": false, "type": "textarea", "chckd": true, "roles": "[]", "title": "descr", "width": "", "depency": null, "visible": true, "relation": null, "classname": "col-md-11", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 5, "col": "roles", "key": "roles_8bfcc", "join": false, "type": "multiselect", "chckd": true, "roles": "[]", "title": "roles", "width": "", "depency": null, "visible": true, "relation": null, "classname": "col-md-11", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "multicolums": [{"label": "id", "value": "id"}, {"label": "rolename", "value": "rolename"}], "relationcolums": "[]", "multiselecttable": "framework.roles"},{"t": 6, "col": "created", "key": "created_fca84", "join": false, "type": "label", "chckd": true, "roles": "[]", "title": "created", "width": "", "depency": null, "visible": false, "relation": null, "classname": "col-md-11", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}]	treeform	2019-03-14 11:52:57.162	[]	[]	[{"act": "/", "icon": "", "type": "Save", "roles": [], "title": "save", "ismain": false, "classname": "btn btn-outline-success", "parametrs": [], "paramtype": null, "actapitype": "GET", "isforevery": false, "actapimethod": null, "actapiconfirm": true, "actapirefresh": true}, {"act": "/list/trees", "icon": "fa fa-arrow-left", "type": "Link", "roles": [], "title": "back", "classname": "btn", "parametrs": [], "paramtype": null, "isforevery": false}]	[0]	\N	f	t	t	t	f	f	{}	f
30	branches	branches	framework.treesbranches	table	f	[{"t": 1, "col": "id", "key": "id_7d0e6", "join": false, "type": "number", "roles": "[]", "title": "id", "width": "", "depency": null, "visible": true, "relation": null, "classname": null, "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 2, "col": "treesid", "key": "treesid_35a0d", "join": false, "type": "number", "roles": "[]", "title": "treesid", "width": "", "depency": null, "visible": true, "relation": null, "classname": null, "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 3, "col": "title", "key": "title_9a870", "join": false, "type": "text", "roles": "[]", "title": "title", "width": "", "depency": null, "visible": true, "relation": null, "classname": null, "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 5, "col": "parentid", "key": "parentid_5194a", "join": false, "type": "number", "roles": "[]", "title": "parentid", "width": "", "depency": null, "visible": true, "relation": null, "classname": null, "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 6, "col": "icon", "key": "icon_c8818", "join": false, "type": "text", "roles": "[]", "title": "icon", "width": "", "depency": null, "visible": true, "relation": null, "classname": null, "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 7, "col": "created", "key": "created_bff2e", "join": false, "type": "date", "roles": "[]", "title": "created", "width": "", "depency": null, "visible": true, "relation": null, "classname": null, "column_id": 7, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 7, "col": "treeviewtype", "key": "treeviewtype_dd1c1", "join": false, "type": "number", "roles": "[]", "title": "treeviewtype", "width": "", "depency": false, "visible": true, "relation": "framework.treeviewtypes", "classname": null, "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 8, "col": "viewid", "key": "viewid_0bba1", "join": false, "type": "number", "roles": "[]", "title": "viewid", "width": "", "depency": false, "visible": true, "relation": "framework.views", "classname": null, "column_id": 9, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 9, "col": "compoid", "key": "compoid_0f0ca", "join": false, "type": "number", "roles": "[]", "title": "compoid", "width": "", "depency": false, "visible": false, "relation": "framework.compos", "classname": null, "column_id": 10, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 10, "col": "orderby", "key": "orderby_5f587", "join": false, "type": "number", "roles": "[]", "title": "orderby", "width": "", "depency": false, "visible": true, "relation": null, "classname": null, "column_id": 11, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}]	branches	2019-03-14 13:42:05.157	[]	[]	[{"act": "/list/trees", "icon": "fa fa-arrow-left", "type": "Link", "roles": [], "title": "back", "classname": "btn ", "parametrs": [], "paramtype": null, "isforevery": false}, {"act": "/composition/branches", "icon": "fa fa-pencil", "type": "Link", "roles": [], "title": "edit", "ismain": true, "classname": null, "parametrs": [{"paramconst": null, "paramtitle": "treesid", "paramcolumn": {"t": 1, "key": "treesid_35a0d", "label": "treesid", "value": "treesid"}}, {"paramconst": null, "paramtitle": "bid", "paramcolumn": {"t": 1, "key": "id_7d0e6", "label": "id", "value": "id"}}], "paramtype": null, "isforevery": true}, {"act": "/", "icon": "fa fa-trash", "type": "Delete", "roles": [], "title": "del", "classname": null, "parametrs": [{"paramconst": null, "paramtitle": "id", "paramcolumn": {"t": 1, "key": "id_7d0e6", "label": "id", "value": "id"}}], "paramtype": null, "isforevery": true}, {"act": "/composition/branches", "icon": "fa fa-plus", "type": "Link", "roles": [], "title": "add", "classname": null, "parametrs": [{"paramconst": "0", "paramtitle": "bid", "paramcolumn": null}, {"paramconst": "treesid", "paramtitle": "relation", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "treesid", "paramtitle": "treesid", "paramcolumn": null}], "paramtype": null, "isforevery": false}]	[0]	\N	t	f	f	f	f	f	{}	f
224	visible conditions	visibles conditions	framework.visible_condition	table	f	[{"t": 1, "col": "id", "key": "id_ca616", "join": false, "type": "label", "roles": "[]", "title": "id", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 2, "col": "configid", "key": "configid_0e8a3", "join": false, "type": "label", "roles": "[]", "title": "configid", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "framework.config", "required": true, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "title", "title": "title", "value": "title"}]}, {"t": 2, "col": "title", "key": "title_0.36528457759417576", "join": false, "type": "label", "input": 0, "roles": [], "table": "framework.config", "title": "title", "tpath": [], "output": 0, "relcol": null, "related": true, "visible": true, "relation": null, "classname": "", "notaddable": false, "relatecolumn": "configid", "relationcolums": "[]"}, {"t": 5, "col": "operation", "key": "operation_e0a2e", "join": false, "type": "label", "label": "operation || operation", "roles": "[]", "title": "operation", "width": "", "relcol": "value", "depency": false, "visible": true, "relation": "framework.operations", "required": false, "classname": "", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 6, "col": "value", "key": "value_5e039", "join": false, "type": "label", "roles": "[]", "title": "value", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 7, "col": "created", "key": "created_470de", "join": false, "type": "label", "roles": "[]", "title": "created", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 7, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}]	visibles_conditions	2019-10-27 17:05:47.853	[]	[]	[{"act": "/composition/visible_conditions", "icon": "pi pi-pencil", "type": "Link", "title": "edit", "ismain": true, "parametrs": [{"paramt": null, "paramconst": "configid", "paraminput": "", "paramtitle": "relation", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "configid", "paramtitle": "configid", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "_sub_title", "paramtitle": "_sub_title", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "CN", "paramcolumn": {"t": 1, "key": "id_ca616", "label": "id", "value": "id"}}, {"paramt": null, "paramconst": "", "paraminput": "N", "paramtitle": "N", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "viewid", "paramtitle": "viewid", "paramcolumn": null}], "isforevery": true}, {"act": "/composition/view", "icon": "fa fa-arrow-left", "type": "Link", "title": "go back", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "viewid", "paramtitle": "id", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "configid", "paramtitle": "N", "paramcolumn": null}], "isforevery": false}, {"act": "/", "icon": "pi pi-trash", "type": "Delete", "title": "delete", "classname": "p-button-danger", "parametrs": [], "isforevery": true}, {"act": "/composition/visible_conditions", "icon": "pi pi-plus", "type": "Link", "title": "add", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "configid", "paramtitle": "configid", "paramcolumn": null}, {"paramt": null, "paramconst": "configid", "paraminput": "", "paramtitle": "relation", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "_sub_title", "paramtitle": "_sub_title", "paramcolumn": null}, {"paramt": null, "paramconst": "0", "paraminput": "", "paramtitle": "CN", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "N", "paramtitle": "N", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "viewid", "paramtitle": "viewid", "paramcolumn": null}], "isforevery": false}]	[0]	config_table	f	t	t	t	f	f	{}	f
233	Apply to selected	apply settings to selected	framework.config	form not mutable	f	[{"t": 2, "col": "viewid", "key": "viewid_a2080", "join": false, "type": "label", "label": "viewid || viewid", "roles": "[]", "title": "viewid", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "framework.views", "required": false, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 1, "col": "id", "key": "id_8d5c8", "join": false, "type": "label", "label": "id || id", "roles": "[]", "title": "id", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 6, "col": "title", "key": "title_60a32", "join": false, "type": "select_api", "label": "title || title", "roles": "[]", "title": "setting", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/configsettings_selectapi", "relationcolums": "[]"}, {"t": 4, "col": "col", "key": "col_b57e1", "join": false, "type": "select_api", "label": "col || column title", "roles": "[]", "title": "column", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/view_cols_for_fn", "relationcolums": "[]"}]	settingsapply	2019-10-31 18:13:18.689	[]	[]	[{"act": "/api/applysettings", "icon": "fa fa-check", "type": "API", "title": "apply to all", "classname": "p-buton-success", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "id", "paramtitle": "viewid", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "setting", "paramcolumn": {"t": 1, "key": "title_60a32", "label": "title", "value": "setting"}}, {"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "col", "paramcolumn": {"t": 1, "key": "col_b57e1", "label": "col", "value": "column"}}], "actapitype": "POST", "isforevery": false, "actapiconfirm": true, "actapirefresh": true}, {"act": "/composition/view", "icon": "fa fa-refresh", "type": "Link", "title": "refresh", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "N", "paramtitle": "N", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "id", "paramtitle": "id", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "fl_id", "paramtitle": "fl_id", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "act_id", "paramtitle": "act_id", "paramcolumn": null}, {"paramt": null, "paramconst": "1", "paraminput": "", "paramtitle": "ttt", "paramcolumn": null}], "isforevery": false}]	[0]	\N	f	t	t	t	f	f	{}	f
236	users	users list	framework.users	table	f	[{"t": 1, "col": "id", "key": "id_ed49e", "join": 0, "type": "number", "roles": "[]", "title": "id", "width": "", "depency": null, "visible": 1, "relation": null, "classname": null, "column_id": 1, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 2, "col": "fam", "key": "fam_42544", "join": 0, "type": "text", "roles": "[]", "title": "fam", "width": "", "depency": null, "visible": 1, "relation": null, "classname": null, "column_id": 2, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 3, "col": "im", "key": "im_89205", "join": 0, "type": "text", "roles": "[]", "title": "im", "width": "", "depency": null, "visible": 1, "relation": null, "classname": null, "column_id": 3, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 4, "col": "ot", "key": "ot_89652", "join": 0, "type": "text", "roles": "[]", "title": "ot", "width": "", "depency": null, "visible": 1, "relation": null, "classname": null, "column_id": 4, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 11, "col": "photo", "key": "photo_87018", "join": false, "type": "image", "roles": "[]", "title": "photo", "width": "", "depency": null, "visible": true, "relation": null, "classname": null, "column_id": 14, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 5, "col": "login", "key": "login_98129", "join": 0, "type": "text", "roles": "[]", "title": "login", "width": "", "depency": null, "visible": 1, "relation": null, "classname": null, "column_id": 5, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 9, "col": "roles", "key": "roles_8ad47", "join": false, "type": "multiselect", "roles": "[]", "title": "roles", "width": "", "depency": null, "visible": true, "relation": null, "classname": null, "column_id": 11, "onetomany": false, "defaultval": null, "depencycol": null, "multicolums": [{"label": "rolename", "value": "rolename"}], "relationcolums": "[]", "multiselecttable": "framework.roles"},{"t": 12, "col": "orgs", "key": "orgs_48bbe", "join": false, "type": "multiselect", "roles": "[]", "title": "orgs", "width": "", "depency": null, "visible": true, "relation": null, "classname": null, "column_id": 15, "onetomany": false, "defaultval": null, "depencycol": null, "multicolums": [{"label": "orgname", "value": "orgname"}], "relationcolums": "[]", "multiselecttable": "framework.orgs"},{"t": 8, "col": "isactive", "key": "isactive_5bf30", "join": 0, "type": "checkbox", "roles": "[]", "title": "isactive", "width": "", "depency": null, "visible": 0, "relation": null, "classname": null, "column_id": 8, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 9, "col": "created", "key": "created_ec664", "join": 0, "type": "date", "roles": "[]", "title": "created", "width": "", "depency": null, "visible": 1, "relation": null, "classname": null, "column_id": 9, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": "[]"}]	users	2018-12-28 13:10:45.637	[]	[{"t": 1, "type": "check", "roles": [], "table": null, "title": "isactive", "column": "isactive", "classname": null}, {"t": 1, "type": "substr", "roles": [], "table": null, "title": "login", "column": "login", "classname": "form-control"}, {"t": 1, "type": "multijson", "roles": [], "table": null, "title": "roles", "column": "roles", "classname": null}]	[{"act": "/getone/userone", "icon": "fa fa-pencil", "type": "Link", "roles": [], "title": "edit user", "classname": null, "parametrs": [{"paramconst": null, "paramtitle": "id", "paramcolumn": {"t": 1, "key": "id_ed49e", "label": "id", "value": "id"}}], "paramtype": "query", "isforevery": 1}, {"act": "/schema/deleterow", "icon": "fa fa-trash", "type": "Delete", "roles": [], "title": "delete", "classname": null, "parametrs": [{"paramconst": null, "paramtitle": "id", "paramcolumn": {"t": 1, "key": "id_ed49e", "label": "id", "value": "id"}}], "paramtype": null, "isforevery": 1}, {"act": "/getone/userone", "icon": "fa fa-plus", "type": "Link", "roles": [], "title": "add", "ismain": false, "classname": "", "parametrs": [{"paramt": null, "paramconst": "0", "paramtitle": "id", "paramcolumn": null}], "paramtype": null, "actapitype": "GET", "isforevery": false, "actapimethod": null, "actapiconfirm": true, "actapirefresh": true}]	[0]	\N	f	t	t	t	f	f	{}	f
245	Create view	this is for admins views add	framework.views	form not mutable	f	[{"t": 1, "col": "id", "key": "id_4e813", "join": false, "type": "label", "roles": "[]", "title": "id", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 4, "col": "tablename", "key": "tablename_75be5", "join": false, "type": "select_api", "roles": "[]", "title": "table name", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/gettables", "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_4e813", "label": "id", "value": "id"}, "value": null, "operation": {"js": "===null", "label": "is null", "value": "is null", "python": "is None"}}]}, {"t": 21, "col": "tablename", "key": "tablename_5238b", "join": false, "type": "label", "label": "tablename || tablename", "roles": "[]", "title": "tablename", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_4e813", "label": "id", "value": "id"}, "const": null, "value": null, "operation": {"js": "!==null", "label": "is not null", "value": "is not null", "python": "is not None"}}]}, {"t": 2, "col": "title", "key": "title_efe1b", "join": false, "type": "text", "roles": "[]", "title": "title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 3, "col": "descr", "key": "descr_9d5d9", "join": false, "type": "textarea", "roles": "[]", "title": "descr", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 8, "col": "path", "key": "path_98923", "join": false, "type": "text", "chckd": false, "roles": "[]", "title": "path", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 5, "col": "viewtype", "key": "viewtype_421ce", "join": false, "type": "select", "roles": "[]", "title": "viewtype", "width": "", "relcol": "vtypename", "depency": false, "visible": true, "relation": "framework.viewtypes", "required": false, "classname": "", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "vtypename", "title": "vtypename", "value": "vtypename"}]}, {"t": 13, "col": "roles", "key": "roles_ebaac", "join": false, "type": "multiselect", "chckd": false, "roles": "[]", "title": "roles", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 13, "onetomany": false, "defaultval": null, "depencycol": null, "multicolums": [{"label": "id", "value": "id"}, {"label": "rolename", "value": "rolename"}], "relationcolums": "[]", "multiselecttable": "framework.roles"}, {"t": 14, "col": "classname", "key": "classname_859e2", "join": false, "type": "text", "chckd": false, "roles": "[]", "title": "classname", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 14, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 6, "col": "pagination", "key": "pagination_d6ad4", "join": false, "type": "checkbox", "roles": "[]", "title": "pagination", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "viewtype_421ce", "label": "viewtype", "value": "viewtype"}, "const": null, "value": "tiles,table", "operation": {"js": "", "label": "in", "value": "in", "python": "in"}}]}, {"t": 15, "col": "orderby", "key": "orderby_d2011", "join": false, "type": "checkbox", "chckd": true, "roles": "[]", "title": "orderby", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 15, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "viewtype_421ce", "label": "viewtype", "value": "viewtype"}, "const": null, "value": "tiles,table", "operation": {"js": "", "label": "in", "value": "in", "python": "in"}}]}, {"t": 16, "col": "ispagesize", "key": "ispagesize_ea575", "join": false, "type": "checkbox", "chckd": true, "roles": "[]", "title": "ispagesize", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 16, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "viewtype_421ce", "label": "viewtype", "value": "viewtype"}, "const": null, "value": "tiles,table", "operation": {"js": "", "label": "in", "value": "in", "python": "in"}}]}, {"t": 17, "col": "pagecount", "key": "pagecount_be57f", "join": false, "type": "checkbox", "chckd": true, "roles": "[]", "title": "pagecount", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 17, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "viewtype_421ce", "label": "viewtype", "value": "viewtype"}, "const": null, "value": "tiles,table", "operation": {"js": "", "label": "in", "value": "in", "python": "in"}}]}, {"t": 18, "col": "foundcount", "key": "foundcount_4bd77", "join": false, "type": "checkbox", "chckd": true, "roles": "[]", "title": "foundcount", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 18, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "viewtype_421ce", "label": "viewtype", "value": "viewtype"}, "const": null, "value": "tiles,table", "operation": {"js": "", "label": "in", "value": "in", "python": "in"}}]}, {"t": 19, "col": "subscrible", "key": "subscrible_d08b5", "join": false, "type": "checkbox", "chckd": false, "roles": "[]", "title": "subscrible", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 19, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": []}, {"t": 20, "col": "checker", "key": "checker_6add0", "join": false, "type": "checkbox", "chckd": true, "roles": "[]", "title": "checker", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 20, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "viewtype_421ce", "label": "viewtype", "value": "viewtype"}, "const": null, "value": "tiles,table", "operation": {"js": "", "label": "in", "value": "in", "python": "in"}}]}]	viewadd	2019-11-04 21:30:34.377	[]	[]	[{"act": "/", "icon": "fa fa-check", "type": "Save", "title": "save main info", "classname": "p-button-success", "parametrs": [], "isforevery": false}, {"act": "/list/views", "icon": "fa fa-arrow-left", "type": "Link", "title": "back to list", "parametrs": [], "isforevery": false}]	[0]	\N	f	t	t	t	f	f	{}	f
240	select condition	select condition	framework.select_condition	table	f	[{"t": 1, "col": "id", "key": "id_e7177", "join": false, "type": "label", "roles": "[]", "title": "cni", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 2, "col": "configid", "key": "configid_ac752", "join": false, "type": "label", "roles": "[]", "title": "N", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "framework.config", "required": true, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "viewid", "title": "viewid", "value": "viewid"}]}, {"t": 3, "col": "col", "key": "col_c07f8", "join": false, "type": "label", "roles": "[]", "title": "col", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 5, "col": "operation", "key": "operation_367de", "join": false, "type": "label", "roles": "[]", "title": "operation", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 9, "col": "val_desc", "key": "val_desc_04300", "join": false, "type": "label", "label": "val_desc || val_desc", "roles": "[]", "title": "val_desc", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "framework.config", "required": false, "classname": "", "column_id": 10, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "title", "title": "title", "value": "title"}]}, {"t": 6, "col": "const", "key": "const_6d101", "join": false, "type": "label", "roles": "[]", "title": "const", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 7, "col": "value", "key": "value_f930f", "join": false, "type": "label", "roles": "[]", "title": "val", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 7, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 8, "col": "created", "key": "created_e5c66", "join": false, "type": "label", "roles": "[]", "title": "created", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 9, "col": "title", "key": "title_0.9293152534345108", "join": false, "type": "label", "input": 0, "roles": [], "table": "framework.config", "title": "value", "tpath": [], "output": 0, "relcol": null, "related": true, "visible": true, "relation": null, "classname": "", "notaddable": false, "relatecolumn": "val_desc", "relationcolums": "[]"}, {"t": 2, "col": "viewid", "key": "viewid_0.4255203251949675", "join": false, "type": "label", "input": 0, "roles": [], "table": "framework.config", "title": "viewid", "tpath": [], "output": 0, "relcol": null, "related": true, "visible": false, "relation": "framework.views", "classname": "", "notaddable": true, "relatecolumn": "configid", "relationcolums": "[]"}]	select_condition	2019-10-27 13:20:11.361	[]	[]	[{"act": "/composition/view", "icon": "arrow-left", "type": "Link", "title": "go back", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "N", "paramtitle": "N", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "viewid", "paramtitle": "id", "paramcolumn": null}], "isforevery": false}, {"act": "/composition/select_condition", "icon": "pi pi-pencil", "type": "Link", "title": "edit", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "N", "paramtitle": "N", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "CN", "paramcolumn": {"t": 1, "key": "id_e7177", "label": "id", "value": "cni"}}, {"paramt": null, "paramconst": "", "paraminput": "configid", "paramtitle": "relation", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "configid", "paramtitle": "configid", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "table", "paramtitle": "table", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "_sub_title", "paramtitle": "_sub_title", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "viewid", "paramtitle": "viewid", "paramcolumn": null}], "isforevery": true}, {"act": "/", "icon": "pi pi-trash", "type": "Delete", "title": "delete", "classname": "p-button-danger", "parametrs": [], "isforevery": true}, {"act": "/composition/select_condition", "icon": "pi pi-plus", "type": "Link", "title": "add", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "N", "paramtitle": "N", "paramcolumn": null}, {"paramt": null, "paramconst": "0", "paraminput": "", "paramtitle": "CN", "paramcolumn": null}, {"paramt": null, "paramconst": "configid", "paraminput": "", "paramtitle": "relation", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "configid", "paramtitle": "configid", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "table", "paramtitle": "table", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "_sub_title", "paramtitle": "_sub_title", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "viewid", "paramtitle": "viewid", "paramcolumn": null}], "isforevery": false}]	[0]	config_table	f	t	t	t	f	f	{}	f
50791	Table Column	Table Column	sqlmanager.tablecolumns	form not mutable	f	[]	tablecolumn	2020-05-13 17:58:34.996501	[]	[]	[]	[0]	\N	f	t	t	t	f	f	{}	f
50794	Function	Function	sqlmanager.functionslist	form not mutable	f	[]	function	2020-05-14 13:19:40.032952	[]	[]	[]	[0]	\N	f	t	t	t	f	f	{}	f
220	Test	Test	test.major_table	table	t	[{"t": 1, "col": "id", "key": "id_3a31e", "join": false, "type": "label", "roles": "[]", "title": "id", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 1, "onetomany": false, "defaultval": [{"act": {"label": ">", "value": ">"}, "bool": {"label": "and", "value": "and"}, "value": "0"}], "depencycol": null, "relationcolums": "[]"}, {"t": 2, "col": "text", "key": "text_84820", "join": false, "type": "text", "roles": "[]", "title": "text title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 3, "col": "data", "key": "data_9ef12", "join": false, "type": "date", "roles": "[]", "title": "data", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 4, "col": "check", "key": "check_c0adb", "join": false, "type": "checkbox", "roles": "[]", "title": "check", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 5, "col": "time", "key": "time_8c9c9", "join": false, "type": "time", "roles": "[]", "title": "time", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 6, "col": "password", "key": "password_3cd1a", "join": false, "type": "password", "roles": "[]", "title": "password", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 7, "col": "color", "key": "color_70c0b", "join": false, "type": "color", "roles": "[]", "title": "color", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 7, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 8, "col": "multiselect", "key": "multiselect_3da94", "join": false, "type": "multiselect", "roles": "[]", "title": "multiselect", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "multicolums": [{"label": "dname", "value": "dname"}], "relationcolums": "[]", "multiselecttable": "test.dictionary_for_select"}, {"t": 9, "col": "file", "key": "file_5d459", "join": false, "type": "file", "roles": "[]", "title": "file", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 9, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 10, "col": "typehead", "key": "typehead_e6558", "join": false, "type": "typehead", "roles": "[]", "title": "typehead", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 10, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 11, "col": "image", "key": "image_a483e", "join": false, "type": "image", "roles": "[]", "title": "image", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 11, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 12, "col": "images", "key": "images_4e4d0", "join": false, "type": "images", "roles": "[]", "title": "images", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 12, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 13, "col": "gallery", "key": "gallery_1cbc1", "join": false, "type": "gallery", "roles": "[]", "title": "gallery", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 13, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 14, "col": "label", "key": "label_b8274", "join": false, "type": "label", "roles": "[]", "title": "label", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 14, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 15, "col": "number", "key": "number_5a12a", "join": false, "type": "number", "roles": "[]", "title": "number", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 15, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 16, "col": "link", "key": "link_e7018", "join": false, "type": "link", "roles": "[]", "title": "link", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 16, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 17, "col": "texteditor", "key": "texteditor_377da", "join": false, "type": "texteditor", "roles": "[]", "title": "texteditor", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 17, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 18, "col": "colorrow", "key": "colorrow_b394b", "join": false, "type": "colorrow", "roles": "[]", "title": "color row", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 18, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 19, "col": "multitypehead_api", "key": "multitypehead_api_c7189", "join": false, "type": "multiselect_api", "roles": "[]", "title": "multitypehead_api", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 19, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 20, "col": "multi_select_api", "key": "multi_select_api_2c6b3", "join": false, "type": "multiselect_api", "roles": "[]", "title": "multi_select_api", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 20, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 21, "col": "colorpicker", "key": "colorpicker_d4763", "join": false, "type": "colorpicker", "roles": "[]", "title": "colorpicker", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 21, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 23, "col": "autocomplete", "key": "autocomplete_9bde0", "join": false, "type": "autocomplete", "roles": "[]", "title": "autocomplete", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 23, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 24, "col": "textarea", "key": "textarea_b7429", "join": false, "type": "textarea", "roles": "[]", "title": "textarea", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 24, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 25, "col": "files", "key": "files_68ff8", "join": false, "type": "files", "roles": "[]", "title": "files", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 25, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 26, "col": "typehead_api", "key": "typehead_api_6730b", "join": false, "type": "typehead_api", "roles": "[]", "title": "typehead_api", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 26, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 27, "col": "select_api", "key": "select_api_762ba", "join": false, "type": "select_api", "roles": "[]", "title": "select_api", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 27, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 28, "col": "multitypehead", "key": "multitypehead_0a55e", "join": false, "type": "multitypehead", "roles": "[]", "title": "multitypehead", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 28, "onetomany": false, "defaultval": null, "depencycol": null, "multicolums": [{"label": "dname", "value": "dname"}], "relationcolums": "[]", "multiselecttable": "test.dictionary_for_select"}, {"t": 29, "col": "datetime", "key": "datetime_388e5", "join": false, "type": "datetime", "roles": "[]", "title": "datetime", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 29, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 31, "col": "relate_with_major", "key": "relate_with_major_f4f4c", "join": false, "type": "array", "label": "relate_with_major || relate_with_major", "roles": "[]", "title": "relate_with_major", "width": "", "relcol": null, "depency": true, "visible": true, "relation": "test.relate_with_major", "required": false, "classname": "", "column_id": 31, "onetomany": true, "defaultval": null, "depencycol": "major_table_id", "relationcolums": [{"label": "id", "value": "id"}, {"label": "somecolumn", "value": "somecolumn"}, {"label": "major_table_id", "value": "major_table_id"}, {"label": "created", "value": "created"}]}, {"t": 22, "col": "select", "key": "select_b1405", "join": false, "type": "label", "label": "select || select", "roles": "[]", "title": "select", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "test.dictionary_for_select", "classname": "", "column_id": 22, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "dname", "title": "dname", "value": "dname"}, {"label": "id", "title": "id_", "value": "id"}]}, {"t": 22, "col": "dname", "key": "dname_c5340", "type": "text", "input": 0, "roles": [], "table": "test.dictionary_for_select", "title": "dname", "tpath": [], "output": 0, "relcol": null, "related": true, "visible": 1, "relation": null, "classname": "", "notaddable": false, "relatecolumn": "select", "relationcolums": "[]"}, {"t": 22, "col": "id", "key": "id_0.16492845318532945", "type": "label", "input": 0, "roles": [], "table": "test.dictionary_for_select", "title": "id_", "tpath": [], "output": 0, "relcol": null, "related": true, "visible": true, "relation": null, "classname": "", "notaddable": false, "relatecolumn": "select", "relationcolums": "[]"}, {"t": null, "fn": {"label": "concat", "value": "concat", "functype": "concat"}, "col": "func test", "type": "text", "input": 0, "roles": [], "table": null, "title": "func test", "tpath": null, "output": 0, "related": true, "visible": true, "relation": null, "fncolumns": [{"t": 1, "key": "text_84820", "label": "text", "value": "text title"}, {"t": 1, "key": "number_5a12a", "label": "number", "value": "number"}], "relatecolumn": "", "relationcolums": "[]"}]	test	2019-09-18 13:31:50.252	[]	[{"t": 1, "type": "substr", "roles": [], "table": {"t": 2, "col": "text", "join": false, "type": "text", "roles": "[]", "title": "text", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, "title": "SUBSTR TEXT", "column": "text", "classname": ""}, {"type": "typehead", "roles": [], "title": "TYPEHEAD TEXT NUMBER COLOR", "column": [{"t": 1, "label": "text", "value": "text"}, {"t": 1, "label": "number", "value": "number"}, {"t": 1, "label": "color", "value": "color"}], "classname": ""}, {"t": 1, "type": "check", "roles": [], "table": {"t": 4, "col": "check", "join": false, "type": "checkbox", "roles": "[]", "title": "check", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, "title": "check", "column": "check", "classname": ""}, {"t": 1, "type": "period", "roles": [], "table": {"t": 3, "col": "data", "join": false, "type": "date", "roles": "[]", "title": "data", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, "title": "PERIOD", "column": "data", "classname": ""}, {"t": 1, "type": "select", "roles": [], "table": {"t": 22, "col": "select", "join": false, "type": "label", "label": "select || select", "roles": "[]", "title": "select", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "test.dictionary_for_select", "classname": "", "column_id": 22, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "dname", "title": "dname", "value": "dname"}]}, "title": "select filter", "column": "select", "classname": ""}, {"t": 1, "type": "multiselect", "roles": [], "table": {"t": 8, "col": "multiselect", "join": false, "type": "multiselect", "roles": "[]", "title": "multiselect", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "multicolums": [{"label": "dname", "value": "dname"}], "relationcolums": "[]", "multiselecttable": "test.dictionary_for_select"}, "title": "multi", "column": "multiselect", "classname": ""}, {"t": 1, "type": "multijson", "roles": [], "table": {"t": 28, "col": "multitypehead", "join": false, "type": "multitypehead", "roles": "[]", "title": "multitypehead", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 28, "onetomany": false, "defaultval": null, "depencycol": null, "multicolums": [{"label": "dname", "value": "dname"}], "relationcolums": "[]", "multiselecttable": "test.dictionary_for_select"}, "title": "multi json", "column": "multitypehead", "classname": ""}]	[{"act": "/trees/treetest", "type": "Link", "title": "show tree", "parametrs": [], "isforevery": false}, {"act": "/api/postmethodtest_setselectedcolor_black", "type": "API", "title": "set checke black (POST TEST CHECKED)", "parametrs": [{"paramt": null, "paramconst": "_checked_", "paraminput": "", "paramtitle": "checked", "paramcolumn": null}], "actapitype": "POST", "isforevery": false, "actapiconfirm": true, "actapirefresh": true}, {"act": "/getone/test_add", "icon": "pi pi-plus", "type": "Link", "title": "add with relations", "parametrs": [{"paramt": null, "paramconst": "0", "paraminput": "", "paramtitle": "id", "paramcolumn": null}, {"paramt": null, "paramconst": "number,check", "paraminput": "", "paramtitle": "relation", "paramcolumn": null}, {"paramt": null, "paramconst": "55", "paraminput": "", "paramtitle": "number", "paramcolumn": null}, {"paramt": null, "paramconst": "true", "paraminput": "", "paramtitle": "check", "paramcolumn": null}], "isforevery": false}, {"act": "/getone/test_edit", "icon": "fa fa-edit", "type": "Link", "roles": [], "title": "edit", "ismain": true, "classname": "", "parametrs": [{"paramt": null, "paramconst": "", "paramtitle": "id", "paramcolumn": {"t": 1, "key": "id_3a31e", "label": "id", "value": "id"}}], "paramtype": "query", "actapitype": "GET", "isforevery": true, "actapimethod": null, "actapiconfirm": true, "actapirefresh": true}, {"act": "/api/gettest", "icon": "pi pi-star-o", "type": "API", "title": "set red", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "id", "paramcolumn": {"t": 1, "key": "id_3a31e", "label": "id", "value": "id"}}], "actapitype": "GET", "isforevery": true, "actapiconfirm": true, "actapirefresh": true}, {"act": "/api/posttest", "icon": "pi pi-star", "type": "API", "title": "set blue", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "id", "paramcolumn": {"t": 1, "key": "id_3a31e", "label": "id", "value": "id"}}], "actapitype": "POST", "isforevery": true, "actapiconfirm": true, "actapirefresh": true}, {"act": "/", "icon": "fa fa-trash", "type": "Delete", "title": "delete", "classname": "p-button-danger", "parametrs": [], "isforevery": true}, {"act": "/getone/test_add", "icon": "fa fa-plus", "type": "Link", "roles": [], "title": "add", "ismain": false, "classname": "", "parametrs": [{"paramt": null, "paramconst": "0", "paramtitle": "id", "paramcolumn": null}], "paramtype": null, "actapitype": "GET", "isforevery": false, "actapimethod": null, "actapiconfirm": true, "actapirefresh": true}]	[0]	test_table	t	t	t	t	f	t	{}	f
5542	Accounts Settings	Accounts Settings	framework.users	form full	f	[]	user_account	2019-12-09 18:09:00.445033	[]	[]	[]	[]	\N	f	t	t	t	f	f	{}	f
239	Columns config	View's column's configuration	framework.config	table	f	[{"t": 26, "col": "column_order", "key": "column_order_8fa6b", "join": false, "type": "label", "roles": "[]", "title": "column order", "width": "", "relcol": null, "depency": false, "orderby": true, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 26, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 1, "col": "id", "key": "id_af424", "join": false, "type": "label", "roles": "[]", "title": "key", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 2, "col": "viewid", "key": "viewid_93377", "join": false, "type": "label", "roles": "[]", "title": "id", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "framework.views", "required": true, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 3, "col": "t", "key": "t_d8775", "join": false, "type": "label", "roles": "[]", "title": "t", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 4, "col": "col", "key": "col_0aabc", "join": false, "type": "label", "roles": "[]", "title": "column title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 5, "col": "column_id", "key": "column_id_02c19", "join": false, "type": "label", "roles": "[]", "title": "column_id", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 6, "col": "title", "key": "title_d3062", "join": false, "type": "label", "roles": "[]", "title": "title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 7, "col": "type", "key": "type_1a65e", "join": false, "type": "label", "roles": "[]", "title": "type", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 7, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 8, "col": "roles", "key": "roles_cfce1", "join": false, "type": "label", "roles": "[]", "title": "roles", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 9, "col": "visible", "key": "visible_b3377", "join": false, "type": "label", "roles": "[]", "title": "visible", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 9, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 10, "col": "required", "key": "required_174be", "join": false, "type": "label", "roles": "[]", "title": "is required", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 10, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 11, "col": "width", "key": "width_4cdc6", "join": false, "type": "label", "roles": "[]", "title": "width", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 11, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 12, "col": "join", "key": "join_db8e8", "join": false, "type": "label", "roles": "[]", "title": "join", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 12, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 13, "col": "classname", "key": "classname_8671b", "join": false, "type": "label", "roles": "[]", "title": "classname", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 13, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 14, "col": "updatable", "key": "updatable_f2028", "join": false, "type": "label", "roles": "[]", "title": "updatable", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 14, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 18, "col": "orderby", "key": "orderby_84229", "join": false, "type": "checkbox", "roles": "[]", "title": "orderby", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 18, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 19, "col": "orderbydesc", "key": "orderbydesc_4b59b", "join": false, "type": "checkbox", "roles": "[]", "title": "orderby desc", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 19, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": null, "fn": {"label": "framework.fn_config_relation", "value": "framework.fn_config_relation", "functype": "user"}, "col": "relation", "key": "relation_relation", "type": "text", "input": 0, "roles": [], "table": null, "title": "relation", "tpath": null, "output": 0, "related": true, "visible": true, "relation": null, "fncolumns": [{"t": 1, "key": "id_af424", "label": "id", "value": "#"}], "relatecolumn": "", "relationcolums": "[]"}, {"t": null, "fn": {"label": "framework.fn_config_relationcolumns", "value": "framework.fn_config_relationcolumns", "functype": "user"}, "col": "relationcolums", "key": "relationcolums_relationcolums_1", "type": "text", "input": 0, "roles": [], "table": null, "title": "relationcolums_1", "tpath": null, "output": 0, "related": true, "visible": true, "relation": null, "fncolumns": [{"t": 1, "key": "id_af424", "label": "id", "value": "#"}], "relatecolumn": "", "relationcolums": "[]"}, {"t": 28, "col": "select_condition", "key": "select_condition_f0b20", "join": false, "type": "array", "roles": "[]", "title": "select_condition", "width": "", "relcol": null, "depency": true, "visible": true, "relation": "framework.select_condition", "required": false, "classname": "", "column_id": 27, "onetomany": true, "defaultval": null, "depencycol": "configid", "relationcolums": "[]"}, {"t": 29, "col": "visible_condition", "key": "visible_condition_9cdff", "join": false, "type": "array", "roles": "[]", "title": "visible_condition", "width": "", "relcol": null, "depency": true, "visible": true, "relation": "framework.visible_condition", "required": false, "classname": "", "column_id": 27, "onetomany": true, "defaultval": null, "depencycol": "configid", "relationcolums": "[]"}, {"t": 20, "col": "relcol", "key": "relcol_bb41e", "join": false, "type": "label", "roles": "[]", "title": "relcol", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 20, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 21, "col": "depency", "key": "depency_3bf4a", "join": false, "type": "label", "roles": "[]", "title": "depency", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 21, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 22, "col": "created", "key": "created_1b940", "join": false, "type": "label", "roles": "[]", "title": "created", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 22, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 25, "col": "depencycol", "key": "depencycol_44a89", "join": false, "type": "label", "roles": "[]", "title": "depencycol", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 25, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 27, "col": "defaultval", "key": "defaultval_273b1", "join": false, "type": "array", "roles": "[]", "title": "defaultval", "width": "", "relcol": null, "depency": true, "visible": true, "relation": "framework.defaultval", "required": false, "classname": "", "column_id": 27, "onetomany": true, "defaultval": null, "depencycol": "configid", "relationcolums": "[]"}]	configs	2019-10-24 16:33:24.168	[]	[{"type": "typehead", "roles": [], "title": "seach", "column": [{"t": 1, "key": "col_0aabc", "label": "col", "value": "column title"}, {"t": 1, "key": "title_d3062", "label": "title", "value": "title"}]}]	[{"act": "/composition/view", "icon": "pi pi-pencil", "type": "Link", "title": "edit", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "id", "paramtitle": "id", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "N", "paramcolumn": {"t": 1, "key": "id_af424", "label": "id", "value": "key"}}, {"paramt": null, "paramconst": "", "paraminput": "fl_id", "paramtitle": "fl_id", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "act_id", "paramtitle": "act_id", "paramcolumn": null}], "isforevery": true}, {"act": "/", "icon": "pi pi-trash", "type": "Delete", "title": "delete", "classname": "p-button-danger", "parametrs": [], "isforevery": true}]	[0]	config_table	f	f	f	f	f	t	{}	f
241	filters	filters	framework.filters	table	f	[{"t": 1, "col": "id", "key": "id_06102", "join": false, "type": "label", "roles": "[]", "title": "f_id", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 2, "col": "viewid", "key": "viewid_04c9d", "join": false, "type": "label", "roles": "[]", "title": "id", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "framework.views", "required": true, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 12, "col": "column_order", "key": "column_order_e7443", "join": false, "type": "label", "label": "column_order || column_order", "roles": "[]", "title": "column_order", "width": "", "relcol": null, "depency": false, "orderby": true, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 3, "col": "title", "key": "title_769d5", "join": false, "type": "label", "roles": "[]", "title": "title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 4, "col": "type", "key": "type_6ac01", "join": false, "type": "label", "roles": "[]", "title": "type", "width": "", "relcol": "ftname", "depency": false, "visible": true, "relation": "framework.filtertypes", "required": false, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 5, "col": "classname", "key": "classname_fa186", "join": false, "type": "label", "roles": "[]", "title": "classname", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 6, "col": "column", "key": "column_a844c", "join": false, "type": "label", "roles": "[]", "title": "column", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 7, "col": "columns", "key": "columns_3048c", "join": false, "type": "label", "roles": "[]", "title": "columns", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 7, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 8, "col": "roles", "key": "roles_628d8", "join": false, "type": "label", "roles": "[]", "title": "roles", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 9, "col": "t", "key": "t_ed9da", "join": false, "type": "label", "roles": "[]", "title": "t", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 9, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 10, "col": "table", "key": "table_49b09", "join": false, "type": "label", "roles": "[]", "title": "table", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 10, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 11, "col": "created", "key": "created_9dfd6", "join": false, "type": "label", "roles": "[]", "title": "created", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 11, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}]	filters	2019-10-28 15:19:09.292	[]	[]	[{"act": "/composition/view", "icon": "pi pi-pencil", "type": "Link", "title": "edit", "ismain": true, "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "id", "paramtitle": "id", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "N", "paramtitle": "N", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "act_id", "paramtitle": "act_id", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "fl_id", "paramcolumn": {"t": 1, "key": "id_06102", "label": "id", "value": "f_id"}}], "isforevery": true}, {"act": "/", "icon": "pi pi-trash", "type": "Delete", "title": "delete", "classname": "p-button-danger", "parametrs": [], "isforevery": true}, {"act": "/composition/view", "icon": "pi pi-plus", "type": "Link", "title": "add", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "id", "paramtitle": "id", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "N", "paramtitle": "N", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "act_id", "paramtitle": "act_id", "paramcolumn": null}, {"paramt": null, "paramconst": "viewid", "paraminput": "", "paramtitle": "relation", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "id", "paramtitle": "viewid", "paramcolumn": null}, {"paramt": null, "paramconst": "0", "paraminput": "", "paramtitle": "fl_id", "paramcolumn": null}], "isforevery": false}]	[0]	config_table	f	t	t	t	f	f	{}	f
243	parametrs	ACTIONS PARAMETERS	framework.act_parametrs	table	f	[{"t": 1, "col": "id", "key": "id_7989b", "join": false, "type": "label", "roles": "[]", "title": "p_id", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 2, "col": "actionid", "key": "actionid_06ea1", "join": false, "type": "label", "roles": "[]", "title": "act_id", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "framework.actions", "required": true, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 3, "col": "paramtitle", "key": "paramtitle_5ce20", "join": false, "type": "label", "roles": "[]", "title": "title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 8, "col": "title", "key": "title_0.25783669260001485", "join": false, "type": "label", "input": 0, "roles": [], "table": "framework.config", "title": "column", "tpath": [], "output": 0, "relcol": null, "related": true, "visible": true, "relation": null, "classname": "", "notaddable": false, "relatecolumn": "val_desc", "relationcolums": "[]"}, {"t": 5, "col": "paramconst", "key": "paramconst_0ddc7", "join": false, "type": "label", "roles": "[]", "title": "const", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 6, "col": "paraminput", "key": "paraminput_6fde9", "join": false, "type": "label", "roles": "[]", "title": "input", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 4, "col": "paramt", "key": "paramt_66c60", "join": false, "type": "label", "roles": "[]", "title": "method type", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 8, "col": "val_desc", "key": "val_desc_912b4", "join": false, "type": "label", "label": "val_desc || val_desc", "roles": "[]", "title": "val_desc", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "framework.config", "required": false, "classname": "", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "title", "title": "title_", "value": "title"}]}, {"t": 9, "col": "query_type", "key": "query_type_8c815", "join": false, "type": "label", "label": "query_type || query_type", "roles": "[]", "title": "query type", "width": "", "relcol": "aqname", "depency": false, "visible": true, "relation": "framework.actparam_querytypes", "required": false, "classname": "", "column_id": 9, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}]	parametrs	2019-10-29 16:33:55.778	[]	[]	[{"act": "/composition/act_params", "icon": "pi pi-pencil", "type": "Link", "title": "edit", "ismain": true, "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "actionid", "paramtitle": "actionid", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "paramid", "paramcolumn": {"t": 1, "key": "id_7989b", "label": "id", "value": "p_id"}}, {"paramt": null, "paramconst": "actionid", "paraminput": "", "paramtitle": "relation", "paramcolumn": null}], "isforevery": true}, {"act": "/", "type": "Delete", "title": "delete", "parametrs": [], "isforevery": true}, {"act": "/composition/act_params", "icon": "pi pi-plus", "type": "Link", "title": "add", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "actionid", "paramtitle": "actionid", "paramcolumn": null}, {"paramt": null, "paramconst": "actionid", "paraminput": "", "paramtitle": "relation", "paramcolumn": null}, {"paramt": null, "paramconst": "0", "paraminput": "", "paramtitle": "paramid", "paramcolumn": null}], "isforevery": false}]	[0]	config_table	f	t	t	t	f	f	{}	f
225	default values	default values	framework.defaultval	table	f	[{"t": 1, "col": "id", "key": "id_24be4", "join": false, "type": "label", "roles": "[]", "title": "id", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 2, "col": "configid", "key": "configid_0c694", "join": false, "type": "label", "roles": "[]", "title": "configid", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "framework.config", "required": false, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 3, "col": "bool", "key": "bool_c1bb5", "join": false, "type": "select", "roles": "[]", "title": "bool operator", "width": "", "relcol": "bname", "depency": false, "visible": true, "relation": "framework.booloper", "required": false, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "id", "title": "id_", "value": "id"}, {"label": "bname", "title": "bname", "value": "bname"}]}, {"t": 4, "col": "act", "key": "act_1ae13", "join": false, "type": "select", "roles": "[]", "title": "action", "width": "", "relcol": "value", "depency": false, "visible": true, "relation": "framework.operations", "required": false, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "id", "title": "id_", "value": "id"}, {"label": "value", "title": "value_", "value": "value"}]}, {"t": 5, "col": "value", "key": "value_25aea", "join": false, "type": "text", "roles": "[]", "title": "value", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 6, "col": "created", "key": "created_946c2", "join": false, "type": "label", "roles": "[]", "title": "created", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}]	default_values	2019-10-27 21:23:52.258	[]	[]	[{"act": "/composition/defaultval", "icon": "pi pi-plus", "type": "Link", "title": "add", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "relation", "paramtitle": "relation", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "configid", "paramtitle": "configid", "paramcolumn": null}, {"paramt": null, "paramconst": "0", "paraminput": "", "paramtitle": "CN", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "viewid", "paramtitle": "viewid", "paramcolumn": null}], "isforevery": false}, {"act": "/composition/defaultval", "icon": "pi pi-pencil", "type": "Link", "title": "edit", "ismain": true, "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "relation", "paramtitle": "relation", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "configid", "paramtitle": "configid", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "CN", "paramcolumn": {"t": 1, "key": "id_24be4", "label": "id", "value": "id"}}, {"paramt": null, "paramconst": "", "paraminput": "viewid", "paramtitle": "viewid", "paramcolumn": null}], "isforevery": true}, {"act": "/composition/view", "type": "Link", "title": "go back", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "viewid", "paramtitle": "id", "paramcolumn": null}, {"paramt": null, "paramconst": "", "paraminput": "configid", "paramtitle": "N", "paramcolumn": null}], "isforevery": false}, {"act": "/", "icon": "pi pi-trash", "type": "Delete", "title": "delete", "parametrs": [], "isforevery": true}]	[0]	config_table	f	t	t	t	f	f	{}	f
50792	Schema Add	Schema Add	sqlmanager.schemalist	form not mutable	f	[]	schema	2020-05-13 18:38:40.005858	[]	[]	[]	[0]	\N	f	t	t	t	f	f	{}	f
50796	Function Add	Function Add	sqlmanager.functionslist	form not mutable	f	[]	functionadd	2020-05-14 17:00:53.37245	[]	[]	[]	[0]	\N	f	t	t	t	f	f	{}	f
238	View Main Info	this is for admins views main information.	framework.views	form not mutable	f	[{"t": 1, "col": "id", "key": "id_4e813", "join": false, "type": "label", "roles": "[]", "title": "id", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "required": false, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 4, "col": "tablename", "key": "tablename_75be5", "join": false, "type": "select_api", "roles": "[]", "title": "table name", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "select_api": "/api/gettables", "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_4e813", "label": "id", "value": "id"}, "value": null, "operation": {"js": "===null", "label": "is null", "value": "is null", "python": "is None"}}]}, {"t": 21, "col": "tablename", "key": "tablename_5238b", "join": false, "type": "label", "label": "tablename || tablename", "roles": "[]", "title": "tablename", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "id_4e813", "label": "id", "value": "id"}, "const": null, "value": null, "operation": {"js": "!==null", "label": "is not null", "value": "is not null", "python": "is not None"}}]}, {"t": 2, "col": "title", "key": "title_efe1b", "join": false, "type": "text", "roles": "[]", "title": "title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 3, "col": "descr", "key": "descr_9d5d9", "join": false, "type": "textarea", "roles": "[]", "title": "descr", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 8, "col": "path", "key": "path_98923", "join": false, "type": "text", "chckd": false, "roles": "[]", "title": "path", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 5, "col": "viewtype", "key": "viewtype_421ce", "join": false, "type": "select", "roles": "[]", "title": "viewtype", "width": "", "relcol": "vtypename", "depency": false, "visible": true, "relation": "framework.viewtypes", "required": false, "classname": "", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "vtypename", "title": "vtypename", "value": "vtypename"}]}, {"t": 13, "col": "roles", "key": "roles_ebaac", "join": false, "type": "multiselect", "chckd": false, "roles": "[]", "title": "roles", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 13, "onetomany": false, "defaultval": null, "depencycol": null, "multicolums": [{"label": "id", "value": "id"}, {"label": "rolename", "value": "rolename"}], "relationcolums": "[]", "multiselecttable": "framework.roles"}, {"t": 14, "col": "classname", "key": "classname_859e2", "join": false, "type": "text", "chckd": false, "roles": "[]", "title": "classname", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 14, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 6, "col": "pagination", "key": "pagination_d6ad4", "join": false, "type": "checkbox", "roles": "[]", "title": "pagination", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "viewtype_421ce", "label": "viewtype", "value": "viewtype"}, "const": null, "value": "tiles,table", "operation": {"js": "", "label": "in", "value": "in", "python": "in"}}]}, {"t": 15, "col": "orderby", "key": "orderby_d2011", "join": false, "type": "checkbox", "chckd": true, "roles": "[]", "title": "orderby", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 15, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "viewtype_421ce", "label": "viewtype", "value": "viewtype"}, "const": null, "value": "tiles,table", "operation": {"js": "", "label": "in", "value": "in", "python": "in"}}]}, {"t": 16, "col": "ispagesize", "key": "ispagesize_ea575", "join": false, "type": "checkbox", "chckd": true, "roles": "[]", "title": "ispagesize", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 16, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "viewtype_421ce", "label": "viewtype", "value": "viewtype"}, "const": null, "value": "tiles,table", "operation": {"js": "", "label": "in", "value": "in", "python": "in"}}]}, {"t": 17, "col": "pagecount", "key": "pagecount_be57f", "join": false, "type": "checkbox", "chckd": true, "roles": "[]", "title": "pagecount", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 17, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "viewtype_421ce", "label": "viewtype", "value": "viewtype"}, "const": null, "value": "tiles,table", "operation": {"js": "", "label": "in", "value": "in", "python": "in"}}]}, {"t": 18, "col": "foundcount", "key": "foundcount_4bd77", "join": false, "type": "checkbox", "chckd": true, "roles": "[]", "title": "foundcount", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 18, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "viewtype_421ce", "label": "viewtype", "value": "viewtype"}, "const": null, "value": "tiles,table", "operation": {"js": "", "label": "in", "value": "in", "python": "in"}}]}, {"t": 19, "col": "subscrible", "key": "subscrible_d08b5", "join": false, "type": "checkbox", "chckd": false, "roles": "[]", "title": "subscrible", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 19, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": []}, {"t": 20, "col": "checker", "key": "checker_6add0", "join": false, "type": "checkbox", "chckd": true, "roles": "[]", "title": "checker", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 20, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "key": "viewtype_421ce", "label": "viewtype", "value": "viewtype"}, "const": null, "value": "tiles,table", "operation": {"js": "", "label": "in", "value": "in", "python": "in"}}]}]	view	2019-10-24 16:07:07.223	[]	[]	[{"act": "/", "icon": "fa fa-check", "type": "Save", "title": "save main info", "classname": "p-button-success", "parametrs": [], "isforevery": false}, {"act": "/list/views", "icon": "fa fa-arrow-left", "type": "Link", "title": "back to list", "parametrs": [], "isforevery": false}]	[0]	\N	f	t	t	t	f	f	{}	f
6424	User Css	User Css	framework.mainsettings	form not mutable	f	[]	usercss	2020-03-18 11:03:14.765649	[]	[]	[]	[0]	\N	f	t	t	t	f	f	{}	f
237	VIews	Views administration	framework.views	table	t	[{"t": 1, "col": "id", "key": "id_fc1f2", "join": false, "type": "label", "roles": "[]", "title": "id", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "required": false, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "orderbydesc": false, "relationcolums": "[]"}, {"t": 2, "col": "title", "key": "title_76a90", "join": false, "type": "label", "chckd": false, "roles": "[]", "title": "title", "width": "", "relcol": null, "depency": false, "orderby": false, "visible": false, "relation": null, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "orderbydesc": false, "relationcolums": "[]"}, {"t": null, "fn": {"label": "framework.fn_view_title_link", "value": "framework.fn_view_title_link", "functype": "user"}, "col": "tit", "key": "tit_9f5cb", "type": "link", "input": 0, "roles": [], "table": null, "title": "view title", "tpath": null, "output": 0, "related": true, "visible": 1, "relation": null, "fncolumns": [{"t": 1, "label": "id", "value": "id"}, {"t": 1, "label": "title", "value": "title"}], "relatecolumn": "", "relationcolums": "[]"}, {"t": 4, "col": "tablename", "key": "tablename_3bb96", "join": false, "type": "label", "roles": "[]", "title": "tablename", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 5, "col": "vtypename", "key": "vtypename_d11aa", "type": "text", "input": 0, "roles": [], "table": "framework.viewtypes", "title": "view type", "tpath": [], "output": 0, "relcol": null, "related": true, "visible": 1, "relation": null, "classname": "", "notaddable": false, "relatecolumn": "viewtype", "relationcolums": "[]"}, {"t": 3, "col": "descr", "key": "descr_fbb10", "join": false, "type": "label", "roles": "[]", "title": "descr", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 8, "col": "path", "key": "path_7ce49", "join": false, "type": "link", "roles": "[]", "title": "path", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 5, "col": "viewtype", "key": "viewtype_96c4f", "join": false, "type": "label", "label": "viewtype || viewtype", "roles": "[]", "title": "viewtype", "width": "", "relcol": "vtypename", "depency": false, "visible": false, "relation": "framework.viewtypes", "classname": "", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "vtypename", "title": "vtypename", "value": "vtypename"}]}]	views	2019-09-22 11:39:01.726	[]	[{"type": "typehead", "roles": [{"label": "developer", "value": 0}], "title": "found", "column": [{"t": 1, "label": "title", "value": "title"}, {"t": 1, "label": "tablename", "value": "tablename"}, {"t": 1, "label": "path", "value": "path"}], "classname": ""}]	[{"act": "/composition/view", "icon": "fa fa-check", "type": "LinkTo", "title": "view edit", "parametrs": [{"paramt": null, "paramconst": "", "paraminput": "", "paramtitle": "id", "paramcolumn": {"t": 1, "key": "id_fc1f2", "label": "id", "value": "id"}}, {"paramt": null, "paramconst": "-1", "paraminput": "", "paramtitle": "N", "paramcolumn": null}, {"paramt": null, "paramconst": "-1", "paraminput": "", "paramtitle": "fl_id", "paramcolumn": null}, {"paramt": null, "paramconst": "-1", "paraminput": "", "paramtitle": "act_id", "paramcolumn": null}], "isforevery": true}, {"act": "/view", "icon": "fa fa-link", "type": "LinkTo", "roles": [{"label": "developer", "value": 0}], "title": "go to link", "ismain": true, "classname": "", "parametrs": [{"paramt": null, "paramconst": "", "paramtitle": "id", "paramcolumn": {"t": 1, "key": "id_fc1f2", "label": "id", "value": "id"}}], "paramtype": "link", "actapitype": "GET", "isforevery": true, "actapimethod": null, "actapiconfirm": true, "actapirefresh": true, "act_visible_condition": [{"col": {"t": 1, "key": "id_fc1f2", "label": "id", "value": "id"}, "value": "0", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"act": "/newview", "icon": "fa fa-plus", "type": "Link", "roles": [], "title": "create view", "ismain": false, "classname": "", "parametrs": [], "paramtype": null, "actapitype": "GET", "isforevery": false, "actapimethod": null, "actapiconfirm": true, "actapirefresh": true}, {"act": "/api/copyview", "icon": "fa fa-copy", "type": "API", "roles": [{"label": "developer", "value": 0}], "title": "copy", "ismain": false, "classname": "", "parametrs": [{"paramt": null, "paramconst": "", "paramtitle": "id", "paramcolumn": {"t": 1, "key": "id_fc1f2", "label": "id", "value": "id"}}], "paramtype": null, "actapitype": "POST", "isforevery": true, "actapimethod": null, "actapiconfirm": true, "actapirefresh": true}, {"act": "/", "icon": "fa fa-trash", "type": "Delete", "roles": [], "title": "del", "ismain": false, "classname": "", "parametrs": [], "paramtype": null, "actapitype": "POST", "isforevery": true, "actapimethod": null, "actapiconfirm": true, "actapirefresh": true}]	[0]	\N	t	t	t	t	f	f	{}	f
118	Reports	Reports constructor	reports.reportlist	table	t	[{"t": 1, "col": "id", "key": "gf4pwDf35", "join": false, "type": "number", "roles": [], "title": "id", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": []}, {"t": 2, "col": "title", "key": "2FhXSNypi", "join": false, "type": "text", "roles": [], "title": "Название", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": []}, {"t": 3, "col": "roles", "key": "1Op1x6gc6", "join": false, "type": "text", "roles": [], "title": "Роли", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": []}, {"t": 4, "col": "path", "key": "IcOGsAEL6", "join": false, "type": "text", "roles": [], "title": "Путь", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": []}, {"t": 12, "col": "filename", "key": "bAqWoQtS_", "join": false, "type": "text", "label": "filename || filename", "roles": "[]", "title": "Название файла", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 13, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 5, "col": "template", "key": "hmIin2FKF", "join": false, "type": "text", "roles": [], "title": "Файл шаблона", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": []}, {"t": 6, "col": "template_path", "key": "VSco1YPgh", "join": false, "type": "text", "roles": [], "title": "template_path", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": []}, {"t": 7, "col": "functitle", "key": "theqOaP2M", "join": false, "type": "text", "roles": [], "title": "Название функции", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 7, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": []}, {"t": 8, "col": "created", "key": "qwpk2Hn_j", "join": false, "type": "date", "roles": [], "title": "Дата создания", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": []}, {"t": 9, "col": "section", "key": "sB8gOSDgs", "join": false, "type": "text", "label": "section || Секция", "roles": "[]", "title": "Секция", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 10, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": 10, "col": "completed", "key": "A5Tp_A3Jt", "join": false, "type": "checkbox", "label": "completed || completed", "roles": "[]", "title": "completed", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 11, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}, {"t": null, "fn": {"label": "public.fn_completed_colorblack", "value": "public.fn_completed_colorblack", "functype": "user"}, "col": "color", "key": "H1EOWysMs", "type": "colorrow", "input": 0, "roles": [], "table": null, "title": "color", "tpath": null, "output": 0, "related": true, "visible": false, "relation": null, "fncolumns": [{"t": 1, "label": "completed", "value": "completed"}], "relatecolumn": "", "relationcolums": "[]"}]	reports	2019-06-25 15:43:54	[]	[{"key": "BfOrx7w_8", "type": "typehead", "roles": [], "title": "Найти", "column": [{"t": 1, "label": "title", "value": "Название"}, {"t": 1, "label": "functitle", "value": "Название функции"}, {"t": 1, "label": "path", "value": "Путь"}], "classname": ""}]	[{"act": "/getone/reportone", "icon": "plus", "type": "Link", "roles": [], "title": "add", "ismain": false, "classname": "", "parametrs": [{"key": "Lm-Mg", "paramt": null, "paramconst": "0", "paramtitle": "reportlistid", "paramcolumn": ""}], "paramtype": null, "actapitype": "GET", "isforevery": false, "actapimethod": null, "actapiconfirm": true, "actapirefresh": true}, {"act": "/composition/reportone", "icon": "edit", "type": "Link", "roles": [], "title": "edit", "ismain": true, "classname": "", "parametrs": [{"key": "1uJb0", "paramt": null, "paramconst": "-1", "paramtitle": "paramid", "paramcolumn": ""}, {"key": "i6aqf", "paramt": null, "paramconst": "", "paramtitle": "reportlistid", "paramcolumn": {"t": 1, "label": "id", "value": "id"}}], "paramtype": null, "actapitype": "GET", "isforevery": true, "actapimethod": null, "actapiconfirm": true, "actapirefresh": true}, {"act": "/report", "icon": "link", "type": "Link", "roles": [], "title": "перейти к отчёту", "ismain": false, "classname": "", "parametrs": [{"key": "_OBpY", "paramt": null, "paramconst": "", "paramtitle": "id", "paramcolumn": {"t": 1, "label": "id", "value": "id"}}], "paramtype": "link", "actapitype": "GET", "isforevery": true, "actapimethod": null, "actapiconfirm": true, "actapirefresh": true, "act_visible_condition": [{"col": {"t": 1, "label": "completed", "value": "completed"}, "key": "mZuBY", "value": "true", "operation": {"js": "===", "label": "=", "value": "=", "python": "=="}}]}, {"act": "/", "icon": "delete", "type": "Delete", "roles": [], "title": "del", "ismain": false, "classname": "", "parametrs": [], "paramtype": null, "actapitype": "GET", "isforevery": true, "actapimethod": null, "actapiconfirm": true, "actapirefresh": true}, {"act": "/api/report_copy", "icon": "copy", "type": "API", "roles": [{"key": 0, "label": "developer", "value": 0}], "title": "Копировать отчёт", "ismain": false, "classname": "", "parametrs": [{"key": "Dw5y7", "paramtitle": "id", "paramcolumn": {"t": 1, "key": "id", "label": "id", "value": "id"}}], "actapitype": "POST", "isforevery": true, "actapiconfirm": true, "actapirefresh": true}]	[{"key": 0, "label": "developer", "value": 0}, 0]	\N	t	t	t	t	f	f	{}	f
121	Report parametr	Report parametr	reports.reportparams	form not mutable	f	[{"t": 1, "col": "id", "key": "2xn8jeYed", "join": false, "type": "number", "roles": [], "title": "paramid", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [], "visible_condition": [{"col": {"t": 1, "label": "id", "value": "paramid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 2, "col": "reportlistid", "key": "Qp8OlThyb", "join": false, "type": "number", "roles": [], "title": "reportlistid", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "reports.reportlist", "classname": "", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [], "visible_condition": [{"col": {"t": 1, "label": "id", "value": "paramid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 3, "col": "ptitle", "key": "31p0rDxM7", "join": false, "type": "text", "roles": [], "title": "Название параметра", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "col-md-12", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [], "visible_condition": [{"col": {"t": 1, "label": "id", "value": "paramid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 5, "col": "ptype", "key": "kO9CCNXmB", "join": false, "type": "select", "label": "ptype || Тип параметра", "roles": "[]", "title": "Тип параметра", "width": "", "relcol": "id", "depency": false, "visible": true, "relation": "reports.paramtypes", "classname": "", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "id", "title": "id", "value": "id"}, {"label": "typename", "title": "typename", "value": "typename"}], "visible_condition": [{"col": {"t": 1, "label": "id", "value": "paramid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 4, "col": "func_paramtitle", "key": "XJ6L7Bgc1", "join": false, "type": "text", "label": "func_paramtitle || Название параметра в функции", "roles": "[]", "title": "Название параметра в функции", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "label": "id", "value": "paramid"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 7, "col": "created", "key": "a4bNeqQbN", "join": false, "type": "date", "roles": [], "title": "created", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 7, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": []}, {"t": 8, "col": "apimethod", "key": "ETy6UVo_F", "join": false, "type": "select", "label": "apimethod || apimethod", "roles": "[]", "title": "apimethod", "width": "", "relcol": "id", "depency": false, "visible": true, "relation": "framework.spapi", "classname": "", "column_id": 8, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "id", "title": "id", "value": "id"}, {"label": "methodname", "title": "methodname", "value": "methodname"}, {"label": "procedurename", "title": "procedurename", "value": "procedurename"}], "visible_condition": [{"col": {"t": 1, "label": "ptype", "value": "Тип параметра"}, "value": "2,3,5", "operation": {"js": "", "label": "in", "value": "in", "python": "in"}}, {"col": {"t": 1, "label": "id", "value": "paramid"}, "const": null, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}, {"t": 9, "col": "orderby", "join": false, "type": "number", "label": "orderby || orderby", "roles": "[]", "title": "orderby", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "", "column_id": 9, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}]	reportparam	2019-06-25 16:11:35	[]	[]	[{"act": "/api/save", "icon": "save", "type": "Save", "roles": [], "title": "Сохранить изменения", "classname": "btn btn-success", "parametrs": [], "paramtype": null, "isforevery": false}, {"act": "/composition/reportone", "icon": "check", "type": "Link", "roles": [], "title": "ok", "classname": "btn btn-outline-primary", "parametrs": [{"key": "BCXVf", "paramt": null, "paramconst": "-1", "paramtitle": "paramid", "paramcolumn": ""}, {"key": "Bv4bl", "paramt": null, "paramconst": "", "paramtitle": "reportlistid", "paramcolumn": {"t": 1, "label": "reportlistid", "value": "reportlistid"}}], "paramtype": null, "actapitype": "GET", "isforevery": false, "actapimethod": null, "actapiconfirm": true, "actapirefresh": true}]	[{"key": 0, "label": "developer", "value": 0}, 0]		f	t	t	t	f	f	{}	f
50783	Main Settings	Main Settings Change	framework.mainsettings	form not mutable	f	[]	mainsettings	2020-04-04 21:05:33.699555	[]	[]	[]	[0]	\N	f	t	t	t	f	f	{}	f
50784	Notifications	notifications	framework.notifications	tiles	f	[]	notifications	2020-04-04 22:00:08.558568	[]	[]	[]	[]	\N	f	t	t	t	f	f	{}	f
50786	schema objects	schema objects	sqlmanager.schemaobjects	table	f	[]	schemaobjects	2020-05-11 16:53:08.044615	[]	[]	[]	[0]	schema_table	f	t	t	t	f	f	{}	f
50789	functions	functions	sqlmanager.functionslist	table	f	[]	functions	2020-05-11 18:46:40.658036	[]	[]	[]	[0]	t_table	f	t	t	t	f	f	{}	f
50788	tables	tables	sqlmanager.tablelist	table	f	[]	tables	2020-05-11 18:07:01.30863	[]	[]	[]	[0]	t_table	f	t	t	t	f	f	{}	f
50790	table columns	table columns	sqlmanager.tablecolumns	table	f	[]	tablecolumns	2020-05-13 09:32:22.479359	[]	[]	[]	[0]	et_table	f	t	t	t	f	f	{}	f
50797	Function Main	Function Main	sqlmanager.functionslist	form not mutable	f	[]	functioneditmain	2020-05-15 10:15:56.440015	[]	[]	[]	[0]	\N	f	t	t	t	f	f	{}	t
50798	Arguments	Arguments	sqlmanager.functionargs	table	f	[]	functionargs	2020-05-15 10:41:27.990213	[]	[]	[]	[0]	args_table	f	t	t	t	f	f	{}	f
50799	Triggers	Triggers	sqlmanager.triggers	table	f	[]	triggers	2020-05-15 17:03:32.139491	[]	[]	[]	[0]	et_table	f	t	t	t	f	f	{}	f
50800	Trigger Add	Trigger Add	sqlmanager.triggers	form not mutable	f	[]	triggeradd	2020-05-18 11:44:13.185014	[]	[]	[]	[0]	\N	f	t	t	t	f	f	{}	f
50801	Trigger Edit	Trigger Edit	sqlmanager.triggers	form not mutable	f	[]	triggeredit	2020-05-18 14:11:08.704342	[]	[]	[]	[0]	\N	f	t	t	t	f	f	{}	f
50802	Foreign Key	Foreign Key	sqlmanager.foreignkeys	table	f	[]	foreignkey	2020-05-18 16:10:55.732921	[]	[]	[]	[0]	\N	f	t	t	t	f	f	{}	f
50803	Foreign Key Add	Foreign Key Add	sqlmanager.foreignkeys	form not mutable	f	[]	foreignkeyadd	2020-05-18 17:26:37.113545	[]	[]	[]	[0]	\N	f	t	t	t	f	f	{}	f
50804	Trigger Fields	Trigger Fields	sqlmanager.triggers	form full	f	[]	triggerfields	2020-05-21 14:00:19.69668	[]	[]	[]	[0]	\N	f	t	t	t	f	f	{}	f
101	Trees Act	Trees Act	framework.treesacts	form not mutable	f	[{"t": 1, "col": "id", "key": "id_f1f88", "join": false, "type": "number", "chckd": true, "roles": "[]", "title": "bid", "width": "30%", "depency": false, "visible": false, "relation": null, "classname": "col-md-11", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "label": "id", "value": "bid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]},{"t": 2, "col": "treesid", "key": "treesid_d4c60", "join": false, "type": "number", "chckd": true, "roles": "[]", "title": "treesid", "width": "30%", "depency": false, "visible": false, "relation": "framework.trees", "classname": "col-md-11", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "label": "id", "value": "bid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]},{"t": 3, "col": "title", "key": "title_ce0aa", "join": false, "type": "text", "chckd": true, "roles": "[]", "title": "title", "width": "30%", "depency": false, "visible": true, "relation": null, "classname": "col-md-11", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "label": "id", "value": "bid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]},{"t": 4, "col": "icon", "key": "icon_a2376", "join": false, "type": "text", "chckd": true, "roles": "[]", "title": "icon", "width": "30%", "depency": false, "visible": true, "relation": null, "classname": "col-md-11", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "label": "id", "value": "bid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]},{"t": 5, "col": "classname", "key": "classname_dfafe", "join": false, "type": "text", "chckd": true, "roles": "[]", "title": "classname", "width": "30%", "depency": false, "visible": true, "relation": null, "classname": "col-md-11", "column_id": 5, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "label": "id", "value": "bid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]},{"t": 6, "col": "act", "key": "act_78fbc", "join": false, "type": "text", "chckd": true, "roles": "[]", "title": "act", "width": "30%", "depency": false, "visible": true, "relation": null, "classname": "col-md-11", "column_id": 6, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "label": "id", "value": "bid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]},{"t": 7, "col": "created", "key": "created_5855a", "join": false, "type": "date", "chckd": true, "roles": "[]", "title": "created", "width": "", "depency": false, "visible": false, "relation": null, "classname": "col-md-11", "column_id": 7, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]", "visible_condition": [{"col": {"t": 1, "label": "id", "value": "bid"}, "value": "-1", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]}]	treesact	2019-04-17 10:09:08.709	[]	[]	[{"act": "/composition/treesacts", "icon": "fa fa-check", "type": "Link", "roles": [], "title": "ok", "classname": null, "parametrs": [{"paramconst": null, "paramtitle": "treesid", "paramcolumn": {"t": 1, "key": "treesid_d4c60", "label": "treesid", "value": "treesid"}}, {"paramconst": "-1", "paramtitle": "bid", "paramcolumn": null}], "paramtype": null, "actapitype": "GET", "isforevery": false}]	[0]	\N	f	t	t	t	f	f	{}	f
211	Project Menu		framework.menus	form not mutable	f	[{"t": 1, "col": "id", "key": "id_99b37", "join": false, "type": "number", "roles": "[]", "title": "id", "width": "", "relcol": null, "depency": false, "visible": false, "relation": null, "classname": "", "column_id": 1, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 3, "col": "menutitle", "key": "menutitle_e554e", "join": false, "type": "text", "roles": "[]", "title": "menu title", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "col-md-11", "column_id": 3, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"},{"t": 2, "col": "menutype", "key": "menutype_5dde7", "join": false, "type": "select", "label": "menutype || menutype", "roles": "[]", "title": "menu type", "width": "", "relcol": "id", "depency": false, "visible": true, "relation": "framework.menutypes", "classname": "col-md-11", "column_id": 2, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "id", "title": "id_", "value": "id"}, {"label": "mtypename", "title": "mtypename", "value": "mtypename"}]},{"t": 4, "col": "ismainmenu", "key": "ismainmenu_bc120", "join": false, "type": "checkbox", "roles": "[]", "title": "is main menu", "width": "", "relcol": null, "depency": false, "visible": true, "relation": null, "classname": "col-md-11", "column_id": 4, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}]	projectmenu	2019-08-11 18:33:52	[]	[]	[{"act": "/list/projectmenus", "icon": "fa fa-", "type": "Link", "roles": [], "title": "OK", "ismain": false, "classname": "btn btn", "parametrs": [], "paramtype": null, "actapitype": "GET", "isforevery": false, "actapimethod": null, "actapiconfirm": true, "actapirefresh": true}]	[0]	\N	f	t	t	t	f	f	{}	f
235	Menu Edit	Menu Edit	framework.mainmenu	form not mutable	f	[{"t": 1, "col": "id", "key": "id_b1f05", "join": 0, "type": "label", "chckd": true, "roles": [], "title": "id", "width": "", "depency": null, "visible": false, "relation": null, "classname": "col-md-12", "column_id": 1, "onetomany": 0, "updatable": false, "defaultval": null, "depencycol": null, "relationcolums": []},{"t": 2, "col": "title", "key": "title_869f2", "join": 0, "type": "text", "chckd": true, "roles": [], "title": "title", "width": "", "depency": null, "visible": 1, "relation": null, "classname": "col-md-12", "column_id": 2, "onetomany": 0, "updatable": true, "defaultval": null, "depencycol": null, "relationcolums": []},{"t": 3, "col": "parentid", "key": "parentid_d6e3d", "join": 0, "type": "select", "chckd": true, "input": 0, "roles": [], "title": "parent", "width": "", "output": 0, "depency": null, "visible": 1, "relation": "framework.mainmenu", "classname": "col-md-12", "column_id": 3, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": [{"label": "id", "value": "id"}, {"label": "title", "value": "title"}], "select_condition": [{"col": {"label": "menuid", "value": "menuid"}, "const": null, "value": {"t": 1, "label": "menuid", "value": "menuid"}, "operation": {"js": "===", "label": "=", "value": "=", "python": "=="}}], "visible_condition": [{"col": {"t": 1, "label": "id", "value": "id"}, "value": "0", "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]},{"t": 4, "col": "roles", "key": "roles_05141", "join": 0, "type": "multiselect", "chckd": true, "input": 0, "roles": [], "title": "roles", "width": "", "output": 0, "depency": null, "visible": 1, "relation": null, "classname": "col-md-12", "column_id": 4, "onetomany": 0, "defaultval": null, "depencycol": null, "multicolums": [{"label": "id", "value": "id"}, {"label": "rolename", "value": "rolename"}], "relationcolums": [], "multiselecttable": "framework.roles"},{"t": 5, "col": "created", "key": "created_2f597", "join": 0, "type": "label", "chckd": true, "input": 0, "roles": [], "title": "created", "width": "", "output": 0, "depency": null, "visible": false, "relation": null, "classname": "col-md-12", "column_id": 5, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": []},{"t": 6, "col": "systemfield", "key": "systemfield_56127", "join": 0, "type": "checkbox", "chckd": true, "input": 0, "roles": [], "title": "system field", "width": "", "output": 0, "depency": null, "visible": 0, "relation": null, "classname": "col-md-12", "column_id": 6, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": []},{"t": 7, "col": "orderby", "key": "orderby_703f8", "join": 0, "type": "number", "chckd": true, "input": 0, "roles": [], "title": "order by", "width": "", "output": 0, "depency": null, "visible": 1, "relation": null, "classname": "col-md-12", "column_id": 7, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": []},{"t": 8, "col": "path", "key": "path_0a221", "join": 0, "type": "text", "chckd": true, "input": 0, "roles": [], "title": "path", "width": "", "output": 0, "depency": null, "visible": 1, "relation": null, "classname": "col-md-12", "column_id": 8, "onetomany": 0, "defaultval": null, "depencycol": null, "relationcolums": []},{"t": 10, "col": "test", "key": "test_dda44", "join": false, "type": "array", "chckd": true, "roles": [], "title": "test", "width": "", "depency": true, "visible": false, "relation": "framework.test", "classname": "col-md-12", "column_id": 10, "onetomany": true, "defaultval": null, "depencycol": "relat", "relationcolums": []},{"t": 9, "col": "icon", "key": "icon_eb99f", "join": false, "type": "text", "chckd": true, "roles": [], "title": "icon", "width": "", "depency": null, "visible": true, "relation": null, "classname": "col-md-12", "column_id": 10, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": []},{"t": 11, "col": "menuid", "key": "menuid_d4276", "join": false, "type": "number", "chckd": true, "label": "menuid || menuid", "roles": "[]", "title": "menuid", "width": "", "relcol": "id", "depency": false, "visible": false, "relation": "framework.menus", "classname": "col-md-12", "column_id": 10, "onetomany": false, "defaultval": null, "depencycol": null, "relationcolums": "[]"}]	menuedit	2018-11-30 14:23:09	[]	[]	[{"act": "/list/menusettings", "icon": "fa fa-arrow-left", "type": "Link", "roles": [], "title": "back", "classname": "btn", "parametrs": [{"paramt": null, "paramconst": "", "paramtitle": "menuid", "paramcolumn": {"t": 1, "key": "menuid_d4276", "label": "menuid", "value": "menuid"}}], "isforevery": 0}]	[0]	\N	f	t	t	t	f	f	{}	f
\.


--
-- TOC entry 3739 (class 0 OID 0)
-- Dependencies: 265
-- Name: views_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('views_id_seq', 50804, true);


--
-- TOC entry 3277 (class 0 OID 227889)
-- Dependencies: 266
-- Data for Name: viewsnotification; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY viewsnotification (id, viewid, col, tableid, notificationtext, foruser, issend, isread, created, sended, readed) FROM stdin;
\.


--
-- TOC entry 3740 (class 0 OID 0)
-- Dependencies: 267
-- Name: viewsnotification_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('viewsnotification_id_seq', 1, false);


--
-- TOC entry 3279 (class 0 OID 227901)
-- Dependencies: 268
-- Data for Name: viewtypes; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY viewtypes (id, vtypename, viewlink) FROM stdin;
1	table	/list/
2	tiles	\N
3	form full	/getone/
4	form not mutable	\N
5	calendar	\N
\.


--
-- TOC entry 3280 (class 0 OID 227907)
-- Dependencies: 269
-- Data for Name: visible_condition; Type: TABLE DATA; Schema: framework; Owner: postgres
--

COPY visible_condition (id, configid, val_desc, col, title, operation, value, created) FROM stdin;
2945	19416	13020	id	\N	>	-1	2019-12-25 11:04:47.818399
2948	19379	13020	id	\N	>	-1	2019-12-25 11:04:47.818399
2947	19381	19416	id	\N	>	-1	2019-12-25 11:04:47.818399
2949	19378	13020	id	\N	>	-1	2019-12-25 11:04:47.818399
2950	19377	13020	id	\N	>	-1	2019-12-25 11:04:47.818399
2951	19376	13020	id	\N	>	-1	2019-12-25 11:04:47.818399
2952	19374	19366	\N	\N	>	-1	2019-12-25 11:35:55.313162
2953	19423	19416	\N	\N	>	-1	2019-12-25 11:36:29.845076
2946	19381	19379	ptype	\N	in	2,3,5	2019-12-25 11:04:47.818399
2113	12725	12719	text	\N	like	1	2019-11-05 10:00:17.290746
2114	12796	12719	text	\N	like	1	2019-11-05 10:00:17.290746
2115	12915	12766	id	\N	>	-1	2019-11-05 10:00:17.290746
2116	12917	12766	id	\N	>	-1	2019-11-05 10:00:17.290746
2117	12918	12766	id	\N	>	-1	2019-11-05 10:00:17.290746
2118	12919	12919	fn	\N	is not null	\N	2019-11-05 10:00:17.290746
2120	12921	12766	id	\N	>	-1	2019-11-05 10:00:17.290746
2121	12922	12766	id	\N	>	-1	2019-11-05 10:00:17.290746
2122	12923	12766	id	\N	>	-1	2019-11-05 10:00:17.290746
2123	12924	12766	id	\N	>	-1	2019-11-05 10:00:17.290746
2124	12925	12766	id	\N	>	-1	2019-11-05 10:00:17.290746
2125	12926	12766	id	\N	>	-1	2019-11-05 10:00:17.290746
2126	12927	12766	id	\N	>	-1	2019-11-05 10:00:17.290746
2128	12928	12766	id	\N	>	-1	2019-11-05 10:00:17.290746
2129	12929	12766	id	\N	>	-1	2019-11-05 10:00:17.290746
2130	12930	12766	id	\N	>	-1	2019-11-05 10:00:17.290746
2131	12931	12931	relation	\N	is not null		2019-11-05 10:00:17.290746
2132	12931	12766	id	\N	>	-1	2019-11-05 10:00:17.290746
2134	12932	12766	id	\N	>	-1	2019-11-05 10:00:17.290746
2136	12935	12766	id	\N	>	-1	2019-11-05 10:00:17.290746
2139	12937	12934	depency	\N	=	true	2019-11-05 10:00:17.290746
2140	12937	12766	id	\N	>	-1	2019-11-05 10:00:17.290746
2141	12938	12766	id	\N	>	-1	2019-11-05 10:00:17.290746
2142	12939	12766	id	\N	>	-1	2019-11-05 10:00:17.290746
2143	12940	12766	id	\N	>	-1	2019-11-05 10:00:17.290746
2144	12942	12942	id	\N	>	-1	2019-11-05 10:00:17.290746
2145	12943	12942	id	\N	>	-1	2019-11-05 10:00:17.290746
2146	12944	12942	id	\N	>	-1	2019-11-05 10:00:17.290746
2147	12945	12942	id	\N	>	-1	2019-11-05 10:00:17.290746
2148	12946	12942	id	\N	>	-1	2019-11-05 10:00:17.290746
2149	12947	12942	id	\N	>	-1	2019-11-05 10:00:17.290746
2150	12948	12942	id	\N	>	-1	2019-11-05 10:00:17.290746
2151	12949	12942	id	\N	>	-1	2019-11-05 10:00:17.290746
2152	12950	12942	id	\N	>	-1	2019-11-05 10:00:17.290746
2153	12951	12942	id	\N	>	-1	2019-11-05 10:00:17.290746
2154	12952	12942	id	\N	>	-1	2019-11-05 10:00:17.290746
2155	12953	12942	id	\N	>	-1	2019-11-05 10:00:17.290746
2156	12954	12942	id	\N	>	-1	2019-11-05 10:00:17.290746
2157	12955	12942	id	\N	>	-1	2019-11-05 10:00:17.290746
2158	12956	12942	id	\N	>	-1	2019-11-05 10:00:17.290746
2159	12957	12942	id	\N	>	-1	2019-11-05 10:00:17.290746
2160	12973	12942	id	\N	>	-1	2019-11-05 10:00:17.290746
2161	12974	12942	id	\N	>	-1	2019-11-05 10:00:17.290746
2162	12975	12942	id	\N	>	-1	2019-11-05 10:00:17.290746
2163	12976	12942	id	\N	>	-1	2019-11-05 10:00:17.290746
2164	12977	12942	id	\N	>	-1	2019-11-05 10:00:17.290746
2165	12978	12942	id	\N	>	-1	2019-11-05 10:00:17.290746
2166	12995	12995	id	\N	>	-1	2019-11-05 10:00:17.290746
2133	12932	12918	type	\N	in	multiselect,multitypehead	2019-11-05 10:00:17.290746
2167	12996	12995	id	\N	>	-1	2019-11-05 10:00:17.290746
2168	12997	12995	id	\N	>	-1	2019-11-05 10:00:17.290746
2169	12998	12995	id	\N	>	-1	2019-11-05 10:00:17.290746
2170	12999	12995	id	\N	>	-1	2019-11-05 10:00:17.290746
2171	13000	12995	id	\N	>	-1	2019-11-05 10:00:17.290746
2172	13001	12995	id	\N	>	-1	2019-11-05 10:00:17.290746
2173	13002	12995	id	\N	>	-1	2019-11-05 10:00:17.290746
2174	13002	12982	act_type	\N	not in	Save,Delete	2019-11-05 10:00:17.290746
2179	13005	12995	id	\N	>	-1	2019-11-05 10:00:17.290746
2181	13006	12995	id	\N	>	-1	2019-11-05 10:00:17.290746
2183	13007	12995	id	\N	>	-1	2019-11-05 10:00:17.290746
2184	13008	12995	id	\N	>	-1	2019-11-05 10:00:17.290746
2185	13009	12995	id	\N	>	-1	2019-11-05 10:00:17.290746
2186	13010	12995	id	\N	>	-1	2019-11-05 10:00:17.290746
2209	13074	13067	id	\N	>	-1	2019-11-05 10:00:17.290746
2208	13074	13073	treeviewtype	\N	=	1	2019-11-05 10:00:17.290746
2201	13067	13067	id	\N	>	-1	2019-11-05 10:00:17.290746
2202	13068	13067	id	\N	>	-1	2019-11-05 10:00:17.290746
2203	13069	13067	id	\N	>	-1	2019-11-05 10:00:17.290746
2205	13071	13067	id	\N	>	-1	2019-11-05 10:00:17.290746
2206	13072	13067	id	\N	>	-1	2019-11-05 10:00:17.290746
2207	13073	13067	id	\N	>	-1	2019-11-05 10:00:17.290746
2212	13076	13067	id	\N	>	-1	2019-11-05 10:00:17.290746
2213	13077	13067	id	\N	>	-1	2019-11-05 10:00:17.290746
2214	13078	13067	id	\N	>	-1	2019-11-05 10:00:17.290746
2215	13079	13067	id	\N	>	-1	2019-11-05 10:00:17.290746
2216	13080	13067	id	\N	>	-1	2019-11-05 10:00:17.290746
2217	13081	13067	id	\N	>	-1	2019-11-05 10:00:17.290746
2218	13082	13067	id	\N	>	-1	2019-11-05 10:00:17.290746
2219	13083	13067	id	\N	>	-1	2019-11-05 10:00:17.290746
2220	13084	13067	id	\N	>	-1	2019-11-05 10:00:17.290746
2226	13136	12941	viewtype	\N	in	tiles,table	2019-11-05 10:00:17.290746
2227	13137	12941	viewtype	\N	in	tiles,table	2019-11-05 10:00:17.290746
2228	13138	12941	viewtype	\N	in	tiles,table	2019-11-05 10:00:17.290746
2230	13189	13189	id	\N	>	-1	2019-11-05 10:00:17.290746
2231	13190	13189	id	\N	>	-1	2019-11-05 10:00:17.290746
2232	13191	13189	id	\N	>	-1	2019-11-05 10:00:17.290746
2233	13192	13189	id	\N	>	-1	2019-11-05 10:00:17.290746
2234	13193	13189	id	\N	>	-1	2019-11-05 10:00:17.290746
2235	13194	13189	id	\N	>	-1	2019-11-05 10:00:17.290746
2138	12936	12912	id	\N	>	-1	2019-11-05 10:00:17.290746
2225	13135	13131	viewtype	\N	in	tiles,table	2019-11-05 10:00:17.290746
2229	13140	13131	viewtype	\N	in	tiles,table	2019-11-05 10:00:17.290746
2119	12920	12919	fncolumns	\N	is not null	\N	2019-11-05 10:00:17.290746
2127	12928	12918	type	\N	like	_api	2019-11-05 10:00:17.290746
2176	13003	12998	act_type	\N	=	API	2019-11-05 10:00:17.290746
2182	13006	12998	act_type	\N	=	API	2019-11-05 10:00:17.290746
2175	13003	12995	id	\N	>	-1	2019-11-05 10:00:17.290746
2240	13197	13189	id	\N	>	-1	2019-11-05 10:00:17.290746
2241	13198	13189	id	\N	>	-1	2019-11-05 10:00:17.290746
2242	13199	13189	id	\N	>	-1	2019-11-05 10:00:17.290746
2243	13200	13189	id	\N	>	-1	2019-11-05 10:00:17.290746
2244	13210	13210	id	\N	>	-1	2019-11-05 10:00:17.290746
2245	13211	13210	id	\N	>	-1	2019-11-05 10:00:17.290746
2246	13212	13210	id	\N	>	-1	2019-11-05 10:00:17.290746
2247	13213	13210	id	\N	>	-1	2019-11-05 10:00:17.290746
2248	13214	13210	id	\N	>	-1	2019-11-05 10:00:17.290746
2249	13215	13210	id	\N	>	-1	2019-11-05 10:00:17.290746
2252	13225	12941	viewtype	\N	in	tiles,table	2019-11-05 10:00:17.290746
2253	13226	12941	viewtype	\N	in	tiles,table	2019-11-05 10:00:17.290746
2254	13227	12941	viewtype	\N	in	tiles,table	2019-11-05 10:00:17.290746
2255	13228	12941	viewtype	\N	in	tiles,table	2019-11-05 10:00:17.290746
2256	13229	12941	viewtype	\N	in	tiles,table	2019-11-05 10:00:17.290746
2257	13231	12941	viewtype	\N	in	tiles,table	2019-11-05 10:00:17.290746
2258	12936	12931	\N	\N	is not null	\N	2019-11-05 13:53:11.161315
2224	13134	13131	viewtype	\N	in	tiles,table	2019-11-05 10:00:17.290746
2238	13196	13189	id	\N	>	-1	2019-11-05 10:00:17.290746
2239	13196	13193	type	\N	=	typehead	2019-11-05 10:00:17.290746
2277	13023	13020	\N	\N	>	-1	2019-11-07 14:55:02.689272
2286	13576	12919	\N	\N	is not null	\N	2019-11-07 15:38:21.141338
2288	13577	13189	\N	\N	>	-1	2019-11-07 16:05:17.783866
2314	12911	12912	\N	\N	>	-1	2019-11-08 08:17:29.243144
2316	13644	12998	\N	\N	=	API	2019-11-08 11:14:07.295998
2135	12935	12918	type	\N	in	multiselect,multitypehead	2019-11-05 10:00:17.290746
2211	13075	13073	treeviewtype	\N	=	2	2019-11-05 10:00:17.290746
2204	13070	13067	id	\N	>	-1	2019-11-05 10:00:17.290746
2210	13075	13067	id	\N	>	-1	2019-11-05 10:00:17.290746
5955	13022	13020	\N	\N	>	-1	2020-05-06 21:58:24.112455
5956	13024	13020	\N	\N	>	-1	2020-05-06 21:59:03.259909
5957	13025	13020	\N	\N	>	-1	2020-05-06 21:59:40.369915
5958	13026	13020	\N	\N	>	-1	2020-05-06 22:00:22.174
5959	13027	13020	\N	\N	>	-1	2020-05-06 22:00:53.296118
5960	602033	602030	\N	\N	is not null	\N	2020-05-18 19:13:36.808498
\.


--
-- TOC entry 3741 (class 0 OID 0)
-- Dependencies: 270
-- Name: visible_condition_id_seq; Type: SEQUENCE SET; Schema: framework; Owner: postgres
--

SELECT pg_catalog.setval('visible_condition_id_seq', 5960, true);


SET search_path = reports, pg_catalog;

--
-- TOC entry 3282 (class 0 OID 227916)
-- Dependencies: 271
-- Data for Name: paramtypes; Type: TABLE DATA; Schema: reports; Owner: postgres
--

COPY paramtypes (id, typename) FROM stdin;
\.


--
-- TOC entry 3283 (class 0 OID 227919)
-- Dependencies: 272
-- Data for Name: reportlist; Type: TABLE DATA; Schema: reports; Owner: postgres
--

COPY reportlist (id, title, roles, path, template, template_path, functitle, created, section, completed, filename, ishtml) FROM stdin;
\.


--
-- TOC entry 3742 (class 0 OID 0)
-- Dependencies: 273
-- Name: reportlist_id_seq; Type: SEQUENCE SET; Schema: reports; Owner: postgres
--

SELECT pg_catalog.setval('reportlist_id_seq', 1, false);


--
-- TOC entry 3285 (class 0 OID 227931)
-- Dependencies: 274
-- Data for Name: reportparams; Type: TABLE DATA; Schema: reports; Owner: postgres
--

COPY reportparams (id, reportlistid, ptitle, func_paramtitle, ptype, created, apimethod, completed, orderby) FROM stdin;
\.


--
-- TOC entry 3743 (class 0 OID 0)
-- Dependencies: 275
-- Name: reportparams_id_seq; Type: SEQUENCE SET; Schema: reports; Owner: postgres
--

SELECT pg_catalog.setval('reportparams_id_seq', 1, false);


SET search_path = sqlmanager, pg_catalog;

--
-- TOC entry 3287 (class 0 OID 227939)
-- Dependencies: 276
-- Data for Name: foreignkeys; Type: TABLE DATA; Schema: sqlmanager; Owner: postgres
--

COPY foreignkeys (id, ftitle, maintablename, maintableid, parentablename, parenttableid, maincol, parentcol, created, userid, noscript) FROM stdin;
198446	config_fk_view	framework.config	197763	framework.views	198045	viewid	id	2020-05-18 16:27:22.48712	1	f
198451	defaultval_fk_ao	framework.defaultval	197794	framework.operations	197943	act	value	2020-05-18 16:27:22.48712	1	f
198456	defaultval_fk_bo	framework.defaultval	197794	framework.booloper	197719	bool	bname	2020-05-18 16:27:22.48712	1	f
198461	defaultval_fk_config	framework.defaultval	197794	framework.config	197763	configid	id	2020-05-18 16:27:22.48712	1	f
198466	filters_fk_c	framework.filters	197851	framework.config	197763	val_desc	id	2020-05-18 16:27:22.48712	1	f
198471	filters_fk_ft	framework.filters	197851	framework.filtertypes	197865	type	ftname	2020-05-18 16:27:22.48712	1	f
198476	filters_fk_vi	framework.filters	197851	framework.views	198045	viewid	id	2020-05-18 16:27:22.48712	1	f
198481	mainmenu_fk_mn	framework.mainmenu	197881	framework.menus	197914	menuid	id	2020-05-18 16:27:22.48712	1	f
198396	act_parametrs_fk_confg	framework.act_parametrs	197663	framework.config	197763	val_desc	id	2020-05-18 16:27:22.48712	1	f
198401	act_parametrs_fk_qt	framework.act_parametrs	197663	framework.actparam_querytypes	197698	query_type	aqname	2020-05-18 16:27:22.48712	1	f
198406	act_visible_condions_fk	framework.act_visible_condions	197674	framework.config	197763	val_desc	id	2020-05-18 16:27:22.48712	1	f
198411	act_visible_condions_fk1	framework.act_visible_condions	197674	framework.operations	197943	operation	value	2020-05-18 16:27:22.48712	1	f
198416	act_visible_condions_fk_act	framework.act_visible_condions	197674	framework.actions	197683	actionid	id	2020-05-18 16:27:22.48712	1	f
198421	actions_fk	framework.actions	197683	framework.views	198045	viewid	id	2020-05-18 16:27:22.48712	1	f
198426	actions_fk_actype	framework.actions	197683	framework.acttypes	197703	act_type	actname	2020-05-18 16:27:22.48712	1	f
198431	actions_fk_apicalinme	framework.actions	197683	framework.apicallingmethods	197710	api_method	aname	2020-05-18 16:27:22.48712	1	f
198436	actions_fk_apimeth	framework.actions	197683	framework.methodtypes	197928	api_type	methotypename	2020-05-18 16:27:22.48712	1	f
198441	config_fk_ct	framework.config	197763	framework.columntypes	197740	type	typename	2020-05-18 16:27:22.48712	1	f
198486	notifications_fk_userid	framework.notifications	197931	framework.users	198029	for_userid	id	2020-05-18 16:27:22.48712	1	f
198491	orgs_fk_ot	framework.orgs	197951	framework.orgtypes	197963	orgtype	id	2020-05-18 16:27:22.48712	1	f
198496	select_condition_fk	framework.select_condition	197973	framework.operations	197943	operation	value	2020-05-18 16:27:22.48712	1	f
198501	select_condition_fk_config	framework.select_condition	197973	framework.config	197763	configid	id	2020-05-18 16:27:22.48712	1	f
198506	select_condition_fk_valconf	framework.select_condition	197973	framework.config	197763	val_desc	id	2020-05-18 16:27:22.48712	1	f
198511	visible_condition_fk_config	framework.visible_condition	198087	framework.config	197763	configid	id	2020-05-18 16:27:22.48712	1	f
224378	major_table_th	test.major_table	198195	test.dictionary_for_select	198180	typehead	id	2020-05-18 17:13:11.165258	1	f
198391	act_parametrs_fk_action	framework.act_parametrs	197663	framework.actions	197683	actionid	id	2020-05-18 16:27:22.48712	1	f
198516	visible_condition_fk_oper	framework.visible_condition	198087	framework.operations	197943	operation	value	2020-05-18 16:27:22.48712	1	f
198521	visible_condition_fk_v	framework.visible_condition	198087	framework.config	197763	val_desc	id	2020-05-18 16:27:22.48712	1	f
198526	dictionary_for_select_fk_or	test.dictionary_for_select	198180	test.onemorerelation	198203	onemoreraltionid	id	2020-05-18 16:27:22.48712	1	f
198541	relate_with_major_tab_id	test.relate_with_major	198208	test.major_table	198195	major_table_id	id	2020-05-18 16:27:22.48712	1	f
198531	major_table_seldic	test.major_table	198195	test.dictionary_for_select	198180	select	id	2020-05-18 16:27:22.48712	1	f
\.


--
-- TOC entry 3744 (class 0 OID 0)
-- Dependencies: 277
-- Name: foreignkeys_id_seq; Type: SEQUENCE SET; Schema: sqlmanager; Owner: postgres
--

SELECT pg_catalog.setval('foreignkeys_id_seq', 3, true);


--
-- TOC entry 3289 (class 0 OID 227949)
-- Dependencies: 278
-- Data for Name: functionargs; Type: TABLE DATA; Schema: sqlmanager; Owner: postgres
--

COPY functionargs (id, oid, argname, argtype, argmode, created, userid) FROM stdin;
487	220995	injson	json	input	2020-05-15 13:46:36.578226	1
488	221737	injson	json	input	2020-05-15 14:03:17.709624	1
543	222343	injson	int4	input	2020-05-15 15:09:38.026749	1
601	222133	injson	json	input	2020-05-15 15:14:05.713096	1
603	222493	t	int4	input	2020-05-15 15:14:28.453066	1
604	222493	injson	json	input	2020-05-15 15:14:28.453066	1
605	222530	injson	json	input	2020-05-15 15:14:35.685448	1
607	222834	injson	json	input	2020-05-15 15:24:08.616303	1
613	222991	injson	json	input	2020-05-15 15:37:09.464045	1
615	223067	injson	json	input	2020-05-15 15:39:27.949449	1
623	223201	injson	json	input	2020-05-15 16:01:18.392054	1
624	223201	i	int	input	2020-05-15 16:01:21.057158	1
625	223244	injson	json	input	2020-05-15 16:01:35.967286	1
626	223244	i	int4	input	2020-05-15 16:01:35.967286	1
627	223334	injson	json	input	2020-05-15 16:02:56.221208	1
628	223334	a	int4	input	2020-05-15 16:02:56.221208	1
629	223382	injson	json	input	2020-05-15 16:03:18.960823	1
630	223382	a	varchar	input	2020-05-15 16:03:18.960823	1
631	223425	injson	json	input	2020-05-15 16:03:38.88391	1
633	223468	injson	json	input	2020-05-15 16:03:49.096284	1
634	223468	a	int	input	2020-05-15 16:03:53.802285	1
635	223516	injson	json	input	2020-05-15 16:04:12.514102	1
637	223564	injson	json	input	2020-05-15 16:05:01.916931	1
638	223564	a	int	input	2020-05-15 16:05:07.379425	1
639	223607	injson	json	input	2020-05-15 16:05:24.339932	1
641	223650	injson	json	input	2020-05-15 16:07:41.942805	1
642	223650	a	int	input	2020-05-15 16:07:47.798413	1
647	223847	injson	json	input	2020-05-15 16:17:02.305867	1
648	223847	untitle_646	varchar	output	2020-05-15 16:17:02.305867	1
650	227244		text	input	2020-05-21 11:31:02.195905	1
651	227244	key	text	output	2020-05-21 11:31:02.195905	1
652	227244	value	text	output	2020-05-21 11:31:02.195905	1
653	227245	injson	json	input	2020-05-21 11:31:02.195905	1
654	227246	injson	json	input	2020-05-21 11:31:02.195905	1
655	227247	injson	json	input	2020-05-21 11:31:02.195905	1
656	227247	outjson	json	output	2020-05-21 11:31:02.195905	1
657	227247	foundcount	int8	output	2020-05-21 11:31:02.195905	1
658	227248	injson	json	input	2020-05-21 11:31:02.195905	1
659	227248	outjson	json	output	2020-05-21 11:31:02.195905	1
660	227249	injson	json	input	2020-05-21 11:31:02.195905	1
661	227249	outjson	json	output	2020-05-21 11:31:02.195905	1
662	227250	_parentid	int4	input	2020-05-21 11:31:02.195905	1
663	227250	_treesid	int4	input	2020-05-21 11:31:02.195905	1
664	227250	outjson	json	output	2020-05-21 11:31:02.195905	1
665	227251	injson	json	input	2020-05-21 11:31:02.195905	1
666	227252	injson	json	input	2020-05-21 11:31:02.195905	1
667	227252	outjson	json	output	2020-05-21 11:31:02.195905	1
668	227253	injson	json	input	2020-05-21 11:31:02.195905	1
669	227253	outjson	json	output	2020-05-21 11:31:02.195905	1
670	227254	injson	json	input	2020-05-21 11:31:02.195905	1
671	227254	_id	int4	output	2020-05-21 11:31:02.195905	1
672	227255	injson	json	input	2020-05-21 11:31:02.195905	1
673	227307	_css	text	input	2020-05-21 11:31:02.195905	1
674	227256	injson	json	input	2020-05-21 11:31:02.195905	1
675	227257	_id	int4	input	2020-05-21 11:31:02.195905	1
676	227257	_relation	varchar	output	2020-05-21 11:31:02.195905	1
677	227258	_id	int4	input	2020-05-21 11:31:02.195905	1
678	227258	relation_columns	varchar	output	2020-05-21 11:31:02.195905	1
679	227259	injson	json	input	2020-05-21 11:31:02.195905	1
680	227259	outjson	json	output	2020-05-21 11:31:02.195905	1
681	227260	injson	json	input	2020-05-21 11:31:02.195905	1
682	227261	_viewid	int4	input	2020-05-21 11:31:02.195905	1
683	227261	_config	json	output	2020-05-21 11:31:02.195905	1
684	227262	insjon	json	input	2020-05-21 11:31:02.195905	1
685	227262	outjson	json	output	2020-05-21 11:31:02.195905	1
686	227263	injson	json	input	2020-05-21 11:31:02.195905	1
687	227263	_newid	int4	output	2020-05-21 11:31:02.195905	1
688	227265	injson	json	input	2020-05-21 11:31:02.195905	1
689	227265	outjson	json	output	2020-05-21 11:31:02.195905	1
690	227266	injson	json	input	2020-05-21 11:31:02.195905	1
691	227266	outjson	json	output	2020-05-21 11:31:02.195905	1
692	227267	injson	json	input	2020-05-21 11:31:02.195905	1
693	227267	sessid	bpchar	output	2020-05-21 11:31:02.195905	1
694	227268	injson	json	input	2020-05-21 11:31:02.195905	1
695	227269	injson	json	input	2020-05-21 11:31:02.195905	1
696	227286	injson	json	input	2020-05-21 11:31:02.195905	1
697	227270	injson	json	input	2020-05-21 11:31:02.195905	1
698	227271	injson	json	input	2020-05-21 11:31:02.195905	1
699	227272	injson	json	input	2020-05-21 11:31:02.195905	1
700	227273	injson	json	input	2020-05-21 11:31:02.195905	1
701	227274	injson	json	input	2020-05-21 11:31:02.195905	1
702	227334	injson	json	input	2020-05-21 11:31:02.195905	1
703	227275	injson	json	input	2020-05-21 11:31:02.195905	1
704	227275	outjson	json	output	2020-05-21 11:31:02.195905	1
705	227276	injson	json	input	2020-05-21 11:31:02.195905	1
706	227277	injson	json	input	2020-05-21 11:31:02.195905	1
707	227278	injson	json	input	2020-05-21 11:31:02.195905	1
708	227279	injson	json	input	2020-05-21 11:31:02.195905	1
709	227287	injson	json	input	2020-05-21 11:31:02.195905	1
710	227287	outjson	json	output	2020-05-21 11:31:02.195905	1
711	227280	injson	json	input	2020-05-21 11:31:02.195905	1
712	227281	injson	json	input	2020-05-21 11:31:02.195905	1
713	227282	injson	json	input	2020-05-21 11:31:02.195905	1
714	227283	injson	json	input	2020-05-21 11:31:02.195905	1
715	227283	outjson	json	output	2020-05-21 11:31:02.195905	1
716	227284	injson	json	input	2020-05-21 11:31:02.195905	1
717	227284	outjson	json	output	2020-05-21 11:31:02.195905	1
718	227285	injson	json	input	2020-05-21 11:31:02.195905	1
719	227285	outjson	json	output	2020-05-21 11:31:02.195905	1
720	227288	injson	json	input	2020-05-21 11:31:02.195905	1
721	227288	apititle	varchar	input	2020-05-21 11:31:02.195905	1
722	227288	apitype	int2	input	2020-05-21 11:31:02.195905	1
723	227288	sessid	bpchar	input	2020-05-21 11:31:02.195905	1
724	227288	primaryauthorization	int2	input	2020-05-21 11:31:02.195905	1
725	227288	outjson	json	output	2020-05-21 11:31:02.195905	1
726	227289	injson	json	input	2020-05-21 11:31:02.195905	1
727	227290	injson	json	input	2020-05-21 11:31:02.195905	1
728	227290	tables	json	output	2020-05-21 11:31:02.195905	1
729	227290	filtertypes	json	output	2020-05-21 11:31:02.195905	1
730	227290	viewtypes	json	output	2020-05-21 11:31:02.195905	1
731	227290	columntypes	json	output	2020-05-21 11:31:02.195905	1
732	227291	injson	json	input	2020-05-21 11:31:02.195905	1
733	227291	outjson	json	output	2020-05-21 11:31:02.195905	1
734	227293	injson	json	input	2020-05-21 11:31:02.195905	1
735	227293	outjson	json	output	2020-05-21 11:31:02.195905	1
736	227294	injson	json	input	2020-05-21 11:31:02.195905	1
737	227294	outjson	json	output	2020-05-21 11:31:02.195905	1
738	227295	injson	json	input	2020-05-21 11:31:02.195905	1
739	227295	outjson	json	output	2020-05-21 11:31:02.195905	1
740	227306	injson	json	input	2020-05-21 11:31:02.195905	1
741	227296	injson	json	input	2020-05-21 11:31:02.195905	1
742	227296	outjson	json	output	2020-05-21 11:31:02.195905	1
743	227297	injson	json	input	2020-05-21 11:31:02.195905	1
744	227297	outjson	json	output	2020-05-21 11:31:02.195905	1
745	227298	injson	json	input	2020-05-21 11:31:02.195905	1
746	227298	outjson	json	output	2020-05-21 11:31:02.195905	1
747	227299	sqldatatype	varchar	input	2020-05-21 11:31:02.195905	1
748	227299	htmltype	varchar	output	2020-05-21 11:31:02.195905	1
749	227300	sesid	bpchar	input	2020-05-21 11:31:02.195905	1
750	227300	outjson	json	output	2020-05-21 11:31:02.195905	1
751	227301	injson	json	input	2020-05-21 11:31:02.195905	1
752	227301	message	varchar	output	2020-05-21 11:31:02.195905	1
753	227303	injson	json	input	2020-05-21 11:31:02.195905	1
754	227303	outjson	json	output	2020-05-21 11:31:02.195905	1
755	227304	_roles	json	input	2020-05-21 11:31:02.195905	1
756	227304	_parentid	int4	input	2020-05-21 11:31:02.195905	1
757	227304	outjson	json	output	2020-05-21 11:31:02.195905	1
758	227305	injson	json	input	2020-05-21 11:31:02.195905	1
759	227305	outjson	json	output	2020-05-21 11:31:02.195905	1
760	227308	_userid	int4	input	2020-05-21 11:31:02.195905	1
761	227308	_roles	json	input	2020-05-21 11:31:02.195905	1
762	227308	_parentid	int4	input	2020-05-21 11:31:02.195905	1
763	227308	menu_id	int4	input	2020-05-21 11:31:02.195905	1
764	227308	outjson	json	output	2020-05-21 11:31:02.195905	1
765	227309	_userid	int4	input	2020-05-21 11:31:02.195905	1
766	227309	_roles	json	input	2020-05-21 11:31:02.195905	1
767	227309	_parentid	int4	input	2020-05-21 11:31:02.195905	1
768	227309	menu_id	int4	input	2020-05-21 11:31:02.195905	1
769	227309	_sessid	bpchar	input	2020-05-21 11:31:02.195905	1
770	227309	outjson	json	output	2020-05-21 11:31:02.195905	1
771	227310	injson	json	input	2020-05-21 11:31:02.195905	1
772	227310	outjson	json	output	2020-05-21 11:31:02.195905	1
773	227311	injson	json	input	2020-05-21 11:31:02.195905	1
774	227312	_sess	bpchar	input	2020-05-21 11:31:02.195905	1
775	227312	outjson	json	output	2020-05-21 11:31:02.195905	1
776	227313	injson	json	input	2020-05-21 11:31:02.195905	1
777	227314	_sess	bpchar	input	2020-05-21 11:31:02.195905	1
778	227315	injson	json	input	2020-05-21 11:31:02.195905	1
779	227315	outjson	json	output	2020-05-21 11:31:02.195905	1
780	227316	injson	json	input	2020-05-21 11:31:02.195905	1
781	227316	outjson	json	output	2020-05-21 11:31:02.195905	1
782	227317	injson	json	input	2020-05-21 11:31:02.195905	1
783	227317	outjson	json	output	2020-05-21 11:31:02.195905	1
784	227318	injson	json	input	2020-05-21 11:31:02.195905	1
785	227318	outjson	json	output	2020-05-21 11:31:02.195905	1
786	227320	injson	json	input	2020-05-21 11:31:02.195905	1
787	227321	injson	json	input	2020-05-21 11:31:02.195905	1
788	227321	outjson	json	output	2020-05-21 11:31:02.195905	1
789	227323	_login	varchar	input	2020-05-21 11:31:02.195905	1
790	227323	pass	varchar	input	2020-05-21 11:31:02.195905	1
791	227323	sessid	bpchar	output	2020-05-21 11:31:02.195905	1
792	227324	_login	varchar	input	2020-05-21 11:31:02.195905	1
793	227324	pass	varchar	input	2020-05-21 11:31:02.195905	1
794	227324	sessid	bpchar	input/output	2020-05-21 11:31:02.195905	1
795	227325	injson	json	input	2020-05-21 11:31:02.195905	1
796	227325	outjson	json	output	2020-05-21 11:31:02.195905	1
797	227326	injson	json	input	2020-05-21 11:31:02.195905	1
798	227326	outjson	json	output	2020-05-21 11:31:02.195905	1
799	227327	injson	json	input	2020-05-21 11:31:02.195905	1
800	227327	outjson	json	output	2020-05-21 11:31:02.195905	1
801	227328	injson	json	input	2020-05-21 11:31:02.195905	1
802	227328	outjson	json	output	2020-05-21 11:31:02.195905	1
803	227329	injson	json	input	2020-05-21 11:31:02.195905	1
804	227329	outjson	json	output	2020-05-21 11:31:02.195905	1
805	227330	injson	json	input	2020-05-21 11:31:02.195905	1
806	227330	outjson	json	output	2020-05-21 11:31:02.195905	1
807	227331	injson	json	input	2020-05-21 11:31:02.195905	1
808	227331	outjson	json	output	2020-05-21 11:31:02.195905	1
809	227332	injson	json	input	2020-05-21 11:31:02.195905	1
810	227332	outjson	json	output	2020-05-21 11:31:02.195905	1
811	227333	sessid	bpchar	input	2020-05-21 11:31:02.195905	1
812	227333	outjson	json	output	2020-05-21 11:31:02.195905	1
813	227335	injson	json	input	2020-05-21 11:31:02.195905	1
814	227335	outjson	json	output	2020-05-21 11:31:02.195905	1
815	227336	injson	json	input	2020-05-21 11:31:02.195905	1
816	227336	outjson	json	output	2020-05-21 11:31:02.195905	1
817	227336	roles	json	output	2020-05-21 11:31:02.195905	1
818	227337	injson	json	input	2020-05-21 11:31:02.195905	1
819	227337	outjson	json	output	2020-05-21 11:31:02.195905	1
820	227338	injson	json	input	2020-05-21 11:31:02.195905	1
821	227338	outjson	json	output	2020-05-21 11:31:02.195905	1
822	227339	injson	json	input	2020-05-21 11:31:02.195905	1
823	227339	outjson	json	output	2020-05-21 11:31:02.195905	1
824	227340	injson	json	input	2020-05-21 11:31:02.195905	1
825	227341	_path	varchar	input	2020-05-21 11:31:02.195905	1
826	227341	_viewtype	varchar	input	2020-05-21 11:31:02.195905	1
827	227341	outjson	json	output	2020-05-21 11:31:02.195905	1
828	227349	injson	json	input	2020-05-21 11:31:02.195905	1
829	227349	outjson	json	output	2020-05-21 11:31:02.195905	1
830	227343	_path	varchar	input	2020-05-21 11:31:02.195905	1
831	227343	outjson	json	output	2020-05-21 11:31:02.195905	1
832	227344	_id	int4	input	2020-05-21 11:31:02.195905	1
833	227344	outjson	json	output	2020-05-21 11:31:02.195905	1
834	227345	injson	json	input	2020-05-21 11:31:02.195905	1
835	227345	_n	int4	input	2020-05-21 11:31:02.195905	1
836	227346	_path	varchar	input	2020-05-21 11:31:02.195905	1
837	227346	_link	json	output	2020-05-21 11:31:02.195905	1
838	227348	viewid	int4	input	2020-05-21 11:31:02.195905	1
839	227348	title	varchar	input	2020-05-21 11:31:02.195905	1
840	227348	lnk	json	output	2020-05-21 11:31:02.195905	1
841	227350	injson	json	input	2020-05-21 11:31:02.195905	1
842	227350	outjson	json	output	2020-05-21 11:31:02.195905	1
843	227351	injson	json	input	2020-05-21 11:31:02.195905	1
844	227351	outjson	json	output	2020-05-21 11:31:02.195905	1
845	227352	injson	json	input	2020-05-21 11:31:02.195905	1
846	227352	outjson	json	output	2020-05-21 11:31:02.195905	1
847	227353	injson	json	input	2020-05-21 11:31:02.195905	1
848	227353	outjson	json	output	2020-05-21 11:31:02.195905	1
849	227383	c	bool	input	2020-05-21 11:31:02.195905	1
850	227383	color	varchar	output	2020-05-21 11:31:02.195905	1
851	227384	t	bool	input	2020-05-21 11:31:02.195905	1
852	227384	c	varchar	output	2020-05-21 11:31:02.195905	1
853	227385	_id	int4	input	2020-05-21 11:31:02.195905	1
854	227385	_result	varchar	output	2020-05-21 11:31:02.195905	1
855	227386	injson	json	input	2020-05-21 11:31:02.195905	1
856	227386	result	varchar	output	2020-05-21 11:31:02.195905	1
857	227387	injson	json	input	2020-05-21 11:31:02.195905	1
858	227387	result	varchar	output	2020-05-21 11:31:02.195905	1
859	227388	_id	int4	input	2020-05-21 11:31:02.195905	1
860	227388	outjson	json	output	2020-05-21 11:31:02.195905	1
861	227389	_schemaname	varchar	input	2020-05-21 11:31:02.195905	1
862	227389	_fn_name	varchar	input	2020-05-21 11:31:02.195905	1
863	227389	_newschemaname	varchar	input	2020-05-21 11:31:02.195905	1
864	227390	_schema	varchar	input	2020-05-21 11:31:02.195905	1
865	227390	schema	varchar	input	2020-05-21 11:31:02.195905	1
866	227390	tablename	varchar	input	2020-05-21 11:31:02.195905	1
867	227390	description	varchar	input	2020-05-21 11:31:02.195905	1
868	227391	_schemaname	varchar	input	2020-05-21 11:31:02.195905	1
869	227391	tab	varchar	input	2020-05-21 11:31:02.195905	1
870	227391	tg_name	varchar	input	2020-05-21 11:31:02.195905	1
871	227391	function_shema	varchar	input	2020-05-21 11:31:02.195905	1
872	227391	fnresult	varchar	input	2020-05-21 11:31:02.195905	1
873	227392	_schemaname	varchar	input	2020-05-21 11:31:02.195905	1
874	227392	tab	varchar	input	2020-05-21 11:31:02.195905	1
875	227392	tg_name	varchar	input	2020-05-21 11:31:02.195905	1
876	227392	function_shema	varchar	input	2020-05-21 11:31:02.195905	1
877	227392	fnresult	json	input	2020-05-21 11:31:02.195905	1
878	227393	b	bool	input	2020-05-21 11:31:02.195905	1
879	227393	y	varchar	output	2020-05-21 11:31:02.195905	1
880	227395	_hint	varchar	input	2020-05-21 11:31:02.195905	1
881	227396	injson	json	input	2020-05-21 11:31:02.195905	1
882	227396	outjson	json	output	2020-05-21 11:31:02.195905	1
883	227397	injson	json	input	2020-05-21 11:31:02.195905	1
884	227397	outjson	json	output	2020-05-21 11:31:02.195905	1
885	227405	injson	json	input	2020-05-21 11:31:02.195905	1
886	227405	outjson	json	output	2020-05-21 11:31:02.195905	1
887	227398	injson	json	input	2020-05-21 11:31:02.195905	1
888	227398	outjson	json	output	2020-05-21 11:31:02.195905	1
889	227399	injson	json	input	2020-05-21 11:31:02.195905	1
890	227400	injson	json	input	2020-05-21 11:31:02.195905	1
891	227400	outjson	json	output	2020-05-21 11:31:02.195905	1
892	227406	injson	json	input	2020-05-21 11:31:02.195905	1
893	227406	outjson	json	output	2020-05-21 11:31:02.195905	1
894	227407	injson	json	input	2020-05-21 11:31:02.195905	1
895	227407	outjson	json	output	2020-05-21 11:31:02.195905	1
896	227408	injson	json	input	2020-05-21 11:31:02.195905	1
897	227409	injson	json	input	2020-05-21 11:31:02.195905	1
898	227409	_redirect	varchar	output	2020-05-21 11:31:02.195905	1
899	227410	injson	json	input	2020-05-21 11:31:02.195905	1
900	227411	_names	json	input	2020-05-21 11:31:02.195905	1
901	227411	_types	json	input	2020-05-21 11:31:02.195905	1
902	227411	_modesc	json	input	2020-05-21 11:31:02.195905	1
903	227411	outjson	json	output	2020-05-21 11:31:02.195905	1
904	227412	_names	json	input	2020-05-21 11:31:02.195905	1
905	227412	_types	json	input	2020-05-21 11:31:02.195905	1
906	227412	_modesc	json	input	2020-05-21 11:31:02.195905	1
907	227412	_str	varchar	output	2020-05-21 11:31:02.195905	1
908	227413	injson	json	input	2020-05-21 11:31:02.195905	1
909	227415	injson	json	input	2020-05-21 11:31:02.195905	1
910	227415	outjson	json	output	2020-05-21 11:31:02.195905	1
911	227416	injson	json	input	2020-05-21 11:31:02.195905	1
912	227417	injson	json	input	2020-05-21 11:31:02.195905	1
913	227417	outjson	json	output	2020-05-21 11:31:02.195905	1
914	227418	injson	json	input	2020-05-21 11:31:02.195905	1
915	227414	injson	json	input	2020-05-21 11:31:02.195905	1
916	227419	injson	json	input	2020-05-21 11:31:02.195905	1
917	227420	_ins	bool	input	2020-05-21 11:31:02.195905	1
918	227420	_upd	bool	input	2020-05-21 11:31:02.195905	1
919	227420	_del	bool	input	2020-05-21 11:31:02.195905	1
920	227420	_trun	bool	input	2020-05-21 11:31:02.195905	1
921	227420	_str	varchar	output	2020-05-21 11:31:02.195905	1
922	227422	injson	json	input	2020-05-21 11:31:02.195905	1
923	227422	outjson	json	output	2020-05-21 11:31:02.195905	1
924	227459	_vs	json	input	2020-05-21 11:31:02.195905	1
925	227459	act_id	int4	input	2020-05-21 11:31:02.195905	1
926	227459	_vid	int4	input/output	2020-05-21 11:31:02.195905	1
927	227460	_actions	json	input	2020-05-21 11:31:02.195905	1
928	227460	_vid	int4	input/output	2020-05-21 11:31:02.195905	1
929	227461	_config	json	input	2020-05-21 11:31:02.195905	1
930	227461	_viewid	int4	input/output	2020-05-21 11:31:02.195905	1
931	227462	_config	json	input	2020-05-21 11:31:02.195905	1
932	227462	_viewid	int4	input/output	2020-05-21 11:31:02.195905	1
933	227463	_config	json	input	2020-05-21 11:31:02.195905	1
934	227463	_viewid	int4	input/output	2020-05-21 11:31:02.195905	1
935	227464	_colid	int4	input/output	2020-05-21 11:31:02.195905	1
936	227464	_dv	json	input	2020-05-21 11:31:02.195905	1
937	227465	filtrs	json	input	2020-05-21 11:31:02.195905	1
938	227465	_vid	int4	input/output	2020-05-21 11:31:02.195905	1
939	227466	injson	json	input	2020-05-21 11:31:02.195905	1
940	227467	injson	json	input	2020-05-21 11:31:02.195905	1
941	227468	_params	json	input	2020-05-21 11:31:02.195905	1
942	227468	vi_id	int4	input	2020-05-21 11:31:02.195905	1
943	227468	act_id	int4	input/output	2020-05-21 11:31:02.195905	1
944	227469	injson	json	input	2020-05-21 11:31:02.195905	1
945	227470	injson	json	input	2020-05-21 11:31:02.195905	1
946	227471	injson	json	input	2020-05-21 11:31:02.195905	1
947	227471	outjson	json	output	2020-05-21 11:31:02.195905	1
948	227472	_colid	int4	input/output	2020-05-21 11:31:02.195905	1
949	227472	_sc	json	input	2020-05-21 11:31:02.195905	1
950	227473	conf	json	input	2020-05-21 11:31:02.195905	1
951	227473	paramcol	jsonb	input/output	2020-05-21 11:31:02.195905	1
952	227474	injson	json	input	2020-05-21 11:31:02.195905	1
953	227478	_colid	int4	input/output	2020-05-21 11:31:02.195905	1
954	227478	_vs	json	input	2020-05-21 11:31:02.195905	1
955	227421	injson	json	input	2020-05-21 11:31:02.195905	1
\.


--
-- TOC entry 3745 (class 0 OID 0)
-- Dependencies: 279
-- Name: functionargs_id_seq; Type: SEQUENCE SET; Schema: sqlmanager; Owner: postgres
--

SELECT pg_catalog.setval('functionargs_id_seq', 955, true);


--
-- TOC entry 3291 (class 0 OID 227955)
-- Dependencies: 280
-- Data for Name: functionslist; Type: TABLE DATA; Schema: sqlmanager; Owner: postgres
--

COPY functionslist (id, functionschema, functiontitle, fullname, descr, created, userid, noscript, functionfulltitle, dll, args, returntype, definition) FROM stdin;
227230	public	pgp_pub_encrypt	public.pgp_pub_encrypt()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	pgp_pub_encrypt()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.pgp_pub_encrypt() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.pgp_pub_encrypt(text, bytea)\n RETURNS bytea\n LANGUAGE c\n STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_encrypt_text$function$\n	[]	bytea	pgp_pub_encrypt_text
227227	public	pgp_sym_decrypt_bytea	public.pgp_sym_decrypt_bytea()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	pgp_sym_decrypt_bytea()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.pgp_sym_decrypt_bytea() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.pgp_sym_decrypt_bytea(bytea, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/pgcrypto', $function$pgp_sym_decrypt_bytea$function$\n	[]	bytea	pgp_sym_decrypt_bytea
227228	public	pgp_sym_decrypt	public.pgp_sym_decrypt()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	pgp_sym_decrypt()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.pgp_sym_decrypt() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.pgp_sym_decrypt(bytea, text, text)\n RETURNS text\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/pgcrypto', $function$pgp_sym_decrypt_text$function$\n	[]	text	pgp_sym_decrypt_text
227229	public	pgp_sym_decrypt_bytea	public.pgp_sym_decrypt_bytea()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	pgp_sym_decrypt_bytea()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.pgp_sym_decrypt_bytea() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.pgp_sym_decrypt_bytea(bytea, text, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/pgcrypto', $function$pgp_sym_decrypt_bytea$function$\n	[]	bytea	pgp_sym_decrypt_bytea
227231	public	pgp_pub_encrypt_bytea	public.pgp_pub_encrypt_bytea()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	pgp_pub_encrypt_bytea()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.pgp_pub_encrypt_bytea() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.pgp_pub_encrypt_bytea(bytea, bytea)\n RETURNS bytea\n LANGUAGE c\n STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_encrypt_bytea$function$\n	[]	bytea	pgp_pub_encrypt_bytea
227232	public	pgp_pub_encrypt	public.pgp_pub_encrypt()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	pgp_pub_encrypt()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.pgp_pub_encrypt() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.pgp_pub_encrypt(text, bytea, text)\n RETURNS bytea\n LANGUAGE c\n STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_encrypt_text$function$\n	[]	bytea	pgp_pub_encrypt_text
227233	public	pgp_pub_encrypt_bytea	public.pgp_pub_encrypt_bytea()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	pgp_pub_encrypt_bytea()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.pgp_pub_encrypt_bytea() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.pgp_pub_encrypt_bytea(bytea, bytea, text)\n RETURNS bytea\n LANGUAGE c\n STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_encrypt_bytea$function$\n	[]	bytea	pgp_pub_encrypt_bytea
227234	public	pgp_pub_decrypt	public.pgp_pub_decrypt()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	pgp_pub_decrypt()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.pgp_pub_decrypt() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.pgp_pub_decrypt(bytea, bytea)\n RETURNS text\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_decrypt_text$function$\n	[]	text	pgp_pub_decrypt_text
227209	public	digest	public.digest()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	digest()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.digest() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.digest(text, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/pgcrypto', $function$pg_digest$function$\n	[]	bytea	pg_digest
227210	public	digest	public.digest()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	digest()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.digest() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.digest(bytea, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/pgcrypto', $function$pg_digest$function$\n	[]	bytea	pg_digest
227211	public	hmac	public.hmac()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	hmac()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.hmac() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.hmac(text, text, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/pgcrypto', $function$pg_hmac$function$\n	[]	bytea	pg_hmac
227212	public	hmac	public.hmac()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	hmac()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.hmac() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.hmac(bytea, bytea, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/pgcrypto', $function$pg_hmac$function$\n	[]	bytea	pg_hmac
227213	public	crypt	public.crypt()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	crypt()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.crypt() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.crypt(text, text)\n RETURNS text\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/pgcrypto', $function$pg_crypt$function$\n	[]	text	pg_crypt
227214	public	gen_salt	public.gen_salt()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	gen_salt()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.gen_salt() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.gen_salt(text)\n RETURNS text\n LANGUAGE c\n STRICT\nAS '$libdir/pgcrypto', $function$pg_gen_salt$function$\n	[]	text	pg_gen_salt
227215	public	gen_salt	public.gen_salt()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	gen_salt()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.gen_salt() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.gen_salt(text, integer)\n RETURNS text\n LANGUAGE c\n STRICT\nAS '$libdir/pgcrypto', $function$pg_gen_salt_rounds$function$\n	[]	text	pg_gen_salt_rounds
227216	public	encrypt	public.encrypt()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	encrypt()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.encrypt() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.encrypt(bytea, bytea, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/pgcrypto', $function$pg_encrypt$function$\n	[]	bytea	pg_encrypt
227217	public	decrypt	public.decrypt()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	decrypt()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.decrypt() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.decrypt(bytea, bytea, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/pgcrypto', $function$pg_decrypt$function$\n	[]	bytea	pg_decrypt
227218	public	encrypt_iv	public.encrypt_iv()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	encrypt_iv()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.encrypt_iv() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.encrypt_iv(bytea, bytea, bytea, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/pgcrypto', $function$pg_encrypt_iv$function$\n	[]	bytea	pg_encrypt_iv
227219	public	decrypt_iv	public.decrypt_iv()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	decrypt_iv()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.decrypt_iv() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.decrypt_iv(bytea, bytea, bytea, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/pgcrypto', $function$pg_decrypt_iv$function$\n	[]	bytea	pg_decrypt_iv
227220	public	gen_random_bytes	public.gen_random_bytes()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	gen_random_bytes()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.gen_random_bytes() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.gen_random_bytes(integer)\n RETURNS bytea\n LANGUAGE c\n STRICT\nAS '$libdir/pgcrypto', $function$pg_random_bytes$function$\n	[]	bytea	pg_random_bytes
227221	public	gen_random_uuid	public.gen_random_uuid()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	gen_random_uuid()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.gen_random_uuid() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.gen_random_uuid()\n RETURNS uuid\n LANGUAGE c\nAS '$libdir/pgcrypto', $function$pg_random_uuid$function$\n	[]	uuid	pg_random_uuid
227222	public	pgp_sym_encrypt	public.pgp_sym_encrypt()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	pgp_sym_encrypt()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.pgp_sym_encrypt() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.pgp_sym_encrypt(text, text)\n RETURNS bytea\n LANGUAGE c\n STRICT\nAS '$libdir/pgcrypto', $function$pgp_sym_encrypt_text$function$\n	[]	bytea	pgp_sym_encrypt_text
227223	public	pgp_sym_encrypt_bytea	public.pgp_sym_encrypt_bytea()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	pgp_sym_encrypt_bytea()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.pgp_sym_encrypt_bytea() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.pgp_sym_encrypt_bytea(bytea, text)\n RETURNS bytea\n LANGUAGE c\n STRICT\nAS '$libdir/pgcrypto', $function$pgp_sym_encrypt_bytea$function$\n	[]	bytea	pgp_sym_encrypt_bytea
227224	public	pgp_sym_encrypt	public.pgp_sym_encrypt()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	pgp_sym_encrypt()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.pgp_sym_encrypt() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.pgp_sym_encrypt(text, text, text)\n RETURNS bytea\n LANGUAGE c\n STRICT\nAS '$libdir/pgcrypto', $function$pgp_sym_encrypt_text$function$\n	[]	bytea	pgp_sym_encrypt_text
227235	public	pgp_pub_decrypt_bytea	public.pgp_pub_decrypt_bytea()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	pgp_pub_decrypt_bytea()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.pgp_pub_decrypt_bytea() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.pgp_pub_decrypt_bytea(bytea, bytea)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_decrypt_bytea$function$\n	[]	bytea	pgp_pub_decrypt_bytea
227225	public	pgp_sym_encrypt_bytea	public.pgp_sym_encrypt_bytea()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	pgp_sym_encrypt_bytea()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.pgp_sym_encrypt_bytea() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.pgp_sym_encrypt_bytea(bytea, text, text)\n RETURNS bytea\n LANGUAGE c\n STRICT\nAS '$libdir/pgcrypto', $function$pgp_sym_encrypt_bytea$function$\n	[]	bytea	pgp_sym_encrypt_bytea
227226	public	pgp_sym_decrypt	public.pgp_sym_decrypt()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	pgp_sym_decrypt()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.pgp_sym_decrypt() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.pgp_sym_decrypt(bytea, text)\n RETURNS text\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/pgcrypto', $function$pgp_sym_decrypt_text$function$\n	[]	text	pgp_sym_decrypt_text
227236	public	pgp_pub_decrypt	public.pgp_pub_decrypt()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	pgp_pub_decrypt()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.pgp_pub_decrypt() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.pgp_pub_decrypt(bytea, bytea, text)\n RETURNS text\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_decrypt_text$function$\n	[]	text	pgp_pub_decrypt_text
227237	public	pgp_pub_decrypt_bytea	public.pgp_pub_decrypt_bytea()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	pgp_pub_decrypt_bytea()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.pgp_pub_decrypt_bytea() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.pgp_pub_decrypt_bytea(bytea, bytea, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_decrypt_bytea$function$\n	[]	bytea	pgp_pub_decrypt_bytea
227238	public	pgp_pub_decrypt	public.pgp_pub_decrypt()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	pgp_pub_decrypt()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.pgp_pub_decrypt() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.pgp_pub_decrypt(bytea, bytea, text, text)\n RETURNS text\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_decrypt_text$function$\n	[]	text	pgp_pub_decrypt_text
227239	public	pgp_pub_decrypt_bytea	public.pgp_pub_decrypt_bytea()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	pgp_pub_decrypt_bytea()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.pgp_pub_decrypt_bytea() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.pgp_pub_decrypt_bytea(bytea, bytea, text, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_decrypt_bytea$function$\n	[]	bytea	pgp_pub_decrypt_bytea
227240	public	pgp_key_id	public.pgp_key_id()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	pgp_key_id()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.pgp_key_id() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.pgp_key_id(bytea)\n RETURNS text\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/pgcrypto', $function$pgp_key_id_w$function$\n	[]	text	pgp_key_id_w
227241	public	armor	public.armor()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	armor()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.armor() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.armor(bytea)\n RETURNS text\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/pgcrypto', $function$pg_armor$function$\n	[]	text	pg_armor
227242	public	armor	public.armor()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	armor()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.armor() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.armor(bytea, text[], text[])\n RETURNS text\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/pgcrypto', $function$pg_armor$function$\n	[]	text	pg_armor
227243	public	dearmor	public.dearmor()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	dearmor()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.dearmor() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.dearmor(text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/pgcrypto', $function$pg_dearmor$function$\n	[]	bytea	pg_dearmor
227244	public	pgp_armor_headers	public.pgp_armor_headers(  text,key out text,value out text)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	pgp_armor_headers(  text,key out text,value out text)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.pgp_armor_headers(  text,key out text,value out text) \r\n*/\r\nCREATE OR REPLACE FUNCTION public.pgp_armor_headers(text, OUT key text, OUT value text)\n RETURNS SETOF record\n LANGUAGE c\n IMMUTABLE STRICT\nAS '$libdir/pgcrypto', $function$pgp_armor_headers$function$\n	[{"argname":"","argmode":"input","argtype":"text"},{"argname":"key","argmode":"output","argtype":"text"},{"argname":"value","argmode":"output","argtype":"text"}]	record	pgp_armor_headers
227245	framework	fn_action_add_untitle	framework.fn_action_add_untitle(injson  json)	add untitle action in actions table	2020-05-21 11:31:02.195905	1	f	fn_action_add_untitle(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_action_add_untitle(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_action_add_untitle(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _viewid int;\r\n  _id int;\r\nBEGIN\r\n\t-- add untitle action in actions table\r\n\t\r\n    _viewid = injson->>'viewid';\r\n    \r\n    IF _viewid is NULL THEN\r\n    \tPERFORM raiserror('viewid is null');\r\n    END IF;\r\n    \r\n    _id = nextval('framework.actions_id_seq'::regclass);\r\n    INSERT INTO framework.actions (\r\n      id, column_order, \r\n      title, viewid, icon, \r\n      act_url, act_type\r\n    )\r\n    VALUES (\r\n      _id, COALESCE((\r\n      \tSELECT max(column_order) \r\n       \tFROM framework.actions \r\n        WHERE viewid = _viewid\r\n      ),0) + 1, \r\n      concat('untitled_',_id::varchar), _viewid, 'default', \r\n      '/', 'Link'\r\n    );\r\n    \r\n    \r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _viewid int;\r\n  _id int;\r\nBEGIN\r\n\t-- add untitle action in actions table\r\n\t\r\n    _viewid = injson->>'viewid';\r\n    \r\n    IF _viewid is NULL THEN\r\n    \tPERFORM raiserror('viewid is null');\r\n    END IF;\r\n    \r\n    _id = nextval('framework.actions_id_seq'::regclass);\r\n    INSERT INTO framework.actions (\r\n      id, column_order, \r\n      title, viewid, icon, \r\n      act_url, act_type\r\n    )\r\n    VALUES (\r\n      _id, COALESCE((\r\n      \tSELECT max(column_order) \r\n       \tFROM framework.actions \r\n        WHERE viewid = _viewid\r\n      ),0) + 1, \r\n      concat('untitled_',_id::varchar), _viewid, 'default', \r\n      '/', 'Link'\r\n    );\r\n    \r\n    \r\nEND;\r\n
227259	framework	fn_config_selectapi	framework.fn_config_selectapi(injson  json,outjson out json)	select_api for column add in config	2020-05-21 11:31:02.195905	1	f	fn_config_selectapi(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_config_selectapi(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_config_selectapi(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _viewid int;\r\n  tabname varchar(350);\r\nBEGIN\r\n\t-- select_api for column add in config\r\n\t_viewid = (injson->'inputs')->>'id';\r\n    \r\n    IF _viewid is null THEN\r\n    \tPERFORM raiserror('viewid is null, can not find out table name');\r\n    END IF;\r\n\t\r\n    SELECT \r\n    \tv.tablename\r\n    FROM framework.views as v\r\n    WHERE v.id = _viewid \r\n    INTO tabname; \r\n        \r\n    SELECT \r\n    \tarray_to_json(array_agg(row_to_json(d)))\r\n    FROM (\r\n    \tSELECT \r\n           \tDISTINCT \r\n           \tt.column_name as label,\r\n            coalesce(pgd.description, t.column_name) as value\r\n        FROM information_schema.columns as t\r\n           \tLEFT JOIN pg_catalog.pg_statio_all_tables as st on\r\n\t\t\t\tst.schemaname = t.table_schema and \r\n                st.relname = t.table_name\r\n          \tLEFT JOIN pg_catalog.pg_description pgd on \r\n            \tpgd.objoid = st.relid and \r\n                pgd.objsubid = t.ordinal_position\r\n        WHERE concat(t.table_schema, '.', t.table_name) = tabname\r\n            UNION ALL\r\n        SELECT \r\n           \tx.table_name as label,       \r\n            x.table_name as value\r\n        FROM information_schema.key_column_usage as x\r\n             LEFT JOIN information_schema.referential_constraints as c on\r\n                  c.constraint_name = x.constraint_name and\r\n        \t      c.constraint_schema = x.constraint_schema\r\n             LEFT JOIN information_schema.key_column_usage y on\r\n             \ty.ordinal_position = x.position_in_unique_constraint and\r\n                y.constraint_name = c.unique_constraint_name\r\n        WHERE concat(y.table_schema, '.', y.table_name) = tabname and\r\n        \t  y.table_name is not null\r\n    ) as d\r\n    INTO outjson;\r\n \t\r\n    outjson = coalesce(outjson,'[]');\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  _viewid int;\r\n  tabname varchar(350);\r\nBEGIN\r\n\t-- select_api for column add in config\r\n\t_viewid = (injson->'inputs')->>'id';\r\n    \r\n    IF _viewid is null THEN\r\n    \tPERFORM raiserror('viewid is null, can not find out table name');\r\n    END IF;\r\n\t\r\n    SELECT \r\n    \tv.tablename\r\n    FROM framework.views as v\r\n    WHERE v.id = _viewid \r\n    INTO tabname; \r\n        \r\n    SELECT \r\n    \tarray_to_json(array_agg(row_to_json(d)))\r\n    FROM (\r\n    \tSELECT \r\n           \tDISTINCT \r\n           \tt.column_name as label,\r\n            coalesce(pgd.description, t.column_name) as value\r\n        FROM information_schema.columns as t\r\n           \tLEFT JOIN pg_catalog.pg_statio_all_tables as st on\r\n\t\t\t\tst.schemaname = t.table_schema and \r\n                st.relname = t.table_name\r\n          \tLEFT JOIN pg_catalog.pg_description pgd on \r\n            \tpgd.objoid = st.relid and \r\n                pgd.objsubid = t.ordinal_position\r\n        WHERE concat(t.table_schema, '.', t.table_name) = tabname\r\n            UNION ALL\r\n        SELECT \r\n           \tx.table_name as label,       \r\n            x.table_name as value\r\n        FROM information_schema.key_column_usage as x\r\n             LEFT JOIN information_schema.referential_constraints as c on\r\n                  c.constraint_name = x.constraint_name and\r\n        \t      c.constraint_schema = x.constraint_schema\r\n             LEFT JOIN information_schema.key_column_usage y on\r\n             \ty.ordinal_position = x.position_in_unique_constraint and\r\n                y.constraint_name = c.unique_constraint_name\r\n        WHERE concat(y.table_schema, '.', y.table_name) = tabname and\r\n        \t  y.table_name is not null\r\n    ) as d\r\n    INTO outjson;\r\n \t\r\n    outjson = coalesce(outjson,'[]');\r\nEND;\r\n
227246	framework	fn_action_copy	framework.fn_action_copy(injson  json)	COPY ACTION IN VIEW	2020-05-21 11:31:02.195905	1	f	fn_action_copy(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_action_copy(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_action_copy(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _id int;\r\n  action_id int;\r\nBEGIN\r\n\r\n  -- COPY ACTION IN VIEW\r\n  _id = injson->>'id';\r\n  \r\n  action_id = nextval('framework.actions_id_seq'::regclass);\r\n  \r\n  \r\n  INSERT INTO framework.actions (\r\n      id, title, act_type,\r\n      act_url, api_method, api_type,\r\n\t  ask_confirm, classname, column_order,\r\n\t  forevery, icon, main_action,\r\n\t  refresh_data, roles, viewid\r\n  )\r\n  SELECT\r\n      action_id, concat(a.title,'_',action_id::varchar), a.act_type,\r\n\t  a.act_url, a.api_method, a.api_type,\r\n\t  a.ask_confirm, a.classname, COALESCE((\r\n\t    SELECT max(aa.column_order)\r\n\t\tFROM framework.actions as aa\r\n\t\tWHERE aa.viewid = a.viewid\t\t\t \r\n\t  ),0) + 1,\r\n\t  a.forevery, a.icon, a.main_action,\r\n\t  a.refresh_data, a.roles, a.viewid\r\n  FROM framework.actions as a\r\n  WHERE a.id = _id;\r\n  \r\n  INSERT INTO framework.act_parametrs(\r\n  \tactionid, paramtitle, paramt,\r\n\tparamconst, paraminput, paramcolumn,\r\n\tval_desc, query_type\r\n  )\r\n  SELECT\r\n\taction_id, paramtitle, paramt,\r\n\tparamconst, paraminput, paramcolumn,\r\n\tval_desc, query_type\r\n  FROM framework.act_parametrs\r\n  WHERE actionid = _id;\r\n  \r\n  INSERT INTO framework.act_visible_condions (\r\n\tactionid, val_desc, col,\r\n\ttitle, operation, value\r\n  ) \r\n  SELECT\r\n    action_id, val_desc, col,\r\n\ttitle, operation, value\r\n  FROM framework.act_visible_condions\r\n  WHERE actionid = _id;\r\n  \r\n  \r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _id int;\r\n  action_id int;\r\nBEGIN\r\n\r\n  -- COPY ACTION IN VIEW\r\n  _id = injson->>'id';\r\n  \r\n  action_id = nextval('framework.actions_id_seq'::regclass);\r\n  \r\n  \r\n  INSERT INTO framework.actions (\r\n      id, title, act_type,\r\n      act_url, api_method, api_type,\r\n\t  ask_confirm, classname, column_order,\r\n\t  forevery, icon, main_action,\r\n\t  refresh_data, roles, viewid\r\n  )\r\n  SELECT\r\n      action_id, concat(a.title,'_',action_id::varchar), a.act_type,\r\n\t  a.act_url, a.api_method, a.api_type,\r\n\t  a.ask_confirm, a.classname, COALESCE((\r\n\t    SELECT max(aa.column_order)\r\n\t\tFROM framework.actions as aa\r\n\t\tWHERE aa.viewid = a.viewid\t\t\t \r\n\t  ),0) + 1,\r\n\t  a.forevery, a.icon, a.main_action,\r\n\t  a.refresh_data, a.roles, a.viewid\r\n  FROM framework.actions as a\r\n  WHERE a.id = _id;\r\n  \r\n  INSERT INTO framework.act_parametrs(\r\n  \tactionid, paramtitle, paramt,\r\n\tparamconst, paraminput, paramcolumn,\r\n\tval_desc, query_type\r\n  )\r\n  SELECT\r\n\taction_id, paramtitle, paramt,\r\n\tparamconst, paraminput, paramcolumn,\r\n\tval_desc, query_type\r\n  FROM framework.act_parametrs\r\n  WHERE actionid = _id;\r\n  \r\n  INSERT INTO framework.act_visible_condions (\r\n\tactionid, val_desc, col,\r\n\ttitle, operation, value\r\n  ) \r\n  SELECT\r\n    action_id, val_desc, col,\r\n\ttitle, operation, value\r\n  FROM framework.act_visible_condions\r\n  WHERE actionid = _id;\r\n  \r\n  \r\nEND;\r\n
227247	framework	fn_allviews_sel	framework.fn_allviews_sel(injson  json,outjson out json,foundcount out int8)	USING IN COMPOSITIONS\r\nGET ALL VIEWS	2020-05-21 11:31:02.195905	1	f	fn_allviews_sel(injson  json,outjson out json,foundcount out int8)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_allviews_sel(injson  json,outjson out json,foundcount out int8) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_allviews_sel(injson json, OUT outjson json, OUT foundcount bigint)\n RETURNS record\n LANGUAGE plpgsql\nAS $function$\r\n-- USING IN COMPOSITIONS\r\nDECLARE\r\n  --pagenum smallint;\r\n -- pagesize smallint;\r\n  substr varchar(50);\r\n -- _off smallint;\r\nBEGIN\r\n -- pagenum = injson->>'pagenum';\r\n  --pagesize = injson->>'pagesize';\r\n  substr = injson->>'substr';\r\n  \r\n -- pagenum = coalesce(pagenum,'1');\r\n  --pagesize = coalesce(pagesize,'15');\r\n  substr = upper(concat('%',coalesce(substr,'%'),'%')); \r\n --_off=(pagenum*pagesize)-pagesize;\r\n  foundcount = (\r\n\tSELECT count(v.id)\r\n\tFROM framework.views as v\r\n\tWHERE upper(v.title) like substr or upper(v.tablename) like substr or \r\n\t      upper(v.path) like substr\r\n  );\r\n  \r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n\t  SELECT \r\n\t\t  ROW_NUMBER() over ( order by v.id ) as rownum,\r\n\t\t  v.id, v.title, v.viewtype,\r\n\t\t  v.descr, v.tablename, v.path,\r\n\t\t  v.subscrible, '' as viewlink\r\n\t  FROM framework.views as v\r\n\t  WHERE upper(v.title) like substr or upper(v.tablename) like substr or \r\n\t        upper(v.path) like substr\r\n\t  ORDER BY v.id\r\n    ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = COALESCE(outjson,'[]');\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"},{"argname":"foundcount","argmode":"output","argtype":"int8"}]	record	\r\n-- USING IN COMPOSITIONS\r\nDECLARE\r\n  --pagenum smallint;\r\n -- pagesize smallint;\r\n  substr varchar(50);\r\n -- _off smallint;\r\nBEGIN\r\n -- pagenum = injson->>'pagenum';\r\n  --pagesize = injson->>'pagesize';\r\n  substr = injson->>'substr';\r\n  \r\n -- pagenum = coalesce(pagenum,'1');\r\n  --pagesize = coalesce(pagesize,'15');\r\n  substr = upper(concat('%',coalesce(substr,'%'),'%')); \r\n --_off=(pagenum*pagesize)-pagesize;\r\n  foundcount = (\r\n\tSELECT count(v.id)\r\n\tFROM framework.views as v\r\n\tWHERE upper(v.title) like substr or upper(v.tablename) like substr or \r\n\t      upper(v.path) like substr\r\n  );\r\n  \r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n\t  SELECT \r\n\t\t  ROW_NUMBER() over ( order by v.id ) as rownum,\r\n\t\t  v.id, v.title, v.viewtype,\r\n\t\t  v.descr, v.tablename, v.path,\r\n\t\t  v.subscrible, '' as viewlink\r\n\t  FROM framework.views as v\r\n\t  WHERE upper(v.title) like substr or upper(v.tablename) like substr or \r\n\t        upper(v.path) like substr\r\n\t  ORDER BY v.id\r\n    ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = COALESCE(outjson,'[]');\r\nEND;\r\n
227248	framework	fn_apimethods	framework.fn_apimethods(injson  json,outjson out json)	API Methods list	2020-05-21 11:31:02.195905	1	f	fn_apimethods(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_apimethods(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_apimethods(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\t-- API method list\r\n\tSELECT \r\n    \tarray_to_json(array_agg(row_to_json(d)))\r\n    FROM (\r\n\t  SELECT\r\n\t\t  a.val as label,\r\n\t\t  a.val as value\r\n\t  FROM framework.apimethods as a\r\n\t) as d\r\n    INTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\n    \r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nBEGIN\r\n\t-- API method list\r\n\tSELECT \r\n    \tarray_to_json(array_agg(row_to_json(d)))\r\n    FROM (\r\n\t  SELECT\r\n\t\t  a.val as label,\r\n\t\t  a.val as value\r\n\t  FROM framework.apimethods as a\r\n\t) as d\r\n    INTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\n    \r\n\r\nEND;\r\n
227249	framework	fn_autocomplete	framework.fn_autocomplete(injson  json,outjson out json)	FORM AUTOCOMPLETE METHOD	2020-05-21 11:31:02.195905	1	f	fn_autocomplete(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_autocomplete(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_autocomplete(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  col varchar;\r\n -- val varchar;\r\n  _table varchar;\r\n  squery varchar;\r\n  _val varchar;\r\nBEGIN\r\n\t-- FORM AUTOCOMPLETE METHOD\r\n\tcol = injson->>'col';\r\n    _val = injson->>'val';\r\n    _table = injson->>'table';\r\n    --perform raiserror(val);\r\n    IF _val is not null and length(_val) > 0 THEN\r\n    \t_val = concat('%',upper(_val),'%');\r\n    \tsquery = concat(\r\n\t\t    squery, 'SELECT array_to_json(array_agg(row_to_json(d))) FROM (\r\n            SELECT distinct ' , \r\n            col , ' as value, ' , col , ' \r\n        \tas label FROM ' , _table , ' WHERE upper(' , \r\n            col , ')::varchar like $1::varchar LIMIT 500) as d'\r\n\t\t);\r\n            \t\r\n       EXECUTE format(squery) USING _val INTO outjson;\r\n       \r\n       outjson = coalesce(\r\n\t      outjson, (\r\n\t\t     SELECT \r\n\t\t         array_to_json(array_agg(row_to_json(d))) \r\n\t\t\t FROM (    \r\n\t\t\t     SELECT \r\n\t\t\t\t  injson ->> 'val' as value, \r\n\t\t\t\t  injson ->> 'val' as label          \r\n\t\t\t ) as d\r\n\t      )\r\n\t  );\r\n    END IF;        \r\n\r\n\toutjson = coalesce(outjson,'[]');\r\n    outjson = '{"label":"","value":null}'::jsonb||outjson::jsonb; \r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  col varchar;\r\n -- val varchar;\r\n  _table varchar;\r\n  squery varchar;\r\n  _val varchar;\r\nBEGIN\r\n\t-- FORM AUTOCOMPLETE METHOD\r\n\tcol = injson->>'col';\r\n    _val = injson->>'val';\r\n    _table = injson->>'table';\r\n    --perform raiserror(val);\r\n    IF _val is not null and length(_val) > 0 THEN\r\n    \t_val = concat('%',upper(_val),'%');\r\n    \tsquery = concat(\r\n\t\t    squery, 'SELECT array_to_json(array_agg(row_to_json(d))) FROM (\r\n            SELECT distinct ' , \r\n            col , ' as value, ' , col , ' \r\n        \tas label FROM ' , _table , ' WHERE upper(' , \r\n            col , ')::varchar like $1::varchar LIMIT 500) as d'\r\n\t\t);\r\n            \t\r\n       EXECUTE format(squery) USING _val INTO outjson;\r\n       \r\n       outjson = coalesce(\r\n\t      outjson, (\r\n\t\t     SELECT \r\n\t\t         array_to_json(array_agg(row_to_json(d))) \r\n\t\t\t FROM (    \r\n\t\t\t     SELECT \r\n\t\t\t\t  injson ->> 'val' as value, \r\n\t\t\t\t  injson ->> 'val' as label          \r\n\t\t\t ) as d\r\n\t      )\r\n\t  );\r\n    END IF;        \r\n\r\n\toutjson = coalesce(outjson,'[]');\r\n    outjson = '{"label":"","value":null}'::jsonb||outjson::jsonb; \r\n\r\nEND;\r\n
227260	framework	fn_config_settings_apply	framework.fn_config_settings_apply(injson  json)	apply all columns settings in config by chosed column	2020-05-21 11:31:02.195905	1	f	fn_config_settings_apply(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_config_settings_apply(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_config_settings_apply(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _col varchar(150);\r\n  _setting varchar(150);\r\n  _selected json;\r\n  _viewid int;\r\nBEGIN\r\n\t-- apply all columns settings in config by chosed column\r\n  _col = injson->>'col';\r\n  _setting = injson->>'setting';\r\n  _viewid = injson->>'viewid';\r\n  \r\n  -- mock yet\r\n  \r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _col varchar(150);\r\n  _setting varchar(150);\r\n  _selected json;\r\n  _viewid int;\r\nBEGIN\r\n\t-- apply all columns settings in config by chosed column\r\n  _col = injson->>'col';\r\n  _setting = injson->>'setting';\r\n  _viewid = injson->>'viewid';\r\n  \r\n  -- mock yet\r\n  \r\nEND;\r\n
227250	framework	fn_branchestree_recurs	framework.fn_branchestree_recurs(_parentid  int4,_treesid  int4,outjson out json)	TREES BRANCHES RECURS FUNCTION	2020-05-21 11:31:02.195905	1	f	fn_branchestree_recurs(_parentid  int4,_treesid  int4,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_branchestree_recurs(_parentid  int4,_treesid  int4,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_branchestree_recurs(_parentid integer, _treesid integer, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\t-- TREES BRANCHES RECURS FUNCTION\r\n\tSELECT\r\n    \tarray_to_json(array_agg(row_to_json(d))) \r\n    FROM ( \r\n\t  SELECT\r\n          tb.id as key, tb.icon,\r\n          tb.parentid, tb.treesid,\r\n          tb.title as label, tb.ismain,\r\n          framework.fn_branchestree_recurs(tb.id,tb.treesid) as children\r\n      FROM framework.treesbranches as tb\r\n      WHERE tb.treesid = _treesid and tb.title is not null and \r\n            coalesce(tb.parentid,0) = coalesce(_parentid,0)\r\n      ORDER BY coalesce(tb.orderby,0)\r\n    ) as d\r\n    INTO outjson;\r\n      \r\n     -- outjson = coalesce(outjson,'[]');\r\nEND;\r\n$function$\n	[{"argname":"_parentid","argmode":"input","argtype":"int4"},{"argname":"_treesid","argmode":"input","argtype":"int4"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nBEGIN\r\n\t-- TREES BRANCHES RECURS FUNCTION\r\n\tSELECT\r\n    \tarray_to_json(array_agg(row_to_json(d))) \r\n    FROM ( \r\n\t  SELECT\r\n          tb.id as key, tb.icon,\r\n          tb.parentid, tb.treesid,\r\n          tb.title as label, tb.ismain,\r\n          framework.fn_branchestree_recurs(tb.id,tb.treesid) as children\r\n      FROM framework.treesbranches as tb\r\n      WHERE tb.treesid = _treesid and tb.title is not null and \r\n            coalesce(tb.parentid,0) = coalesce(_parentid,0)\r\n      ORDER BY coalesce(tb.orderby,0)\r\n    ) as d\r\n    INTO outjson;\r\n      \r\n     -- outjson = coalesce(outjson,'[]');\r\nEND;\r\n
227251	framework	fn_col_add_select_condition	framework.fn_col_add_select_condition(injson  json)	add select_condition for config	2020-05-21 11:31:02.195905	1	f	fn_col_add_select_condition(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_col_add_select_condition(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_col_add_select_condition(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n\t_conf_id int;\r\n    _operation varchar(30);\r\n    _value varchar(150);\r\n    _const varchar(350);\r\n    _col varchar(350);\r\n    _title varchar(350);\r\nBEGIN\r\n\t-- add select_condition for config\r\n    \r\n    _conf_id = injson->>'confid';\r\n    _operation = '=';\r\n    _const = 'CONST';\r\n\t\r\n\tIF _conf_id is null THEN\r\n    \tPERFORM raiserror('configid is null');\r\n    END IF;\r\n    \r\n    INSERT INTO framework.select_condition (\r\n      configid, col, title,\r\n      operation, const, value\r\n    ) VALUES (\r\n      _conf_id, _col, _title,\r\n      _operation, _const, _value\r\n    );\r\n\t\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n\t_conf_id int;\r\n    _operation varchar(30);\r\n    _value varchar(150);\r\n    _const varchar(350);\r\n    _col varchar(350);\r\n    _title varchar(350);\r\nBEGIN\r\n\t-- add select_condition for config\r\n    \r\n    _conf_id = injson->>'confid';\r\n    _operation = '=';\r\n    _const = 'CONST';\r\n\t\r\n\tIF _conf_id is null THEN\r\n    \tPERFORM raiserror('configid is null');\r\n    END IF;\r\n    \r\n    INSERT INTO framework.select_condition (\r\n      configid, col, title,\r\n      operation, const, value\r\n    ) VALUES (\r\n      _conf_id, _col, _title,\r\n      _operation, _const, _value\r\n    );\r\n\t\r\n\r\nEND;\r\n
227252	framework	fn_compo	framework.fn_compo(injson  json,outjson out json)	GET COMPO	2020-05-21 11:31:02.195905	1	f	fn_compo(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_compo(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_compo(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _id int;\r\nBEGIN\r\n\t-- GET COMPO\r\n    \r\n\t_id = injson->>'id';\r\n    \r\n    SELECT row_to_json(d)\r\n    FROM (\r\n     \tSELECT *\r\n     \tFROM framework.compos as c\r\n     \tWHERE c.id = _id\r\n    ) as d\r\n    INTO outjson;\r\n    \r\n\toutjson = coalesce(outjson,'{}');\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  _id int;\r\nBEGIN\r\n\t-- GET COMPO\r\n    \r\n\t_id = injson->>'id';\r\n    \r\n    SELECT row_to_json(d)\r\n    FROM (\r\n     \tSELECT *\r\n     \tFROM framework.compos as c\r\n     \tWHERE c.id = _id\r\n    ) as d\r\n    INTO outjson;\r\n    \r\n\toutjson = coalesce(outjson,'{}');\r\n\r\nEND;\r\n
227253	framework	fn_compo_bypath	framework.fn_compo_bypath(injson  json,outjson out json)	GET COMPO SETTINGS BY PATH	2020-05-21 11:31:02.195905	1	f	fn_compo_bypath(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_compo_bypath(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_compo_bypath(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _path varchar(350);\r\nBEGIN\r\n\t-- GET COMPO SETTINGS BY PATH\r\n\t_path = injson->>'path';\r\n    \r\n    SELECT row_to_json(d)\r\n    FROM (\r\n\t   SELECT *\r\n       FROM framework.compos as c\r\n       WHERE c.path = _path\r\n\t) as d\r\n    INTO outjson;\r\n\r\n\r\n\toutjson = coalesce(outjson,'{}');\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  _path varchar(350);\r\nBEGIN\r\n\t-- GET COMPO SETTINGS BY PATH\r\n\t_path = injson->>'path';\r\n    \r\n    SELECT row_to_json(d)\r\n    FROM (\r\n\t   SELECT *\r\n       FROM framework.compos as c\r\n       WHERE c.path = _path\r\n\t) as d\r\n    INTO outjson;\r\n\r\n\r\n\toutjson = coalesce(outjson,'{}');\r\n\r\nEND;\r\n
227254	framework	fn_compo_save	framework.fn_compo_save(injson  json,_id out int4)	INSERT/UPDATE COMPOSITION	2020-05-21 11:31:02.195905	1	f	fn_compo_save(injson  json,_id out int4)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_compo_save(injson  json,_id out int4) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_compo_save(injson json, OUT _id integer)\n RETURNS integer\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _config json;\r\n  _title varchar(350);\r\n  _path varchar(350);\r\n  _userid int;\r\n  _newdata json;\r\nBEGIN\r\n  -- INSERT/UPDATE COMPOSITION\r\n\r\n  _config = injson->>'config';\r\n  _title = injson->>'title';\r\n  _path = injson->>'path';\r\n  _id = injson->>'id';\r\n  _userid = injson->>'userid';\r\n  \r\n  IF _id is null THEN\r\n  \tIF _config is null THEN\r\n    \tperform raiserror('config is null');\r\n    END IF;\r\n\r\n  \tIF _title is null THEN\r\n    \tperform raiserror('title is null'); \r\n    END IF;\r\n\r\n  \tIF _path is null THEN\r\n        perform raiserror('path is null');\r\n    END IF;\r\n    \r\n    _id = nextval('framework.compos_id_seq'::regclass);\r\n    \r\n    INSERT INTO framework.compos (\r\n      id, title,\r\n      path, config\r\n    )\r\n    VALUES (\r\n      _id, _title,\r\n      _path, _config\r\n    );\r\n    \r\n    \r\n    SELECT row_to_json(d)\r\n    FROM (\r\n\t  SELECT\r\n\t\t  *\r\n\t  FROM framework.compos\r\n\t) as d\r\n    WHERE id = _id\r\n    INTO _newdata;\r\n    \r\n  \tINSERT INTO framework.logtable (\r\n      tablename, tableid,\r\n      opertype, userid,\r\n      newdata\r\n    ) VALUES (\r\n      'framework.compos', _id::varchar(150),\r\n      '1', _userid ,\r\n     _newdata   \r\n    );    \r\n  ELSE\r\n    SELECT row_to_json(d)\r\n    FROM ( \r\n\t  SELECT\r\n\t\t  *\r\n\t  FROM framework.compos\r\n\t) as d\r\n    WHERE id = _id\r\n    INTO _newdata;\r\n    \r\n  \tUPDATE framework.compos\r\n    SET\r\n      title = coalesce(_title,title),\r\n      path = coalesce(_path,path),\r\n      config = coalesce(_config,config )  \t\r\n    WHERE id = _id;\r\n    \r\n  \tINSERT INTO framework.logtable (\r\n      tablename, tableid,\r\n      opertype, userid,\r\n      newdata\r\n    ) VALUES (\r\n      'framework.compos', _id::varchar(150),\r\n      '2', _userid,\r\n     _newdata   \r\n    ); \r\n  END IF;    \r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"_id","argmode":"output","argtype":"int4"}]	int4	\r\nDECLARE\r\n  _config json;\r\n  _title varchar(350);\r\n  _path varchar(350);\r\n  _userid int;\r\n  _newdata json;\r\nBEGIN\r\n  -- INSERT/UPDATE COMPOSITION\r\n\r\n  _config = injson->>'config';\r\n  _title = injson->>'title';\r\n  _path = injson->>'path';\r\n  _id = injson->>'id';\r\n  _userid = injson->>'userid';\r\n  \r\n  IF _id is null THEN\r\n  \tIF _config is null THEN\r\n    \tperform raiserror('config is null');\r\n    END IF;\r\n\r\n  \tIF _title is null THEN\r\n    \tperform raiserror('title is null'); \r\n    END IF;\r\n\r\n  \tIF _path is null THEN\r\n        perform raiserror('path is null');\r\n    END IF;\r\n    \r\n    _id = nextval('framework.compos_id_seq'::regclass);\r\n    \r\n    INSERT INTO framework.compos (\r\n      id, title,\r\n      path, config\r\n    )\r\n    VALUES (\r\n      _id, _title,\r\n      _path, _config\r\n    );\r\n    \r\n    \r\n    SELECT row_to_json(d)\r\n    FROM (\r\n\t  SELECT\r\n\t\t  *\r\n\t  FROM framework.compos\r\n\t) as d\r\n    WHERE id = _id\r\n    INTO _newdata;\r\n    \r\n  \tINSERT INTO framework.logtable (\r\n      tablename, tableid,\r\n      opertype, userid,\r\n      newdata\r\n    ) VALUES (\r\n      'framework.compos', _id::varchar(150),\r\n      '1', _userid ,\r\n     _newdata   \r\n    );    \r\n  ELSE\r\n    SELECT row_to_json(d)\r\n    FROM ( \r\n\t  SELECT\r\n\t\t  *\r\n\t  FROM framework.compos\r\n\t) as d\r\n    WHERE id = _id\r\n    INTO _newdata;\r\n    \r\n  \tUPDATE framework.compos\r\n    SET\r\n      title = coalesce(_title,title),\r\n      path = coalesce(_path,path),\r\n      config = coalesce(_config,config )  \t\r\n    WHERE id = _id;\r\n    \r\n  \tINSERT INTO framework.logtable (\r\n      tablename, tableid,\r\n      opertype, userid,\r\n      newdata\r\n    ) VALUES (\r\n      'framework.compos', _id::varchar(150),\r\n      '2', _userid,\r\n     _newdata   \r\n    ); \r\n  END IF;    \r\nEND;\r\n
227255	framework	fn_config_fncol_add	framework.fn_config_fncol_add(injson  json)	ADD fn COLUMN IN CONFIG	2020-05-21 11:31:02.195905	1	f	fn_config_fncol_add(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_config_fncol_add(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_config_fncol_add(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\t-- add fn column in config\r\n\r\n\r\n\tIF (injson->>'title') IS NULL THEN\r\n    \tPERFORM raiserror('title is null');\r\n    END IF;\r\n    \r\n\tIF (injson->>'fn') IS NULL THEN\r\n    \tPERFORM raiserror('fn is null');\r\n    END IF;\r\n    \r\n    IF (injson->'fncols') IS NULL THEN\r\n    \tPERFORM raiserror('fncols is null');\r\n    END IF;\r\n    \r\n\tINSERT INTO framework.config (\r\n  \t  viewid, col, title,\r\n      column_order, fn, fncolumns \r\n    )\r\n    VALUES (\r\n   \t (injson->>'viewid')::INT, substring(injson->>'title',1,15), injson->>'title', (\r\n\t   SELECT\r\n\t\t  max(column_id)\r\n\t   FROM framework.config\r\n\t   WHERE viewid = (injson->>'viewid')::INT\r\n     ) + 1, injson->>'fn',\r\n    injson->'fncols'\r\n    );\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nBEGIN\r\n\t-- add fn column in config\r\n\r\n\r\n\tIF (injson->>'title') IS NULL THEN\r\n    \tPERFORM raiserror('title is null');\r\n    END IF;\r\n    \r\n\tIF (injson->>'fn') IS NULL THEN\r\n    \tPERFORM raiserror('fn is null');\r\n    END IF;\r\n    \r\n    IF (injson->'fncols') IS NULL THEN\r\n    \tPERFORM raiserror('fncols is null');\r\n    END IF;\r\n    \r\n\tINSERT INTO framework.config (\r\n  \t  viewid, col, title,\r\n      column_order, fn, fncolumns \r\n    )\r\n    VALUES (\r\n   \t (injson->>'viewid')::INT, substring(injson->>'title',1,15), injson->>'title', (\r\n\t   SELECT\r\n\t\t  max(column_id)\r\n\t   FROM framework.config\r\n\t   WHERE viewid = (injson->>'viewid')::INT\r\n     ) + 1, injson->>'fn',\r\n    injson->'fncols'\r\n    );\r\nEND;\r\n
227307	framework	fn_mainsettings_usercss	framework.fn_mainsettings_usercss(_css  text)	UPDATE USERCSS FROM FILE ON THE SERVER	2020-05-21 11:31:02.195905	1	f	fn_mainsettings_usercss(_css  text)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_mainsettings_usercss(_css  text) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_mainsettings_usercss(_css text)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\r\n\tUPDATE framework.mainsettings\r\n    SET usercss = _css;\r\n\r\nEND;\r\n$function$\n	[{"argname":"_css","argmode":"input","argtype":"text"}]	void	\r\nBEGIN\r\n\r\n\tUPDATE framework.mainsettings\r\n    SET usercss = _css;\r\n\r\nEND;\r\n
227256	framework	fn_config_inscol	framework.fn_config_inscol(injson  json)	add fn column in config	2020-05-21 11:31:02.195905	1	f	fn_config_inscol(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_config_inscol(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_config_inscol(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n\t_col varchar(150);\r\n    _viewid int;\r\n    _conf JSON;\r\n    _tabname varchar(350);\r\n    _val json;\r\n    _title varchar(500);\r\nBEGIN\r\n\t-- add fn column in config\r\n    _col = injson->>'col'; -- this is title\r\n    _viewid = injson->>'viewid';\r\n    \r\n    IF _col is null OR _viewid is null THEN\r\n    \tPERFORM raiserror('col or view is null');\r\n    END IF;\r\n\r\n    SELECT\r\n    \tv.tablename\r\n    FROM framework.views as v\r\n    WHERE v.id = _viewid\r\n    INTO _tabname;\r\n    \r\n    IF _tabname is null THEN\r\n    \tPERFORM raiserror('tabname is null');\r\n    END IF;\r\n    \r\n    /*SELECT outjson \r\n    FROM framework.fn_createconfig(json_build_object('tabname',_tabname,'colname',_col))\r\n    INTO _conf;*/\r\n    \r\n    \r\n   /* SELECT\r\n    \tvalue\r\n    FROM json_array_elements(_conf)\r\n    WHERE (value->>'title') = _col\r\n    LIMIT 1\r\n    INTO _val;\r\n    \r\n    _title = _val->>'title';\r\n    \r\n    IF (SELECT \r\n    \t\tcount(id) \r\n    \tFROM framework.config \r\n    \tWHERE viewid = _viewid and title = _title) > 0\r\n    THEN\r\n    \t_title = concat(_title,'_', \r\n            (SELECT \r\n                count(id) \r\n          \tFROM framework.config \r\n          \tWHERE viewid = _viewid)::varchar);\r\n    END IF;*/\r\n\r\n    \r\n    INSERT INTO framework.config (\r\n      viewid, t, col, column_id,\r\n      title, relation, relcol,\r\n      depency, column_order,\r\n      depencycol\r\n    )\r\n    SELECT\r\n           _viewid,\tpz.t, pz.col, pz.column_id,\r\n           concat(pz.title, '_', (\r\n             SELECT \r\n               count(id) \r\n             FROM framework.config \r\n             WHERE viewid = _viewid)::varchar) as title,\r\n                COALESCE(pz.relation,(\r\n                \tSELECT \r\n                    \tconcat(y.table_schema, '.', y.table_name)\r\n                    FROM information_schema.table_constraints as c\r\n                    \tJOIN information_schema.key_column_usage AS x ON\r\n                        \tc.constraint_name = x.constraint_name and\r\n                            x.column_name = pz.column_name\r\n                        JOIN information_schema.constraint_column_usage AS y ON \r\n                        \ty.constraint_name = c.constraint_name and\r\n                            y.constraint_schema = c.constraint_schema\r\n                    WHERE c.table_name = pz.table_name and\r\n                          c.table_schema = pz.table_schema and\r\n                          c.constraint_type = 'FOREIGN KEY'\r\n                    LIMIT 1\r\n                )) as relation,\r\n                (\r\n                \tSELECT \r\n                    \tconcat(y.column_name)\r\n                    FROM information_schema.table_constraints as c\r\n                    \tJOIN information_schema.key_column_usage AS x ON\r\n                             c.constraint_name = x.constraint_name and\r\n                             x.column_name = pz.column_name\r\n                        JOIN information_schema.constraint_column_usage AS y ON \r\n                        \ty.constraint_name = c.constraint_name and\r\n                            y.constraint_schema = c.constraint_schema\r\n                    WHERE c.table_name = pz.table_name and\r\n                     \t  c.table_schema = pz.table_schema and\r\n                          c.constraint_type = 'FOREIGN KEY'\r\n                    LIMIT 1\r\n                ) as relcol,\r\n             pz.depency, COALESCE((\r\n               SELECT \r\n                  max(column_order) \r\n               FROM framework.config \r\n               WHERE viewid = _viewid),0) + 1,\r\n             pz.depencycol\t\r\n    FROM (\r\n\t    SELECT \r\n           \tROW_NUMBER() OVER(order by f.column_id) as t,  \r\n            f.*  \r\n        FROM (\r\n        \tSELECT \r\n            \tDISTINCT \r\n            \tt.column_name as col,\r\n                coalesce(pgd.description, t.column_name) as title,                         \r\n                null as relation, null as depencycol,\r\n                t.ordinal_position as column_id, false as depency,\r\n                t.column_name, t.table_schema, t.table_name\r\n            FROM information_schema.columns as t\r\n            \tLEFT JOIN pg_catalog.pg_statio_all_tables as st on\r\n                         st.schemaname = t.table_schema and st.relname =\r\n                         t.table_name\r\n            \tLEFT JOIN pg_catalog.pg_description pgd on pgd.objoid =\r\n                         st.relid and pgd.objsubid = t.ordinal_position\r\n            WHERE concat(t.table_schema, '.', t.table_name) = _tabname\r\n            \t--AND coalesce(pgd.description, t.column_name) = COALESCE(_colname, coalesce(pgd.description, t.column_name))\r\n            UNION ALL\r\n            SELECT \r\n            \tx.table_name as col,       \r\n                x.table_name as title,\r\n                concat(x.table_schema, '.', x.table_name) as relation,\r\n                x.column_name as depencycol,\r\n                (\r\n                 \tSELECT count(t.*)\r\n                    FROM information_schema.columns as t\r\n                    WHERE concat(t.table_schema, '.', t.table_name) = _tabname\r\n                ) + 1 as column_id,\r\n                true as depency,\r\n                '' as column_name,\r\n                '' as table_schema,\r\n                '' as table_name\r\n            FROM information_schema.key_column_usage as x\r\n                 LEFT JOIN information_schema.referential_constraints as c on\r\n                         c.constraint_name = x.constraint_name and\r\n                         c.constraint_schema = x.constraint_schema\r\n                 LEFT JOIN information_schema.key_column_usage y on\r\n                         y.ordinal_position = x.position_in_unique_constraint and\r\n                         y.constraint_name = c.unique_constraint_name\r\n        \tWHERE concat(y.table_schema, '.', y.table_name) = _tabname and\r\n                  y.table_name is not null\r\n        ) as f\r\n       \r\n        ORDER BY \r\n        \tf.column_id) as pz\r\n         WHERE pz.title = _col;\r\n\r\n    \r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n\t_col varchar(150);\r\n    _viewid int;\r\n    _conf JSON;\r\n    _tabname varchar(350);\r\n    _val json;\r\n    _title varchar(500);\r\nBEGIN\r\n\t-- add fn column in config\r\n    _col = injson->>'col'; -- this is title\r\n    _viewid = injson->>'viewid';\r\n    \r\n    IF _col is null OR _viewid is null THEN\r\n    \tPERFORM raiserror('col or view is null');\r\n    END IF;\r\n\r\n    SELECT\r\n    \tv.tablename\r\n    FROM framework.views as v\r\n    WHERE v.id = _viewid\r\n    INTO _tabname;\r\n    \r\n    IF _tabname is null THEN\r\n    \tPERFORM raiserror('tabname is null');\r\n    END IF;\r\n    \r\n    /*SELECT outjson \r\n    FROM framework.fn_createconfig(json_build_object('tabname',_tabname,'colname',_col))\r\n    INTO _conf;*/\r\n    \r\n    \r\n   /* SELECT\r\n    \tvalue\r\n    FROM json_array_elements(_conf)\r\n    WHERE (value->>'title') = _col\r\n    LIMIT 1\r\n    INTO _val;\r\n    \r\n    _title = _val->>'title';\r\n    \r\n    IF (SELECT \r\n    \t\tcount(id) \r\n    \tFROM framework.config \r\n    \tWHERE viewid = _viewid and title = _title) > 0\r\n    THEN\r\n    \t_title = concat(_title,'_', \r\n            (SELECT \r\n                count(id) \r\n          \tFROM framework.config \r\n          \tWHERE viewid = _viewid)::varchar);\r\n    END IF;*/\r\n\r\n    \r\n    INSERT INTO framework.config (\r\n      viewid, t, col, column_id,\r\n      title, relation, relcol,\r\n      depency, column_order,\r\n      depencycol\r\n    )\r\n    SELECT\r\n           _viewid,\tpz.t, pz.col, pz.column_id,\r\n           concat(pz.title, '_', (\r\n             SELECT \r\n               count(id) \r\n             FROM framework.config \r\n             WHERE viewid = _viewid)::varchar) as title,\r\n                COALESCE(pz.relation,(\r\n                \tSELECT \r\n                    \tconcat(y.table_schema, '.', y.table_name)\r\n                    FROM information_schema.table_constraints as c\r\n                    \tJOIN information_schema.key_column_usage AS x ON\r\n                        \tc.constraint_name = x.constraint_name and\r\n                            x.column_name = pz.column_name\r\n                        JOIN information_schema.constraint_column_usage AS y ON \r\n                        \ty.constraint_name = c.constraint_name and\r\n                            y.constraint_schema = c.constraint_schema\r\n                    WHERE c.table_name = pz.table_name and\r\n                          c.table_schema = pz.table_schema and\r\n                          c.constraint_type = 'FOREIGN KEY'\r\n                    LIMIT 1\r\n                )) as relation,\r\n                (\r\n                \tSELECT \r\n                    \tconcat(y.column_name)\r\n                    FROM information_schema.table_constraints as c\r\n                    \tJOIN information_schema.key_column_usage AS x ON\r\n                             c.constraint_name = x.constraint_name and\r\n                             x.column_name = pz.column_name\r\n                        JOIN information_schema.constraint_column_usage AS y ON \r\n                        \ty.constraint_name = c.constraint_name and\r\n                            y.constraint_schema = c.constraint_schema\r\n                    WHERE c.table_name = pz.table_name and\r\n                     \t  c.table_schema = pz.table_schema and\r\n                          c.constraint_type = 'FOREIGN KEY'\r\n                    LIMIT 1\r\n                ) as relcol,\r\n             pz.depency, COALESCE((\r\n               SELECT \r\n                  max(column_order) \r\n               FROM framework.config \r\n               WHERE viewid = _viewid),0) + 1,\r\n             pz.depencycol\t\r\n    FROM (\r\n\t    SELECT \r\n           \tROW_NUMBER() OVER(order by f.column_id) as t,  \r\n            f.*  \r\n        FROM (\r\n        \tSELECT \r\n            \tDISTINCT \r\n            \tt.column_name as col,\r\n                coalesce(pgd.description, t.column_name) as title,                         \r\n                null as relation, null as depencycol,\r\n                t.ordinal_position as column_id, false as depency,\r\n                t.column_name, t.table_schema, t.table_name\r\n            FROM information_schema.columns as t\r\n            \tLEFT JOIN pg_catalog.pg_statio_all_tables as st on\r\n                         st.schemaname = t.table_schema and st.relname =\r\n                         t.table_name\r\n            \tLEFT JOIN pg_catalog.pg_description pgd on pgd.objoid =\r\n                         st.relid and pgd.objsubid = t.ordinal_position\r\n            WHERE concat(t.table_schema, '.', t.table_name) = _tabname\r\n            \t--AND coalesce(pgd.description, t.column_name) = COALESCE(_colname, coalesce(pgd.description, t.column_name))\r\n            UNION ALL\r\n            SELECT \r\n            \tx.table_name as col,       \r\n                x.table_name as title,\r\n                concat(x.table_schema, '.', x.table_name) as relation,\r\n                x.column_name as depencycol,\r\n                (\r\n                 \tSELECT count(t.*)\r\n                    FROM information_schema.columns as t\r\n                    WHERE concat(t.table_schema, '.', t.table_name) = _tabname\r\n                ) + 1 as column_id,\r\n                true as depency,\r\n                '' as column_name,\r\n                '' as table_schema,\r\n                '' as table_name\r\n            FROM information_schema.key_column_usage as x\r\n                 LEFT JOIN information_schema.referential_constraints as c on\r\n                         c.constraint_name = x.constraint_name and\r\n                         c.constraint_schema = x.constraint_schema\r\n                 LEFT JOIN information_schema.key_column_usage y on\r\n                         y.ordinal_position = x.position_in_unique_constraint and\r\n                         y.constraint_name = c.unique_constraint_name\r\n        \tWHERE concat(y.table_schema, '.', y.table_name) = _tabname and\r\n                  y.table_name is not null\r\n        ) as f\r\n       \r\n        ORDER BY \r\n        \tf.column_id) as pz\r\n         WHERE pz.title = _col;\r\n\r\n    \r\nEND;\r\n
227257	framework	fn_config_relation	framework.fn_config_relation(_id  int4,_relation out varchar)	FOR CONFIG RELATION COLUMN	2020-05-21 11:31:02.195905	1	f	fn_config_relation(_id  int4,_relation out varchar)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_config_relation(_id  int4,_relation out varchar) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_config_relation(_id integer, OUT _relation character varying)\n RETURNS character varying\n LANGUAGE plpgsql\nAS $function$\r\n/*DECLARE\r\n  variable_name datatype;*/\r\nBEGIN\r\n\t-- FOR CONFIG RELATION COLUMN\r\n\t\r\n    SELECT\r\n    \tCASE WHEN \r\n        \tc.type like '%_api'\r\n        THEN\r\n        \tc.select_api\r\n        WHEN c.type like 'multi%' and \r\n        \t c.type not like '%_api'\r\n        THEN\r\n        \tc.multiselecttable\r\n        ELSE\r\n          COALESCE(\r\n            c.relation,c.select_api,c.multiselecttable\r\n          )\r\n        END\r\n    FROM framework.config as c\r\n    WHERE c.id = _id\r\n    INTO _relation;\r\n\r\n\r\nEND;\r\n$function$\n	[{"argname":"_id","argmode":"input","argtype":"int4"},{"argname":"_relation","argmode":"output","argtype":"varchar"}]	varchar	\r\n/*DECLARE\r\n  variable_name datatype;*/\r\nBEGIN\r\n\t-- FOR CONFIG RELATION COLUMN\r\n\t\r\n    SELECT\r\n    \tCASE WHEN \r\n        \tc.type like '%_api'\r\n        THEN\r\n        \tc.select_api\r\n        WHEN c.type like 'multi%' and \r\n        \t c.type not like '%_api'\r\n        THEN\r\n        \tc.multiselecttable\r\n        ELSE\r\n          COALESCE(\r\n            c.relation,c.select_api,c.multiselecttable\r\n          )\r\n        END\r\n    FROM framework.config as c\r\n    WHERE c.id = _id\r\n    INTO _relation;\r\n\r\n\r\nEND;\r\n
227258	framework	fn_config_relationcolumns	framework.fn_config_relationcolumns(_id  int4,relation_columns out varchar)	FOR CONFIG RELATIONCOLUMNS COLUMN	2020-05-21 11:31:02.195905	1	f	fn_config_relationcolumns(_id  int4,relation_columns out varchar)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_config_relationcolumns(_id  int4,relation_columns out varchar) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_config_relationcolumns(_id integer, OUT relation_columns character varying)\n RETURNS character varying\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE \r\n\t_relationcolums JSON;\r\n    _multicolums JSON;\r\n    \r\nBEGIN\r\n\t-- FOR CONFIG RELATIONCOLUMNS COLUMN\r\n\r\n\tSELECT\r\n    \tc.relationcolums,\r\n        c.multicolums\r\n    FROM framework.config as c\r\n    WHERE c.id = _id\r\n    INTO _relationcolums, _multicolums;\r\n    \r\n    IF coalesce(_relationcolums::varchar,'[]') <> '[]'\r\n    THEN\r\n    \tSELECT\r\n        \tstring_agg((value->>'label'),', ')\r\n        FROM json_array_elements(_relationcolums)\r\n        INTO relation_columns;\r\n    ELSE\r\n    \tIF coalesce(_multicolums::varchar,'[]') <> '[]'\r\n        THEN\r\n          SELECT\r\n              string_agg((value->>'label'),', ')\r\n          FROM json_array_elements(_multicolums)\r\n          INTO relation_columns;\r\n        END IF;\r\n    END IF;\r\n\r\nEND;\r\n$function$\n	[{"argname":"_id","argmode":"input","argtype":"int4"},{"argname":"relation_columns","argmode":"output","argtype":"varchar"}]	varchar	\r\nDECLARE \r\n\t_relationcolums JSON;\r\n    _multicolums JSON;\r\n    \r\nBEGIN\r\n\t-- FOR CONFIG RELATIONCOLUMNS COLUMN\r\n\r\n\tSELECT\r\n    \tc.relationcolums,\r\n        c.multicolums\r\n    FROM framework.config as c\r\n    WHERE c.id = _id\r\n    INTO _relationcolums, _multicolums;\r\n    \r\n    IF coalesce(_relationcolums::varchar,'[]') <> '[]'\r\n    THEN\r\n    \tSELECT\r\n        \tstring_agg((value->>'label'),', ')\r\n        FROM json_array_elements(_relationcolums)\r\n        INTO relation_columns;\r\n    ELSE\r\n    \tIF coalesce(_multicolums::varchar,'[]') <> '[]'\r\n        THEN\r\n          SELECT\r\n              string_agg((value->>'label'),', ')\r\n          FROM json_array_elements(_multicolums)\r\n          INTO relation_columns;\r\n        END IF;\r\n    END IF;\r\n\r\nEND;\r\n
227261	framework	fn_config_to_json	framework.fn_config_to_json(_viewid  int4,_config out json)	CONFIG FROM TABLE TO JSON BY VIEW ID	2020-05-21 11:31:02.195905	1	f	fn_config_to_json(_viewid  int4,_config out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_config_to_json(_viewid  int4,_config out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_config_to_json(_viewid integer, OUT _config json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\t-- CONFIG FROM TABLE TO JSON BY VIEW ID\r\n\r\n  SELECT\r\n     array_to_json(array_agg(row_to_json(d)))\r\n  FROM\r\n      (SELECT \r\n      \tc.id,\r\n        concat(c.col,'_',c.id::varchar) as key,\r\n        c.col,\r\n        c.title,\r\n        c.column_id,\r\n        c.classname,\r\n        c.depency,\r\n        c.depencycol,\r\n        c.relcol,\r\n        c.column_order,\r\n        c."join",\r\n        c.updatable,\r\n        c.required,\r\n        c.orderby,\r\n        c.orderbydesc,\r\n        c.related,\r\n        c."table",\r\n        c.width,\r\n        c.visible,\r\n        c."type",\r\n        c.multiselecttable,\r\n        c.editable,\r\n        c.tpath,\r\n        c.relation,\r\n        CASE WHEN c.fn is not null\r\n        THEN\r\n        \tjson_build_object('value', c.fn, 'label', c.fn, 'functype', f.functype) \r\n        ELSE \r\n        \tnull\r\n        END as fn,\r\n        c.select_api,\r\n        c.t,\r\n        c.relatecolumn,\r\n        c.roles,\r\n        COALESCE((\r\n         SELECT\r\n            array_to_json(array_agg(row_to_json(d)))\r\n          FROM(\r\n           SELECT\r\n            value as label,\r\n            value as value\r\n           FROM json_array_elements_text(c.relationcolums) as r\r\n\t\t\t) as d\r\n         ),'[]') as relationcolums,\r\n         (SELECT\r\n          \tarray_to_json(array_agg(row_to_json(d)))\r\n          FROM\r\n           (SELECT\r\n                m.value::varchar as value, \r\n                m.value::varchar as label\r\n            FROM json_array_elements_text(c.multicolums) as m) as d) as multicolums,\r\n          CASE WHEN c.fn is not null\r\n          THEN\r\n          COALESCE((\r\n            SELECT\r\n              array_to_json(array_agg(row_to_json(d)))\r\n            FROM\r\n              (\r\n                SELECT * FROM (\r\n                  SELECT (\r\n                        CASE \r\n                        WHEN value::varchar not in ('_userid_', '_orgid_', '_orgs_') \r\n                        THEN cc.col \r\n                        ELSE value::varchar\r\n                        END \r\n                      ) as label, (\r\n                        CASE \r\n                        WHEN value::varchar not in ('_userid_', '_orgid_', '_orgs_') \r\n                        THEN cc.title\r\n                        ELSE value::varchar\r\n                        END \r\n                      ) as value, (\r\n                        CASE \r\n                        WHEN value::varchar not in ('_userid_', '_orgid_', '_orgs_') \r\n                        THEN concat(cc.col,'_',cc.id::varchar)\r\n                        ELSE value::varchar\r\n                        END \r\n                      ) as key,\r\n                      CASE WHEN cc.related THEN cc.t\r\n                      ELSE '1'\r\n                      END as t\r\n                  FROM (\r\n                    SELECT\r\n                        row_number() over (order by 0) as r,\r\n                        value as value\r\n                    FROM json_array_elements_text(c.fncolumns) as f \r\n                    --WHERE value::varchar not in ('_userid_', '_orgid_', '_orgs_')\r\n                ) as  ff\r\n                    LEFT JOIN framework.config as cc on cc.viewid = _viewid and cc.id::varchar = ff.value::varchar\r\n                ORDER BY ff.r ) as dd\r\n              \r\n                             \r\n               /* SELECT\r\n                    cc.col as label,\r\n                    cc.title as value,\r\n                    concat(cc.col,'_',cc.id::varchar) as key,\r\n                    CASE WHEN cc.related THEN cc.t\r\n                    ELSE '1'\r\n                    END as t\r\n                FROM json_array_elements_text(c.fncolumns) as ff\r\n                    LEFT JOIN framework.config as cc on cc.viewid = _viewid and cc.title = ff.value::varchar*/\r\n              ) as d),'[]')\r\n          ELSE\r\n          \tnull\r\n          END as fncolumns,\r\n              \r\n          (SELECT\r\n            array_to_json(array_agg(row_to_json(d)))\r\n           FROM\r\n           (\r\n            SELECT \r\n                json_build_object('label',df.act,'value',df.act) as act,\r\n                json_build_object('label',df.bool,'value',df.bool) as bool,\r\n                df.value\r\n            FROM framework.defaultval as df\r\n            WHERE df.configid = c.id) as d) as defaultval,\r\n          (SELECT\r\n            array_to_json(array_agg(row_to_json(d)))\r\n           FROM\r\n            (\r\n            SELECT\r\n                vs.value,\r\n                json_build_object('value',op.value,'js',op.js) as operation,\r\n                json_build_object(\r\n                    'value',cc.title,\r\n                    'label',cc.title,\r\n                    't', cc.t,\r\n                    'key',concat(cc.col,'_',cc.id::varchar)\r\n                ) as col\r\n            FROM framework.visible_condition as vs\r\n                LEFT JOIN framework.operations as op on op.value = vs.operation\r\n                LEFT JOIN framework.config as cc on /*cc.viewid = _viewid and*/ cc.id = vs.val_desc\r\n            WHERE vs.configid = c.id\r\n            ) as d) as visible_condition,\r\n          (SELECT\r\n            array_to_json(array_agg(row_to_json(d)))\r\n           FROM\r\n            (SELECT\r\n                  json_build_object('label',sc.col,'value', sc.col) as col,\r\n                  sc.const,\r\n                  json_build_object(\r\n                      'value', op.value,\r\n                      'js', op.js,\r\n                      'python', op.python,\r\n                      'sql', op.sql\r\n                  ) as operation,\r\n                  json_build_object(\r\n                      'value',cc.title,\r\n                      'label',cc.title,\r\n                      't', cc.t,\r\n                      'key',concat(cc.col,'_',cc.id::varchar)\r\n                  ) as value\r\n              FROM framework.select_condition as sc\r\n                  LEFT JOIN framework.operations as op on op.value = sc.operation\r\n                  LEFT JOIN framework.config as cc on cc.viewid = _viewid and cc.id = sc.val_desc\r\n              WHERE sc.configid = c.id      \r\n            ) as d) as select_condition \r\n  FROM framework.config as c\r\n    LEFT JOIN framework.functions as f on f.funcname = c.fn\r\n  WHERE c.viewid = _viewid\r\n  ORDER BY c.column_order) as d\r\n  INTO _config;\r\n  \r\n  _config = COALESCE(_config,'[]');\r\nEND;\r\n$function$\n	[{"argname":"_viewid","argmode":"input","argtype":"int4"},{"argname":"_config","argmode":"output","argtype":"json"}]	json	\r\nBEGIN\r\n\t-- CONFIG FROM TABLE TO JSON BY VIEW ID\r\n\r\n  SELECT\r\n     array_to_json(array_agg(row_to_json(d)))\r\n  FROM\r\n      (SELECT \r\n      \tc.id,\r\n        concat(c.col,'_',c.id::varchar) as key,\r\n        c.col,\r\n        c.title,\r\n        c.column_id,\r\n        c.classname,\r\n        c.depency,\r\n        c.depencycol,\r\n        c.relcol,\r\n        c.column_order,\r\n        c."join",\r\n        c.updatable,\r\n        c.required,\r\n        c.orderby,\r\n        c.orderbydesc,\r\n        c.related,\r\n        c."table",\r\n        c.width,\r\n        c.visible,\r\n        c."type",\r\n        c.multiselecttable,\r\n        c.editable,\r\n        c.tpath,\r\n        c.relation,\r\n        CASE WHEN c.fn is not null\r\n        THEN\r\n        \tjson_build_object('value', c.fn, 'label', c.fn, 'functype', f.functype) \r\n        ELSE \r\n        \tnull\r\n        END as fn,\r\n        c.select_api,\r\n        c.t,\r\n        c.relatecolumn,\r\n        c.roles,\r\n        COALESCE((\r\n         SELECT\r\n            array_to_json(array_agg(row_to_json(d)))\r\n          FROM(\r\n           SELECT\r\n            value as label,\r\n            value as value\r\n           FROM json_array_elements_text(c.relationcolums) as r\r\n\t\t\t) as d\r\n         ),'[]') as relationcolums,\r\n         (SELECT\r\n          \tarray_to_json(array_agg(row_to_json(d)))\r\n          FROM\r\n           (SELECT\r\n                m.value::varchar as value, \r\n                m.value::varchar as label\r\n            FROM json_array_elements_text(c.multicolums) as m) as d) as multicolums,\r\n          CASE WHEN c.fn is not null\r\n          THEN\r\n          COALESCE((\r\n            SELECT\r\n              array_to_json(array_agg(row_to_json(d)))\r\n            FROM\r\n              (\r\n                SELECT * FROM (\r\n                  SELECT (\r\n                        CASE \r\n                        WHEN value::varchar not in ('_userid_', '_orgid_', '_orgs_') \r\n                        THEN cc.col \r\n                        ELSE value::varchar\r\n                        END \r\n                      ) as label, (\r\n                        CASE \r\n                        WHEN value::varchar not in ('_userid_', '_orgid_', '_orgs_') \r\n                        THEN cc.title\r\n                        ELSE value::varchar\r\n                        END \r\n                      ) as value, (\r\n                        CASE \r\n                        WHEN value::varchar not in ('_userid_', '_orgid_', '_orgs_') \r\n                        THEN concat(cc.col,'_',cc.id::varchar)\r\n                        ELSE value::varchar\r\n                        END \r\n                      ) as key,\r\n                      CASE WHEN cc.related THEN cc.t\r\n                      ELSE '1'\r\n                      END as t\r\n                  FROM (\r\n                    SELECT\r\n                        row_number() over (order by 0) as r,\r\n                        value as value\r\n                    FROM json_array_elements_text(c.fncolumns) as f \r\n                    --WHERE value::varchar not in ('_userid_', '_orgid_', '_orgs_')\r\n                ) as  ff\r\n                    LEFT JOIN framework.config as cc on cc.viewid = _viewid and cc.id::varchar = ff.value::varchar\r\n                ORDER BY ff.r ) as dd\r\n              \r\n                             \r\n               /* SELECT\r\n                    cc.col as label,\r\n                    cc.title as value,\r\n                    concat(cc.col,'_',cc.id::varchar) as key,\r\n                    CASE WHEN cc.related THEN cc.t\r\n                    ELSE '1'\r\n                    END as t\r\n                FROM json_array_elements_text(c.fncolumns) as ff\r\n                    LEFT JOIN framework.config as cc on cc.viewid = _viewid and cc.title = ff.value::varchar*/\r\n              ) as d),'[]')\r\n          ELSE\r\n          \tnull\r\n          END as fncolumns,\r\n              \r\n          (SELECT\r\n            array_to_json(array_agg(row_to_json(d)))\r\n           FROM\r\n           (\r\n            SELECT \r\n                json_build_object('label',df.act,'value',df.act) as act,\r\n                json_build_object('label',df.bool,'value',df.bool) as bool,\r\n                df.value\r\n            FROM framework.defaultval as df\r\n            WHERE df.configid = c.id) as d) as defaultval,\r\n          (SELECT\r\n            array_to_json(array_agg(row_to_json(d)))\r\n           FROM\r\n            (\r\n            SELECT\r\n                vs.value,\r\n                json_build_object('value',op.value,'js',op.js) as operation,\r\n                json_build_object(\r\n                    'value',cc.title,\r\n                    'label',cc.title,\r\n                    't', cc.t,\r\n                    'key',concat(cc.col,'_',cc.id::varchar)\r\n                ) as col\r\n            FROM framework.visible_condition as vs\r\n                LEFT JOIN framework.operations as op on op.value = vs.operation\r\n                LEFT JOIN framework.config as cc on /*cc.viewid = _viewid and*/ cc.id = vs.val_desc\r\n            WHERE vs.configid = c.id\r\n            ) as d) as visible_condition,\r\n          (SELECT\r\n            array_to_json(array_agg(row_to_json(d)))\r\n           FROM\r\n            (SELECT\r\n                  json_build_object('label',sc.col,'value', sc.col) as col,\r\n                  sc.const,\r\n                  json_build_object(\r\n                      'value', op.value,\r\n                      'js', op.js,\r\n                      'python', op.python,\r\n                      'sql', op.sql\r\n                  ) as operation,\r\n                  json_build_object(\r\n                      'value',cc.title,\r\n                      'label',cc.title,\r\n                      't', cc.t,\r\n                      'key',concat(cc.col,'_',cc.id::varchar)\r\n                  ) as value\r\n              FROM framework.select_condition as sc\r\n                  LEFT JOIN framework.operations as op on op.value = sc.operation\r\n                  LEFT JOIN framework.config as cc on cc.viewid = _viewid and cc.id = sc.val_desc\r\n              WHERE sc.configid = c.id      \r\n            ) as d) as select_condition \r\n  FROM framework.config as c\r\n    LEFT JOIN framework.functions as f on f.funcname = c.fn\r\n  WHERE c.viewid = _viewid\r\n  ORDER BY c.column_order) as d\r\n  INTO _config;\r\n  \r\n  _config = COALESCE(_config,'[]');\r\nEND;\r\n
227262	framework	fn_configsettings_selectapi	framework.fn_configsettings_selectapi(insjon  json,outjson out json)	SELECT CONFIG SETTINGS DIC	2020-05-21 11:31:02.195905	1	f	fn_configsettings_selectapi(insjon  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_configsettings_selectapi(insjon  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_configsettings_selectapi(insjon json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\t-- SELECT CONFIG SETTINGS DIC\r\n\tSELECT\r\n    \tarray_to_json(array_agg(row_to_json(d)))\r\n    FROM (\r\n\t  SELECT\r\n\t\t  c.sname as label,\r\n\t\t  c.sname as value\r\n\t  FROM framework.configsettings as c\r\n\t) as d\r\n    INTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\n    \r\n\r\n\r\nEND;\r\n$function$\n	[{"argname":"insjon","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nBEGIN\r\n\t-- SELECT CONFIG SETTINGS DIC\r\n\tSELECT\r\n    \tarray_to_json(array_agg(row_to_json(d)))\r\n    FROM (\r\n\t  SELECT\r\n\t\t  c.sname as label,\r\n\t\t  c.sname as value\r\n\t  FROM framework.configsettings as c\r\n\t) as d\r\n    INTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\n    \r\n\r\n\r\nEND;\r\n
227263	framework	fn_copyview	framework.fn_copyview(injson  json,_newid out int4)	COPY VIEW 	2020-05-21 11:31:02.195905	1	f	fn_copyview(injson  json,_newid out int4)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_copyview(injson  json,_newid out int4) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_copyview(injson json, OUT _newid integer)\n RETURNS integer\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n\t_id int;  \r\n    _title varchar(150);\r\n    _path varchar(150);\r\nBEGIN\r\n\t-- COPY VIEW \r\n\r\n\r\n\t_id = injson->>'id';\r\n    \r\n    SELECT \r\n    \tv.title,\r\n        v."path"\r\n    FROM framework.views as v\r\n    WHERE v.id = _id\r\n    INTO _title, _path;\r\n    \r\n    _newid = nextval('framework.views_id_seq'::regclass);\r\n    \r\n    _title = concat(_title,'_copy_',_newid);\r\n    _path = concat(_path,'_copy_',_newid);\r\n    \r\n    INSERT INTO framework.views (\r\n      id, title, descr, tablename,\r\n      viewtype, pagination, config,\r\n      "path", groupby, filters,\r\n      acts, roles, classname,\r\n      orderby, ispagesize, pagecount,\r\n      foundcount, subscrible, checker,\r\n      "copy"\r\n    )\r\n    SELECT \r\n    \t_newid, _title, descr, tablename,\r\n        viewtype, pagination, config,\r\n        _path, groupby, filters,\r\n        acts, roles, classname,\r\n        orderby, ispagesize, pagecount, \r\n        foundcount, subscrible, checker,\r\n        true \r\n    FROM framework.views  \r\n    WHERE id = _id;\r\n    \r\n    \r\n    INSERT INTO framework.config (\r\n      viewid, t, col, column_id,\r\n      title, type, roles,\r\n      visible, required, width,\r\n      "join", classname, updatable,\r\n      relation, select_api, multiselecttable,\r\n      orderby, orderbydesc, relcol,\r\n      depency, relationcolums, multicolums,\r\n      depencycol, column_order, fn,\r\n      fncolumns, relatecolumn, "table",\r\n      related, tpath, copy\r\n   )\r\n   SELECT\r\n      _newid, t, col, column_id,\r\n      title, type, roles,\r\n      visible, required, width,\r\n      "join", classname, updatable,\r\n      relation, select_api, multiselecttable,\r\n      orderby, orderbydesc, relcol,\r\n      depency, relationcolums, multicolums,\r\n      depencycol, column_order, fn,\r\n      fncolumns, relatecolumn, "table" ,\r\n      related, tpath, true\r\n   FROM framework.config\r\n   WHERE viewid =_id and fn is null;\r\n   \r\n    INSERT INTO framework.config (\r\n      viewid, t, col, column_id,\r\n      title, type, roles,\r\n      visible, required, width,\r\n      "join", classname, updatable,\r\n      relation, select_api, multiselecttable,\r\n      orderby, orderbydesc, relcol,\r\n      depency, relationcolums, multicolums,\r\n      depencycol, column_order, fn,\r\n      fncolumns, relatecolumn, "table",\r\n      related, tpath, copy\r\n   )\r\n   SELECT\r\n      _newid, cv.t, cv.col, cv.column_id,\r\n      cv.title, cv.type, cv.roles,\r\n      cv.visible, cv.required, cv.width,\r\n      cv."join", cv.classname, cv.updatable,\r\n      cv.relation, cv.select_api, cv.multiselecttable,\r\n      cv.orderby, cv.orderbydesc, cv.relcol,\r\n      cv.depency, cv.relationcolums, cv.multicolums,\r\n      cv.depencycol, cv.column_order, cv.fn, (array_to_json(ARRAY(\r\n        SELECT cc.id\r\n        FROM framework.config as cc  \r\n            JOIN framework.config as c on c.viewid = _id and cc.title = c.title\r\n            JOIN json_array_elements_text(cv.fncolumns) as j on j.value::varchar::int = c.id \r\n        WHERE  cc.viewid = _newid \r\n      ))), cv.relatecolumn, cv."table" ,\r\n      cv.related, cv.tpath, true\r\n   FROM framework.config as cv\r\n   WHERE cv.viewid =_id and cv.fn is not null;\r\n  \r\n   INSERT INTO framework.visible_condition (\r\n    configid,\r\n    val_desc,\r\n    col, title,\r\n    operation, value \r\n  ) \r\n  SELECT\r\n    cc.id,\r\n    (\r\n     SELECT \r\n     \tcccc.id\r\n     FROM framework.config as ccc \r\n     JOIN framework.config as cccc on cccc.viewid = _newid and cccc.title = ccc.title\r\n     WHERE  ccc.id = vs.val_desc\r\n    ),\r\n    vs.col, vs.title,\r\n    vs.operation, vs.value \r\n  FROM framework.visible_condition as vs\r\n  \tJOIN framework.config as c on c.viewid = _id and c.id = vs.configid\r\n    JOIN framework.config as cc on cc.viewid = _newid and cc.title = c.title;\r\n    \r\n  INSERT INTO framework.select_condition (\r\n    configid, col,\r\n    operation, const,\r\n    value, val_desc \r\n  )\r\n  SELECT\r\n  \tDISTINCT\r\n    cc.id, sc.col,\r\n    sc.operation, sc.const,\r\n    sc.value, sc.val_desc \r\n  FROM framework.select_condition as sc\r\n  \tJOIN framework.config as c on c.viewid = _id and c.id = sc.configid\r\n    JOIN framework.config as cc on cc.viewid = _newid and cc.title = c.title;\r\n  \r\n  \r\n  INSERT INTO framework.defaultval (\r\n    configid, bool,\r\n    act, value \r\n  )\r\n  SELECT \r\n  \tDISTINCT\r\n      cc.id, df.bool,\r\n      df.act, df.value \r\n  FROM framework.defaultval as df\r\n      JOIN framework.config as c on c.viewid = _id and c.id = df.configid\r\n      JOIN framework.config as cc on cc.viewid = _newid and cc.title = c.title;\r\n    \r\n  \r\n  INSERT INTO framework.actions (\r\n    column_order, title,viewid,\r\n    icon,classname, act_url, api_method,\r\n    api_type, refresh_data, ask_confirm,\r\n    roles, forevery, main_action, act_type\r\n  ) \r\n  SELECT\r\n    a.column_order, a.title,_newid,\r\n    a.icon, a.classname, a.act_url, a.api_method,\r\n    a.api_type, a.refresh_data, a.ask_confirm,\r\n    a.roles, a.forevery,\r\n    a.main_action,\r\n    a.act_type\r\n  FROM framework.actions as a\r\n  WHERE a.viewid = _id;\r\n  \r\n  INSERT INTO framework.act_visible_condions (\r\n    actionid, val_desc, col,\r\n    title, operation, value\r\n  ) \r\n  SELECT\r\n  \tDISTINCT\r\n    ac2.id, a.val_desc, a.col,\r\n    a.title, a.operation, a.value\r\n  FROM framework.act_visible_condions as a\r\n  \tJOIN framework.actions as ac on ac.id = a.actionid and ac.viewid = _id\r\n    JOIN framework.actions as ac2 on ac2.viewid = _newid and ac2.title = ac.title;\r\n  \r\n  INSERT INTO framework.act_parametrs (\r\n    actionid, paramtitle, paramt,\r\n    paramconst, paraminput, paramcolumn,\r\n    val_desc, query_type\r\n  )\r\n  SELECT\r\n  \tDISTINCT\r\n  \tac2.id, paramtitle, paramt,\r\n    paramconst, paraminput, paramcolumn,\r\n    val_desc, query_type\r\n  FROM framework.act_parametrs as a\r\n  \tJOIN framework.actions as ac on ac.id = a.actionid and ac.viewid = _id\r\n    JOIN framework.actions as ac2 on ac2.viewid = _newid and ac2.title = ac.title;\r\n  \r\n  INSERT INTO framework.filters (\r\n    column_order, viewid, title,\r\n    type, classname, "column",\r\n    columns, roles, t, "table" \r\n  )\r\n  SELECT\r\n    column_order, _newid, title,\r\n    type, classname, "column",\r\n    columns, roles, t, "table" \r\n  FROM framework.filters\r\n  WHERE viewid = _id;\r\n  \r\n  UPDATE framework.views\r\n  SET copy = FALSE\r\n  WHERE id = _id;\r\n  \r\n  UPDATE framework.config\r\n  SET copy = FALSE\r\n  WHERE viewid = _id;\r\n  \r\n  UPDATE framework.config\r\n  SET copy = FALSE\r\n  WHERE viewid = _newid;\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"_newid","argmode":"output","argtype":"int4"}]	int4	\r\nDECLARE\r\n\t_id int;  \r\n    _title varchar(150);\r\n    _path varchar(150);\r\nBEGIN\r\n\t-- COPY VIEW \r\n\r\n\r\n\t_id = injson->>'id';\r\n    \r\n    SELECT \r\n    \tv.title,\r\n        v."path"\r\n    FROM framework.views as v\r\n    WHERE v.id = _id\r\n    INTO _title, _path;\r\n    \r\n    _newid = nextval('framework.views_id_seq'::regclass);\r\n    \r\n    _title = concat(_title,'_copy_',_newid);\r\n    _path = concat(_path,'_copy_',_newid);\r\n    \r\n    INSERT INTO framework.views (\r\n      id, title, descr, tablename,\r\n      viewtype, pagination, config,\r\n      "path", groupby, filters,\r\n      acts, roles, classname,\r\n      orderby, ispagesize, pagecount,\r\n      foundcount, subscrible, checker,\r\n      "copy"\r\n    )\r\n    SELECT \r\n    \t_newid, _title, descr, tablename,\r\n        viewtype, pagination, config,\r\n        _path, groupby, filters,\r\n        acts, roles, classname,\r\n        orderby, ispagesize, pagecount, \r\n        foundcount, subscrible, checker,\r\n        true \r\n    FROM framework.views  \r\n    WHERE id = _id;\r\n    \r\n    \r\n    INSERT INTO framework.config (\r\n      viewid, t, col, column_id,\r\n      title, type, roles,\r\n      visible, required, width,\r\n      "join", classname, updatable,\r\n      relation, select_api, multiselecttable,\r\n      orderby, orderbydesc, relcol,\r\n      depency, relationcolums, multicolums,\r\n      depencycol, column_order, fn,\r\n      fncolumns, relatecolumn, "table",\r\n      related, tpath, copy\r\n   )\r\n   SELECT\r\n      _newid, t, col, column_id,\r\n      title, type, roles,\r\n      visible, required, width,\r\n      "join", classname, updatable,\r\n      relation, select_api, multiselecttable,\r\n      orderby, orderbydesc, relcol,\r\n      depency, relationcolums, multicolums,\r\n      depencycol, column_order, fn,\r\n      fncolumns, relatecolumn, "table" ,\r\n      related, tpath, true\r\n   FROM framework.config\r\n   WHERE viewid =_id and fn is null;\r\n   \r\n    INSERT INTO framework.config (\r\n      viewid, t, col, column_id,\r\n      title, type, roles,\r\n      visible, required, width,\r\n      "join", classname, updatable,\r\n      relation, select_api, multiselecttable,\r\n      orderby, orderbydesc, relcol,\r\n      depency, relationcolums, multicolums,\r\n      depencycol, column_order, fn,\r\n      fncolumns, relatecolumn, "table",\r\n      related, tpath, copy\r\n   )\r\n   SELECT\r\n      _newid, cv.t, cv.col, cv.column_id,\r\n      cv.title, cv.type, cv.roles,\r\n      cv.visible, cv.required, cv.width,\r\n      cv."join", cv.classname, cv.updatable,\r\n      cv.relation, cv.select_api, cv.multiselecttable,\r\n      cv.orderby, cv.orderbydesc, cv.relcol,\r\n      cv.depency, cv.relationcolums, cv.multicolums,\r\n      cv.depencycol, cv.column_order, cv.fn, (array_to_json(ARRAY(\r\n        SELECT cc.id\r\n        FROM framework.config as cc  \r\n            JOIN framework.config as c on c.viewid = _id and cc.title = c.title\r\n            JOIN json_array_elements_text(cv.fncolumns) as j on j.value::varchar::int = c.id \r\n        WHERE  cc.viewid = _newid \r\n      ))), cv.relatecolumn, cv."table" ,\r\n      cv.related, cv.tpath, true\r\n   FROM framework.config as cv\r\n   WHERE cv.viewid =_id and cv.fn is not null;\r\n  \r\n   INSERT INTO framework.visible_condition (\r\n    configid,\r\n    val_desc,\r\n    col, title,\r\n    operation, value \r\n  ) \r\n  SELECT\r\n    cc.id,\r\n    (\r\n     SELECT \r\n     \tcccc.id\r\n     FROM framework.config as ccc \r\n     JOIN framework.config as cccc on cccc.viewid = _newid and cccc.title = ccc.title\r\n     WHERE  ccc.id = vs.val_desc\r\n    ),\r\n    vs.col, vs.title,\r\n    vs.operation, vs.value \r\n  FROM framework.visible_condition as vs\r\n  \tJOIN framework.config as c on c.viewid = _id and c.id = vs.configid\r\n    JOIN framework.config as cc on cc.viewid = _newid and cc.title = c.title;\r\n    \r\n  INSERT INTO framework.select_condition (\r\n    configid, col,\r\n    operation, const,\r\n    value, val_desc \r\n  )\r\n  SELECT\r\n  \tDISTINCT\r\n    cc.id, sc.col,\r\n    sc.operation, sc.const,\r\n    sc.value, sc.val_desc \r\n  FROM framework.select_condition as sc\r\n  \tJOIN framework.config as c on c.viewid = _id and c.id = sc.configid\r\n    JOIN framework.config as cc on cc.viewid = _newid and cc.title = c.title;\r\n  \r\n  \r\n  INSERT INTO framework.defaultval (\r\n    configid, bool,\r\n    act, value \r\n  )\r\n  SELECT \r\n  \tDISTINCT\r\n      cc.id, df.bool,\r\n      df.act, df.value \r\n  FROM framework.defaultval as df\r\n      JOIN framework.config as c on c.viewid = _id and c.id = df.configid\r\n      JOIN framework.config as cc on cc.viewid = _newid and cc.title = c.title;\r\n    \r\n  \r\n  INSERT INTO framework.actions (\r\n    column_order, title,viewid,\r\n    icon,classname, act_url, api_method,\r\n    api_type, refresh_data, ask_confirm,\r\n    roles, forevery, main_action, act_type\r\n  ) \r\n  SELECT\r\n    a.column_order, a.title,_newid,\r\n    a.icon, a.classname, a.act_url, a.api_method,\r\n    a.api_type, a.refresh_data, a.ask_confirm,\r\n    a.roles, a.forevery,\r\n    a.main_action,\r\n    a.act_type\r\n  FROM framework.actions as a\r\n  WHERE a.viewid = _id;\r\n  \r\n  INSERT INTO framework.act_visible_condions (\r\n    actionid, val_desc, col,\r\n    title, operation, value\r\n  ) \r\n  SELECT\r\n  \tDISTINCT\r\n    ac2.id, a.val_desc, a.col,\r\n    a.title, a.operation, a.value\r\n  FROM framework.act_visible_condions as a\r\n  \tJOIN framework.actions as ac on ac.id = a.actionid and ac.viewid = _id\r\n    JOIN framework.actions as ac2 on ac2.viewid = _newid and ac2.title = ac.title;\r\n  \r\n  INSERT INTO framework.act_parametrs (\r\n    actionid, paramtitle, paramt,\r\n    paramconst, paraminput, paramcolumn,\r\n    val_desc, query_type\r\n  )\r\n  SELECT\r\n  \tDISTINCT\r\n  \tac2.id, paramtitle, paramt,\r\n    paramconst, paraminput, paramcolumn,\r\n    val_desc, query_type\r\n  FROM framework.act_parametrs as a\r\n  \tJOIN framework.actions as ac on ac.id = a.actionid and ac.viewid = _id\r\n    JOIN framework.actions as ac2 on ac2.viewid = _newid and ac2.title = ac.title;\r\n  \r\n  INSERT INTO framework.filters (\r\n    column_order, viewid, title,\r\n    type, classname, "column",\r\n    columns, roles, t, "table" \r\n  )\r\n  SELECT\r\n    column_order, _newid, title,\r\n    type, classname, "column",\r\n    columns, roles, t, "table" \r\n  FROM framework.filters\r\n  WHERE viewid = _id;\r\n  \r\n  UPDATE framework.views\r\n  SET copy = FALSE\r\n  WHERE id = _id;\r\n  \r\n  UPDATE framework.config\r\n  SET copy = FALSE\r\n  WHERE viewid = _id;\r\n  \r\n  UPDATE framework.config\r\n  SET copy = FALSE\r\n  WHERE viewid = _newid;\r\nEND;\r\n
227265	framework	fn_createconfig	framework.fn_createconfig(injson  json,outjson out json)	CREATE VIEW's CONFIG	2020-05-21 11:31:02.195905	1	f	fn_createconfig(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_createconfig(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_createconfig(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  tabname varchar(350);\r\n\t_colname varchar(200);\r\nBEGIN\r\n\t-- CREATE VIEW's CONFIG\r\n\ttabname = injson->>'tabname';\r\n    --_colname = injson->>'colname';\r\n        \r\n    SELECT \r\n    \tarray_to_json(array_agg(row_to_json(d)))\r\n    FROM (\r\n    \tSELECT \r\n           ROW_NUMBER() OVER(order by f.column_id) as t,\r\n           f.*\r\n        FROM (\r\n        \tSELECT \r\n            \tDISTINCT \r\n            \tt.column_name as col,\r\n                coalesce(pgd.description, t.column_name)::varchar(300) as title,                         \r\n                'label' as type,\r\n                true as visible,\r\n                concat(\r\n                \tt.column_name,'_',\r\n                    SUBSTRING((uuid_in(md5(random()::text || now()::text)::cstring)::CHAR(36)),1,5)\r\n                ) as key,\r\n                (\r\n                \tSELECT \r\n                    \tconcat(y.table_schema, '.', y.table_name)\r\n                    FROM information_schema.table_constraints as c\r\n                    \tJOIN information_schema.key_column_usage AS x ON\r\n                        \tc.constraint_name = x.constraint_name and\r\n                            x.column_name = t.column_name\r\n                        JOIN information_schema.constraint_column_usage AS y ON \r\n                        \ty.constraint_name = c.constraint_name and\r\n                            y.constraint_schema = c.constraint_schema\r\n                    WHERE c.table_name = t.table_name and\r\n                          c.table_schema = t.table_schema and\r\n                          c.constraint_type = 'FOREIGN KEY'\r\n                    LIMIT 1\r\n                ) as relation,\r\n                (\r\n                \tSELECT \r\n                    \tconcat(y.column_name)\r\n                    FROM information_schema.table_constraints as c\r\n                    \tJOIN information_schema.key_column_usage AS x ON\r\n                             c.constraint_name = x.constraint_name and\r\n                             x.column_name = t.column_name\r\n                        JOIN information_schema.constraint_column_usage AS y ON \r\n                        \ty.constraint_name = c.constraint_name and\r\n                            y.constraint_schema = c.constraint_schema\r\n                    WHERE c.table_name = t.table_name and\r\n                     \t  c.table_schema = t.table_schema and\r\n                          c.constraint_type = 'FOREIGN KEY'\r\n                    LIMIT 1\r\n                ) as relcol,\r\n                '[]' as relationcolums,\r\n                false as "join",\r\n                false as onetomany,\r\n                false as required,\r\n                null as defaultval,\r\n                '' as width,\r\n                t.ordinal_position as column_id,\r\n                false as depency,\r\n                null as depencycol,\r\n                '[]' as roles,\r\n                '' as classname\r\n            FROM information_schema.columns as t\r\n            \tLEFT JOIN pg_catalog.pg_statio_all_tables as st on\r\n                         st.schemaname = t.table_schema and st.relname =\r\n                         t.table_name\r\n            \tLEFT JOIN pg_catalog.pg_description pgd on pgd.objoid =\r\n                         st.relid and pgd.objsubid = t.ordinal_position\r\n            WHERE concat(t.table_schema, '.', t.table_name) = tabname\r\n            \t--AND coalesce(pgd.description, t.column_name) = COALESCE(_colname, coalesce(pgd.description, t.column_name))\r\n           /* UNION ALL\r\n            SELECT \r\n            \tx.table_name as col,       \r\n                x.table_name as title,\r\n                'array' as type,\r\n                false as visible,\r\n                concat(\r\n                \tx.table_name, '_',\r\n                    SUBSTRING((uuid_in(md5(random()::text || now()::text)::cstring)::CHAR(36)),1,5)\r\n                ) as key,\r\n                concat(x.table_schema, '.', x.table_name) as relation,\r\n                null as relcol,\r\n                '[]' as relationcolums,\r\n                false as join,\r\n                true as onetomany,\r\n                false as required,\r\n                null as defaultval,\r\n                '' as width,\r\n                (\r\n                 \tSELECT count(t.*)\r\n                    FROM information_schema.columns as t\r\n                    WHERE concat(t.table_schema, '.', t.table_name) = tabname\r\n                ) + 1 as column_id,\r\n                true as depency,\r\n                x.column_name as depencycol,\r\n                '[]' as roles,\r\n                '' as classname\r\n            FROM information_schema.key_column_usage as x\r\n                 LEFT JOIN information_schema.referential_constraints as c on\r\n                         c.constraint_name = x.constraint_name and\r\n                         c.constraint_schema = x.constraint_schema\r\n                 LEFT JOIN information_schema.key_column_usage y on\r\n                         y.ordinal_position = x.position_in_unique_constraint and\r\n                         y.constraint_name = c.unique_constraint_name\r\n        \tWHERE concat(y.table_schema, '.', y.table_name) = tabname and\r\n                  y.table_name is not null*/\r\n        ) as f\r\n        ORDER BY \r\n        \tf.column_id,\r\n        \trelation\r\n    ) as d\r\n    INTO outjson;\r\n \t\r\n    outjson = coalesce(outjson,'[]');\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  tabname varchar(350);\r\n\t_colname varchar(200);\r\nBEGIN\r\n\t-- CREATE VIEW's CONFIG\r\n\ttabname = injson->>'tabname';\r\n    --_colname = injson->>'colname';\r\n        \r\n    SELECT \r\n    \tarray_to_json(array_agg(row_to_json(d)))\r\n    FROM (\r\n    \tSELECT \r\n           ROW_NUMBER() OVER(order by f.column_id) as t,\r\n           f.*\r\n        FROM (\r\n        \tSELECT \r\n            \tDISTINCT \r\n            \tt.column_name as col,\r\n                coalesce(pgd.description, t.column_name)::varchar(300) as title,                         \r\n                'label' as type,\r\n                true as visible,\r\n                concat(\r\n                \tt.column_name,'_',\r\n                    SUBSTRING((uuid_in(md5(random()::text || now()::text)::cstring)::CHAR(36)),1,5)\r\n                ) as key,\r\n                (\r\n                \tSELECT \r\n                    \tconcat(y.table_schema, '.', y.table_name)\r\n                    FROM information_schema.table_constraints as c\r\n                    \tJOIN information_schema.key_column_usage AS x ON\r\n                        \tc.constraint_name = x.constraint_name and\r\n                            x.column_name = t.column_name\r\n                        JOIN information_schema.constraint_column_usage AS y ON \r\n                        \ty.constraint_name = c.constraint_name and\r\n                            y.constraint_schema = c.constraint_schema\r\n                    WHERE c.table_name = t.table_name and\r\n                          c.table_schema = t.table_schema and\r\n                          c.constraint_type = 'FOREIGN KEY'\r\n                    LIMIT 1\r\n                ) as relation,\r\n                (\r\n                \tSELECT \r\n                    \tconcat(y.column_name)\r\n                    FROM information_schema.table_constraints as c\r\n                    \tJOIN information_schema.key_column_usage AS x ON\r\n                             c.constraint_name = x.constraint_name and\r\n                             x.column_name = t.column_name\r\n                        JOIN information_schema.constraint_column_usage AS y ON \r\n                        \ty.constraint_name = c.constraint_name and\r\n                            y.constraint_schema = c.constraint_schema\r\n                    WHERE c.table_name = t.table_name and\r\n                     \t  c.table_schema = t.table_schema and\r\n                          c.constraint_type = 'FOREIGN KEY'\r\n                    LIMIT 1\r\n                ) as relcol,\r\n                '[]' as relationcolums,\r\n                false as "join",\r\n                false as onetomany,\r\n                false as required,\r\n                null as defaultval,\r\n                '' as width,\r\n                t.ordinal_position as column_id,\r\n                false as depency,\r\n                null as depencycol,\r\n                '[]' as roles,\r\n                '' as classname\r\n            FROM information_schema.columns as t\r\n            \tLEFT JOIN pg_catalog.pg_statio_all_tables as st on\r\n                         st.schemaname = t.table_schema and st.relname =\r\n                         t.table_name\r\n            \tLEFT JOIN pg_catalog.pg_description pgd on pgd.objoid =\r\n                         st.relid and pgd.objsubid = t.ordinal_position\r\n            WHERE concat(t.table_schema, '.', t.table_name) = tabname\r\n            \t--AND coalesce(pgd.description, t.column_name) = COALESCE(_colname, coalesce(pgd.description, t.column_name))\r\n           /* UNION ALL\r\n            SELECT \r\n            \tx.table_name as col,       \r\n                x.table_name as title,\r\n                'array' as type,\r\n                false as visible,\r\n                concat(\r\n                \tx.table_name, '_',\r\n                    SUBSTRING((uuid_in(md5(random()::text || now()::text)::cstring)::CHAR(36)),1,5)\r\n                ) as key,\r\n                concat(x.table_schema, '.', x.table_name) as relation,\r\n                null as relcol,\r\n                '[]' as relationcolums,\r\n                false as join,\r\n                true as onetomany,\r\n                false as required,\r\n                null as defaultval,\r\n                '' as width,\r\n                (\r\n                 \tSELECT count(t.*)\r\n                    FROM information_schema.columns as t\r\n                    WHERE concat(t.table_schema, '.', t.table_name) = tabname\r\n                ) + 1 as column_id,\r\n                true as depency,\r\n                x.column_name as depencycol,\r\n                '[]' as roles,\r\n                '' as classname\r\n            FROM information_schema.key_column_usage as x\r\n                 LEFT JOIN information_schema.referential_constraints as c on\r\n                         c.constraint_name = x.constraint_name and\r\n                         c.constraint_schema = x.constraint_schema\r\n                 LEFT JOIN information_schema.key_column_usage y on\r\n                         y.ordinal_position = x.position_in_unique_constraint and\r\n                         y.constraint_name = c.unique_constraint_name\r\n        \tWHERE concat(y.table_schema, '.', y.table_name) = tabname and\r\n                  y.table_name is not null*/\r\n        ) as f\r\n        ORDER BY \r\n        \tf.column_id,\r\n        \trelation\r\n    ) as d\r\n    INTO outjson;\r\n \t\r\n    outjson = coalesce(outjson,'[]');\r\nEND;\r\n
227266	framework	fn_createconfig_new	framework.fn_createconfig_new(injson  json,outjson out json)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_createconfig_new(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_createconfig_new(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_createconfig_new(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  tabname varchar(350);\r\nBEGIN\r\n --dont used\r\n  tabname = injson->>'tabname';\r\n  SELECT array_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n         SELECT ROW_NUMBER() OVER(\r\n         order by f.column_id) as t,\r\n                  *,\r\n                  '[]'::JSON as relationcolums,\r\n                  '[]'::JSON as roles\r\n         FROM (\r\n                SELECT distinct t.column_name as col,\r\n                       substring(coalesce(pgd.description, t.column_name), 1, 62) as title,\r\n                       framework.fn_htmldatatype(t.data_type) as type,\r\n                       true as visible, \r\n                       (\r\n                         SELECT concat(y.table_schema, '.', y.table_name)\r\n                         FROM information_schema.table_constraints as c\r\n                              JOIN information_schema.key_column_usage AS x ON\r\n                                c.constraint_name = x.constraint_name and\r\n                                x.column_name = t.column_name\r\n                              JOIN information_schema.constraint_column_usage AS\r\n                                y ON y.constraint_name = c.constraint_name and\r\n                                y.column_name = t.column_name\r\n                         WHERE c.table_name = t.table_name and\r\n                               c.table_schema = t.table_schema and\r\n                               c.constraint_type = 'FOREIGN KEY'\r\n                         LIMIT 1\r\n                       ) as relation,\r\n                       (\r\n                         SELECT concat(y.column_name)\r\n                         FROM information_schema.table_constraints as c\r\n                              JOIN information_schema.key_column_usage AS x ON\r\n                                c.constraint_name = x.constraint_name and\r\n                                x.column_name = t.column_name\r\n                              JOIN information_schema.constraint_column_usage AS\r\n                                y ON y.constraint_name = c.constraint_name and\r\n                                y.column_name = t.column_name\r\n                         WHERE c.table_name = t.table_name and\r\n                               c.table_schema = t.table_schema and\r\n                               c.constraint_type = 'FOREIGN KEY'\r\n                         LIMIT 1\r\n                       ) as relcol,\r\n                       false as "join",\r\n                       false as onetomany,\r\n                       null as defaultval,\r\n                       ''                       as width,\r\n                       t.ordinal_position as column_id,\r\n                       false as depency,\r\n                       null as depencycol,\r\n                       ''                       as classname\r\n                FROM information_schema.columns as t\r\n                     left join pg_catalog.pg_statio_all_tables as st on\r\n                       st.schemaname = t.table_schema and st.relname =\r\n                       t.table_name\r\n                     left join pg_catalog.pg_description pgd on pgd.objoid =\r\n                       st.relid and pgd.objsubid = t.ordinal_position \r\n                WHERE concat(t.table_schema, '.', t.table_name) = tabname\r\n                UNION ALL\r\n                SELECT x.table_name as col,\r\n                       --,        \r\n                       x.table_name as title,\r\n                       'array'                       as type,\r\n                       false as visible,\r\n                       concat(x.table_schema, '.', x.table_name) as relation,\r\n                       null as relcol,\r\n                       --'[]'::JSON as relationcolums,\r\n                       false as join,\r\n                       true as onetomany,\r\n                       null as defaultval,\r\n                       ''                       as width,\r\n                       (\r\n                         SELECT count(t.*)\r\n                         FROM information_schema.columns as t\r\n                         WHERE concat(t.table_schema, '.', t.table_name) =\r\n                           tabname\r\n                       ) + 1 as column_id,\r\n                       true as depency,\r\n                       x.column_name as depencycol,\r\n                       --'[]'::JSON as roles,\r\n                       ''                       as classname\r\n                FROM information_schema.key_column_usage as x\r\n                     --  and t.column_name = x.column_name\r\n                     left join information_schema.referential_constraints as c\r\n                       on c.constraint_name = x.constraint_name and\r\n                       c.constraint_schema = x.constraint_schema\r\n                     left join information_schema.key_column_usage y on\r\n                       y.ordinal_position = x.position_in_unique_constraint and\r\n                       y.constraint_name = c.unique_constraint_name\r\n                WHERE concat(y.table_schema, '.', y.table_name) = tabname and\r\n                      y.table_name is not null\r\n              ) as f\r\n         ORDER BY f.column_id,\r\n                  relation\r\n       ) as d\r\n  INTO outjson;\r\n\r\n  outjson = coalesce(outjson,'[]');\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  tabname varchar(350);\r\nBEGIN\r\n --dont used\r\n  tabname = injson->>'tabname';\r\n  SELECT array_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n         SELECT ROW_NUMBER() OVER(\r\n         order by f.column_id) as t,\r\n                  *,\r\n                  '[]'::JSON as relationcolums,\r\n                  '[]'::JSON as roles\r\n         FROM (\r\n                SELECT distinct t.column_name as col,\r\n                       substring(coalesce(pgd.description, t.column_name), 1, 62) as title,\r\n                       framework.fn_htmldatatype(t.data_type) as type,\r\n                       true as visible, \r\n                       (\r\n                         SELECT concat(y.table_schema, '.', y.table_name)\r\n                         FROM information_schema.table_constraints as c\r\n                              JOIN information_schema.key_column_usage AS x ON\r\n                                c.constraint_name = x.constraint_name and\r\n                                x.column_name = t.column_name\r\n                              JOIN information_schema.constraint_column_usage AS\r\n                                y ON y.constraint_name = c.constraint_name and\r\n                                y.column_name = t.column_name\r\n                         WHERE c.table_name = t.table_name and\r\n                               c.table_schema = t.table_schema and\r\n                               c.constraint_type = 'FOREIGN KEY'\r\n                         LIMIT 1\r\n                       ) as relation,\r\n                       (\r\n                         SELECT concat(y.column_name)\r\n                         FROM information_schema.table_constraints as c\r\n                              JOIN information_schema.key_column_usage AS x ON\r\n                                c.constraint_name = x.constraint_name and\r\n                                x.column_name = t.column_name\r\n                              JOIN information_schema.constraint_column_usage AS\r\n                                y ON y.constraint_name = c.constraint_name and\r\n                                y.column_name = t.column_name\r\n                         WHERE c.table_name = t.table_name and\r\n                               c.table_schema = t.table_schema and\r\n                               c.constraint_type = 'FOREIGN KEY'\r\n                         LIMIT 1\r\n                       ) as relcol,\r\n                       false as "join",\r\n                       false as onetomany,\r\n                       null as defaultval,\r\n                       ''                       as width,\r\n                       t.ordinal_position as column_id,\r\n                       false as depency,\r\n                       null as depencycol,\r\n                       ''                       as classname\r\n                FROM information_schema.columns as t\r\n                     left join pg_catalog.pg_statio_all_tables as st on\r\n                       st.schemaname = t.table_schema and st.relname =\r\n                       t.table_name\r\n                     left join pg_catalog.pg_description pgd on pgd.objoid =\r\n                       st.relid and pgd.objsubid = t.ordinal_position \r\n                WHERE concat(t.table_schema, '.', t.table_name) = tabname\r\n                UNION ALL\r\n                SELECT x.table_name as col,\r\n                       --,        \r\n                       x.table_name as title,\r\n                       'array'                       as type,\r\n                       false as visible,\r\n                       concat(x.table_schema, '.', x.table_name) as relation,\r\n                       null as relcol,\r\n                       --'[]'::JSON as relationcolums,\r\n                       false as join,\r\n                       true as onetomany,\r\n                       null as defaultval,\r\n                       ''                       as width,\r\n                       (\r\n                         SELECT count(t.*)\r\n                         FROM information_schema.columns as t\r\n                         WHERE concat(t.table_schema, '.', t.table_name) =\r\n                           tabname\r\n                       ) + 1 as column_id,\r\n                       true as depency,\r\n                       x.column_name as depencycol,\r\n                       --'[]'::JSON as roles,\r\n                       ''                       as classname\r\n                FROM information_schema.key_column_usage as x\r\n                     --  and t.column_name = x.column_name\r\n                     left join information_schema.referential_constraints as c\r\n                       on c.constraint_name = x.constraint_name and\r\n                       c.constraint_schema = x.constraint_schema\r\n                     left join information_schema.key_column_usage y on\r\n                       y.ordinal_position = x.position_in_unique_constraint and\r\n                       y.constraint_name = c.unique_constraint_name\r\n                WHERE concat(y.table_schema, '.', y.table_name) = tabname and\r\n                      y.table_name is not null\r\n              ) as f\r\n         ORDER BY f.column_id,\r\n                  relation\r\n       ) as d\r\n  INTO outjson;\r\n\r\n  outjson = coalesce(outjson,'[]');\r\nEND;\r\n
227282	framework	fn_dialog_removeuser	framework.fn_dialog_removeuser(injson  json)	REMOVE USER FROM DIALOG	2020-05-21 11:31:02.195905	1	f	fn_dialog_removeuser(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_dialog_removeuser(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_dialog_removeuser(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\n  _user_to_remove int;\r\n  _dialogid int;\r\n  _dtype smallint;\r\n  _admins json;\r\n  _od json;\r\n  _users JSON;\r\n  _nw JSON;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n    _dialogid = injson->>'id';\r\n    _user_to_remove = injson->>'user_to_remove';\r\n\r\n\r\n\tIF _dialogid IS NULL \r\n    THEN\r\n    \tPERFORM raiserror('id is null');\r\n    END IF;\r\n    \r\n    IF _user_to_remove is null \r\n    THEN \r\n  \t  PERFORM raiserror('user_to_remove is null');\r\n    END IF;\r\n    \r\n    SELECT \r\n    \td.dialog_admins,\r\n        d.dtype,\r\n        d.users\r\n    FROM framework.dialogs as d\r\n    WHERE d.id = _dialogid\r\n    INTO _admins, _dtype, _users; \r\n\r\n    IF _dtype = '1'\r\n    THEN \r\n        RETURN;\r\n    END IF;\r\n    \r\n    IF _user_to_remove not in (\r\n    \tSELECT\r\n        \tvalue::varchar::int\r\n    \tFROM json_array_elements_text(_users)\r\n    )\r\n    THEN\r\n    \tPERFORM raiserror('User not in dialog');\r\n    END IF;\r\n    \r\n    \r\n    \r\n    IF (\r\n        SELECT\r\n            count(*)\r\n        FROM json_array_elements_text(_admins)\r\n        WHERE value::varchar::int = _userid\r\n    ) = 0\r\n    THEN\r\n        PERFORM raiserror('ACCESS DENIED');\r\n    END IF;\r\n    \r\n    SELECT\r\n        row_to_json(z)\r\n    FROM (\r\n         SELECT\r\n                d.*\r\n         FROM framework.dialogs as d\r\n         WHERE d.id = _dialogid\r\n    ) as z\r\n    INTO _od;\r\n    \r\n    UPDATE framework.dialogs\r\n    SET    \r\n\t\tusers = array_to_json(ARRAY(\r\n        \tSELECT\r\n                value::varchar::int\r\n            FROM json_array_elements_text(users)\r\n            WHERE value::varchar::int <> _user_to_remove\r\n        )),\r\n    \tdialog_admins = array_to_json(ARRAY(\r\n        \tSELECT\r\n                value::varchar::int\r\n            FROM json_array_elements_text(dialog_admins)\r\n            WHERE value::varchar::int <> _user_to_remove\r\n        ))\r\n    WHERE id = _dialogid;\r\n    \r\n    UPDATE framework.dialog_notifications\r\n    SET\r\n    \tissend = true,\r\n        isread = true\r\n    WHERE dialog_id = _dialogid and userid = _dialogid;\r\n\r\n\r\n    SELECT\r\n        row_to_json(z)\r\n    FROM (\r\n         SELECT\r\n                d.*\r\n         FROM framework.dialogs as d\r\n         WHERE d.id = _dialogid\r\n    ) as z\r\n    INTO _nw;\r\n    \r\n    \r\n    \r\n    INSERT INTO framework.logtable (\r\n      tablename, tableid,\r\n      opertype, oldata, newdata,\r\n      userid\r\n    ) VALUES (\r\n      'framework.dialogs', _dialogid::VARCHAR,\r\n      '2',_od,_nw,\r\n      _userid\r\n     );\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _userid int;\r\n  _user_to_remove int;\r\n  _dialogid int;\r\n  _dtype smallint;\r\n  _admins json;\r\n  _od json;\r\n  _users JSON;\r\n  _nw JSON;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n    _dialogid = injson->>'id';\r\n    _user_to_remove = injson->>'user_to_remove';\r\n\r\n\r\n\tIF _dialogid IS NULL \r\n    THEN\r\n    \tPERFORM raiserror('id is null');\r\n    END IF;\r\n    \r\n    IF _user_to_remove is null \r\n    THEN \r\n  \t  PERFORM raiserror('user_to_remove is null');\r\n    END IF;\r\n    \r\n    SELECT \r\n    \td.dialog_admins,\r\n        d.dtype,\r\n        d.users\r\n    FROM framework.dialogs as d\r\n    WHERE d.id = _dialogid\r\n    INTO _admins, _dtype, _users; \r\n\r\n    IF _dtype = '1'\r\n    THEN \r\n        RETURN;\r\n    END IF;\r\n    \r\n    IF _user_to_remove not in (\r\n    \tSELECT\r\n        \tvalue::varchar::int\r\n    \tFROM json_array_elements_text(_users)\r\n    )\r\n    THEN\r\n    \tPERFORM raiserror('User not in dialog');\r\n    END IF;\r\n    \r\n    \r\n    \r\n    IF (\r\n        SELECT\r\n            count(*)\r\n        FROM json_array_elements_text(_admins)\r\n        WHERE value::varchar::int = _userid\r\n    ) = 0\r\n    THEN\r\n        PERFORM raiserror('ACCESS DENIED');\r\n    END IF;\r\n    \r\n    SELECT\r\n        row_to_json(z)\r\n    FROM (\r\n         SELECT\r\n                d.*\r\n         FROM framework.dialogs as d\r\n         WHERE d.id = _dialogid\r\n    ) as z\r\n    INTO _od;\r\n    \r\n    UPDATE framework.dialogs\r\n    SET    \r\n\t\tusers = array_to_json(ARRAY(\r\n        \tSELECT\r\n                value::varchar::int\r\n            FROM json_array_elements_text(users)\r\n            WHERE value::varchar::int <> _user_to_remove\r\n        )),\r\n    \tdialog_admins = array_to_json(ARRAY(\r\n        \tSELECT\r\n                value::varchar::int\r\n            FROM json_array_elements_text(dialog_admins)\r\n            WHERE value::varchar::int <> _user_to_remove\r\n        ))\r\n    WHERE id = _dialogid;\r\n    \r\n    UPDATE framework.dialog_notifications\r\n    SET\r\n    \tissend = true,\r\n        isread = true\r\n    WHERE dialog_id = _dialogid and userid = _dialogid;\r\n\r\n\r\n    SELECT\r\n        row_to_json(z)\r\n    FROM (\r\n         SELECT\r\n                d.*\r\n         FROM framework.dialogs as d\r\n         WHERE d.id = _dialogid\r\n    ) as z\r\n    INTO _nw;\r\n    \r\n    \r\n    \r\n    INSERT INTO framework.logtable (\r\n      tablename, tableid,\r\n      opertype, oldata, newdata,\r\n      userid\r\n    ) VALUES (\r\n      'framework.dialogs', _dialogid::VARCHAR,\r\n      '2',_od,_nw,\r\n      _userid\r\n     );\r\nEND;\r\n
227267	framework	fn_cryptosess	framework.fn_cryptosess(injson  json,sessid out bpchar)	AUTH IN WITH CRYPTOKEY	2020-05-21 11:31:02.195905	1	f	fn_cryptosess(injson  json,sessid out bpchar)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_cryptosess(injson  json,sessid out bpchar) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_cryptosess(injson json, OUT sessid character)\n RETURNS character\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  user_id int;\r\n  _orgid int;\r\n  _created timestamp;\r\n  \r\n  _thumbprint varchar(200);\r\nBEGIN\r\n\t-- AUTH IN WITH CRYPTOKEY\r\n    \r\n    _thumbprint = injson->>'thumbprint';\r\n    \r\n    IF _thumbprint is null THEN\r\n        PERFORM raiserror('No Certificate');\r\n    END IF;\r\n    \r\n    SELECT \r\n        u.id,\r\n        u.orgs->0\r\n    FROM framework.users as u\r\n    WHERE u.isactive and u.thumbprint = _thumbprint\r\n    INTO user_id, _orgid;\r\n    \r\n    IF user_id is null THEN\r\n        perform raiserror('User not active or not found. Check your certificate');\r\n    END IF;\r\n     \r\n    sessid = uuid_in(md5(random()::text || now()::text)::cstring)::CHAR(36);\r\n    \r\n    INSERT INTO framework.sess\r\n    (\r\n        id,\r\n        userid\r\n    )\r\n    VALUES \r\n    (\r\n        sessid,\r\n        user_id\r\n    );\r\n    \r\n    UPDATE framework.users\r\n    SET orgid = _orgid\r\n    WHERE orgid is null and id = user_id;\r\n    \r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"sessid","argmode":"output","argtype":"bpchar"}]	bpchar	\r\nDECLARE\r\n  user_id int;\r\n  _orgid int;\r\n  _created timestamp;\r\n  \r\n  _thumbprint varchar(200);\r\nBEGIN\r\n\t-- AUTH IN WITH CRYPTOKEY\r\n    \r\n    _thumbprint = injson->>'thumbprint';\r\n    \r\n    IF _thumbprint is null THEN\r\n        PERFORM raiserror('No Certificate');\r\n    END IF;\r\n    \r\n    SELECT \r\n        u.id,\r\n        u.orgs->0\r\n    FROM framework.users as u\r\n    WHERE u.isactive and u.thumbprint = _thumbprint\r\n    INTO user_id, _orgid;\r\n    \r\n    IF user_id is null THEN\r\n        perform raiserror('User not active or not found. Check your certificate');\r\n    END IF;\r\n     \r\n    sessid = uuid_in(md5(random()::text || now()::text)::cstring)::CHAR(36);\r\n    \r\n    INSERT INTO framework.sess\r\n    (\r\n        id,\r\n        userid\r\n    )\r\n    VALUES \r\n    (\r\n        sessid,\r\n        user_id\r\n    );\r\n    \r\n    UPDATE framework.users\r\n    SET orgid = _orgid\r\n    WHERE orgid is null and id = user_id;\r\n    \r\nEND;\r\n
227268	framework	fn_deleteconfig_checked	framework.fn_deleteconfig_checked(injson  json)	DELETE CHECKED CONFIG	2020-05-21 11:31:02.195905	1	f	fn_deleteconfig_checked(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_deleteconfig_checked(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_deleteconfig_checked(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _checked json;\r\n  _userid int;\r\n  _od json;\r\n  _id int;\r\nBEGIN\r\n  _userid = injson->>'userid';\r\n  _checked = injson->>'items';\r\n\r\n  \r\n  FOR _id in (\r\n      SELECT\r\n\t      value::varchar::int\r\n\t  FROM json_array_elements_text(_checked)\r\n  ) \r\n  LOOP\r\n      SELECT\r\n\t       row_to_json(d)\r\n\t  FROM (\r\n\t      SELECT\r\n\t\t      *\r\n\t\t  FROM framework.config\r\n\t\t  WHERE id = _id\r\n\t  ) as d\r\n\t  INTO _od;\r\n\t  \r\n\t  DELETE FROM framework.config\r\n\t  WHERE id = _id;\r\n\t  \r\n\t  INSERT INTO framework.logtable (\r\n\t\ttablename, tableid, opertype,\r\n\t\toldata, newdata, userid\r\n\t  ) VALUES (\r\n\t    'framework.config', _id::varchar, '3',\r\n\t\t_od, '{}'::json, _userid\r\n\t  );\r\n  END LOOP;\r\n\r\n  \r\n   \r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _checked json;\r\n  _userid int;\r\n  _od json;\r\n  _id int;\r\nBEGIN\r\n  _userid = injson->>'userid';\r\n  _checked = injson->>'items';\r\n\r\n  \r\n  FOR _id in (\r\n      SELECT\r\n\t      value::varchar::int\r\n\t  FROM json_array_elements_text(_checked)\r\n  ) \r\n  LOOP\r\n      SELECT\r\n\t       row_to_json(d)\r\n\t  FROM (\r\n\t      SELECT\r\n\t\t      *\r\n\t\t  FROM framework.config\r\n\t\t  WHERE id = _id\r\n\t  ) as d\r\n\t  INTO _od;\r\n\t  \r\n\t  DELETE FROM framework.config\r\n\t  WHERE id = _id;\r\n\t  \r\n\t  INSERT INTO framework.logtable (\r\n\t\ttablename, tableid, opertype,\r\n\t\toldata, newdata, userid\r\n\t  ) VALUES (\r\n\t    'framework.config', _id::varchar, '3',\r\n\t\t_od, '{}'::json, _userid\r\n\t  );\r\n  END LOOP;\r\n\r\n  \r\n   \r\nEND;\r\n
227269	framework	fn_deleterow	framework.fn_deleterow(injson  json)	DELETE ROW IN LIST COMPONENT (FROM TABLE)	2020-05-21 11:31:02.195905	1	f	fn_deleterow(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_deleterow(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_deleterow(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _tablename varchar(350);\r\n  _id varchar;\r\n  _squery varchar;\r\n  _oldata json;\r\n  _userid varchar(150);\r\n_viewid int;\r\n_userroles json;\r\n_viewroles json;\r\nBEGIN\r\n\t-- DELETE ROW IN LIST COMPONENT (FROM TABLE)\r\n\r\n  -- = injson->>'tablename';\t\r\n  _id = trim(injson->>'id');\r\n  _userid = injson->>'userid';\r\n  _viewid = injson->>'viewid';\r\n  \r\n    IF _viewid is NULL\r\n    THEN\r\n      perform raiserror('view id is null');\r\n    END IF; \r\n    \r\n    SELECT \r\n    \troles,\r\n        tablename\r\n    FROM framework.views \r\n    WHERE id = _viewid\r\n    INTO _viewroles, _tablename;\r\n    IF _viewroles is null THEN\r\n    \tperform raiserror('view is not found');\r\n    END IF;\r\n    SELECT \r\n    \troles\r\n    FROM framework.users \r\n    WHERE id::varchar = _userid\r\n    INTO _userroles;\r\n    \r\n    IF (SELECT count(*) FROM json_array_elements_text(_viewroles)) > 0 and \r\n    (SELECT count(*) \r\n     FROM json_array_elements_text(_viewroles) as v\r\n     \tJOIN json_array_elements_text(_userroles) as r on \r\n        \t((v.value::json->>'value')::varchar = r.value::varchar\r\n            \tOR\r\n             v.value::varchar = r.value::varchar\r\n            )\r\n     ) = 0 THEN\r\n    \tPERFORM raiserror('m403err');\r\n    END IF;\r\n    \r\n    IF _tablename is NULL\r\n    THEN\r\n      perform raiserror('table is null');\r\n    END IF; \r\n    \r\n    \r\n\r\n   \r\n   IF (SELECT count(*)\r\n   FROM information_schema.columns as t\r\n   WHERE concat(t.table_schema,'.',t.table_name) = _tablename ) = 0 THEN\r\n   \t perform raiserror('can not find out the column type. check table and column names');\r\n   END IF;\r\n  \r\n  IF coalesce(_id,'') = '' THEN\r\n\tperform raiserror('id is null');\r\n  END IF;\r\n  \r\n\r\n _squery = concat('\r\n   SELECT row_to_json(d)\r\n   FROM (\r\n    SELECT * \r\n    FROM ',_tablename,'  \r\n    WHERE upper(id::varchar) = upper($1)\r\n  ) as d');\r\n  \r\n    EXECUTE format(_squery) USING _id::varchar INTO _oldata; \r\n  \tINSERT INTO framework.logtable (\r\n      tablename, tableid, opertype,\r\n      userid, oldata\r\n    ) VALUES (\r\n      _tablename, _id, '3',\r\n      _userid::int, _oldata  \r\n    );\r\n \r\n  _squery = concat('DELETE FROM ', _tablename, ' WHERE upper(id::varchar) = $1; ');\r\n  EXECUTE format(_squery) USING upper(_id);\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _tablename varchar(350);\r\n  _id varchar;\r\n  _squery varchar;\r\n  _oldata json;\r\n  _userid varchar(150);\r\n_viewid int;\r\n_userroles json;\r\n_viewroles json;\r\nBEGIN\r\n\t-- DELETE ROW IN LIST COMPONENT (FROM TABLE)\r\n\r\n  -- = injson->>'tablename';\t\r\n  _id = trim(injson->>'id');\r\n  _userid = injson->>'userid';\r\n  _viewid = injson->>'viewid';\r\n  \r\n    IF _viewid is NULL\r\n    THEN\r\n      perform raiserror('view id is null');\r\n    END IF; \r\n    \r\n    SELECT \r\n    \troles,\r\n        tablename\r\n    FROM framework.views \r\n    WHERE id = _viewid\r\n    INTO _viewroles, _tablename;\r\n    IF _viewroles is null THEN\r\n    \tperform raiserror('view is not found');\r\n    END IF;\r\n    SELECT \r\n    \troles\r\n    FROM framework.users \r\n    WHERE id::varchar = _userid\r\n    INTO _userroles;\r\n    \r\n    IF (SELECT count(*) FROM json_array_elements_text(_viewroles)) > 0 and \r\n    (SELECT count(*) \r\n     FROM json_array_elements_text(_viewroles) as v\r\n     \tJOIN json_array_elements_text(_userroles) as r on \r\n        \t((v.value::json->>'value')::varchar = r.value::varchar\r\n            \tOR\r\n             v.value::varchar = r.value::varchar\r\n            )\r\n     ) = 0 THEN\r\n    \tPERFORM raiserror('m403err');\r\n    END IF;\r\n    \r\n    IF _tablename is NULL\r\n    THEN\r\n      perform raiserror('table is null');\r\n    END IF; \r\n    \r\n    \r\n\r\n   \r\n   IF (SELECT count(*)\r\n   FROM information_schema.columns as t\r\n   WHERE concat(t.table_schema,'.',t.table_name) = _tablename ) = 0 THEN\r\n   \t perform raiserror('can not find out the column type. check table and column names');\r\n   END IF;\r\n  \r\n  IF coalesce(_id,'') = '' THEN\r\n\tperform raiserror('id is null');\r\n  END IF;\r\n  \r\n\r\n _squery = concat('\r\n   SELECT row_to_json(d)\r\n   FROM (\r\n    SELECT * \r\n    FROM ',_tablename,'  \r\n    WHERE upper(id::varchar) = upper($1)\r\n  ) as d');\r\n  \r\n    EXECUTE format(_squery) USING _id::varchar INTO _oldata; \r\n  \tINSERT INTO framework.logtable (\r\n      tablename, tableid, opertype,\r\n      userid, oldata\r\n    ) VALUES (\r\n      _tablename, _id, '3',\r\n      _userid::int, _oldata  \r\n    );\r\n \r\n  _squery = concat('DELETE FROM ', _tablename, ' WHERE upper(id::varchar) = $1; ');\r\n  EXECUTE format(_squery) USING upper(_id);\r\nEND;\r\n
227286	framework	fn_dialogs_notif_setsended	framework.fn_dialogs_notif_setsended(injson  json)	SET DIALOGS NOTIFICATION STATUS SENDED	2020-05-21 11:31:02.195905	1	f	fn_dialogs_notif_setsended(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_dialogs_notif_setsended(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_dialogs_notif_setsended(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\n  _id int;\r\n  _ses char(36);\r\nBEGIN\r\n  _userid = injson->>'userid';\r\n  _id = injson->>'id';\r\n  _ses = injson->>'sessid';\r\n  IF _id is NULL THEN\r\n     PERFORM raiserror('id is null');\r\n  END IF;\r\n  \r\n  UPDATE framework.dialog_notifications\r\n  SET\r\n     issend = TRUE\r\n  WHERE message_id = _id and (userid = _userid or sessid = _ses);\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _userid int;\r\n  _id int;\r\n  _ses char(36);\r\nBEGIN\r\n  _userid = injson->>'userid';\r\n  _id = injson->>'id';\r\n  _ses = injson->>'sessid';\r\n  IF _id is NULL THEN\r\n     PERFORM raiserror('id is null');\r\n  END IF;\r\n  \r\n  UPDATE framework.dialog_notifications\r\n  SET\r\n     issend = TRUE\r\n  WHERE message_id = _id and (userid = _userid or sessid = _ses);\r\nEND;\r\n
227278	framework	fn_dialog_message_send	framework.fn_dialog_message_send(injson  json)	SEND MESSAGE TO DIALOG	2020-05-21 11:31:02.195905	1	f	fn_dialog_message_send(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_dialog_message_send(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_dialog_message_send(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\n  _dialogid int;\r\n  _message_text varchar;\r\n  _reply_to int;\r\n  _forwarded_from int;\r\n  _files json;\r\n  _images json;\r\n  _id int;\r\n  _users JSON;\r\nBEGIN\r\n  _userid = injson->>'userid';\r\n  _dialogid = injson->>'dialogid';\r\n  _message_text = injson->>'message_text';\r\n  _forwarded_from = injson->>'forwarded_from';\r\n  _reply_to = injson->>'reply_to';\r\n  _files = injson->>'value';\r\n  _files = COALESCE(_files,'[]');\r\n  \r\n  _images = (\r\n  \tSELECT\r\n \t array_to_json(\r\n       ARRAY(\r\n        SELECT\r\n            *\r\n        FROM json_array_elements(_files)\r\n        WHERE lower(value->>'content_type') like 'image%'\r\n       )\r\n     )\r\n  );\r\n  \r\n  _files = (\r\n  \tSELECT\r\n \t array_to_json(\r\n       ARRAY(\r\n        SELECT\r\n            *\r\n        FROM json_array_elements(_files)\r\n        WHERE lower(value->>'content_type') not like 'image%'\r\n       )\r\n     )\r\n  );\r\n  \r\n  -- CHECKS\r\n  IF _userid is NULL \r\n  THEN\r\n  \tPERFORM raiserror('Userid is null');\r\n  END IF;\r\n  \r\n  IF _dialogid is NULL \r\n  THEN\r\n  \tPERFORM raiserror('Dialogid is null');\r\n  END IF;\r\n  _message_text = COALESCE(_message_text,'');\r\n  IF _message_text = '' AND (\r\n  \tSELECT\r\n    \tcount(*)\r\n    FROM json_array_elements(_files)\r\n  ) = 0 AND (\r\n  \tSELECT\r\n    \tcount(*)\r\n    FROM json_array_elements(_images)\r\n  ) = 0 AND _forwarded_from is null\r\n  THEN\r\n  \tPERFORM raiserror('Message is empty');\r\n  END IF;\r\n  \r\n  -- GET DIALOGS USERS FOR NOTIFICATIONS\r\n  SELECT \r\n  \td.users\r\n  FROM framework.dialogs as d\r\n  WHERE d.id = _dialogid\r\n  INTO _users;\r\n  \r\n  IF _users is null \r\n  THEN\r\n  \tPERFORM raiserror('Dialog is not found');\r\n  END IF;\r\n  \r\n  IF (\r\n    \tSELECT\r\n        \tcount(*)\r\n        FROM json_array_elements_text(_users)\r\n        WHERE value::varchar::int = _userid\r\n   ) = 0 \r\n  THEN\r\n   \tPERFORM raiserror('ACCESS DENIED');\r\n  END IF;\r\n  \r\n  IF _forwarded_from is not null \r\n  THEN\r\n  \r\n  \tSELECT\r\n    \tmessage_text,\r\n        files,\r\n        images\r\n    FROM framework.dialog_messages as dm\r\n    WHERE dm.id = _forwarded_from  \r\n    INTO _message_text, _files, _images;\r\n  \t\r\n  END IF;\r\n  \r\n  -- ADD MESSAGE\r\n  _id = nextval('framework.dialog_messages_id_seq'::regclass);\r\n  \r\n  INSERT INTO framework.dialog_messages (\r\n    id, userid, message_text, reply_to, \r\n    forwarded_from, dialog_id, files, images\r\n  ) VALUES (\r\n    _id, _userid, _message_text, _reply_to,\r\n    _forwarded_from, _dialogid, _files, _images\r\n  );\r\n  \r\n  -- ADD NOTIFICATIONS\r\n  INSERT INTO framework.dialog_notifications (\r\n    dialog_id, sender_userid, userid, message_text, message_id\r\n  ) \r\n  SELECT\r\n  \t_dialogid, _userid, value::varchar::int, _message_text, _id\r\n  FROM json_array_elements_text(_users);\r\n  --WHERE value::varchar::int <> _userid;\r\n  \r\n  UPDATE framework.dialogs\r\n  SET last_message_date = now()\r\n  WHERE id = _dialogid;\r\n  \r\n  UPDATE framework.dialog_messages\r\n  SET \r\n  \tisread = true, \r\n    user_reads = (\r\n      CASE WHEN (\r\n          SELECT\r\n              count(*)\r\n          FROM json_array_elements_text(user_reads)\r\n          WHERE value::varchar::int = _userid\r\n      ) = 0\r\n      THEN (\r\n          array_to_json(ARRAY(\r\n              SELECT\r\n                  _userid\t\r\n          ))::jsonb||user_reads::jsonb\r\n      )::json\r\n      ELSE\r\n      \tuser_reads\r\n      END\r\n    )\r\n  WHERE dialog_id = _dialogid and id<>_id;\r\n  \r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _userid int;\r\n  _dialogid int;\r\n  _message_text varchar;\r\n  _reply_to int;\r\n  _forwarded_from int;\r\n  _files json;\r\n  _images json;\r\n  _id int;\r\n  _users JSON;\r\nBEGIN\r\n  _userid = injson->>'userid';\r\n  _dialogid = injson->>'dialogid';\r\n  _message_text = injson->>'message_text';\r\n  _forwarded_from = injson->>'forwarded_from';\r\n  _reply_to = injson->>'reply_to';\r\n  _files = injson->>'value';\r\n  _files = COALESCE(_files,'[]');\r\n  \r\n  _images = (\r\n  \tSELECT\r\n \t array_to_json(\r\n       ARRAY(\r\n        SELECT\r\n            *\r\n        FROM json_array_elements(_files)\r\n        WHERE lower(value->>'content_type') like 'image%'\r\n       )\r\n     )\r\n  );\r\n  \r\n  _files = (\r\n  \tSELECT\r\n \t array_to_json(\r\n       ARRAY(\r\n        SELECT\r\n            *\r\n        FROM json_array_elements(_files)\r\n        WHERE lower(value->>'content_type') not like 'image%'\r\n       )\r\n     )\r\n  );\r\n  \r\n  -- CHECKS\r\n  IF _userid is NULL \r\n  THEN\r\n  \tPERFORM raiserror('Userid is null');\r\n  END IF;\r\n  \r\n  IF _dialogid is NULL \r\n  THEN\r\n  \tPERFORM raiserror('Dialogid is null');\r\n  END IF;\r\n  _message_text = COALESCE(_message_text,'');\r\n  IF _message_text = '' AND (\r\n  \tSELECT\r\n    \tcount(*)\r\n    FROM json_array_elements(_files)\r\n  ) = 0 AND (\r\n  \tSELECT\r\n    \tcount(*)\r\n    FROM json_array_elements(_images)\r\n  ) = 0 AND _forwarded_from is null\r\n  THEN\r\n  \tPERFORM raiserror('Message is empty');\r\n  END IF;\r\n  \r\n  -- GET DIALOGS USERS FOR NOTIFICATIONS\r\n  SELECT \r\n  \td.users\r\n  FROM framework.dialogs as d\r\n  WHERE d.id = _dialogid\r\n  INTO _users;\r\n  \r\n  IF _users is null \r\n  THEN\r\n  \tPERFORM raiserror('Dialog is not found');\r\n  END IF;\r\n  \r\n  IF (\r\n    \tSELECT\r\n        \tcount(*)\r\n        FROM json_array_elements_text(_users)\r\n        WHERE value::varchar::int = _userid\r\n   ) = 0 \r\n  THEN\r\n   \tPERFORM raiserror('ACCESS DENIED');\r\n  END IF;\r\n  \r\n  IF _forwarded_from is not null \r\n  THEN\r\n  \r\n  \tSELECT\r\n    \tmessage_text,\r\n        files,\r\n        images\r\n    FROM framework.dialog_messages as dm\r\n    WHERE dm.id = _forwarded_from  \r\n    INTO _message_text, _files, _images;\r\n  \t\r\n  END IF;\r\n  \r\n  -- ADD MESSAGE\r\n  _id = nextval('framework.dialog_messages_id_seq'::regclass);\r\n  \r\n  INSERT INTO framework.dialog_messages (\r\n    id, userid, message_text, reply_to, \r\n    forwarded_from, dialog_id, files, images\r\n  ) VALUES (\r\n    _id, _userid, _message_text, _reply_to,\r\n    _forwarded_from, _dialogid, _files, _images\r\n  );\r\n  \r\n  -- ADD NOTIFICATIONS\r\n  INSERT INTO framework.dialog_notifications (\r\n    dialog_id, sender_userid, userid, message_text, message_id\r\n  ) \r\n  SELECT\r\n  \t_dialogid, _userid, value::varchar::int, _message_text, _id\r\n  FROM json_array_elements_text(_users);\r\n  --WHERE value::varchar::int <> _userid;\r\n  \r\n  UPDATE framework.dialogs\r\n  SET last_message_date = now()\r\n  WHERE id = _dialogid;\r\n  \r\n  UPDATE framework.dialog_messages\r\n  SET \r\n  \tisread = true, \r\n    user_reads = (\r\n      CASE WHEN (\r\n          SELECT\r\n              count(*)\r\n          FROM json_array_elements_text(user_reads)\r\n          WHERE value::varchar::int = _userid\r\n      ) = 0\r\n      THEN (\r\n          array_to_json(ARRAY(\r\n              SELECT\r\n                  _userid\t\r\n          ))::jsonb||user_reads::jsonb\r\n      )::json\r\n      ELSE\r\n      \tuser_reads\r\n      END\r\n    )\r\n  WHERE dialog_id = _dialogid and id<>_id;\r\n  \r\nEND;\r\n
227270	framework	fn_dialog_addadmin	framework.fn_dialog_addadmin(injson  json)	ADD USER TO ADMINS	2020-05-21 11:31:02.195905	1	f	fn_dialog_addadmin(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_dialog_addadmin(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_dialog_addadmin(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\n  _user_to_add int;\r\n  _dialogid int;\r\n  _dtype smallint;\r\n  _admins json;\r\n  _od json;\r\n  _users JSON;\r\n  _nw JSON;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n    _dialogid = injson->>'id';\r\n    _user_to_add = injson->>'user_to_add';\r\n\r\n\r\n\tIF _dialogid IS NULL \r\n    THEN\r\n    \tPERFORM raiserror('id is null');\r\n    END IF;\r\n    \r\n    IF _user_to_add is null \r\n    THEN \r\n  \t  PERFORM raiserror('user_to_add is null');\r\n    END IF;\r\n    \r\n    SELECT \r\n    \td.dialog_admins, d.dtype, d.users\r\n    FROM framework.dialogs as d\r\n    WHERE d.id = _dialogid\r\n    INTO _admins, _dtype, _users; \r\n\r\n    IF _dtype = '1'\r\n    THEN \r\n        RETURN;\r\n    END IF;\r\n    \r\n    IF _user_to_add not in (\r\n    \tSELECT\r\n        \tvalue::varchar::int\r\n    \tFROM json_array_elements_text(_users)\r\n    )\r\n    THEN\r\n    \tPERFORM raiserror('User not in dialog');\r\n    END IF;\r\n    \r\n    IF _user_to_add in (\r\n    \tSELECT\r\n        \tvalue::varchar::int\r\n    \tFROM json_array_elements_text(_admins)\r\n    )\r\n    THEN\r\n    \tPERFORM raiserror('User already admin');\r\n    END IF;\r\n    \r\n    \r\n    IF (\r\n        SELECT\r\n            count(*)\r\n        FROM json_array_elements_text(_admins)\r\n        WHERE value::varchar::int = _userid\r\n    ) = 0\r\n    THEN\r\n        PERFORM raiserror('ACCESS DENIED');\r\n    END IF;\r\n    \r\n    SELECT\r\n        row_to_json(z)\r\n    FROM (\r\n         SELECT\r\n                d.*\r\n         FROM framework.dialogs as d\r\n         WHERE d.id = _dialogid\r\n    ) as z\r\n    INTO _od;\r\n    \r\n    UPDATE framework.dialogs\r\n    SET    \r\n\t\tdialog_admins = _admins::jsonb||concat('[',_user_to_add::varchar,']')::jsonb\r\n    WHERE id = _dialogid;\r\n\r\n\r\n    SELECT\r\n        row_to_json(z)\r\n    FROM (\r\n         SELECT\r\n                d.*\r\n         FROM framework.dialogs as d\r\n         WHERE d.id = _dialogid\r\n    ) as z\r\n    INTO _nw;\r\n    \r\n    INSERT INTO framework.logtable (\r\n      tablename, tableid,\r\n      opertype, oldata, newdata,\r\n      userid\r\n    ) VALUES (\r\n      'framework.dialogs', _dialogid::VARCHAR,\r\n      '2',_od,_nw,\r\n      _userid\r\n     );\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _userid int;\r\n  _user_to_add int;\r\n  _dialogid int;\r\n  _dtype smallint;\r\n  _admins json;\r\n  _od json;\r\n  _users JSON;\r\n  _nw JSON;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n    _dialogid = injson->>'id';\r\n    _user_to_add = injson->>'user_to_add';\r\n\r\n\r\n\tIF _dialogid IS NULL \r\n    THEN\r\n    \tPERFORM raiserror('id is null');\r\n    END IF;\r\n    \r\n    IF _user_to_add is null \r\n    THEN \r\n  \t  PERFORM raiserror('user_to_add is null');\r\n    END IF;\r\n    \r\n    SELECT \r\n    \td.dialog_admins, d.dtype, d.users\r\n    FROM framework.dialogs as d\r\n    WHERE d.id = _dialogid\r\n    INTO _admins, _dtype, _users; \r\n\r\n    IF _dtype = '1'\r\n    THEN \r\n        RETURN;\r\n    END IF;\r\n    \r\n    IF _user_to_add not in (\r\n    \tSELECT\r\n        \tvalue::varchar::int\r\n    \tFROM json_array_elements_text(_users)\r\n    )\r\n    THEN\r\n    \tPERFORM raiserror('User not in dialog');\r\n    END IF;\r\n    \r\n    IF _user_to_add in (\r\n    \tSELECT\r\n        \tvalue::varchar::int\r\n    \tFROM json_array_elements_text(_admins)\r\n    )\r\n    THEN\r\n    \tPERFORM raiserror('User already admin');\r\n    END IF;\r\n    \r\n    \r\n    IF (\r\n        SELECT\r\n            count(*)\r\n        FROM json_array_elements_text(_admins)\r\n        WHERE value::varchar::int = _userid\r\n    ) = 0\r\n    THEN\r\n        PERFORM raiserror('ACCESS DENIED');\r\n    END IF;\r\n    \r\n    SELECT\r\n        row_to_json(z)\r\n    FROM (\r\n         SELECT\r\n                d.*\r\n         FROM framework.dialogs as d\r\n         WHERE d.id = _dialogid\r\n    ) as z\r\n    INTO _od;\r\n    \r\n    UPDATE framework.dialogs\r\n    SET    \r\n\t\tdialog_admins = _admins::jsonb||concat('[',_user_to_add::varchar,']')::jsonb\r\n    WHERE id = _dialogid;\r\n\r\n\r\n    SELECT\r\n        row_to_json(z)\r\n    FROM (\r\n         SELECT\r\n                d.*\r\n         FROM framework.dialogs as d\r\n         WHERE d.id = _dialogid\r\n    ) as z\r\n    INTO _nw;\r\n    \r\n    INSERT INTO framework.logtable (\r\n      tablename, tableid,\r\n      opertype, oldata, newdata,\r\n      userid\r\n    ) VALUES (\r\n      'framework.dialogs', _dialogid::VARCHAR,\r\n      '2',_od,_nw,\r\n      _userid\r\n     );\r\nEND;\r\n
227271	framework	fn_dialog_adduser	framework.fn_dialog_adduser(injson  json)	ADD USER IN DIALOG	2020-05-21 11:31:02.195905	1	f	fn_dialog_adduser(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_dialog_adduser(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_dialog_adduser(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\n  _user_to_add int;\r\n  _dialogid int;\r\n  _dtype smallint;\r\n  _admins json;\r\n  _od json;\r\n  _users JSON;\r\n  _nw JSON;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n    _dialogid = injson->>'id';\r\n    _user_to_add = injson->>'user_to_add';\r\n\r\n\r\n\tIF _dialogid IS NULL \r\n    THEN\r\n    \tPERFORM raiserror('id is null');\r\n    END IF;\r\n    \r\n    IF _user_to_add is null \r\n    THEN \r\n  \t  PERFORM raiserror('user_to_add is null');\r\n    END IF;\r\n    \r\n    SELECT \r\n    \td.dialog_admins, d.dtype, d.users\r\n    FROM framework.dialogs as d\r\n    WHERE d.id = _dialogid\r\n    INTO _admins, _dtype, _users; \r\n\r\n    IF _dtype = '1'\r\n    THEN \r\n        RETURN;\r\n    END IF;\r\n    \r\n    IF _user_to_add in (\r\n    \tSELECT\r\n        \tvalue::varchar::int\r\n    \tFROM json_array_elements_text(_users)\r\n    )\r\n    THEN\r\n    \tPERFORM raiserror('User already in dialog');\r\n    END IF;\r\n    \r\n    \r\n    \r\n    IF (\r\n        SELECT\r\n            count(*)\r\n        FROM json_array_elements_text(_admins)\r\n        WHERE value::varchar::int = _userid\r\n    ) = 0\r\n    THEN\r\n        PERFORM raiserror('ACCESS DENIED');\r\n    END IF;\r\n    \r\n    SELECT\r\n        row_to_json(z)\r\n    FROM (\r\n         SELECT\r\n                d.*\r\n         FROM framework.dialogs as d\r\n         WHERE d.id = _dialogid\r\n    ) as z\r\n    INTO _od;\r\n    \r\n    UPDATE framework.dialogs\r\n    SET    \r\n\t\tusers = users::jsonb||concat('[',_user_to_add::varchar,']')::jsonb\r\n    WHERE id = _dialogid;\r\n\r\n\r\n    SELECT\r\n        row_to_json(z)\r\n    FROM (\r\n         SELECT\r\n                d.*\r\n         FROM framework.dialogs as d\r\n         WHERE d.id = _dialogid\r\n    ) as z\r\n    INTO _nw;\r\n    \r\n    INSERT INTO framework.logtable (\r\n      tablename, tableid,\r\n      opertype, oldata, newdata,\r\n      userid\r\n    ) VALUES (\r\n      'framework.dialogs', _dialogid::VARCHAR,\r\n      '2',_od,_nw,\r\n      _userid\r\n     );\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _userid int;\r\n  _user_to_add int;\r\n  _dialogid int;\r\n  _dtype smallint;\r\n  _admins json;\r\n  _od json;\r\n  _users JSON;\r\n  _nw JSON;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n    _dialogid = injson->>'id';\r\n    _user_to_add = injson->>'user_to_add';\r\n\r\n\r\n\tIF _dialogid IS NULL \r\n    THEN\r\n    \tPERFORM raiserror('id is null');\r\n    END IF;\r\n    \r\n    IF _user_to_add is null \r\n    THEN \r\n  \t  PERFORM raiserror('user_to_add is null');\r\n    END IF;\r\n    \r\n    SELECT \r\n    \td.dialog_admins, d.dtype, d.users\r\n    FROM framework.dialogs as d\r\n    WHERE d.id = _dialogid\r\n    INTO _admins, _dtype, _users; \r\n\r\n    IF _dtype = '1'\r\n    THEN \r\n        RETURN;\r\n    END IF;\r\n    \r\n    IF _user_to_add in (\r\n    \tSELECT\r\n        \tvalue::varchar::int\r\n    \tFROM json_array_elements_text(_users)\r\n    )\r\n    THEN\r\n    \tPERFORM raiserror('User already in dialog');\r\n    END IF;\r\n    \r\n    \r\n    \r\n    IF (\r\n        SELECT\r\n            count(*)\r\n        FROM json_array_elements_text(_admins)\r\n        WHERE value::varchar::int = _userid\r\n    ) = 0\r\n    THEN\r\n        PERFORM raiserror('ACCESS DENIED');\r\n    END IF;\r\n    \r\n    SELECT\r\n        row_to_json(z)\r\n    FROM (\r\n         SELECT\r\n                d.*\r\n         FROM framework.dialogs as d\r\n         WHERE d.id = _dialogid\r\n    ) as z\r\n    INTO _od;\r\n    \r\n    UPDATE framework.dialogs\r\n    SET    \r\n\t\tusers = users::jsonb||concat('[',_user_to_add::varchar,']')::jsonb\r\n    WHERE id = _dialogid;\r\n\r\n\r\n    SELECT\r\n        row_to_json(z)\r\n    FROM (\r\n         SELECT\r\n                d.*\r\n         FROM framework.dialogs as d\r\n         WHERE d.id = _dialogid\r\n    ) as z\r\n    INTO _nw;\r\n    \r\n    INSERT INTO framework.logtable (\r\n      tablename, tableid,\r\n      opertype, oldata, newdata,\r\n      userid\r\n    ) VALUES (\r\n      'framework.dialogs', _dialogid::VARCHAR,\r\n      '2',_od,_nw,\r\n      _userid\r\n     );\r\nEND;\r\n
227272	framework	fn_dialog_edit	framework.fn_dialog_edit(injson  json)	EDIT DIALOG	2020-05-21 11:31:02.195905	1	f	fn_dialog_edit(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_dialog_edit(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_dialog_edit(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\n  _id int;\r\n  _title varchar(150);\r\n  _photo json;\r\n  _admins json;\r\n  _dialog_admins json;\r\n  _dtype smallint;\r\n  _od json;\r\n  _nw json;\r\n  _users json;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n    _id = injson->>'id';\r\n    _title = injson->>'title';\r\n   -- _photo = injson->>'photo';\r\n    _photo = injson->>'value';\r\n    _dialog_admins = injson->>'dialog_admins';\r\n   -- _users = injson->>'users';\r\n    SELECT \r\n    \td.dialog_admins,\r\n        d.dtype\r\n    FROM framework.dialogs as d\r\n    WHERE d.id = _id\r\n    INTO _admins, _dtype; \r\n    \r\n    \r\n    IF _dtype = '1'\r\n    THEN \r\n        RETURN;\r\n    END IF;\r\n    \r\n    IF (\r\n        SELECT\r\n            count(*)\r\n        FROM json_array_elements_text(_admins)\r\n        WHERE value::varchar::int = _userid\r\n    ) = 0\r\n    THEN\r\n        PERFORM raiserror('ACCESS DENIED');\r\n    END IF;\r\n    \r\n    SELECT\r\n        row_to_json(z)\r\n    FROM (\r\n         SELECT\r\n                d.*\r\n         FROM framework.dialogs as d\r\n         WHERE d.id = _id\r\n    ) as z\r\n    INTO _od;\r\n    \r\n    UPDATE framework.dialogs\r\n    SET    \r\n        title = coalesce(_title,title),\r\n        photo = coalesce(_photo,photo),\r\n        dialog_admins = coalesce(_dialog_admins,dialog_admins)--,\r\n\t\t--users = coalesce(_users,'[]')\r\n    WHERE id = _id;\r\n    \r\n    SELECT\r\n        row_to_json(z)\r\n    FROM (\r\n         SELECT\r\n                d.*\r\n         FROM framework.dialogs as d\r\n         WHERE d.id = _id\r\n    ) as z\r\n    INTO _nw;\r\n    \r\n    INSERT INTO framework.logtable (\r\n      tablename, tableid,\r\n      opertype, oldata, newdata,\r\n      userid\r\n    ) VALUES (\r\n      'framework.dialogs', _id::VARCHAR,\r\n      '2',_od,_nw,\r\n      _userid\r\n     );\r\n    \r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _userid int;\r\n  _id int;\r\n  _title varchar(150);\r\n  _photo json;\r\n  _admins json;\r\n  _dialog_admins json;\r\n  _dtype smallint;\r\n  _od json;\r\n  _nw json;\r\n  _users json;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n    _id = injson->>'id';\r\n    _title = injson->>'title';\r\n   -- _photo = injson->>'photo';\r\n    _photo = injson->>'value';\r\n    _dialog_admins = injson->>'dialog_admins';\r\n   -- _users = injson->>'users';\r\n    SELECT \r\n    \td.dialog_admins,\r\n        d.dtype\r\n    FROM framework.dialogs as d\r\n    WHERE d.id = _id\r\n    INTO _admins, _dtype; \r\n    \r\n    \r\n    IF _dtype = '1'\r\n    THEN \r\n        RETURN;\r\n    END IF;\r\n    \r\n    IF (\r\n        SELECT\r\n            count(*)\r\n        FROM json_array_elements_text(_admins)\r\n        WHERE value::varchar::int = _userid\r\n    ) = 0\r\n    THEN\r\n        PERFORM raiserror('ACCESS DENIED');\r\n    END IF;\r\n    \r\n    SELECT\r\n        row_to_json(z)\r\n    FROM (\r\n         SELECT\r\n                d.*\r\n         FROM framework.dialogs as d\r\n         WHERE d.id = _id\r\n    ) as z\r\n    INTO _od;\r\n    \r\n    UPDATE framework.dialogs\r\n    SET    \r\n        title = coalesce(_title,title),\r\n        photo = coalesce(_photo,photo),\r\n        dialog_admins = coalesce(_dialog_admins,dialog_admins)--,\r\n\t\t--users = coalesce(_users,'[]')\r\n    WHERE id = _id;\r\n    \r\n    SELECT\r\n        row_to_json(z)\r\n    FROM (\r\n         SELECT\r\n                d.*\r\n         FROM framework.dialogs as d\r\n         WHERE d.id = _id\r\n    ) as z\r\n    INTO _nw;\r\n    \r\n    INSERT INTO framework.logtable (\r\n      tablename, tableid,\r\n      opertype, oldata, newdata,\r\n      userid\r\n    ) VALUES (\r\n      'framework.dialogs', _id::VARCHAR,\r\n      '2',_od,_nw,\r\n      _userid\r\n     );\r\n    \r\nEND;\r\n
227273	framework	fn_dialog_group_create	framework.fn_dialog_group_create(injson  json)	CREATE GROUP DIALOG	2020-05-21 11:31:02.195905	1	f	fn_dialog_group_create(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_dialog_group_create(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_dialog_group_create(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\n  --_message_text varchar;\r\n  _dialog_id int;\r\n  _users JSON;\r\n -- _files json;\r\n  --_images json;\r\n  _id int;\r\n  _title varchar(150);\r\n  _photo json;\r\nBEGIN\r\n\t\r\n\t_userid = injson->>'userid';\r\n    _users = injson->>'users';\r\n   -- _message_text = injson->>'message_text';\r\n   -- _files = injson->>'files';\r\n    --_images = injson->>'images';\r\n    _title = injson->>'title';\r\n    _photo = injson->>'value';\r\n    \r\n    -- CHECKS\r\n    IF _userid is NULL \r\n    THEN\r\n    \tPERFORM raiserror('userid is null');\r\n    END IF;\r\n    \r\n    IF _users is NULL \r\n    THEN\r\n    \tPERFORM raiserror('users is null');\r\n    END IF;\r\n    \r\n    -- USERS FOR GROUP DIALOG\r\n    _users = (\r\n      array_to_json(ARRAY(\r\n        SELECT\r\n            _userid\r\n      ))::jsonb||_users::jsonb\r\n    )::json;\r\n    \r\n    -- ADD DIALOG\r\n    _dialog_id = nextval('framework.dialogs_id_seq'::regclass);\r\n    \r\n\t_title = COALESCE(_title,CONCAT('untitled_',_dialog_id::varchar));\r\n    INSERT INTO framework.dialogs (\r\n       id, title, users, userid, \r\n       dtype,  photo \r\n    ) VALUES (\r\n       _dialog_id, _title, _users ,_userid, \r\n       '2', coalesce(_photo,'[]')\r\n    );\r\n    \r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _userid int;\r\n  --_message_text varchar;\r\n  _dialog_id int;\r\n  _users JSON;\r\n -- _files json;\r\n  --_images json;\r\n  _id int;\r\n  _title varchar(150);\r\n  _photo json;\r\nBEGIN\r\n\t\r\n\t_userid = injson->>'userid';\r\n    _users = injson->>'users';\r\n   -- _message_text = injson->>'message_text';\r\n   -- _files = injson->>'files';\r\n    --_images = injson->>'images';\r\n    _title = injson->>'title';\r\n    _photo = injson->>'value';\r\n    \r\n    -- CHECKS\r\n    IF _userid is NULL \r\n    THEN\r\n    \tPERFORM raiserror('userid is null');\r\n    END IF;\r\n    \r\n    IF _users is NULL \r\n    THEN\r\n    \tPERFORM raiserror('users is null');\r\n    END IF;\r\n    \r\n    -- USERS FOR GROUP DIALOG\r\n    _users = (\r\n      array_to_json(ARRAY(\r\n        SELECT\r\n            _userid\r\n      ))::jsonb||_users::jsonb\r\n    )::json;\r\n    \r\n    -- ADD DIALOG\r\n    _dialog_id = nextval('framework.dialogs_id_seq'::regclass);\r\n    \r\n\t_title = COALESCE(_title,CONCAT('untitled_',_dialog_id::varchar));\r\n    INSERT INTO framework.dialogs (\r\n       id, title, users, userid, \r\n       dtype,  photo \r\n    ) VALUES (\r\n       _dialog_id, _title, _users ,_userid, \r\n       '2', coalesce(_photo,'[]')\r\n    );\r\n    \r\nEND;\r\n
227274	framework	fn_dialog_leave	framework.fn_dialog_leave(injson  json)	REMOVE USER FROM DIALOG	2020-05-21 11:31:02.195905	1	f	fn_dialog_leave(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_dialog_leave(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_dialog_leave(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\n  _user_to_remove int;\r\n  _dialogid int;\r\n  _dtype smallint;\r\n  _admins json;\r\n  _od json;\r\n  _users JSON;\r\n  _nw JSON;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n    _dialogid = injson->>'id';\r\n    _user_to_remove = _userid;\r\n\r\n\r\n\tIF _dialogid IS NULL \r\n    THEN\r\n    \tPERFORM raiserror('id is null');\r\n    END IF;\r\n    \r\n    IF _user_to_remove is null \r\n    THEN \r\n  \t  PERFORM raiserror('user_to_remove is null');\r\n    END IF;\r\n    \r\n    SELECT \r\n    \td.dialog_admins,\r\n        d.dtype,\r\n        d.users\r\n    FROM framework.dialogs as d\r\n    WHERE d.id = _dialogid\r\n    INTO _admins, _dtype, _users; \r\n\r\n    IF _dtype = '1'\r\n    THEN \r\n        RETURN;\r\n    END IF;\r\n    \r\n    IF _user_to_remove not in (\r\n    \tSELECT\r\n        \tvalue::varchar::int\r\n    \tFROM json_array_elements_text(_users)\r\n    )\r\n    THEN\r\n    \tPERFORM raiserror('User not in dialog');\r\n    END IF;\r\n    \r\n    \r\n    \r\n    SELECT\r\n        row_to_json(z)\r\n    FROM (\r\n         SELECT\r\n                d.*\r\n         FROM framework.dialogs as d\r\n         WHERE d.id = _dialogid\r\n    ) as z\r\n    INTO _od;\r\n    \r\n    UPDATE framework.dialogs\r\n    SET    \r\n\t\tusers = array_to_json(ARRAY(\r\n        \tSELECT\r\n                value::varchar::int\r\n            FROM json_array_elements_text(users)\r\n            WHERE value::varchar::int <> _user_to_remove\r\n        ))\r\n    WHERE id = _dialogid;\r\n\r\n\r\n    SELECT\r\n        row_to_json(z)\r\n    FROM (\r\n         SELECT\r\n                d.*\r\n         FROM framework.dialogs as d\r\n         WHERE d.id = _dialogid\r\n    ) as z\r\n    INTO _nw;\r\n    \r\n    INSERT INTO framework.logtable (\r\n      tablename, tableid,\r\n      opertype, oldata, newdata,\r\n      userid\r\n    ) VALUES (\r\n      'framework.dialogs', _dialogid::VARCHAR,\r\n      '2',_od,_nw,\r\n      _userid\r\n     );\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _userid int;\r\n  _user_to_remove int;\r\n  _dialogid int;\r\n  _dtype smallint;\r\n  _admins json;\r\n  _od json;\r\n  _users JSON;\r\n  _nw JSON;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n    _dialogid = injson->>'id';\r\n    _user_to_remove = _userid;\r\n\r\n\r\n\tIF _dialogid IS NULL \r\n    THEN\r\n    \tPERFORM raiserror('id is null');\r\n    END IF;\r\n    \r\n    IF _user_to_remove is null \r\n    THEN \r\n  \t  PERFORM raiserror('user_to_remove is null');\r\n    END IF;\r\n    \r\n    SELECT \r\n    \td.dialog_admins,\r\n        d.dtype,\r\n        d.users\r\n    FROM framework.dialogs as d\r\n    WHERE d.id = _dialogid\r\n    INTO _admins, _dtype, _users; \r\n\r\n    IF _dtype = '1'\r\n    THEN \r\n        RETURN;\r\n    END IF;\r\n    \r\n    IF _user_to_remove not in (\r\n    \tSELECT\r\n        \tvalue::varchar::int\r\n    \tFROM json_array_elements_text(_users)\r\n    )\r\n    THEN\r\n    \tPERFORM raiserror('User not in dialog');\r\n    END IF;\r\n    \r\n    \r\n    \r\n    SELECT\r\n        row_to_json(z)\r\n    FROM (\r\n         SELECT\r\n                d.*\r\n         FROM framework.dialogs as d\r\n         WHERE d.id = _dialogid\r\n    ) as z\r\n    INTO _od;\r\n    \r\n    UPDATE framework.dialogs\r\n    SET    \r\n\t\tusers = array_to_json(ARRAY(\r\n        \tSELECT\r\n                value::varchar::int\r\n            FROM json_array_elements_text(users)\r\n            WHERE value::varchar::int <> _user_to_remove\r\n        ))\r\n    WHERE id = _dialogid;\r\n\r\n\r\n    SELECT\r\n        row_to_json(z)\r\n    FROM (\r\n         SELECT\r\n                d.*\r\n         FROM framework.dialogs as d\r\n         WHERE d.id = _dialogid\r\n    ) as z\r\n    INTO _nw;\r\n    \r\n    INSERT INTO framework.logtable (\r\n      tablename, tableid,\r\n      opertype, oldata, newdata,\r\n      userid\r\n    ) VALUES (\r\n      'framework.dialogs', _dialogid::VARCHAR,\r\n      '2',_od,_nw,\r\n      _userid\r\n     );\r\nEND;\r\n
227334	framework	fn_userorg_upd	framework.fn_userorg_upd(injson  json)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_userorg_upd(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_userorg_upd(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_userorg_upd(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _orgid int;\r\n  _userid int;\r\nBEGIN\r\n\t_orgid = injson->>'orgid';\r\n\t_userid = injson->>'userid';\r\n    \r\n    UPDATE framework.users\r\n    SET orgid = _orgid\r\n    WHERE id = _userid;\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _orgid int;\r\n  _userid int;\r\nBEGIN\r\n\t_orgid = injson->>'orgid';\r\n\t_userid = injson->>'userid';\r\n    \r\n    UPDATE framework.users\r\n    SET orgid = _orgid\r\n    WHERE id = _userid;\r\n\r\nEND;\r\n
227275	framework	fn_dialog_message_bydialog	framework.fn_dialog_message_bydialog(injson  json,outjson out json)	MESSAGES BY DIALOG	2020-05-21 11:31:02.195905	1	f	fn_dialog_message_bydialog(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_dialog_message_bydialog(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_dialog_message_bydialog(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE \t\r\n\t_dialog_id int;\t\r\n    _userid int;\r\n    _users json;\r\n    _foundcount bigint;\r\n    _pagesize smallint;\r\n    _offset int;\r\n    _reply_to int;\r\n    \r\nBEGIN\r\n\t_dialog_id = injson->>'dialogid';\r\n    _userid = injson->>'userid';\r\n    _pagesize = injson->>'pagesize';\r\n    _reply_to = injson->>'reply_to';\r\n    \r\n    \r\n    IF _userid is NULL \r\n    THEN\r\n    \tPERFORM raiserror('userid is null');\r\n    END IF;\r\n    \r\n    IF _dialog_id is NULL \r\n    THEN\r\n    \tPERFORM raiserror('dialogid is null');\r\n\tEND IF;\r\n    \r\n    SELECT\r\n    \td.users\r\n    FROM framework.dialogs as d\r\n    WHERE d.id = _dialog_id\r\n    INTO _users;\r\n    \r\n    IF _users is null \r\n    THEN\r\n    \tPERFORM raiserror('Dialog is not found');\r\n    END IF;\r\n    \r\n    IF _reply_to is not NULL \r\n    THEN\r\n        SELECT\r\n          count(id)\r\n        FROM framework.dialog_messages \r\n        WHERE dialog_id = _dialog_id and id >= _reply_to\r\n        INTO _pagesize;\r\n        \r\n        IF _pagesize < 30 THEN\r\n        \t_pagesize = 30;\r\n        END IF;\r\n    END IF;\r\n    \r\n    IF (\r\n    \tSELECT\r\n        \tcount(*)\r\n        FROM json_array_elements_text(_users)\r\n        WHERE value::varchar::int = _userid\r\n    ) = 0 \r\n    THEN\r\n    \tPERFORM raiserror('ACCESS DENIED');\r\n    END IF;\r\n    \r\n    SELECT\r\n      count(id)\r\n    FROM framework.dialog_messages \r\n    WHERE dialog_id = _dialog_id \r\n    INTO _foundcount;\r\n    \r\n    _pagesize = coalesce(_pagesize,'30');\r\n    _offset = _foundcount - _pagesize;\r\n    \r\n    IF _offset < 0 THEN \r\n    \t_offset = 0;\r\n  \tEND IF;\r\n    \r\n    \r\n    SELECT\r\n    \tarray_to_json(array_agg(row_to_json(z)))\r\n    FROM (\r\n      SELECT\r\n          row_number() over (ORDER BY dm.created)  as rownum,\r\n          dm.id,\r\n          dm.dialog_id,\r\n          dm.files,\r\n          dm.images,\r\n          dm.isread,\r\n          dm.created,\r\n          dm.isupdated,\r\n          dm.reply_to,\r\n          dm.forwarded_from,\r\n          (\r\n          SELECT\r\n          \tusf.login\r\n          FROM framework.dialog_messages as dmf\r\n          \tLEFT JOIN framework.users as usf on usf.id = dmf.userid\r\n          WHERE dmf.id = dm.forwarded_from\r\n          ) as forwarded_from_user,\r\n          dm.message_text,\r\n          concat(u.fam,' ',u.im,' ',u.ot) as userfio,\r\n\t\t  u.photo,\r\n          u.login,\r\n          o.orgname,\r\n          (\r\n          \tCASE WHEN (\r\n            \tSELECT\r\n                \tdms.id\r\n                FROM framework.dialog_messages as dms\r\n                WHERE dms.dialog_id = _dialog_id\r\n                ORDER BY dms.id \r\n                LIMIT 1\r\n          \t) = dm.id \r\n            THEN \r\n            \ttrue\r\n            ELSE \r\n           \t false\r\n            END\r\n          \r\n          ) as isfirst,\r\n          (\r\n            CASE\r\n            WHEN dm.userid = _userid\r\n            THEN true\r\n            ELSE false\r\n            END\r\n          ) as ismine,\r\n          (SELECT row_to_json(f) FROM (\r\n          \tSELECT\r\n            \tdm2.message_text,\r\n                dm2.id,\r\n                u2.login,\r\n                concat(u2.fam,' ',u2.im,' ',u2.ot) as userfio,\r\n                dm2.files,\r\n                dm2.images\r\n            FROM framework.dialog_messages as dm2\r\n           \t JOIN framework.users as u2 on u2.id = dm2.userid\r\n            WHERE dm2.id = dm.reply_to\r\n          ) as f) as reply_message\r\n      FROM framework.dialog_messages as dm\r\n          JOIN framework.users as u on u.id = dm.userid\r\n          LEFT JOIN framework.orgs as o on o.id = u.orgid\r\n      WHERE dm.dialog_id = _dialog_id\r\n\t  ORDER BY dm.created --desc\r\n      LIMIT _pagesize OFFSET _offset\r\n\t) as z\r\n    INTO outjson;\r\n\r\n\toutjson = COALESCE(outjson,'[]');\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE \t\r\n\t_dialog_id int;\t\r\n    _userid int;\r\n    _users json;\r\n    _foundcount bigint;\r\n    _pagesize smallint;\r\n    _offset int;\r\n    _reply_to int;\r\n    \r\nBEGIN\r\n\t_dialog_id = injson->>'dialogid';\r\n    _userid = injson->>'userid';\r\n    _pagesize = injson->>'pagesize';\r\n    _reply_to = injson->>'reply_to';\r\n    \r\n    \r\n    IF _userid is NULL \r\n    THEN\r\n    \tPERFORM raiserror('userid is null');\r\n    END IF;\r\n    \r\n    IF _dialog_id is NULL \r\n    THEN\r\n    \tPERFORM raiserror('dialogid is null');\r\n\tEND IF;\r\n    \r\n    SELECT\r\n    \td.users\r\n    FROM framework.dialogs as d\r\n    WHERE d.id = _dialog_id\r\n    INTO _users;\r\n    \r\n    IF _users is null \r\n    THEN\r\n    \tPERFORM raiserror('Dialog is not found');\r\n    END IF;\r\n    \r\n    IF _reply_to is not NULL \r\n    THEN\r\n        SELECT\r\n          count(id)\r\n        FROM framework.dialog_messages \r\n        WHERE dialog_id = _dialog_id and id >= _reply_to\r\n        INTO _pagesize;\r\n        \r\n        IF _pagesize < 30 THEN\r\n        \t_pagesize = 30;\r\n        END IF;\r\n    END IF;\r\n    \r\n    IF (\r\n    \tSELECT\r\n        \tcount(*)\r\n        FROM json_array_elements_text(_users)\r\n        WHERE value::varchar::int = _userid\r\n    ) = 0 \r\n    THEN\r\n    \tPERFORM raiserror('ACCESS DENIED');\r\n    END IF;\r\n    \r\n    SELECT\r\n      count(id)\r\n    FROM framework.dialog_messages \r\n    WHERE dialog_id = _dialog_id \r\n    INTO _foundcount;\r\n    \r\n    _pagesize = coalesce(_pagesize,'30');\r\n    _offset = _foundcount - _pagesize;\r\n    \r\n    IF _offset < 0 THEN \r\n    \t_offset = 0;\r\n  \tEND IF;\r\n    \r\n    \r\n    SELECT\r\n    \tarray_to_json(array_agg(row_to_json(z)))\r\n    FROM (\r\n      SELECT\r\n          row_number() over (ORDER BY dm.created)  as rownum,\r\n          dm.id,\r\n          dm.dialog_id,\r\n          dm.files,\r\n          dm.images,\r\n          dm.isread,\r\n          dm.created,\r\n          dm.isupdated,\r\n          dm.reply_to,\r\n          dm.forwarded_from,\r\n          (\r\n          SELECT\r\n          \tusf.login\r\n          FROM framework.dialog_messages as dmf\r\n          \tLEFT JOIN framework.users as usf on usf.id = dmf.userid\r\n          WHERE dmf.id = dm.forwarded_from\r\n          ) as forwarded_from_user,\r\n          dm.message_text,\r\n          concat(u.fam,' ',u.im,' ',u.ot) as userfio,\r\n\t\t  u.photo,\r\n          u.login,\r\n          o.orgname,\r\n          (\r\n          \tCASE WHEN (\r\n            \tSELECT\r\n                \tdms.id\r\n                FROM framework.dialog_messages as dms\r\n                WHERE dms.dialog_id = _dialog_id\r\n                ORDER BY dms.id \r\n                LIMIT 1\r\n          \t) = dm.id \r\n            THEN \r\n            \ttrue\r\n            ELSE \r\n           \t false\r\n            END\r\n          \r\n          ) as isfirst,\r\n          (\r\n            CASE\r\n            WHEN dm.userid = _userid\r\n            THEN true\r\n            ELSE false\r\n            END\r\n          ) as ismine,\r\n          (SELECT row_to_json(f) FROM (\r\n          \tSELECT\r\n            \tdm2.message_text,\r\n                dm2.id,\r\n                u2.login,\r\n                concat(u2.fam,' ',u2.im,' ',u2.ot) as userfio,\r\n                dm2.files,\r\n                dm2.images\r\n            FROM framework.dialog_messages as dm2\r\n           \t JOIN framework.users as u2 on u2.id = dm2.userid\r\n            WHERE dm2.id = dm.reply_to\r\n          ) as f) as reply_message\r\n      FROM framework.dialog_messages as dm\r\n          JOIN framework.users as u on u.id = dm.userid\r\n          LEFT JOIN framework.orgs as o on o.id = u.orgid\r\n      WHERE dm.dialog_id = _dialog_id\r\n\t  ORDER BY dm.created --desc\r\n      LIMIT _pagesize OFFSET _offset\r\n\t) as z\r\n    INTO outjson;\r\n\r\n\toutjson = COALESCE(outjson,'[]');\r\nEND;\r\n
227276	framework	fn_dialog_message_delete	framework.fn_dialog_message_delete(injson  json)	EDIR MESSAGE	2020-05-21 11:31:02.195905	1	f	fn_dialog_message_delete(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_dialog_message_delete(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_dialog_message_delete(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\n  _id int;\r\n  _dialog_id int;\r\n  _message_user int;\r\n  _created TIMESTAMP;\r\n  _od json;\r\nBEGIN\r\n  _id = injson->>'id';\t\r\n  _userid = injson->>'userid';\r\n\r\n  -- CHECKS\r\n  IF _id is NULL \r\n  THEN\r\n  \tPERFORM raiserror('id is null');\r\n  END IF;\r\n  \r\n  IF _userid is NULL \r\n  THEN\r\n  \tPERFORM raiserror('Userid is null');\r\n  END IF;\r\n  \r\n  SELECT\r\n    dm.created,\t\r\n    dm.userid,\r\n    dm.dialog_id\r\n  FROM framework.dialog_messages as dm\r\n  WHERE dm.id = _id\r\n  INTO _created, _message_user, _dialog_id;\r\n  \r\n  IF _message_user <> _userid \r\n  THEN\r\n  \tPERFORM raiserror('Access Denied');\r\n  END IF;\r\n  \r\n  IF NOT (\r\n     EXTRACT(year from now()-_created) = 0 AND \r\n  \t EXTRACT(month from now()-_created) = 0 AND\r\n     EXTRACT(day from now()-_created) = 0 AND\r\n     EXTRACT(hour from now()-_created) < 24\r\n  ) \r\n  THEN\r\n  \tPERFORM raiserror('Passed more than 24 hours');\r\n  END IF;\r\n  \r\n  -- DELETE MESSAGE\r\n  SELECT\r\n  \trow_to_json(d)\r\n  FROM (\r\n  \tSELECT\r\n  \t\t*\r\n \tFROM framework.dialog_messages \r\n \tWHERE id = _id\r\n  ) as d\r\n  INTO _od;\r\n  \r\n  DELETE FROM framework.dialog_notifications \r\n  WHERE message_id = _id;\r\n  \r\n  DELETE FROM framework.dialog_messages \r\n  WHERE id = _id;\r\n  \r\n  -- LOG\r\n  INSERT INTO framework.logtable (\r\n    tablename, tableid, opertype,\r\n    oldata, newdata, userid\r\n  ) VALUES (\r\n    'framework.dialog_messages', _id::varchar, '2',\r\n    _od, '[]'::json, _userid\t\r\n  );\r\n  \r\n  \r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _userid int;\r\n  _id int;\r\n  _dialog_id int;\r\n  _message_user int;\r\n  _created TIMESTAMP;\r\n  _od json;\r\nBEGIN\r\n  _id = injson->>'id';\t\r\n  _userid = injson->>'userid';\r\n\r\n  -- CHECKS\r\n  IF _id is NULL \r\n  THEN\r\n  \tPERFORM raiserror('id is null');\r\n  END IF;\r\n  \r\n  IF _userid is NULL \r\n  THEN\r\n  \tPERFORM raiserror('Userid is null');\r\n  END IF;\r\n  \r\n  SELECT\r\n    dm.created,\t\r\n    dm.userid,\r\n    dm.dialog_id\r\n  FROM framework.dialog_messages as dm\r\n  WHERE dm.id = _id\r\n  INTO _created, _message_user, _dialog_id;\r\n  \r\n  IF _message_user <> _userid \r\n  THEN\r\n  \tPERFORM raiserror('Access Denied');\r\n  END IF;\r\n  \r\n  IF NOT (\r\n     EXTRACT(year from now()-_created) = 0 AND \r\n  \t EXTRACT(month from now()-_created) = 0 AND\r\n     EXTRACT(day from now()-_created) = 0 AND\r\n     EXTRACT(hour from now()-_created) < 24\r\n  ) \r\n  THEN\r\n  \tPERFORM raiserror('Passed more than 24 hours');\r\n  END IF;\r\n  \r\n  -- DELETE MESSAGE\r\n  SELECT\r\n  \trow_to_json(d)\r\n  FROM (\r\n  \tSELECT\r\n  \t\t*\r\n \tFROM framework.dialog_messages \r\n \tWHERE id = _id\r\n  ) as d\r\n  INTO _od;\r\n  \r\n  DELETE FROM framework.dialog_notifications \r\n  WHERE message_id = _id;\r\n  \r\n  DELETE FROM framework.dialog_messages \r\n  WHERE id = _id;\r\n  \r\n  -- LOG\r\n  INSERT INTO framework.logtable (\r\n    tablename, tableid, opertype,\r\n    oldata, newdata, userid\r\n  ) VALUES (\r\n    'framework.dialog_messages', _id::varchar, '2',\r\n    _od, '[]'::json, _userid\t\r\n  );\r\n  \r\n  \r\nEND;\r\n
227277	framework	fn_dialog_message_edit	framework.fn_dialog_message_edit(injson  json)	EDIR MESSAGE	2020-05-21 11:31:02.195905	1	f	fn_dialog_message_edit(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_dialog_message_edit(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_dialog_message_edit(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\n  _message_text varchar;\r\n  _files json;\r\n  _images json;\r\n  _id int;\r\n  _dialog_id int;\r\n  _message_user int;\r\n  _created TIMESTAMP;\r\n  _od json;\r\n  _nw json;\r\nBEGIN\r\n  _id = injson->>'id';\t\r\n  _userid = injson->>'userid';\r\n  _message_text = injson->>'message_text';\r\n  _files = injson->>'files';\r\n  _images = injson->>'images';\r\n  \r\n  -- CHECKS\r\n  IF _id is NULL \r\n  THEN\r\n  \tPERFORM raiserror('id is null');\r\n  END IF;\r\n  \r\n  IF _userid is NULL \r\n  THEN\r\n  \tPERFORM raiserror('Userid is null');\r\n  END IF;\r\n  \r\n  SELECT\r\n    dm.created,\t\r\n    dm.userid,\r\n    dm.dialog_id\r\n  FROM framework.dialog_messages as dm\r\n  WHERE dm.id = _id\r\n  INTO _created, _message_user, _dialog_id;\r\n  \r\n  IF _message_user <> _userid \r\n  THEN\r\n  \tPERFORM raiserror('Access Denied');\r\n  END IF;\r\n  \r\n  IF NOT (\r\n     EXTRACT(year from now()-_created) = 0 AND \r\n  \t EXTRACT(month from now()-_created) = 0 AND\r\n     EXTRACT(day from now()-_created) = 0 AND\r\n     EXTRACT(hour from now()-_created) < 24\r\n  ) \r\n  THEN\r\n  \tPERFORM raiserror('Passed more than 24 hours');\r\n  END IF;\r\n  \r\n  IF COALESCE(_message_text,'') = '' \r\n  THEN\r\n  \tPERFORM raiserror('Message is empty');\r\n  END IF;\r\n\r\n  -- EDIT MESSAGE\r\n  SELECT\r\n  \trow_to_json(d)\r\n  FROM (\r\n  \tSELECT\r\n  \t\t*\r\n \tFROM framework.dialog_messages \r\n \tWHERE id = _id\r\n  ) as d\r\n  INTO _od;\r\n  \r\n  UPDATE framework.dialog_messages \r\n  SET \r\n  \tmessage_text = _message_text,\r\n    isupdated = true,\r\n    files = COALESCE(_files,files),\r\n    images = COALESCE(_images,images)\r\n  WHERE id = _id;\r\n  \r\n  SELECT\r\n  \trow_to_json(d)\r\n  FROM (\r\n  \tSELECT\r\n  \t\t*\r\n \tFROM framework.dialog_messages \r\n \tWHERE id = _id\r\n  ) as d\r\n  INTO _nw;\r\n  \r\n  -- LOG\r\n  INSERT INTO framework.logtable (\r\n    tablename, tableid, opertype,\r\n    oldata, newdata, userid\r\n  ) VALUES (\r\n    'framework.dialog_messages', _id::varchar, '2',\r\n    _od, _nw, _userid\t\r\n  );\r\n  \r\n  UPDATE framework.dialog_messages\r\n  SET \r\n  \tisread = true, \r\n    user_reads = (\r\n      CASE WHEN (\r\n          SELECT\r\n              count(*)\r\n          FROM json_array_elements_text(user_reads)\r\n          WHERE value::varchar::int = _userid\r\n      ) = 0\r\n      THEN (\r\n          array_to_json(ARRAY(\r\n              SELECT\r\n                  _userid\t\r\n          ))::jsonb||user_reads::jsonb\r\n      )::json\r\n      ELSE\r\n      \tuser_reads\r\n      END\r\n    )\r\n  WHERE dialog_id = _dialog_id and id <> _id;\r\n  \r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _userid int;\r\n  _message_text varchar;\r\n  _files json;\r\n  _images json;\r\n  _id int;\r\n  _dialog_id int;\r\n  _message_user int;\r\n  _created TIMESTAMP;\r\n  _od json;\r\n  _nw json;\r\nBEGIN\r\n  _id = injson->>'id';\t\r\n  _userid = injson->>'userid';\r\n  _message_text = injson->>'message_text';\r\n  _files = injson->>'files';\r\n  _images = injson->>'images';\r\n  \r\n  -- CHECKS\r\n  IF _id is NULL \r\n  THEN\r\n  \tPERFORM raiserror('id is null');\r\n  END IF;\r\n  \r\n  IF _userid is NULL \r\n  THEN\r\n  \tPERFORM raiserror('Userid is null');\r\n  END IF;\r\n  \r\n  SELECT\r\n    dm.created,\t\r\n    dm.userid,\r\n    dm.dialog_id\r\n  FROM framework.dialog_messages as dm\r\n  WHERE dm.id = _id\r\n  INTO _created, _message_user, _dialog_id;\r\n  \r\n  IF _message_user <> _userid \r\n  THEN\r\n  \tPERFORM raiserror('Access Denied');\r\n  END IF;\r\n  \r\n  IF NOT (\r\n     EXTRACT(year from now()-_created) = 0 AND \r\n  \t EXTRACT(month from now()-_created) = 0 AND\r\n     EXTRACT(day from now()-_created) = 0 AND\r\n     EXTRACT(hour from now()-_created) < 24\r\n  ) \r\n  THEN\r\n  \tPERFORM raiserror('Passed more than 24 hours');\r\n  END IF;\r\n  \r\n  IF COALESCE(_message_text,'') = '' \r\n  THEN\r\n  \tPERFORM raiserror('Message is empty');\r\n  END IF;\r\n\r\n  -- EDIT MESSAGE\r\n  SELECT\r\n  \trow_to_json(d)\r\n  FROM (\r\n  \tSELECT\r\n  \t\t*\r\n \tFROM framework.dialog_messages \r\n \tWHERE id = _id\r\n  ) as d\r\n  INTO _od;\r\n  \r\n  UPDATE framework.dialog_messages \r\n  SET \r\n  \tmessage_text = _message_text,\r\n    isupdated = true,\r\n    files = COALESCE(_files,files),\r\n    images = COALESCE(_images,images)\r\n  WHERE id = _id;\r\n  \r\n  SELECT\r\n  \trow_to_json(d)\r\n  FROM (\r\n  \tSELECT\r\n  \t\t*\r\n \tFROM framework.dialog_messages \r\n \tWHERE id = _id\r\n  ) as d\r\n  INTO _nw;\r\n  \r\n  -- LOG\r\n  INSERT INTO framework.logtable (\r\n    tablename, tableid, opertype,\r\n    oldata, newdata, userid\r\n  ) VALUES (\r\n    'framework.dialog_messages', _id::varchar, '2',\r\n    _od, _nw, _userid\t\r\n  );\r\n  \r\n  UPDATE framework.dialog_messages\r\n  SET \r\n  \tisread = true, \r\n    user_reads = (\r\n      CASE WHEN (\r\n          SELECT\r\n              count(*)\r\n          FROM json_array_elements_text(user_reads)\r\n          WHERE value::varchar::int = _userid\r\n      ) = 0\r\n      THEN (\r\n          array_to_json(ARRAY(\r\n              SELECT\r\n                  _userid\t\r\n          ))::jsonb||user_reads::jsonb\r\n      )::json\r\n      ELSE\r\n      \tuser_reads\r\n      END\r\n    )\r\n  WHERE dialog_id = _dialog_id and id <> _id;\r\n  \r\nEND;\r\n
227279	framework	fn_dialog_message_setread	framework.fn_dialog_message_setread(injson  json)	SET MESSAGE READED	2020-05-21 11:31:02.195905	1	f	fn_dialog_message_setread(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_dialog_message_setread(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_dialog_message_setread(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _id int;\r\n  _userid int;\r\nBEGIN\r\n\t_id = injson->>'id';\r\n    _userid = injson->>'userid';\r\n    \r\n    IF _id is null \r\n    THEN\r\n    \tPERFORM raiserror('id is null');\r\n    END IF;\r\n        \r\n    IF _userid is null \r\n    THEN\r\n    \tPERFORM raiserror('userid is null');\r\n    END IF;\r\n    \r\n    \r\n    \r\n  UPDATE framework.dialog_messages\r\n  SET \r\n    isread = true, \r\n    user_reads = (\r\n      CASE WHEN (\r\n          SELECT\r\n              count(*)\r\n          FROM json_array_elements_text(user_reads)\r\n          WHERE value::varchar::int = _userid\r\n      ) = 0\r\n      THEN (\r\n          array_to_json(ARRAY(\r\n              SELECT\r\n                  _userid\t\r\n          ))::jsonb||user_reads::jsonb\r\n      )::json\r\n      ELSE\r\n      \tuser_reads\r\n      END\r\n    )\r\n  WHERE id = _id;\r\n  UPDATE framework.dialog_notifications\r\n  SET\r\n     issend = TRUE, isread = true\r\n  WHERE message_id = _id and userid = _userid;\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _id int;\r\n  _userid int;\r\nBEGIN\r\n\t_id = injson->>'id';\r\n    _userid = injson->>'userid';\r\n    \r\n    IF _id is null \r\n    THEN\r\n    \tPERFORM raiserror('id is null');\r\n    END IF;\r\n        \r\n    IF _userid is null \r\n    THEN\r\n    \tPERFORM raiserror('userid is null');\r\n    END IF;\r\n    \r\n    \r\n    \r\n  UPDATE framework.dialog_messages\r\n  SET \r\n    isread = true, \r\n    user_reads = (\r\n      CASE WHEN (\r\n          SELECT\r\n              count(*)\r\n          FROM json_array_elements_text(user_reads)\r\n          WHERE value::varchar::int = _userid\r\n      ) = 0\r\n      THEN (\r\n          array_to_json(ARRAY(\r\n              SELECT\r\n                  _userid\t\r\n          ))::jsonb||user_reads::jsonb\r\n      )::json\r\n      ELSE\r\n      \tuser_reads\r\n      END\r\n    )\r\n  WHERE id = _id;\r\n  UPDATE framework.dialog_notifications\r\n  SET\r\n     issend = TRUE, isread = true\r\n  WHERE message_id = _id and userid = _userid;\r\nEND;\r\n
227287	framework	fn_dialogs_usersearch	framework.fn_dialogs_usersearch(injson  json,outjson out json)	SEARCH USERS	2020-05-21 11:31:02.195905	1	f	fn_dialogs_usersearch(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_dialogs_usersearch(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_dialogs_usersearch(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _substr varchar(150);\r\n  _userid int;\r\nBEGIN\r\n\r\n\t_substr = injson->>'substr';\r\n    _userid = injson->>'userid';\r\n    \r\n    _substr = coalesce(_substr,'1');\r\n    _substr = replace(_substr,'@','');\r\n    _substr = lower(concat(_substr,'%'));\r\n    \r\n    SELECT\r\n    \tarray_to_json(array_agg(row_to_json(z)))\r\n    FROM (\r\n    \tSELECT\r\n        \tu.id,\r\n        \tu.fam,\r\n            u.im,\r\n            u.ot,\r\n            u.login,\r\n            u.orgid,\r\n            o.orgname,\r\n            u.photo\r\n        FROM framework.users as u\r\n        \tLEFT JOIN framework.orgs as o on o.id = u.orgid\r\n        WHERE lower(u.login) like _substr and u.isactive and \r\n        \t  u.id <> _userid\r\n    ) as z\r\n    INTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  _substr varchar(150);\r\n  _userid int;\r\nBEGIN\r\n\r\n\t_substr = injson->>'substr';\r\n    _userid = injson->>'userid';\r\n    \r\n    _substr = coalesce(_substr,'1');\r\n    _substr = replace(_substr,'@','');\r\n    _substr = lower(concat(_substr,'%'));\r\n    \r\n    SELECT\r\n    \tarray_to_json(array_agg(row_to_json(z)))\r\n    FROM (\r\n    \tSELECT\r\n        \tu.id,\r\n        \tu.fam,\r\n            u.im,\r\n            u.ot,\r\n            u.login,\r\n            u.orgid,\r\n            o.orgname,\r\n            u.photo\r\n        FROM framework.users as u\r\n        \tLEFT JOIN framework.orgs as o on o.id = u.orgid\r\n        WHERE lower(u.login) like _substr and u.isactive and \r\n        \t  u.id <> _userid\r\n    ) as z\r\n    INTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\n\r\nEND;\r\n
227280	framework	fn_dialog_personal_create	framework.fn_dialog_personal_create(injson  json)	CREATE PERSONAL DIALOG	2020-05-21 11:31:02.195905	1	f	fn_dialog_personal_create(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_dialog_personal_create(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_dialog_personal_create(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\n  _reciver_user_id int;\r\n  _message_text varchar;\r\n  _dialog_id int;\r\n  _users JSON;\r\n  _files json;\r\n  _images json;\r\n  _id int;\r\n  _first_message json;\r\nBEGIN\r\n\t\r\n\t_userid = injson->>'userid';\r\n    _reciver_user_id = injson->>'reciver_user_id';\r\n    _message_text = injson->>'message_text';\r\n    _files = injson->>'files';\r\n    _images = injson->>'images';\r\n    \r\n    -- CHECKS\r\n    IF _userid is NULL \r\n    THEN\r\n    \tPERFORM raiserror('userid is null');\r\n    END IF;\r\n    \r\n    IF _reciver_user_id is NULL \r\n    THEN\r\n    \tPERFORM raiserror('reciver_user is null');\r\n    END IF;\r\n    \r\n    -- IF MESSAGE IS NOT EMPTY, CREATE FIRST MESSAGE\r\n    IF _message_text is NOT NULL\r\n    THEN\r\n    \t_first_message = json_build_object(\r\n           'userid', _userid,\r\n           'dialogid', _dialog_id,\r\n           'files', _files,\r\n           'images', _images,\r\n           'message_text', _message_text\r\n         ); \r\n    ELSE \r\n    \t_first_message = '{}'::json;\r\n    END IF; \r\n    \r\n    -- USERS FOR PERSONAL DIALOG\r\n    _users = array_to_json(ARRAY(\r\n      SELECT\r\n          _userid\r\n      UNION \r\n      SELECT \r\n          _reciver_user_id\r\n    ));\r\n    \r\n    -- ADD DIALOG\r\n    _dialog_id = nextval('framework.dialogs_id_seq'::regclass);\r\n\t\r\n    INSERT INTO framework.dialogs (\r\n       id, users, userid, first_message\r\n    ) VALUES (\r\n       _dialog_id, _users ,_userid, _first_message\r\n    );\r\n\t\r\n    \r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _userid int;\r\n  _reciver_user_id int;\r\n  _message_text varchar;\r\n  _dialog_id int;\r\n  _users JSON;\r\n  _files json;\r\n  _images json;\r\n  _id int;\r\n  _first_message json;\r\nBEGIN\r\n\t\r\n\t_userid = injson->>'userid';\r\n    _reciver_user_id = injson->>'reciver_user_id';\r\n    _message_text = injson->>'message_text';\r\n    _files = injson->>'files';\r\n    _images = injson->>'images';\r\n    \r\n    -- CHECKS\r\n    IF _userid is NULL \r\n    THEN\r\n    \tPERFORM raiserror('userid is null');\r\n    END IF;\r\n    \r\n    IF _reciver_user_id is NULL \r\n    THEN\r\n    \tPERFORM raiserror('reciver_user is null');\r\n    END IF;\r\n    \r\n    -- IF MESSAGE IS NOT EMPTY, CREATE FIRST MESSAGE\r\n    IF _message_text is NOT NULL\r\n    THEN\r\n    \t_first_message = json_build_object(\r\n           'userid', _userid,\r\n           'dialogid', _dialog_id,\r\n           'files', _files,\r\n           'images', _images,\r\n           'message_text', _message_text\r\n         ); \r\n    ELSE \r\n    \t_first_message = '{}'::json;\r\n    END IF; \r\n    \r\n    -- USERS FOR PERSONAL DIALOG\r\n    _users = array_to_json(ARRAY(\r\n      SELECT\r\n          _userid\r\n      UNION \r\n      SELECT \r\n          _reciver_user_id\r\n    ));\r\n    \r\n    -- ADD DIALOG\r\n    _dialog_id = nextval('framework.dialogs_id_seq'::regclass);\r\n\t\r\n    INSERT INTO framework.dialogs (\r\n       id, users, userid, first_message\r\n    ) VALUES (\r\n       _dialog_id, _users ,_userid, _first_message\r\n    );\r\n\t\r\n    \r\nEND;\r\n
227281	framework	fn_dialog_removeadmin	framework.fn_dialog_removeadmin(injson  json)	REMOVE USER FROM ADMINS	2020-05-21 11:31:02.195905	1	f	fn_dialog_removeadmin(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_dialog_removeadmin(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_dialog_removeadmin(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\n  _admin_to_remove int;\r\n  _dialogid int;\r\n  _dtype smallint;\r\n  _admins json;\r\n  _od json;\r\n  _users JSON;\r\n  _nw JSON;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n    _dialogid = injson->>'id';\r\n    _admin_to_remove = injson->>'admin_to_remove';\r\n\r\n\r\n\tIF _dialogid IS NULL \r\n    THEN\r\n    \tPERFORM raiserror('id is null');\r\n    END IF;\r\n    \r\n    IF _admin_to_remove is null \r\n    THEN \r\n  \t  PERFORM raiserror('admin_to_remove is null');\r\n    END IF;\r\n    \r\n    SELECT \r\n    \td.dialog_admins,\r\n        d.dtype,\r\n        d.dialog_admins\r\n    FROM framework.dialogs as d\r\n    WHERE d.id = _dialogid\r\n    INTO _admins, _dtype, _users; \r\n\r\n    IF _dtype = '1'\r\n    THEN \r\n        RETURN;\r\n    END IF;\r\n    \r\n    IF _admin_to_remove not in (\r\n    \tSELECT\r\n        \tvalue::varchar::int\r\n    \tFROM json_array_elements_text(_admins)\r\n    )\r\n    THEN\r\n    \tPERFORM raiserror('User is not admin');\r\n    END IF;\r\n    \r\n    \r\n    \r\n    IF (\r\n        SELECT\r\n            count(*)\r\n        FROM json_array_elements_text(_admins)\r\n        WHERE value::varchar::int = _userid\r\n    ) = 0\r\n    THEN\r\n        PERFORM raiserror('ACCESS DENIED');\r\n    END IF;\r\n    \r\n    SELECT\r\n        row_to_json(z)\r\n    FROM (\r\n         SELECT\r\n                d.*\r\n         FROM framework.dialogs as d\r\n         WHERE d.id = _dialogid\r\n    ) as z\r\n    INTO _od;\r\n    \r\n    UPDATE framework.dialogs\r\n    SET    \r\n\t\tdialog_admins = array_to_json(ARRAY(\r\n        \tSELECT\r\n                value::varchar::int\r\n            FROM json_array_elements_text(_admins)\r\n            WHERE value::varchar::int <> _admin_to_remove\r\n        ))\r\n    WHERE id = _dialogid;\r\n\r\n\r\n    SELECT\r\n        row_to_json(z)\r\n    FROM (\r\n         SELECT\r\n                d.*\r\n         FROM framework.dialogs as d\r\n         WHERE d.id = _dialogid\r\n    ) as z\r\n    INTO _nw;\r\n    \r\n    INSERT INTO framework.logtable (\r\n      tablename, tableid,\r\n      opertype, oldata, newdata,\r\n      userid\r\n    ) VALUES (\r\n      'framework.dialogs', _dialogid::VARCHAR,\r\n      '2',_od,_nw,\r\n      _userid\r\n     );\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _userid int;\r\n  _admin_to_remove int;\r\n  _dialogid int;\r\n  _dtype smallint;\r\n  _admins json;\r\n  _od json;\r\n  _users JSON;\r\n  _nw JSON;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n    _dialogid = injson->>'id';\r\n    _admin_to_remove = injson->>'admin_to_remove';\r\n\r\n\r\n\tIF _dialogid IS NULL \r\n    THEN\r\n    \tPERFORM raiserror('id is null');\r\n    END IF;\r\n    \r\n    IF _admin_to_remove is null \r\n    THEN \r\n  \t  PERFORM raiserror('admin_to_remove is null');\r\n    END IF;\r\n    \r\n    SELECT \r\n    \td.dialog_admins,\r\n        d.dtype,\r\n        d.dialog_admins\r\n    FROM framework.dialogs as d\r\n    WHERE d.id = _dialogid\r\n    INTO _admins, _dtype, _users; \r\n\r\n    IF _dtype = '1'\r\n    THEN \r\n        RETURN;\r\n    END IF;\r\n    \r\n    IF _admin_to_remove not in (\r\n    \tSELECT\r\n        \tvalue::varchar::int\r\n    \tFROM json_array_elements_text(_admins)\r\n    )\r\n    THEN\r\n    \tPERFORM raiserror('User is not admin');\r\n    END IF;\r\n    \r\n    \r\n    \r\n    IF (\r\n        SELECT\r\n            count(*)\r\n        FROM json_array_elements_text(_admins)\r\n        WHERE value::varchar::int = _userid\r\n    ) = 0\r\n    THEN\r\n        PERFORM raiserror('ACCESS DENIED');\r\n    END IF;\r\n    \r\n    SELECT\r\n        row_to_json(z)\r\n    FROM (\r\n         SELECT\r\n                d.*\r\n         FROM framework.dialogs as d\r\n         WHERE d.id = _dialogid\r\n    ) as z\r\n    INTO _od;\r\n    \r\n    UPDATE framework.dialogs\r\n    SET    \r\n\t\tdialog_admins = array_to_json(ARRAY(\r\n        \tSELECT\r\n                value::varchar::int\r\n            FROM json_array_elements_text(_admins)\r\n            WHERE value::varchar::int <> _admin_to_remove\r\n        ))\r\n    WHERE id = _dialogid;\r\n\r\n\r\n    SELECT\r\n        row_to_json(z)\r\n    FROM (\r\n         SELECT\r\n                d.*\r\n         FROM framework.dialogs as d\r\n         WHERE d.id = _dialogid\r\n    ) as z\r\n    INTO _nw;\r\n    \r\n    INSERT INTO framework.logtable (\r\n      tablename, tableid,\r\n      opertype, oldata, newdata,\r\n      userid\r\n    ) VALUES (\r\n      'framework.dialogs', _dialogid::VARCHAR,\r\n      '2',_od,_nw,\r\n      _userid\r\n     );\r\nEND;\r\n
227300	framework	fn_logout	framework.fn_logout(sesid  bpchar,outjson out json)	log out	2020-05-21 11:31:02.195905	1	f	fn_logout(sesid  bpchar,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_logout(sesid  bpchar,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_logout(sesid character, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\r\n\tUPDATE framework.sess\r\n\tSET killed = now()\r\n    WHERE id = sesid;\r\n    \r\n    outjson = '{"message":"OK"}';\r\n\r\nEND;\r\n$function$\n	[{"argname":"sesid","argmode":"input","argtype":"bpchar"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nBEGIN\r\n\r\n\tUPDATE framework.sess\r\n\tSET killed = now()\r\n    WHERE id = sesid;\r\n    \r\n    outjson = '{"message":"OK"}';\r\n\r\nEND;\r\n
227283	framework	fn_dialogs_byuser	framework.fn_dialogs_byuser(injson  json,outjson out json)	USER DIALOGS	2020-05-21 11:31:02.195905	1	f	fn_dialogs_byuser(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_dialogs_byuser(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_dialogs_byuser(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n    \r\n    IF _userid is null \r\n    THEN\r\n    \tPERFORM raiserror('userid is null');\r\n    END IF;\r\n    \r\n    SELECT\r\n    \tarray_to_json(array_agg(row_to_json(z)))\r\n    FROM (\r\n      SELECT \r\n          d.id, (\r\n            CASE WHEN\r\n              d.dtype = '1'\r\n            THEN (\r\n              SELECT\r\n              \tu.login\r\n              FROM json_array_elements_text(d.users) as uu\r\n              \tJOIN framework.users as u on uu.value::varchar::int = u.id\r\n              WHERE uu.value::varchar::int <> _userid\r\n            )\t\t\r\n            ELSE\r\n              d.title\r\n            END\r\n          ) as title, (\r\n            CASE WHEN\r\n              d.dtype = '1'\r\n            THEN (\r\n              SELECT\r\n              \tu.photo\r\n              FROM json_array_elements_text(d.users) as uu\r\n              \tJOIN framework.users as u on uu.value::varchar::int = u.id\r\n              WHERE uu.value::varchar::int <> _userid\r\n            )\t\t\r\n            ELSE\r\n              d.photo\r\n            END\r\n          ) as photo,\r\n          d.created,\r\n          d.last_message_date,\r\n          (\r\n          \tSELECT \r\n            \trow_to_json(f)\r\n            FROM (\r\n            \tSELECT\r\n                \tm.message_text,\r\n                    concat(u.fam,' ',u.im,' ',u.ot) as userfio,\r\n                    u.login,\r\n                    u.photo,\r\n                    u.orgid,\r\n                    o.orgname,\r\n                    (\r\n                      CASE\r\n                      WHEN m.userid = _userid\r\n                      THEN true\r\n                      ELSE false\r\n                      END\r\n                    ) as ismine\r\n                FROM framework.dialog_messages as m\r\n                \tLEFT JOIN framework.users as u on u.id = m.userid\r\n                    LEFT JOIN framework.orgs as o on o.id = u.orgid\r\n                WHERE m.dialog_id = d.id\r\n                ORDER BY m.created DESC LIMIT 1\r\n            ) as f\r\n          ) as last_message,\r\n          d.dtype as dialog_type,\r\n          dt.tname as dialog_type_name,\r\n          (\r\n          \tSELECT\r\n            \tarray_to_json(array_agg(row_to_json(zz)))\r\n           \tFROM (\r\n              SELECT \r\n              \tuuu.id,\r\n              \tconcat(uuu.fam,' ',uuu.im,' ',uuu.ot) as userfio,\r\n                uuu.login,\r\n                uuu.photo,\r\n                uuu.orgid,\r\n                o.orgname, (\r\n                  CASE WHEN da.value::varchar is null\r\n                  THEN false\r\n                  ELSE true\r\n                  END\r\n                )  as isadmin\r\n              FROM json_array_elements_text(d.users) as uu\r\n              \tJOIN framework.users as uuu on uuu.id = uu.value::varchar::int \r\n                LEFT JOIN framework.orgs as o on o.id = uuu.orgid\r\n                LEFT JOIN json_array_elements_text(d.dialog_admins) as da on da.value::varchar = uu.value::varchar\r\n              --WHERE uu.value::varchar::int <> _userid\r\n            ) as zz\r\n          ) as users, (\r\n                SELECT\r\n                    count(m.id)\r\n                FROM framework.dialog_messages as m\r\n                \tJOIN framework.dialog_notifications as dn on \r\n                    \tdn.message_id = m.id AND\r\n                        dn.userid = _userid AND \r\n                        NOT dn.isread\r\n                WHERE m.dialog_id = d.id \r\n          ) as unreaded,\r\n          (\r\n          \tSELECT\r\n            \trow_to_json(zd)\r\n            FROM (\r\n            \tSELECT\r\n                \tu.id,\r\n                    u.login,\r\n                    u.photo\r\n                FROM framework.users as u\r\n                WHERE u.id = d.creator\r\n            ) as zd\r\n          ) as creator,\r\n          d.dialog_admins, (\r\n            CASE WHEN (\r\n              SELECT\r\n                  count(*)\r\n              FROM json_array_elements_text(d.dialog_admins)\r\n              WHERE value::varchar::int = _userid\r\n            ) > 0 THEN true\r\n            ELSE false END\r\n          ) as isadmin\r\n      FROM framework.dialogs as d\r\n      \tJOIN framework.dialog_types as dt on dt.id = d.dtype\r\n      WHERE (\r\n          SELECT count(value) \r\n          FROM json_array_elements_text(d.users) \r\n          WHERE value::varchar::int = _userid\r\n      ) > 0\r\n      ORDER BY d.last_message_date desc\r\n    ) as z\r\n    INTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  _userid int;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n    \r\n    IF _userid is null \r\n    THEN\r\n    \tPERFORM raiserror('userid is null');\r\n    END IF;\r\n    \r\n    SELECT\r\n    \tarray_to_json(array_agg(row_to_json(z)))\r\n    FROM (\r\n      SELECT \r\n          d.id, (\r\n            CASE WHEN\r\n              d.dtype = '1'\r\n            THEN (\r\n              SELECT\r\n              \tu.login\r\n              FROM json_array_elements_text(d.users) as uu\r\n              \tJOIN framework.users as u on uu.value::varchar::int = u.id\r\n              WHERE uu.value::varchar::int <> _userid\r\n            )\t\t\r\n            ELSE\r\n              d.title\r\n            END\r\n          ) as title, (\r\n            CASE WHEN\r\n              d.dtype = '1'\r\n            THEN (\r\n              SELECT\r\n              \tu.photo\r\n              FROM json_array_elements_text(d.users) as uu\r\n              \tJOIN framework.users as u on uu.value::varchar::int = u.id\r\n              WHERE uu.value::varchar::int <> _userid\r\n            )\t\t\r\n            ELSE\r\n              d.photo\r\n            END\r\n          ) as photo,\r\n          d.created,\r\n          d.last_message_date,\r\n          (\r\n          \tSELECT \r\n            \trow_to_json(f)\r\n            FROM (\r\n            \tSELECT\r\n                \tm.message_text,\r\n                    concat(u.fam,' ',u.im,' ',u.ot) as userfio,\r\n                    u.login,\r\n                    u.photo,\r\n                    u.orgid,\r\n                    o.orgname,\r\n                    (\r\n                      CASE\r\n                      WHEN m.userid = _userid\r\n                      THEN true\r\n                      ELSE false\r\n                      END\r\n                    ) as ismine\r\n                FROM framework.dialog_messages as m\r\n                \tLEFT JOIN framework.users as u on u.id = m.userid\r\n                    LEFT JOIN framework.orgs as o on o.id = u.orgid\r\n                WHERE m.dialog_id = d.id\r\n                ORDER BY m.created DESC LIMIT 1\r\n            ) as f\r\n          ) as last_message,\r\n          d.dtype as dialog_type,\r\n          dt.tname as dialog_type_name,\r\n          (\r\n          \tSELECT\r\n            \tarray_to_json(array_agg(row_to_json(zz)))\r\n           \tFROM (\r\n              SELECT \r\n              \tuuu.id,\r\n              \tconcat(uuu.fam,' ',uuu.im,' ',uuu.ot) as userfio,\r\n                uuu.login,\r\n                uuu.photo,\r\n                uuu.orgid,\r\n                o.orgname, (\r\n                  CASE WHEN da.value::varchar is null\r\n                  THEN false\r\n                  ELSE true\r\n                  END\r\n                )  as isadmin\r\n              FROM json_array_elements_text(d.users) as uu\r\n              \tJOIN framework.users as uuu on uuu.id = uu.value::varchar::int \r\n                LEFT JOIN framework.orgs as o on o.id = uuu.orgid\r\n                LEFT JOIN json_array_elements_text(d.dialog_admins) as da on da.value::varchar = uu.value::varchar\r\n              --WHERE uu.value::varchar::int <> _userid\r\n            ) as zz\r\n          ) as users, (\r\n                SELECT\r\n                    count(m.id)\r\n                FROM framework.dialog_messages as m\r\n                \tJOIN framework.dialog_notifications as dn on \r\n                    \tdn.message_id = m.id AND\r\n                        dn.userid = _userid AND \r\n                        NOT dn.isread\r\n                WHERE m.dialog_id = d.id \r\n          ) as unreaded,\r\n          (\r\n          \tSELECT\r\n            \trow_to_json(zd)\r\n            FROM (\r\n            \tSELECT\r\n                \tu.id,\r\n                    u.login,\r\n                    u.photo\r\n                FROM framework.users as u\r\n                WHERE u.id = d.creator\r\n            ) as zd\r\n          ) as creator,\r\n          d.dialog_admins, (\r\n            CASE WHEN (\r\n              SELECT\r\n                  count(*)\r\n              FROM json_array_elements_text(d.dialog_admins)\r\n              WHERE value::varchar::int = _userid\r\n            ) > 0 THEN true\r\n            ELSE false END\r\n          ) as isadmin\r\n      FROM framework.dialogs as d\r\n      \tJOIN framework.dialog_types as dt on dt.id = d.dtype\r\n      WHERE (\r\n          SELECT count(value) \r\n          FROM json_array_elements_text(d.users) \r\n          WHERE value::varchar::int = _userid\r\n      ) > 0\r\n      ORDER BY d.last_message_date desc\r\n    ) as z\r\n    INTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\n\r\nEND;\r\n
227284	framework	fn_dialogs_chats_ws	framework.fn_dialogs_chats_ws(injson  json,outjson out json)	DIALOGS NOTIFICATIONS FOR WS	2020-05-21 11:31:02.195905	1	f	fn_dialogs_chats_ws(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_dialogs_chats_ws(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_dialogs_chats_ws(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\nBEGIN\r\n\r\n  _userid = injson->>'userid';\r\n\r\n  \r\n  SELECT\r\n     array_to_json(array_agg(row_to_json(z)))\r\n  FROM (\r\n       SELECT  \r\n\t     -- n.id as notificationid,\r\n          d.id, (\r\n            CASE WHEN\r\n              d.dtype = '1'\r\n            THEN (\r\n              SELECT\r\n                  u.login\r\n              FROM json_array_elements_text(d.users) as uu\r\n                  JOIN framework.users as u on uu.value::varchar::int = u.id\r\n              WHERE uu.value::varchar::int <> _userid\r\n            )        \r\n            ELSE\r\n              d.title\r\n            END\r\n          ) as title, (\r\n            CASE WHEN\r\n              d.dtype = '1'\r\n            THEN (\r\n              SELECT\r\n                  u.photo\r\n              FROM json_array_elements_text(d.users) as uu\r\n                  JOIN framework.users as u on uu.value::varchar::int = u.id\r\n              WHERE uu.value::varchar::int <> _userid\r\n            )        \r\n            ELSE\r\n              d.photo\r\n            END\r\n          ) as photo,\r\n          d.created,\r\n          d.last_message_date, COALESCE((\r\n            SELECT \r\n                array_to_json(array_agg(row_to_json(f)))\r\n            FROM (\r\n                SELECT\r\n                \t--DISTINCT\r\n                    m.id,\r\n                    m.message_text,\r\n                    concat(u.fam,' ',u.im,' ',u.ot) as userfio,\r\n                    u.login,\r\n                    u.photo,\r\n                    u.orgid,\r\n                    o.orgname--,\r\n                   -- m.created\r\n                FROM framework.dialog_messages as m\r\n                    LEFT JOIN framework.users as u on u.id = m.userid\r\n                    LEFT JOIN framework.orgs as o on o.id = u.orgid\r\n                \tJOIN framework.dialog_notifications as dn on \r\n                    \tdn.message_id = m.id AND not dn.issend and dn.userid = _userid\r\n                WHERE m.dialog_id = d.id\r\n                ORDER BY m.created DESC --LIMIT 1\r\n            ) as f\r\n          ),'[]') as messages,\r\n          d.dtype as dialog_type,\r\n          dt.tname as dialog_type_name,\r\n          (\r\n             SELECT\r\n                array_to_json(array_agg(row_to_json(zz)))\r\n             FROM (\r\n              SELECT \r\n              \tuuu.id,\r\n                  concat(uuu.fam,' ',uuu.im,' ',uuu.ot) as userfio,\r\n                uuu.login,\r\n                uuu.photo,\r\n                uuu.orgid,\r\n                o.orgname, (\r\n                  CASE WHEN da.value::varchar is null\r\n                  THEN false\r\n                  ELSE true\r\n                  END\r\n                )  as isadmin\r\n              FROM json_array_elements_text(d.users) as uu\r\n                JOIN framework.users as uuu on uuu.id = uu.value::varchar::int \r\n                LEFT JOIN framework.orgs as o on o.id = uuu.orgid\r\n                LEFT JOIN json_array_elements_text(d.dialog_admins) as da on da.value::varchar = uu.value::varchar\r\n              --WHERE uu.value::varchar::int <> _userid\r\n            ) as zz\r\n          ) as users, (\r\n                SELECT\r\n                    count(m.id)\r\n                FROM framework.dialog_messages as m\r\n                \tJOIN framework.dialog_notifications as dn on \r\n                    \tdn.message_id = m.id AND\r\n                        dn.userid = _userid AND \r\n                        NOT dn.isread\r\n                WHERE m.dialog_id = d.id \r\n          ) as unreaded,\r\n          (\r\n          \tSELECT\r\n            \trow_to_json(zd)\r\n            FROM (\r\n            \tSELECT\r\n                \tu.id,\r\n                    u.login,\r\n                    u.photo\r\n                FROM framework.users as u\r\n                WHERE u.id = d.creator\r\n            ) as zd\r\n          ) as creator,\r\n          d.dialog_admins, (\r\n            CASE WHEN (\r\n              SELECT\r\n                  count(*)\r\n              FROM json_array_elements_text(d.dialog_admins)\r\n              WHERE value::varchar::int = _userid\r\n            ) > 0 THEN true\r\n            ELSE false END\r\n          ) as isadmin\r\n\t   FROM framework.dialogs as d \r\n\t\t\tJOIN framework.dialog_types as dt on dt.id = d.dtype\r\n\t   WHERE (\r\n          SELECT count(n.id) \r\n          FROM framework.dialog_notifications as n\r\n          WHERE n.dialog_id = d.id and \r\n            n.userid <> n.sender_userid and\r\n          \tn.userid = _userid and not n.issend\r\n       ) > 0\r\n       --n.userid = _userid \r\n  ) as z\r\n  INTO outjson;\r\n  \r\n  outjson = COALESCE(outjson,'[]');\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  _userid int;\r\nBEGIN\r\n\r\n  _userid = injson->>'userid';\r\n\r\n  \r\n  SELECT\r\n     array_to_json(array_agg(row_to_json(z)))\r\n  FROM (\r\n       SELECT  \r\n\t     -- n.id as notificationid,\r\n          d.id, (\r\n            CASE WHEN\r\n              d.dtype = '1'\r\n            THEN (\r\n              SELECT\r\n                  u.login\r\n              FROM json_array_elements_text(d.users) as uu\r\n                  JOIN framework.users as u on uu.value::varchar::int = u.id\r\n              WHERE uu.value::varchar::int <> _userid\r\n            )        \r\n            ELSE\r\n              d.title\r\n            END\r\n          ) as title, (\r\n            CASE WHEN\r\n              d.dtype = '1'\r\n            THEN (\r\n              SELECT\r\n                  u.photo\r\n              FROM json_array_elements_text(d.users) as uu\r\n                  JOIN framework.users as u on uu.value::varchar::int = u.id\r\n              WHERE uu.value::varchar::int <> _userid\r\n            )        \r\n            ELSE\r\n              d.photo\r\n            END\r\n          ) as photo,\r\n          d.created,\r\n          d.last_message_date, COALESCE((\r\n            SELECT \r\n                array_to_json(array_agg(row_to_json(f)))\r\n            FROM (\r\n                SELECT\r\n                \t--DISTINCT\r\n                    m.id,\r\n                    m.message_text,\r\n                    concat(u.fam,' ',u.im,' ',u.ot) as userfio,\r\n                    u.login,\r\n                    u.photo,\r\n                    u.orgid,\r\n                    o.orgname--,\r\n                   -- m.created\r\n                FROM framework.dialog_messages as m\r\n                    LEFT JOIN framework.users as u on u.id = m.userid\r\n                    LEFT JOIN framework.orgs as o on o.id = u.orgid\r\n                \tJOIN framework.dialog_notifications as dn on \r\n                    \tdn.message_id = m.id AND not dn.issend and dn.userid = _userid\r\n                WHERE m.dialog_id = d.id\r\n                ORDER BY m.created DESC --LIMIT 1\r\n            ) as f\r\n          ),'[]') as messages,\r\n          d.dtype as dialog_type,\r\n          dt.tname as dialog_type_name,\r\n          (\r\n             SELECT\r\n                array_to_json(array_agg(row_to_json(zz)))\r\n             FROM (\r\n              SELECT \r\n              \tuuu.id,\r\n                  concat(uuu.fam,' ',uuu.im,' ',uuu.ot) as userfio,\r\n                uuu.login,\r\n                uuu.photo,\r\n                uuu.orgid,\r\n                o.orgname, (\r\n                  CASE WHEN da.value::varchar is null\r\n                  THEN false\r\n                  ELSE true\r\n                  END\r\n                )  as isadmin\r\n              FROM json_array_elements_text(d.users) as uu\r\n                JOIN framework.users as uuu on uuu.id = uu.value::varchar::int \r\n                LEFT JOIN framework.orgs as o on o.id = uuu.orgid\r\n                LEFT JOIN json_array_elements_text(d.dialog_admins) as da on da.value::varchar = uu.value::varchar\r\n              --WHERE uu.value::varchar::int <> _userid\r\n            ) as zz\r\n          ) as users, (\r\n                SELECT\r\n                    count(m.id)\r\n                FROM framework.dialog_messages as m\r\n                \tJOIN framework.dialog_notifications as dn on \r\n                    \tdn.message_id = m.id AND\r\n                        dn.userid = _userid AND \r\n                        NOT dn.isread\r\n                WHERE m.dialog_id = d.id \r\n          ) as unreaded,\r\n          (\r\n          \tSELECT\r\n            \trow_to_json(zd)\r\n            FROM (\r\n            \tSELECT\r\n                \tu.id,\r\n                    u.login,\r\n                    u.photo\r\n                FROM framework.users as u\r\n                WHERE u.id = d.creator\r\n            ) as zd\r\n          ) as creator,\r\n          d.dialog_admins, (\r\n            CASE WHEN (\r\n              SELECT\r\n                  count(*)\r\n              FROM json_array_elements_text(d.dialog_admins)\r\n              WHERE value::varchar::int = _userid\r\n            ) > 0 THEN true\r\n            ELSE false END\r\n          ) as isadmin\r\n\t   FROM framework.dialogs as d \r\n\t\t\tJOIN framework.dialog_types as dt on dt.id = d.dtype\r\n\t   WHERE (\r\n          SELECT count(n.id) \r\n          FROM framework.dialog_notifications as n\r\n          WHERE n.dialog_id = d.id and \r\n            n.userid <> n.sender_userid and\r\n          \tn.userid = _userid and not n.issend\r\n       ) > 0\r\n       --n.userid = _userid \r\n  ) as z\r\n  INTO outjson;\r\n  \r\n  outjson = COALESCE(outjson,'[]');\r\n\r\nEND;\r\n
227285	framework	fn_dialogs_chatsmessages_ws	framework.fn_dialogs_chatsmessages_ws(injson  json,outjson out json)	DIALOGS NOTIFICATIONS FOR WS	2020-05-21 11:31:02.195905	1	f	fn_dialogs_chatsmessages_ws(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_dialogs_chatsmessages_ws(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_dialogs_chatsmessages_ws(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    _userid int;\r\n    _dialog_id int;\r\n    _foundcount bigint;\r\n    _pagesize int;\r\n    _offset int;\r\nBEGIN\r\n    _userid = injson->>'userid';\r\n    _dialog_id = injson->>'dialogid';\r\n    _pagesize = injson->>'pagesize';\r\n\r\n    SELECT\r\n      count(id)\r\n    FROM framework.dialog_messages \r\n    WHERE dialog_id = _dialog_id \r\n    INTO _foundcount;\r\n    \r\n    _pagesize = coalesce(_pagesize,'30');\r\n    _offset = _foundcount - _pagesize;\r\n    \r\n    IF _offset < 0 THEN \r\n    \t_offset = 0;\r\n  \tEND IF;\r\n    \r\n    \r\n    SELECT\r\n    \tarray_to_json(array_agg(row_to_json(z)))\r\n    FROM (\r\n      SELECT\r\n          row_number() over (ORDER BY dm.created)  as rownum,\r\n          dm.id,\r\n          dm.dialog_id,\r\n          dm.files,\r\n          dm.images,\r\n          dm.isread,\r\n          dm.created,\r\n          dm.isupdated,\r\n          dm.reply_to,\r\n          dm.forwarded_from,\r\n          dm.message_text,\r\n          (\r\n          SELECT\r\n          \tusf.login\r\n          FROM framework.dialog_messages as dmf\r\n          \tLEFT JOIN framework.users as usf on usf.id = dmf.userid\r\n          WHERE dmf.id = dm.forwarded_from\r\n          ) as forwarded_from_user,\r\n          concat(u.fam,' ',u.im,' ',u.ot) as userfio,\r\n\t\t  u.photo,\r\n          u.login,\r\n          o.orgname,\r\n          (\r\n          \tCASE WHEN (\r\n            \tSELECT\r\n                \tdms.id\r\n                FROM framework.dialog_messages as dms\r\n                WHERE dms.dialog_id = _dialog_id\r\n                ORDER BY dms.id \r\n                LIMIT 1\r\n          \t) = dm.id \r\n            THEN \r\n            \ttrue\r\n            ELSE \r\n           \t false\r\n            END\r\n          \r\n          ) as isfirst,\r\n          coalesce(n.id,0) as notificationid,\r\n          (\r\n            CASE\r\n            WHEN dm.userid = _userid\r\n            THEN true\r\n            ELSE false\r\n            END\r\n          ) as ismine,\r\n          (SELECT row_to_json(f) FROM (\r\n          \tSELECT\r\n            \tdm2.message_text,\r\n                dm2.id,\r\n                u2.login,\r\n                dm2.files,\r\n                dm2.images,\r\n                concat(u2.fam,' ',u2.im,' ',u2.ot) as userfio\r\n            FROM framework.dialog_messages as dm2\r\n           \t JOIN framework.users as u2 on u2.id = dm2.userid\r\n            WHERE dm2.id = dm.reply_to\r\n          ) as f) as reply_message\r\n      FROM framework.dialog_messages as dm\r\n          JOIN framework.users as u on u.id = dm.userid\r\n          LEFT JOIN framework.orgs as o on o.id = u.orgid\r\n          LEFT JOIN framework.dialog_notifications as n on n.dialog_id = dm.dialog_id\r\n          \tAND n.message_id = dm.id and n.userid = _userid\r\n      WHERE dm.dialog_id = _dialog_id /*and \r\n       (\r\n        \tSELECT \r\n            \tcount(dn.id)\r\n            FROM framework.dialog_notifications as dn\r\n            WHERE not dn.issend and dn.dialog_id = _dialog_id\r\n            \t  and dn.userid = _userid \r\n        ) > 0*/\r\n\t  ORDER BY dm.created\r\n      LIMIT _pagesize OFFSET _offset\r\n\t) as z\r\n    INTO outjson;\r\n    outjson = coalesce(outjson,'[]');\r\n    \r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n    _userid int;\r\n    _dialog_id int;\r\n    _foundcount bigint;\r\n    _pagesize int;\r\n    _offset int;\r\nBEGIN\r\n    _userid = injson->>'userid';\r\n    _dialog_id = injson->>'dialogid';\r\n    _pagesize = injson->>'pagesize';\r\n\r\n    SELECT\r\n      count(id)\r\n    FROM framework.dialog_messages \r\n    WHERE dialog_id = _dialog_id \r\n    INTO _foundcount;\r\n    \r\n    _pagesize = coalesce(_pagesize,'30');\r\n    _offset = _foundcount - _pagesize;\r\n    \r\n    IF _offset < 0 THEN \r\n    \t_offset = 0;\r\n  \tEND IF;\r\n    \r\n    \r\n    SELECT\r\n    \tarray_to_json(array_agg(row_to_json(z)))\r\n    FROM (\r\n      SELECT\r\n          row_number() over (ORDER BY dm.created)  as rownum,\r\n          dm.id,\r\n          dm.dialog_id,\r\n          dm.files,\r\n          dm.images,\r\n          dm.isread,\r\n          dm.created,\r\n          dm.isupdated,\r\n          dm.reply_to,\r\n          dm.forwarded_from,\r\n          dm.message_text,\r\n          (\r\n          SELECT\r\n          \tusf.login\r\n          FROM framework.dialog_messages as dmf\r\n          \tLEFT JOIN framework.users as usf on usf.id = dmf.userid\r\n          WHERE dmf.id = dm.forwarded_from\r\n          ) as forwarded_from_user,\r\n          concat(u.fam,' ',u.im,' ',u.ot) as userfio,\r\n\t\t  u.photo,\r\n          u.login,\r\n          o.orgname,\r\n          (\r\n          \tCASE WHEN (\r\n            \tSELECT\r\n                \tdms.id\r\n                FROM framework.dialog_messages as dms\r\n                WHERE dms.dialog_id = _dialog_id\r\n                ORDER BY dms.id \r\n                LIMIT 1\r\n          \t) = dm.id \r\n            THEN \r\n            \ttrue\r\n            ELSE \r\n           \t false\r\n            END\r\n          \r\n          ) as isfirst,\r\n          coalesce(n.id,0) as notificationid,\r\n          (\r\n            CASE\r\n            WHEN dm.userid = _userid\r\n            THEN true\r\n            ELSE false\r\n            END\r\n          ) as ismine,\r\n          (SELECT row_to_json(f) FROM (\r\n          \tSELECT\r\n            \tdm2.message_text,\r\n                dm2.id,\r\n                u2.login,\r\n                dm2.files,\r\n                dm2.images,\r\n                concat(u2.fam,' ',u2.im,' ',u2.ot) as userfio\r\n            FROM framework.dialog_messages as dm2\r\n           \t JOIN framework.users as u2 on u2.id = dm2.userid\r\n            WHERE dm2.id = dm.reply_to\r\n          ) as f) as reply_message\r\n      FROM framework.dialog_messages as dm\r\n          JOIN framework.users as u on u.id = dm.userid\r\n          LEFT JOIN framework.orgs as o on o.id = u.orgid\r\n          LEFT JOIN framework.dialog_notifications as n on n.dialog_id = dm.dialog_id\r\n          \tAND n.message_id = dm.id and n.userid = _userid\r\n      WHERE dm.dialog_id = _dialog_id /*and \r\n       (\r\n        \tSELECT \r\n            \tcount(dn.id)\r\n            FROM framework.dialog_notifications as dn\r\n            WHERE not dn.issend and dn.dialog_id = _dialog_id\r\n            \t  and dn.userid = _userid \r\n        ) > 0*/\r\n\t  ORDER BY dm.created\r\n      LIMIT _pagesize OFFSET _offset\r\n\t) as z\r\n    INTO outjson;\r\n    outjson = coalesce(outjson,'[]');\r\n    \r\n\r\nEND;\r\n
227288	framework	fn_fapi	framework.fn_fapi(injson  json,apititle  varchar,apitype  int2,sessid  bpchar,primaryauthorization  int2,outjson out json)	CALL API METHOD'S FUNCTION	2020-05-21 11:31:02.195905	1	f	fn_fapi(injson  json,apititle  varchar,apitype  int2,sessid  bpchar,primaryauthorization  int2,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_fapi(injson  json,apititle  varchar,apitype  int2,sessid  bpchar,primaryauthorization  int2,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_fapi(injson json, apititle character varying, apitype smallint, sessid character, primaryauthorization smallint DEFAULT NULL::smallint, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    _userid varchar; -- user id\r\n    fn_title varchar(350); -- function name\r\n    _useroles json; -- user roles\r\n    mroles json; -- method roles\r\n    squery varchar; -- for dynamic sql query\r\n    role_id smallint;\r\n    _roles json;\r\nBEGIN\r\n    -- CALL API METHOD'S FUNCTION\r\n    primaryauthorization = coalesce(primaryauthorization,0);\r\n    SELECT\r\n        s.procedurename,\r\n        s.roles\r\n    FROM framework.spapi as s\r\n    WHERE s.methodname = apititle and s.methodtype = apitype\r\n    INTO fn_title, mroles;\r\n     \r\n    IF fn_title is NULL THEN\r\n        PERFORM raiserror('m404err');\r\n    END IF; \r\n    \r\n    SELECT \r\n        s.userid::varchar,\r\n        u.roles\r\n    FROM framework.sess as s\r\n        JOIN framework.users as u on u.id = s.userid and u.isactive\r\n    WHERE s.id = sessid and s.killed is null\r\n    INTO _userid, _roles;\r\n    \r\n    IF mroles is not null and mroles::varchar <> '[]' THEN\r\n        IF _userid is null THEN\r\n            PERFORM raiserror('m401err');\r\n        END IF;\r\n        \r\n        IF (SELECT count(*)  \r\n            FROM json_array_elements_text(mroles) as a1\r\n                   JOIN json_array_elements_text(_roles) as ur \r\n                    ON a1.value::varchar(15)::smallint = ur.value::varchar(15)::smallint\r\n            ) = 0 \r\n        THEN\r\n            PERFORM raiserror('m403err');\r\n        END IF;        \r\n    END IF;   \r\n    \r\n    IF primaryauthorization = 1 and _userid is null THEN\r\n        perform raiserror('m401err');\r\n    END IF; \r\n    \r\n    SELECT \r\n        injson::jsonb || \r\n        (SELECT \r\n            row_to_json(d) \r\n         FROM (\r\n             SELECT _userid as userid\r\n         ) as d)::jsonb || \r\n        (SELECT \r\n            row_to_json(d) \r\n         FROM (\r\n             SELECT sessid as sessid\r\n         ) as d)::jsonb\r\n    INTO injson;\r\n\r\n    squery = concat('\r\n        SELECT \r\n           row_to_json(d) \r\n         FROM\r\n            ( \r\n               select *\r\n               from ',fn_title,'($1)\r\n            ) as d;'\r\n    );\r\n    \r\n    EXECUTE format(squery) INTO outjson USING injson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"apititle","argmode":"input","argtype":"varchar"},{"argname":"apitype","argmode":"input","argtype":"int2"},{"argname":"sessid","argmode":"input","argtype":"bpchar"},{"argname":"primaryauthorization","argmode":"input","argtype":"int2"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n    _userid varchar; -- user id\r\n    fn_title varchar(350); -- function name\r\n    _useroles json; -- user roles\r\n    mroles json; -- method roles\r\n    squery varchar; -- for dynamic sql query\r\n    role_id smallint;\r\n    _roles json;\r\nBEGIN\r\n    -- CALL API METHOD'S FUNCTION\r\n    primaryauthorization = coalesce(primaryauthorization,0);\r\n    SELECT\r\n        s.procedurename,\r\n        s.roles\r\n    FROM framework.spapi as s\r\n    WHERE s.methodname = apititle and s.methodtype = apitype\r\n    INTO fn_title, mroles;\r\n     \r\n    IF fn_title is NULL THEN\r\n        PERFORM raiserror('m404err');\r\n    END IF; \r\n    \r\n    SELECT \r\n        s.userid::varchar,\r\n        u.roles\r\n    FROM framework.sess as s\r\n        JOIN framework.users as u on u.id = s.userid and u.isactive\r\n    WHERE s.id = sessid and s.killed is null\r\n    INTO _userid, _roles;\r\n    \r\n    IF mroles is not null and mroles::varchar <> '[]' THEN\r\n        IF _userid is null THEN\r\n            PERFORM raiserror('m401err');\r\n        END IF;\r\n        \r\n        IF (SELECT count(*)  \r\n            FROM json_array_elements_text(mroles) as a1\r\n                   JOIN json_array_elements_text(_roles) as ur \r\n                    ON a1.value::varchar(15)::smallint = ur.value::varchar(15)::smallint\r\n            ) = 0 \r\n        THEN\r\n            PERFORM raiserror('m403err');\r\n        END IF;        \r\n    END IF;   \r\n    \r\n    IF primaryauthorization = 1 and _userid is null THEN\r\n        perform raiserror('m401err');\r\n    END IF; \r\n    \r\n    SELECT \r\n        injson::jsonb || \r\n        (SELECT \r\n            row_to_json(d) \r\n         FROM (\r\n             SELECT _userid as userid\r\n         ) as d)::jsonb || \r\n        (SELECT \r\n            row_to_json(d) \r\n         FROM (\r\n             SELECT sessid as sessid\r\n         ) as d)::jsonb\r\n    INTO injson;\r\n\r\n    squery = concat('\r\n        SELECT \r\n           row_to_json(d) \r\n         FROM\r\n            ( \r\n               select *\r\n               from ',fn_title,'($1)\r\n            ) as d;'\r\n    );\r\n    \r\n    EXECUTE format(squery) INTO outjson USING injson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\nEND;\r\n
227289	framework	fn_filter_add_untitle	framework.fn_filter_add_untitle(injson  json)	-- add untitle filter in filters table	2020-05-21 11:31:02.195905	1	f	fn_filter_add_untitle(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_filter_add_untitle(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_filter_add_untitle(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE \r\n  _viewid int;\r\n  _id int;\r\nBEGIN\r\n  -- add untitle filter in filters table\r\n  \r\n  _viewid = injson->>'viewid';\r\n\r\n  IF _viewid is NULL THEN\r\n  \tPERFORM raiserror('viewid is null');\r\n  END IF;\r\n    \r\n    _id = nextval('framework.filters_id_seq'::regclass);\r\n    \r\n    INSERT INTO framework.filters (\r\n      id, column_order,\r\n\t  viewid, title, type\r\n    ) VALUES (\r\n      _id, COALESCE((\r\n      \tSELECT max(column_order) \r\n       \tFROM framework.filters \r\n        WHERE viewid = _viewid\r\n      ),0) + 1,\r\n      _viewid, concat('untitled_',_id::varchar), 'substr'\r\n    );\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE \r\n  _viewid int;\r\n  _id int;\r\nBEGIN\r\n  -- add untitle filter in filters table\r\n  \r\n  _viewid = injson->>'viewid';\r\n\r\n  IF _viewid is NULL THEN\r\n  \tPERFORM raiserror('viewid is null');\r\n  END IF;\r\n    \r\n    _id = nextval('framework.filters_id_seq'::regclass);\r\n    \r\n    INSERT INTO framework.filters (\r\n      id, column_order,\r\n\t  viewid, title, type\r\n    ) VALUES (\r\n      _id, COALESCE((\r\n      \tSELECT max(column_order) \r\n       \tFROM framework.filters \r\n        WHERE viewid = _viewid\r\n      ),0) + 1,\r\n      _viewid, concat('untitled_',_id::varchar), 'substr'\r\n    );\r\nEND;\r\n
227301	framework	fn_logtable_rollback	framework.fn_logtable_rollback(injson  json,message out varchar)	rollback row from framework.logtable	2020-05-21 11:31:02.195905	1	f	fn_logtable_rollback(injson  json,message out varchar)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_logtable_rollback(injson  json,message out varchar) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_logtable_rollback(injson json, OUT message character varying)\n RETURNS character varying\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n\t_id\t\t\tint;\t\t\t\r\n    _schemetable varchar;\t\t\r\n\t_scheme\t\tvarchar;\t\t\r\n\t_table\t\tvarchar;\t\t\r\n    _rowid\t\tint;\t\t\t\r\n\t_opertype\tint;\t\t\t\r\n    _oldata\t\tjson;\t\t\t\r\n    _newdata\tjson;\t\t\t\r\n    _new_actions json;\t\t\t\r\n    _new_filters json;\t\t\t\r\n    _new_config json;\t\t\t\r\n    _new_visible_condition json;\t\r\n    _new_select_condition json;\t\t\r\n    _new_defaultval json;\t\t\r\n    _i\t\t\tjson;\t\t\t\r\n    _filters\tjson;\t\t\t\r\n    _col_id\t\tjson;\t\t\t\r\n    _colname\tvarchar;\t\t\r\n    _oldata_log\t\tjson;\t\t\r\n    _newdata_log\tjson;\t\t\r\n    _new_cols_from_config json;\t\r\n    _cols\t\tvarchar[];\t\t\r\n    _cols_str\tvarchar;\t\t\r\n    _cols_str_id\tvarchar;\t\r\n    _strpos\t\tint;\t\t\t\r\n    _query_str\tvarchar;\t\t\r\n    _user_id\tint;\t\t\t\r\n    _new_id\t\tint;\t\t\t\r\n    _new_actions_id int;\t\t\r\n    _new_filters_id int;\t\t\r\n    _new_config_id int;\t\t\t\r\n    _new_visible_condition_id int;\t\r\n    _new_select_condition_id int;\t\r\n    _new_defaultval_id int;\t\t\r\nBEGIN\r\n\t_id = injson->>'id';\r\n    _user_id = injson->>'userid';\r\n\r\n    SELECT\r\n    \tlt.tablename,\r\n        lt.tableid,\r\n        lt.opertype,\r\n        lt.oldata,\r\n        lt.newdata,\r\n        lt.colname\r\n    FROM\r\n    \tframework.logtable lt\r\n    WHERE\r\n    \tlt.id = _id\r\n    INTO\r\n    \t_schemetable, _rowid, _opertype, _oldata, _newdata, _colname;\r\n        \r\n    _strpos = strpos(_schemetable, '.') - 1;\r\n\r\n    _scheme = left(_schemetable, _strpos);\r\n    _table = right(_schemetable, length(_schemetable) - _strpos - 1);\r\n\r\n    SELECT \r\n    \tarray_agg(column_name::TEXT)\r\n    FROM\r\n    \tinformation_schema.columns\r\n    WHERE\r\n    \ttable_schema = _scheme AND\r\n        table_name = _table\r\n    INTO\r\n    \t_cols;\r\n\r\n\r\n    _cols_str_id = array_to_string(_cols, ',', '*');\r\n\r\n\t_oldata = _oldata::jsonb - 'id';\r\n\t_cols = array_remove(_cols, _cols[1]);\r\n\t_cols_str = array_to_string(_cols, ',', '*');\r\n    \r\n\r\n    _cols_str = replace(_cols_str, ',join', ',"join"');\r\n    _cols_str = replace(_cols_str, ',table,', ',"table",');\r\n    _cols_str = replace(_cols_str, ',table)', ',"table")');\r\n    _cols_str = replace(_cols_str, ',order by', ',"order by"');\r\n\r\n\r\n    IF _opertype = 2 THEN\r\n        IF _oldata IS NULL THEN\r\n        \tperform raiserror('can not rollback');\r\n        END IF;\r\n    \r\n\r\n    \tIF _colname IS NOT NULL AND _colname <> '' THEN\r\n        \t_cols_str = _colname;\r\n            _cols_str_id = _colname;\r\n        END IF;\r\n\r\n        EXECUTE format('\r\n        SELECT row_to_json(row)\r\n        FROM (\r\n            SELECT\r\n                %s\r\n            FROM\r\n                %s\r\n            WHERE\r\n                %s.id = %s\r\n        ) row;\r\n        ',\r\n        _cols_str_id,\r\n        _schemetable,\r\n        _table,\r\n        _rowid\r\n        ) INTO _oldata_log;\r\n\r\n        IF _oldata_log IS NULL THEN\r\n            perform raiserror(format('eow not fount (%s: %s)', _schemetable, _rowid));\r\n        END IF;\r\n\r\n        EXECUTE format('\r\n            UPDATE %s set(%s)=(SELECT %s FROM json_populate_record(null::%s, ''%s'')) WHERE %s.id = %s',\r\n            _schemetable, \r\n            _cols_str, \r\n            _cols_str, \r\n            _schemetable, \r\n            _oldata, \r\n            _table,\r\n            _rowid);\r\n        _oldata = _oldata_log;\t\t\r\n\r\n        EXECUTE format('\r\n        SELECT row_to_json(row)\r\n        FROM (\r\n            SELECT\r\n                %s\r\n            FROM\r\n                %s\r\n            WHERE\r\n                %s.id = %s\r\n        ) row;\r\n        ',\r\n        _cols_str_id,\r\n        _schemetable,\r\n        _table,\r\n        _rowid\r\n        ) INTO _newdata_log;\r\n        _newdata = _newdata_log;\r\n    ELSEIF _opertype = 3 THEN\r\n        \r\n    \tEXECUTE format('\r\n\t\t\tINSERT INTO %s(%s) SELECT %s FROM json_populate_record(null::%s, ''%s'') RETURNING id',\r\n            _schemetable, \r\n            _cols_str, \r\n            _cols_str, \r\n            _schemetable, \r\n            _oldata)\r\n        INTO _new_id;\r\n\t\t\r\n\r\n        _newdata = _oldata;\r\n        _newdata = _newdata::jsonb || ('{"id":' || _new_id || '}')::jsonb;\r\n\r\n\r\n\r\n\r\n        IF _schemetable = 'framework.views' THEN\r\n--        \tperform raiserror(_oldata->>'actions'::varchar); -- restoring removed view\r\n\r\n            IF _oldata->'actions' IS NOT NULL AND _oldata->>'actions' <> '[]' THEN\r\n            \tEXECUTE format('\r\n                INSERT INTO framework.actions(column_order, title, viewid, icon, classname, act_url, api_method, api_type, refresh_data, ask_confirm, roles, forevery, main_action, act_type)\r\n            \tSELECT \tx.column_order, x.title, %s, x.icon, x.classname, x.act_url, x.api_method, x.api_type, x.refresh_data, x.ask_confirm, x.roles, x.forevery, x.main_action, x.act_type\r\n                FROM json_to_recordset(''%s'') AS x(column_order int, title varchar, icon varchar, classname varchar, act_url varchar, api_method varchar, api_type varchar, refresh_data boolean, ask_confirm boolean, roles json, forevery boolean, main_action boolean, act_type varchar)\r\n                RETURNING id', _new_id, _oldata->>'actions')\r\n                INTO _new_actions_id;\r\n                \r\n                SELECT row_to_json(d)\r\n                FROM (\r\n                \tSELECT *\r\n                    FROM framework.actions\r\n                    WHERE id = _new_actions_id\r\n                ) as d \r\n                INTO _new_actions;\r\n                \r\n                _newdata = _newdata::jsonb || ('{"actions":[' || _new_actions || ']}')::jsonb;\r\n            END IF;\r\n            \r\n            SELECT array_to_json(array_agg(row_to_json(d)))\r\n            FROM (\r\n            SELECT id, col\r\n            FROM\r\n            \tframework.config\r\n            WHERE\r\n            \tviewid = _new_id\r\n            ) AS d\r\n            INTO _new_cols_from_config;\r\n            \r\n            IF _oldata->'filters' IS NOT NULL AND _oldata->>'filters' <> '[]' THEN\r\n            \r\n            \t_filters = _oldata->'filters';\r\n\r\n                FOR _i IN SELECT * FROM json_array_elements(_filters)\r\n                LOOP\r\n                    SELECT row_to_json(d)\r\n                        FROM (\r\n                          SELECT\r\n                              value->>'id' as fid\r\n                          FROM\r\n                              json_array_elements(_new_cols_from_config) as value\r\n                          WHERE\r\n                              value->>'col' LIKE _i->>'column') d\r\n                    INTO\r\n                    \t_col_id;\r\n                        \r\n\r\n                    _filters = jsonb_set(_i::jsonb, '{0,val_desc}', (_col_id->>'fid')::jsonb, false);\r\n\r\n                    IF _i->>'column' = 'korob_id' THEN\r\n\t\t\t\t\t\tperform raiserror(format('_col_id=(%s),\t\t_new_cols=(%s),\t\t\t_filters=(%s)', _col_id->>'fid', _filters, _new_cols_from_config));\r\n                    END IF;                    \r\n                END LOOP;\r\n\r\n                _oldata = _oldata::jsonb || ('{"filters":' || _filters || '}')::jsonb;                \r\n\r\n                perform raiserror(format('inserted cols (%s), _filters(%s), oldata (%s)', _new_cols_from_config, _filters, _oldata));\r\n\r\n            \tEXECUTE format('\r\n                INSERT INTO framework.filters(column_order, viewid, title, type, classname, "column", columns, roles, t, "table", val_desc)\r\n            \tSELECT x.column_order, %s, x.title, x.type, x.classname, x.column, x.columns, x.roles, x.t, x.table, x.val_desc\r\n                FROM json_to_recordset(''%s'') AS x(column_order smallint, title varchar, type varchar, classname varchar, "column" varchar, columns json, roles json, t varchar, "table" json, val_desc int)\r\n                RETURNING id', _new_id, _oldata->>'filters')\r\n                INTO _new_filters_id;\r\n                \r\n                SELECT row_to_json(d)\r\n                FROM (\r\n                \tSELECT *\r\n                    FROM framework.filters\r\n                    WHERE id = _new_filters_id\r\n                ) as d \r\n                INTO _new_filters;\r\n\r\n\t\t\t\t_newdata = _newdata::jsonb || ('{"filters":[' || _new_filters || ']}')::jsonb;\r\n\r\n            END IF;            \r\n        \t\r\n        END IF;\r\n    END IF;\r\n\r\n\tIF _colname IS NOT NULL THEN\r\n    \t_colname = '''' || _colname || '''';\r\n    ELSE\r\n    \t_colname = 'NULL';\r\n    END IF;\r\n\r\n\tIF _opertype = 2 or _opertype = 3 THEN\r\n      EXECUTE format('\r\n          INSERT INTO \r\n              framework.logtable(tablename, tableid, opertype, oldata, newdata, colname, userid) \r\n          VALUES(''%s'', ''%s'', 4, ''%s'', ''%s'', %s, %s)',\r\n          _schemetable,\r\n          _rowid,\r\n          _oldata,\r\n          _newdata,\r\n          NULLIF(_colname,''),  -- _colname,\r\n          _user_id);\r\n    END IF;\r\n\r\n\tmessage = 'OK';\r\n                             \r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"message","argmode":"output","argtype":"varchar"}]	varchar	\r\nDECLARE\r\n\t_id\t\t\tint;\t\t\t\r\n    _schemetable varchar;\t\t\r\n\t_scheme\t\tvarchar;\t\t\r\n\t_table\t\tvarchar;\t\t\r\n    _rowid\t\tint;\t\t\t\r\n\t_opertype\tint;\t\t\t\r\n    _oldata\t\tjson;\t\t\t\r\n    _newdata\tjson;\t\t\t\r\n    _new_actions json;\t\t\t\r\n    _new_filters json;\t\t\t\r\n    _new_config json;\t\t\t\r\n    _new_visible_condition json;\t\r\n    _new_select_condition json;\t\t\r\n    _new_defaultval json;\t\t\r\n    _i\t\t\tjson;\t\t\t\r\n    _filters\tjson;\t\t\t\r\n    _col_id\t\tjson;\t\t\t\r\n    _colname\tvarchar;\t\t\r\n    _oldata_log\t\tjson;\t\t\r\n    _newdata_log\tjson;\t\t\r\n    _new_cols_from_config json;\t\r\n    _cols\t\tvarchar[];\t\t\r\n    _cols_str\tvarchar;\t\t\r\n    _cols_str_id\tvarchar;\t\r\n    _strpos\t\tint;\t\t\t\r\n    _query_str\tvarchar;\t\t\r\n    _user_id\tint;\t\t\t\r\n    _new_id\t\tint;\t\t\t\r\n    _new_actions_id int;\t\t\r\n    _new_filters_id int;\t\t\r\n    _new_config_id int;\t\t\t\r\n    _new_visible_condition_id int;\t\r\n    _new_select_condition_id int;\t\r\n    _new_defaultval_id int;\t\t\r\nBEGIN\r\n\t_id = injson->>'id';\r\n    _user_id = injson->>'userid';\r\n\r\n    SELECT\r\n    \tlt.tablename,\r\n        lt.tableid,\r\n        lt.opertype,\r\n        lt.oldata,\r\n        lt.newdata,\r\n        lt.colname\r\n    FROM\r\n    \tframework.logtable lt\r\n    WHERE\r\n    \tlt.id = _id\r\n    INTO\r\n    \t_schemetable, _rowid, _opertype, _oldata, _newdata, _colname;\r\n        \r\n    _strpos = strpos(_schemetable, '.') - 1;\r\n\r\n    _scheme = left(_schemetable, _strpos);\r\n    _table = right(_schemetable, length(_schemetable) - _strpos - 1);\r\n\r\n    SELECT \r\n    \tarray_agg(column_name::TEXT)\r\n    FROM\r\n    \tinformation_schema.columns\r\n    WHERE\r\n    \ttable_schema = _scheme AND\r\n        table_name = _table\r\n    INTO\r\n    \t_cols;\r\n\r\n\r\n    _cols_str_id = array_to_string(_cols, ',', '*');\r\n\r\n\t_oldata = _oldata::jsonb - 'id';\r\n\t_cols = array_remove(_cols, _cols[1]);\r\n\t_cols_str = array_to_string(_cols, ',', '*');\r\n    \r\n\r\n    _cols_str = replace(_cols_str, ',join', ',"join"');\r\n    _cols_str = replace(_cols_str, ',table,', ',"table",');\r\n    _cols_str = replace(_cols_str, ',table)', ',"table")');\r\n    _cols_str = replace(_cols_str, ',order by', ',"order by"');\r\n\r\n\r\n    IF _opertype = 2 THEN\r\n        IF _oldata IS NULL THEN\r\n        \tperform raiserror('can not rollback');\r\n        END IF;\r\n    \r\n\r\n    \tIF _colname IS NOT NULL AND _colname <> '' THEN\r\n        \t_cols_str = _colname;\r\n            _cols_str_id = _colname;\r\n        END IF;\r\n\r\n        EXECUTE format('\r\n        SELECT row_to_json(row)\r\n        FROM (\r\n            SELECT\r\n                %s\r\n            FROM\r\n                %s\r\n            WHERE\r\n                %s.id = %s\r\n        ) row;\r\n        ',\r\n        _cols_str_id,\r\n        _schemetable,\r\n        _table,\r\n        _rowid\r\n        ) INTO _oldata_log;\r\n\r\n        IF _oldata_log IS NULL THEN\r\n            perform raiserror(format('eow not fount (%s: %s)', _schemetable, _rowid));\r\n        END IF;\r\n\r\n        EXECUTE format('\r\n            UPDATE %s set(%s)=(SELECT %s FROM json_populate_record(null::%s, ''%s'')) WHERE %s.id = %s',\r\n            _schemetable, \r\n            _cols_str, \r\n            _cols_str, \r\n            _schemetable, \r\n            _oldata, \r\n            _table,\r\n            _rowid);\r\n        _oldata = _oldata_log;\t\t\r\n\r\n        EXECUTE format('\r\n        SELECT row_to_json(row)\r\n        FROM (\r\n            SELECT\r\n                %s\r\n            FROM\r\n                %s\r\n            WHERE\r\n                %s.id = %s\r\n        ) row;\r\n        ',\r\n        _cols_str_id,\r\n        _schemetable,\r\n        _table,\r\n        _rowid\r\n        ) INTO _newdata_log;\r\n        _newdata = _newdata_log;\r\n    ELSEIF _opertype = 3 THEN\r\n        \r\n    \tEXECUTE format('\r\n\t\t\tINSERT INTO %s(%s) SELECT %s FROM json_populate_record(null::%s, ''%s'') RETURNING id',\r\n            _schemetable, \r\n            _cols_str, \r\n            _cols_str, \r\n            _schemetable, \r\n            _oldata)\r\n        INTO _new_id;\r\n\t\t\r\n\r\n        _newdata = _oldata;\r\n        _newdata = _newdata::jsonb || ('{"id":' || _new_id || '}')::jsonb;\r\n\r\n\r\n\r\n\r\n        IF _schemetable = 'framework.views' THEN\r\n--        \tperform raiserror(_oldata->>'actions'::varchar); -- restoring removed view\r\n\r\n            IF _oldata->'actions' IS NOT NULL AND _oldata->>'actions' <> '[]' THEN\r\n            \tEXECUTE format('\r\n                INSERT INTO framework.actions(column_order, title, viewid, icon, classname, act_url, api_method, api_type, refresh_data, ask_confirm, roles, forevery, main_action, act_type)\r\n            \tSELECT \tx.column_order, x.title, %s, x.icon, x.classname, x.act_url, x.api_method, x.api_type, x.refresh_data, x.ask_confirm, x.roles, x.forevery, x.main_action, x.act_type\r\n                FROM json_to_recordset(''%s'') AS x(column_order int, title varchar, icon varchar, classname varchar, act_url varchar, api_method varchar, api_type varchar, refresh_data boolean, ask_confirm boolean, roles json, forevery boolean, main_action boolean, act_type varchar)\r\n                RETURNING id', _new_id, _oldata->>'actions')\r\n                INTO _new_actions_id;\r\n                \r\n                SELECT row_to_json(d)\r\n                FROM (\r\n                \tSELECT *\r\n                    FROM framework.actions\r\n                    WHERE id = _new_actions_id\r\n                ) as d \r\n                INTO _new_actions;\r\n                \r\n                _newdata = _newdata::jsonb || ('{"actions":[' || _new_actions || ']}')::jsonb;\r\n            END IF;\r\n            \r\n            SELECT array_to_json(array_agg(row_to_json(d)))\r\n            FROM (\r\n            SELECT id, col\r\n            FROM\r\n            \tframework.config\r\n            WHERE\r\n            \tviewid = _new_id\r\n            ) AS d\r\n            INTO _new_cols_from_config;\r\n            \r\n            IF _oldata->'filters' IS NOT NULL AND _oldata->>'filters' <> '[]' THEN\r\n            \r\n            \t_filters = _oldata->'filters';\r\n\r\n                FOR _i IN SELECT * FROM json_array_elements(_filters)\r\n                LOOP\r\n                    SELECT row_to_json(d)\r\n                        FROM (\r\n                          SELECT\r\n                              value->>'id' as fid\r\n                          FROM\r\n                              json_array_elements(_new_cols_from_config) as value\r\n                          WHERE\r\n                              value->>'col' LIKE _i->>'column') d\r\n                    INTO\r\n                    \t_col_id;\r\n                        \r\n\r\n                    _filters = jsonb_set(_i::jsonb, '{0,val_desc}', (_col_id->>'fid')::jsonb, false);\r\n\r\n                    IF _i->>'column' = 'korob_id' THEN\r\n\t\t\t\t\t\tperform raiserror(format('_col_id=(%s),\t\t_new_cols=(%s),\t\t\t_filters=(%s)', _col_id->>'fid', _filters, _new_cols_from_config));\r\n                    END IF;                    \r\n                END LOOP;\r\n\r\n                _oldata = _oldata::jsonb || ('{"filters":' || _filters || '}')::jsonb;                \r\n\r\n                perform raiserror(format('inserted cols (%s), _filters(%s), oldata (%s)', _new_cols_from_config, _filters, _oldata));\r\n\r\n            \tEXECUTE format('\r\n                INSERT INTO framework.filters(column_order, viewid, title, type, classname, "column", columns, roles, t, "table", val_desc)\r\n            \tSELECT x.column_order, %s, x.title, x.type, x.classname, x.column, x.columns, x.roles, x.t, x.table, x.val_desc\r\n                FROM json_to_recordset(''%s'') AS x(column_order smallint, title varchar, type varchar, classname varchar, "column" varchar, columns json, roles json, t varchar, "table" json, val_desc int)\r\n                RETURNING id', _new_id, _oldata->>'filters')\r\n                INTO _new_filters_id;\r\n                \r\n                SELECT row_to_json(d)\r\n                FROM (\r\n                \tSELECT *\r\n                    FROM framework.filters\r\n                    WHERE id = _new_filters_id\r\n                ) as d \r\n                INTO _new_filters;\r\n\r\n\t\t\t\t_newdata = _newdata::jsonb || ('{"filters":[' || _new_filters || ']}')::jsonb;\r\n\r\n            END IF;            \r\n        \t\r\n        END IF;\r\n    END IF;\r\n\r\n\tIF _colname IS NOT NULL THEN\r\n    \t_colname = '''' || _colname || '''';\r\n    ELSE\r\n    \t_colname = 'NULL';\r\n    END IF;\r\n\r\n\tIF _opertype = 2 or _opertype = 3 THEN\r\n      EXECUTE format('\r\n          INSERT INTO \r\n              framework.logtable(tablename, tableid, opertype, oldata, newdata, colname, userid) \r\n          VALUES(''%s'', ''%s'', 4, ''%s'', ''%s'', %s, %s)',\r\n          _schemetable,\r\n          _rowid,\r\n          _oldata,\r\n          _newdata,\r\n          NULLIF(_colname,''),  -- _colname,\r\n          _user_id);\r\n    END IF;\r\n\r\n\tmessage = 'OK';\r\n                             \r\nEND;\r\n
227290	framework	fn_formparams_V004	framework.fn_formparams_V004(injson  json,tables out json,filtertypes out json,viewtypes out json,columntypes out json)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_formparams_V004(injson  json,tables out json,filtertypes out json,viewtypes out json,columntypes out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_formparams_V004(injson  json,tables out json,filtertypes out json,viewtypes out json,columntypes out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework."fn_formparams_V004"(injson json, OUT tables json, OUT filtertypes json, OUT viewtypes json, OUT columntypes json)\n RETURNS record\n LANGUAGE plpgsql\nAS $function$\r\n--DECLARE\r\n\r\nBEGIN\r\n  -- \t\r\n/*\r\n\tOLD V004\r\n    NEED TO REMOVE AFTER TESTS\r\n\r\n*/\r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM\r\n  (SELECT \r\n      concat(TABLE_SCHEMA,'.',TABLE_NAME) as value,\r\n      concat(TABLE_SCHEMA,'.',TABLE_NAME) as label, *\r\n  FROM INFORMATION_SCHEMA.TABLES\r\n  ORDER BY TABLE_SCHEMA, TABLE_NAME) as d\r\n  INTO tables;\r\n  \r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM\r\n  (  SELECT \r\n  \tft.ftname as value,\r\n    ft.ftname as label\r\n  FROM framework.filtertypes as ft) as d\r\n  INTO filtertypes;\r\n  \r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM\r\n  (\r\n    SELECT vtypename as value, vtypename as label \r\n    FROM framework.viewtypes\r\n    ) as d\r\n    INTO viewtypes;\r\n    \r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n  SELECT \r\n  \tc.typename as value, \r\n  \tc.typename as label,\r\n    c.viewtypes \r\n  FROM framework.columntypes as c\r\n    ) as d\r\n    INTO columntypes;\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"tables","argmode":"output","argtype":"json"},{"argname":"filtertypes","argmode":"output","argtype":"json"},{"argname":"viewtypes","argmode":"output","argtype":"json"},{"argname":"columntypes","argmode":"output","argtype":"json"}]	record	\r\n--DECLARE\r\n\r\nBEGIN\r\n  -- \t\r\n/*\r\n\tOLD V004\r\n    NEED TO REMOVE AFTER TESTS\r\n\r\n*/\r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM\r\n  (SELECT \r\n      concat(TABLE_SCHEMA,'.',TABLE_NAME) as value,\r\n      concat(TABLE_SCHEMA,'.',TABLE_NAME) as label, *\r\n  FROM INFORMATION_SCHEMA.TABLES\r\n  ORDER BY TABLE_SCHEMA, TABLE_NAME) as d\r\n  INTO tables;\r\n  \r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM\r\n  (  SELECT \r\n  \tft.ftname as value,\r\n    ft.ftname as label\r\n  FROM framework.filtertypes as ft) as d\r\n  INTO filtertypes;\r\n  \r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM\r\n  (\r\n    SELECT vtypename as value, vtypename as label \r\n    FROM framework.viewtypes\r\n    ) as d\r\n    INTO viewtypes;\r\n    \r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n  SELECT \r\n  \tc.typename as value, \r\n  \tc.typename as label,\r\n    c.viewtypes \r\n  FROM framework.columntypes as c\r\n    ) as d\r\n    INTO columntypes;\r\nEND;\r\n
227291	framework	fn_formselect	framework.fn_formselect(injson  json,outjson out json)	select data for type select	2020-05-21 11:31:02.195905	1	f	fn_formselect(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_formselect(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_formselect(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _config json;\r\n  _inputs json;\r\n  _val varchar;\r\n  _id varchar;\r\n  _relationcolums json;\r\n  _relation varchar;\r\n  squery varchar;\r\n  col1 varchar;\r\n  col2 varchar;\r\n  pv json;\r\n  select_condition json;\r\n  _oper varchar(20);\r\n  operval varchar;\r\n  _ismulti boolean;\r\n  _userid int;\r\n  _orgs varchar;\r\n  _orgid varchar;\r\n  k int;\r\nBEGIN\r\n\t\r\n  _config = injson->>'config';\r\n  _inputs = injson->>'inputs';\r\n  _val = injson->> 'val';\r\n  _userid = injson->>'userid';\r\n  _id = injson->>'id';\r\n  _ismulti = injson->>'ismulti';\r\n  _relation = coalesce(_config->>'multiselecttable',_config->>'relation');\r\n  _relationcolums = coalesce(coalesce(_config->>'multicolums',_config->>'relationcolums'),'[]');\r\n  \r\n  \r\n  _ismulti = coalesce(_ismulti,false);\r\n  IF (_config->>'type') like 'multi%' THEN\r\n  \t_ismulti = true;\r\n  END IF; \r\n  \r\n  \r\n  IF _relation is null or _relationcolums is null or (SELECT count(*) \r\n  \t\t\t\t\t\t\t\t\t\t\t\t\t  FROM json_array_elements_text(_relationcolums)) = 0 \r\n  THEN\r\n  \tPERFORM raiserror('Something wrong here. Please check the config');\t\r\n  END IF;  \r\n\r\n  \r\n  col1 = (_relationcolums->0)::json->>'value';\r\n \r\n   IF (SELECT count(*)\r\n   FROM information_schema.columns as t\r\n   WHERE concat(t.table_schema,'.',t.table_name) = _relation and \r\n   \t\t t.column_name = col1) = 0 \r\n   THEN\r\n         PERFORM raiserror('error in config can not find table or col');\r\n   END IF;      \r\n \r\n  IF (SELECT count(*) FROM json_array_elements_text(_relationcolums)) = 1\r\n  \tand _config->>'type' not like '%typehead'\r\n  THEN \t\t\r\n  \tsquery = concat(squery,' SELECT "', col1, \r\n    \t'" as value, "',col1, '" as label FROM ', \r\n        _relation\r\n    );           \r\n  ELSE\r\n        IF (SELECT count(*) FROM json_array_elements_text(_relationcolums)) > 1 THEN\r\n          k = 1;\r\n        ELSE\r\n        \tk = 0; \r\n        END IF;\r\n        \r\n\t\tcol2 = (_relationcolums->k)::json->>'value';\r\n\r\n        IF (SELECT count(*)\r\n        FROM information_schema.columns as t\r\n        WHERE concat(t.table_schema,'.',t.table_name) = _relation and \r\n               t.column_name = col2) = 0 THEN\r\n               PERFORM raiserror('error in config can not find table or col2');\r\n        END IF; \r\n\r\n\t\tsquery = concat(\r\n        \tsquery,\r\n        \t' SELECT "' , \r\n            col1 , \r\n            '" as value, concat( "', col2,'"'\r\n        );\r\n\r\n        k = 2;\r\n        WHILE k < (SELECT count(*) FROM json_array_elements_text(_relationcolums))\r\n        LOOP\r\n        \tsquery = concat(squery,','' '',"',(_relationcolums->k)::json->>'value','"');\r\n        \tk = k + 1;\r\n        END LOOP;\r\n\r\n\t\tsquery = concat(squery,') ');\r\n   \r\n\t\tsquery = concat(squery, ' as label FROM ', _relation);\r\n        \r\n\t\tSELECT \r\n        \tarray_to_json(array_agg(row_to_json(d)))\r\n        FROM (\r\n        SELECT value\r\n        FROM\r\n        (select \r\n        \trow_number() over (order by 1) as n, * \r\n        from json_array_elements_text(_relationcolums) )as p\r\n        where p.n not in (1,2)) as d\r\n        INTO _relationcolums;\r\n\r\n\t\tIF _val is not null \r\n        THEN\r\n        \tIF not _ismulti \r\n            THEN\r\n              _val = concat('%',upper(_val),'%');\r\n              squery = concat(\r\n              \tsquery,' WHERE (upper("' , \r\n                col2 , '"::varchar) like $1 or upper("' , \r\n                col1 , '"::varchar) like $1'); \r\n              FOR pv in (SELECT * FROM json_array_elements_text(_relationcolums))\r\n              LOOP\r\n                  squery = concat(squery, ' or upper(' , (pv->>'value')::json->>'value' , '::varchar) like $1 ');\r\n              END LOOP;   \r\n            ELSE\r\n            \tIF _val not like '[%]' THEN\r\n            \t_val = json_build_array(_val)::varchar;\r\n                END IF;\r\n\r\n            \tsquery = concat(\r\n                \tsquery, \r\n                    ' WHERE  (\r\n                \t(select count(value) \r\n                     from json_array_elements_text($1::json)\r\n                     where upper("' ,col2 , '"::varchar) like \r\n                     \tconcat(''%%'', upper(value::varchar),''%%'')\r\n                     ) > 0 ' \r\n                );\r\n                FOR pv in (SELECT * FROM json_array_elements_text(_relationcolums))\r\n                LOOP\r\n                    squery = concat(\r\n                      squery, \r\n                      ' or upper(' , \r\n                      pv->>'value' , \r\n                      '::varchar) like \r\n                      (select \r\n                      \t upper(value::varchar) \r\n                       from json_array_elements_text($1)) '\r\n                    );\r\n                END LOOP;                           \r\n            END IF;\r\n            squery = concat(squery, ') '); \r\n\t\t\tIF _id is not null THEN\r\n\t\t\t\tsquery = concat(squery,' and "' , col1 , '" = ''' , replace(_id::varchar ,'''',''''''), '''');\r\n            END IF;    \r\n\t\tELSE\r\n        \tIF not _ismulti THEN\r\n              IF _id is not null THEN\r\n                  squery = concat(squery,' WHERE "', col1 , '" = ''' , replace(_id::varchar ,'''','''''') , ''' '); \r\n                  --perform raiserror(squery);\r\n              END IF;   \r\n            ELSE\r\n               IF _id is not null THEN\r\n                  squery = concat(squery,' WHERE "', col1 , '"::varchar in (select value::varchar from json_array_elements_text(''' , replace(_id::varchar ,'''','''''') , ''')) '); \r\n                  --perform raiserror(squery);\r\n              END IF;             \r\n            END IF;   \t\r\n        END IF;        \r\n  END IF;\t\r\n  \r\n  select_condition = _config->>'select_condition';\r\n  IF _inputs is not null \r\n  \tand select_condition is not null \r\n  THEN\r\n    IF squery not like '%WHERE%' THEN\r\n    \tsquery = concat(squery,' WHERE ');\r\n    ELSE\r\n    \tsquery = concat(squery,' and ');\r\n    END IF;    \r\n\r\n    \r\n    SELECT\r\n       \tu.orgs::varchar, u.orgid::varchar \r\n    FROM framework.users as u\r\n    WHERE u.id = _userid\r\n    INTO _orgs,_orgid;\r\n\r\n\r\n    FOR pv in (SELECT * FROM json_array_elements_text(select_condition))\r\n    LOOP\r\n    \tcol1 = (pv->>'col')::json->>'label';\r\n        _oper = (pv->>'operation')::json->>'value';\r\n        operval = replace(\r\n        \treplace(\r\n            \treplace(\r\n                \treplace(\r\n                    \tcoalesce(\r\n                        \tpv->>'const', (_inputs->>((pv->>'value')::json->>'value'))\r\n                        ),'''',''''''\r\n                    ),'_orgid_',coalesce(_orgid,'')\r\n                ),'_userid_',coalesce(_userid::varchar,'')\r\n            ),'_orgs_',coalesce(_orgs,'[]'));\r\n        IF (\r\n          SELECT count(*)\r\n          FROM information_schema.columns as t\r\n          WHERE concat(t.table_schema,'.',t.table_name) = _relation and \r\n                t.column_name = col1\r\n        ) = 0 \r\n        THEN\r\n               PERFORM raiserror('error in config can not find table or col');\r\n        END IF;  \r\n        IF _oper not in ('like', 'in', 'not in', 'is null', 'is not null') THEN\r\n\t\r\n          squery = concat(\r\n          \tsquery, ' "', col1,'"', \r\n            _oper , '''' , \r\n            operval, ''' and'\r\n          );\r\n        END IF;   \r\n        IF _oper in ('is null','is not null') THEN\r\n          squery = concat(\r\n          \tsquery, ' "', col1,'" ', \r\n            _oper , ' and'\r\n          );\t\r\n        END IF;    \r\n        IF _oper = 'like' THEN\r\n            squery = concat(\r\n            \tsquery, ' upper("', col1,'") ',  \r\n                _oper , ' upper(''%%' , \r\n                operval, '%%'') and'\r\n            );\r\n        END IF;       \r\n        IF _oper in ('in','not in') THEN\r\n            squery = concat(\r\n            \tsquery, ' "', col1,'" ',  \r\n                _oper , ' (', \r\n                (SELECT \r\n                \tstring_agg(\r\n                    \tconcat('''',o.name::varchar,''''), \r\n                        ', '\r\n                    )\r\n                 FROM json_array_elements(concat('[',operval,']')::json\r\n                 ) as o), ') and'\r\n            );              \r\n        END IF;  \r\n            \r\n    END LOOP;\r\n    squery = substring(squery,1,length(squery)-4); \r\n  END IF;\r\n  \r\n\r\n  squery = concat(\r\n  \t'SELECT array_to_json(array_agg(row_to_json(d))) FROM ( ',\r\n  \tsquery, ' LIMIT 300 ) as d');\r\n  \r\n  \r\n  EXECUTE format(squery) USING _val INTO outjson;\r\n  outjson = coalesce(outjson,'[]');\r\n  \r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  _config json;\r\n  _inputs json;\r\n  _val varchar;\r\n  _id varchar;\r\n  _relationcolums json;\r\n  _relation varchar;\r\n  squery varchar;\r\n  col1 varchar;\r\n  col2 varchar;\r\n  pv json;\r\n  select_condition json;\r\n  _oper varchar(20);\r\n  operval varchar;\r\n  _ismulti boolean;\r\n  _userid int;\r\n  _orgs varchar;\r\n  _orgid varchar;\r\n  k int;\r\nBEGIN\r\n\t\r\n  _config = injson->>'config';\r\n  _inputs = injson->>'inputs';\r\n  _val = injson->> 'val';\r\n  _userid = injson->>'userid';\r\n  _id = injson->>'id';\r\n  _ismulti = injson->>'ismulti';\r\n  _relation = coalesce(_config->>'multiselecttable',_config->>'relation');\r\n  _relationcolums = coalesce(coalesce(_config->>'multicolums',_config->>'relationcolums'),'[]');\r\n  \r\n  \r\n  _ismulti = coalesce(_ismulti,false);\r\n  IF (_config->>'type') like 'multi%' THEN\r\n  \t_ismulti = true;\r\n  END IF; \r\n  \r\n  \r\n  IF _relation is null or _relationcolums is null or (SELECT count(*) \r\n  \t\t\t\t\t\t\t\t\t\t\t\t\t  FROM json_array_elements_text(_relationcolums)) = 0 \r\n  THEN\r\n  \tPERFORM raiserror('Something wrong here. Please check the config');\t\r\n  END IF;  \r\n\r\n  \r\n  col1 = (_relationcolums->0)::json->>'value';\r\n \r\n   IF (SELECT count(*)\r\n   FROM information_schema.columns as t\r\n   WHERE concat(t.table_schema,'.',t.table_name) = _relation and \r\n   \t\t t.column_name = col1) = 0 \r\n   THEN\r\n         PERFORM raiserror('error in config can not find table or col');\r\n   END IF;      \r\n \r\n  IF (SELECT count(*) FROM json_array_elements_text(_relationcolums)) = 1\r\n  \tand _config->>'type' not like '%typehead'\r\n  THEN \t\t\r\n  \tsquery = concat(squery,' SELECT "', col1, \r\n    \t'" as value, "',col1, '" as label FROM ', \r\n        _relation\r\n    );           \r\n  ELSE\r\n        IF (SELECT count(*) FROM json_array_elements_text(_relationcolums)) > 1 THEN\r\n          k = 1;\r\n        ELSE\r\n        \tk = 0; \r\n        END IF;\r\n        \r\n\t\tcol2 = (_relationcolums->k)::json->>'value';\r\n\r\n        IF (SELECT count(*)\r\n        FROM information_schema.columns as t\r\n        WHERE concat(t.table_schema,'.',t.table_name) = _relation and \r\n               t.column_name = col2) = 0 THEN\r\n               PERFORM raiserror('error in config can not find table or col2');\r\n        END IF; \r\n\r\n\t\tsquery = concat(\r\n        \tsquery,\r\n        \t' SELECT "' , \r\n            col1 , \r\n            '" as value, concat( "', col2,'"'\r\n        );\r\n\r\n        k = 2;\r\n        WHILE k < (SELECT count(*) FROM json_array_elements_text(_relationcolums))\r\n        LOOP\r\n        \tsquery = concat(squery,','' '',"',(_relationcolums->k)::json->>'value','"');\r\n        \tk = k + 1;\r\n        END LOOP;\r\n\r\n\t\tsquery = concat(squery,') ');\r\n   \r\n\t\tsquery = concat(squery, ' as label FROM ', _relation);\r\n        \r\n\t\tSELECT \r\n        \tarray_to_json(array_agg(row_to_json(d)))\r\n        FROM (\r\n        SELECT value\r\n        FROM\r\n        (select \r\n        \trow_number() over (order by 1) as n, * \r\n        from json_array_elements_text(_relationcolums) )as p\r\n        where p.n not in (1,2)) as d\r\n        INTO _relationcolums;\r\n\r\n\t\tIF _val is not null \r\n        THEN\r\n        \tIF not _ismulti \r\n            THEN\r\n              _val = concat('%',upper(_val),'%');\r\n              squery = concat(\r\n              \tsquery,' WHERE (upper("' , \r\n                col2 , '"::varchar) like $1 or upper("' , \r\n                col1 , '"::varchar) like $1'); \r\n              FOR pv in (SELECT * FROM json_array_elements_text(_relationcolums))\r\n              LOOP\r\n                  squery = concat(squery, ' or upper(' , (pv->>'value')::json->>'value' , '::varchar) like $1 ');\r\n              END LOOP;   \r\n            ELSE\r\n            \tIF _val not like '[%]' THEN\r\n            \t_val = json_build_array(_val)::varchar;\r\n                END IF;\r\n\r\n            \tsquery = concat(\r\n                \tsquery, \r\n                    ' WHERE  (\r\n                \t(select count(value) \r\n                     from json_array_elements_text($1::json)\r\n                     where upper("' ,col2 , '"::varchar) like \r\n                     \tconcat(''%%'', upper(value::varchar),''%%'')\r\n                     ) > 0 ' \r\n                );\r\n                FOR pv in (SELECT * FROM json_array_elements_text(_relationcolums))\r\n                LOOP\r\n                    squery = concat(\r\n                      squery, \r\n                      ' or upper(' , \r\n                      pv->>'value' , \r\n                      '::varchar) like \r\n                      (select \r\n                      \t upper(value::varchar) \r\n                       from json_array_elements_text($1)) '\r\n                    );\r\n                END LOOP;                           \r\n            END IF;\r\n            squery = concat(squery, ') '); \r\n\t\t\tIF _id is not null THEN\r\n\t\t\t\tsquery = concat(squery,' and "' , col1 , '" = ''' , replace(_id::varchar ,'''',''''''), '''');\r\n            END IF;    \r\n\t\tELSE\r\n        \tIF not _ismulti THEN\r\n              IF _id is not null THEN\r\n                  squery = concat(squery,' WHERE "', col1 , '" = ''' , replace(_id::varchar ,'''','''''') , ''' '); \r\n                  --perform raiserror(squery);\r\n              END IF;   \r\n            ELSE\r\n               IF _id is not null THEN\r\n                  squery = concat(squery,' WHERE "', col1 , '"::varchar in (select value::varchar from json_array_elements_text(''' , replace(_id::varchar ,'''','''''') , ''')) '); \r\n                  --perform raiserror(squery);\r\n              END IF;             \r\n            END IF;   \t\r\n        END IF;        \r\n  END IF;\t\r\n  \r\n  select_condition = _config->>'select_condition';\r\n  IF _inputs is not null \r\n  \tand select_condition is not null \r\n  THEN\r\n    IF squery not like '%WHERE%' THEN\r\n    \tsquery = concat(squery,' WHERE ');\r\n    ELSE\r\n    \tsquery = concat(squery,' and ');\r\n    END IF;    \r\n\r\n    \r\n    SELECT\r\n       \tu.orgs::varchar, u.orgid::varchar \r\n    FROM framework.users as u\r\n    WHERE u.id = _userid\r\n    INTO _orgs,_orgid;\r\n\r\n\r\n    FOR pv in (SELECT * FROM json_array_elements_text(select_condition))\r\n    LOOP\r\n    \tcol1 = (pv->>'col')::json->>'label';\r\n        _oper = (pv->>'operation')::json->>'value';\r\n        operval = replace(\r\n        \treplace(\r\n            \treplace(\r\n                \treplace(\r\n                    \tcoalesce(\r\n                        \tpv->>'const', (_inputs->>((pv->>'value')::json->>'value'))\r\n                        ),'''',''''''\r\n                    ),'_orgid_',coalesce(_orgid,'')\r\n                ),'_userid_',coalesce(_userid::varchar,'')\r\n            ),'_orgs_',coalesce(_orgs,'[]'));\r\n        IF (\r\n          SELECT count(*)\r\n          FROM information_schema.columns as t\r\n          WHERE concat(t.table_schema,'.',t.table_name) = _relation and \r\n                t.column_name = col1\r\n        ) = 0 \r\n        THEN\r\n               PERFORM raiserror('error in config can not find table or col');\r\n        END IF;  \r\n        IF _oper not in ('like', 'in', 'not in', 'is null', 'is not null') THEN\r\n\t\r\n          squery = concat(\r\n          \tsquery, ' "', col1,'"', \r\n            _oper , '''' , \r\n            operval, ''' and'\r\n          );\r\n        END IF;   \r\n        IF _oper in ('is null','is not null') THEN\r\n          squery = concat(\r\n          \tsquery, ' "', col1,'" ', \r\n            _oper , ' and'\r\n          );\t\r\n        END IF;    \r\n        IF _oper = 'like' THEN\r\n            squery = concat(\r\n            \tsquery, ' upper("', col1,'") ',  \r\n                _oper , ' upper(''%%' , \r\n                operval, '%%'') and'\r\n            );\r\n        END IF;       \r\n        IF _oper in ('in','not in') THEN\r\n            squery = concat(\r\n            \tsquery, ' "', col1,'" ',  \r\n                _oper , ' (', \r\n                (SELECT \r\n                \tstring_agg(\r\n                    \tconcat('''',o.name::varchar,''''), \r\n                        ', '\r\n                    )\r\n                 FROM json_array_elements(concat('[',operval,']')::json\r\n                 ) as o), ') and'\r\n            );              \r\n        END IF;  \r\n            \r\n    END LOOP;\r\n    squery = substring(squery,1,length(squery)-4); \r\n  END IF;\r\n  \r\n\r\n  squery = concat(\r\n  \t'SELECT array_to_json(array_agg(row_to_json(d))) FROM ( ',\r\n  \tsquery, ' LIMIT 300 ) as d');\r\n  \r\n  \r\n  EXECUTE format(squery) USING _val INTO outjson;\r\n  outjson = coalesce(outjson,'[]');\r\n  \r\nEND;\r\n
227293	framework	fn_functions_getall_spapi	framework.fn_functions_getall_spapi(injson  json,outjson out json)	ALL FUNCTIONS FOR SP API	2020-05-21 11:31:02.195905	1	f	fn_functions_getall_spapi(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_functions_getall_spapi(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_functions_getall_spapi(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\n/* ALL FUNCTIONS FOR SP API*/\r\nDECLARE \r\n\t_conf JSON;\r\n    _key varchar(100);\r\n    _val varchar(150);\r\nBEGIN\r\n   _conf = (injson->'config');\r\n   \r\n   SELECT\r\n   \tVALUE->>'key'\r\n   FROM json_array_elements(_conf)\r\n   WHERE (value->>'col') = 'procedurename' \r\n   INTO _key;\r\n   \r\n   _val = (injson->'data')->>_key;\r\n   \r\n   _val = coalesce(_val,'%');\r\n   \r\n\r\n\t\r\n   SELECT\r\n   \t\tarray_to_json(array_agg(row_to_json(d)))\r\n   FROM (\r\n      SELECT \r\n        format('%I.%I', ns.nspname, p.proname) as label,\r\n        format('%I.%I', ns.nspname, p.proname) as value\r\n      FROM pg_proc p \r\n      INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n      WHERE ns.nspname not in ('pg_catalog','information_schema') --and\r\n      \t--format('%I.%I', ns.nspname, p.proname) like _val\r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'[]');\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\n/* ALL FUNCTIONS FOR SP API*/\r\nDECLARE \r\n\t_conf JSON;\r\n    _key varchar(100);\r\n    _val varchar(150);\r\nBEGIN\r\n   _conf = (injson->'config');\r\n   \r\n   SELECT\r\n   \tVALUE->>'key'\r\n   FROM json_array_elements(_conf)\r\n   WHERE (value->>'col') = 'procedurename' \r\n   INTO _key;\r\n   \r\n   _val = (injson->'data')->>_key;\r\n   \r\n   _val = coalesce(_val,'%');\r\n   \r\n\r\n\t\r\n   SELECT\r\n   \t\tarray_to_json(array_agg(row_to_json(d)))\r\n   FROM (\r\n      SELECT \r\n        format('%I.%I', ns.nspname, p.proname) as label,\r\n        format('%I.%I', ns.nspname, p.proname) as value\r\n      FROM pg_proc p \r\n      INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n      WHERE ns.nspname not in ('pg_catalog','information_schema') --and\r\n      \t--format('%I.%I', ns.nspname, p.proname) like _val\r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'[]');\r\nEND;\r\n
227294	framework	fn_getacttypes	framework.fn_getacttypes(injson  json,outjson out json)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_getacttypes(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_getacttypes(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_getacttypes(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE \r\n\t_viewtype VARCHAR(30);\r\nBEGIN\r\n\t_viewtype = injson->>'viewtype';\t\r\n    \r\n    /*for old versions correct work*/\r\n\t_viewtype = coalesce(_viewtype,'table');\r\n    \r\n\tSELECT \r\n      array_to_json(array_agg(row_to_json(d)))\r\n    FROM (\r\n\tSELECT \r\n    \ta.actname as value, \r\n        a.actname as label \r\n    FROM framework.acttypes as a\r\n    WHERE (\r\n\t      SELECT count(value)\r\n          FROM json_array_elements_text(a.viewtypes)\r\n          WHERE value::varchar = _viewtype\r\n\t   ) > 0\r\n    ) as d\r\n    INTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE \r\n\t_viewtype VARCHAR(30);\r\nBEGIN\r\n\t_viewtype = injson->>'viewtype';\t\r\n    \r\n    /*for old versions correct work*/\r\n\t_viewtype = coalesce(_viewtype,'table');\r\n    \r\n\tSELECT \r\n      array_to_json(array_agg(row_to_json(d)))\r\n    FROM (\r\n\tSELECT \r\n    \ta.actname as value, \r\n        a.actname as label \r\n    FROM framework.acttypes as a\r\n    WHERE (\r\n\t      SELECT count(value)\r\n          FROM json_array_elements_text(a.viewtypes)\r\n          WHERE value::varchar = _viewtype\r\n\t   ) > 0\r\n    ) as d\r\n    INTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\nEND;\r\n
227295	framework	fn_getfunctions	framework.fn_getfunctions(injson  json,outjson out json)	functions for config's column 	2020-05-21 11:31:02.195905	1	f	fn_getfunctions(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_getfunctions(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_getfunctions(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  -- functions for config's column \r\n  \r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n    SELECT \r\n      f.funcname as label,\r\n      f.funcname as value,\r\n      f.functype\r\n    FROM framework.functions as f\r\n    UNION ALL\r\n    SELECT \r\n      format('%I.%I', ns.nspname, p.proname) as label,\r\n      format('%I.%I', ns.nspname, p.proname) as name,\r\n      'user' as functype \r\n    FROM pg_proc p \r\n    INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n    WHERE ns.nspname not in ('pg_catalog','information_schema')\r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'[]');\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nBEGIN\r\n  -- functions for config's column \r\n  \r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n    SELECT \r\n      f.funcname as label,\r\n      f.funcname as value,\r\n      f.functype\r\n    FROM framework.functions as f\r\n    UNION ALL\r\n    SELECT \r\n      format('%I.%I', ns.nspname, p.proname) as label,\r\n      format('%I.%I', ns.nspname, p.proname) as name,\r\n      'user' as functype \r\n    FROM pg_proc p \r\n    INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n    WHERE ns.nspname not in ('pg_catalog','information_schema')\r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'[]');\r\nEND;\r\n
227306	framework	fn_mainsettings_save	framework.fn_mainsettings_save(injson  json)	Save main settings from file	2020-05-21 11:31:02.195905	1	f	fn_mainsettings_save(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_mainsettings_save(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_mainsettings_save(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\nIF ( SELECT count(id)\r\n\t FROM framework.mainsettings\r\n\t WHERE isactiv\r\n   ) > 0\r\n   THEN\r\n\t  UPDATE framework.mainsettings\r\n\t  SET \r\n\t\tdsn = COALESCE(injson->>'dsn',dsn),\r\n\t\tport = COALESCE((injson->>'port')::int,port),\r\n\t\t"developerRole" = COALESCE((injson->>'developerRole'),"developerRole"),\r\n\t\tmaindomain = COALESCE(injson->>'maindomain',maindomain),\r\n\t\t"primaryAuthorization" =  COALESCE((injson->>'primaryAuthorization')::smallint,"primaryAuthorization"), \r\n\t\tredirect401 = COALESCE(injson->>'redirect401',redirect401),\r\n\t\thomepage = COALESCE(injson->>'homepage', homepage),\r\n\t\treports_url = COALESCE(injson->>'reports_url', reports_url),\r\n\t\tlogin_url = COALESCE(injson->>'login_url', login_url)\r\n\t  WHERE isactiv;\r\n    ELSE\r\n\t  INSERT INTO framework.mainsettings (\r\n\t\tdsn, port, "developerRole",\t\r\n\t\tmaindomain, "primaryAuthorization", \r\n\t\tredirect401, isactiv, homepage, reports_url, \r\n        login_url\r\n\t  ) VALUES (\r\n\t    injson->>'dsn', (injson->>'port')::int, (injson->>'developerRole'),\r\n\t\tinjson->>'maindomain', (injson->>'primaryAuthorization')::smallint,\r\n\t\tinjson->>'redirect401', true, injson->>'homepage', injson->>'reports_url',\r\n        injson->>'login_url'\r\n\t  ); \r\n    END IF;\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nBEGIN\r\nIF ( SELECT count(id)\r\n\t FROM framework.mainsettings\r\n\t WHERE isactiv\r\n   ) > 0\r\n   THEN\r\n\t  UPDATE framework.mainsettings\r\n\t  SET \r\n\t\tdsn = COALESCE(injson->>'dsn',dsn),\r\n\t\tport = COALESCE((injson->>'port')::int,port),\r\n\t\t"developerRole" = COALESCE((injson->>'developerRole'),"developerRole"),\r\n\t\tmaindomain = COALESCE(injson->>'maindomain',maindomain),\r\n\t\t"primaryAuthorization" =  COALESCE((injson->>'primaryAuthorization')::smallint,"primaryAuthorization"), \r\n\t\tredirect401 = COALESCE(injson->>'redirect401',redirect401),\r\n\t\thomepage = COALESCE(injson->>'homepage', homepage),\r\n\t\treports_url = COALESCE(injson->>'reports_url', reports_url),\r\n\t\tlogin_url = COALESCE(injson->>'login_url', login_url)\r\n\t  WHERE isactiv;\r\n    ELSE\r\n\t  INSERT INTO framework.mainsettings (\r\n\t\tdsn, port, "developerRole",\t\r\n\t\tmaindomain, "primaryAuthorization", \r\n\t\tredirect401, isactiv, homepage, reports_url, \r\n        login_url\r\n\t  ) VALUES (\r\n\t    injson->>'dsn', (injson->>'port')::int, (injson->>'developerRole'),\r\n\t\tinjson->>'maindomain', (injson->>'primaryAuthorization')::smallint,\r\n\t\tinjson->>'redirect401', true, injson->>'homepage', injson->>'reports_url',\r\n        injson->>'login_url'\r\n\t  ); \r\n    END IF;\r\n\r\nEND;\r\n
227296	framework	fn_getselect	framework.fn_getselect(injson  json,outjson out json)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_getselect(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_getselect(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_getselect(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _filterid int;\r\n  _tabname varchar(350);\r\n  _tabcolums varchar(1500);\r\n  _squery varchar(1800);\r\nBEGIN\r\n\t_filterid = injson->>'id';\r\n    \r\n    \r\n    SELECT\r\n    \tcoalesce(c.relation, c.multiselecttable) as  tabname,\r\n    \tCOALESCE(\r\n        \tc.relationcolums ,\t\r\n            c.multicolums)->>0 as tabcolums\r\n    FROM framework.filters as f\r\n    \tJOIN framework.config as c on c.id = f.val_desc\r\n        \tand f.viewid = f.viewid\r\n    WHERE f.id = _filterid\r\n    INTO _tabname, _tabcolums;\r\n    \r\n\t/*_tabname = injson->>'tabname';\r\n    _tabcolums = injson->>'tabcolums';*/\r\n    \r\n  IF \r\n    (SELECT \r\n           count(t.*)\r\n    FROM information_schema.columns as t                                         \r\n    WHERE concat(t.table_schema,'.',t.table_name) = _tabname and \r\n    upper(t.column_name) = upper(_tabcolums)) = 0 THEN\r\n  \tperform raiserror('can not find table or column, please check input data');\r\n  END IF;  \r\n\r\n  _squery = concat(\r\n  \t'\r\n    SELECT array_to_json(array_agg(row_to_json(d))) FROM\r\n    (SELECT id as value, ' ,_tabcolums , ' as label FROM ', _tabname,') as d'\r\n  );\r\n  \r\n  EXECUTE format(_squery) INTO outjson; \r\n  outjson = coalesce(outjson,'[]');\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  _filterid int;\r\n  _tabname varchar(350);\r\n  _tabcolums varchar(1500);\r\n  _squery varchar(1800);\r\nBEGIN\r\n\t_filterid = injson->>'id';\r\n    \r\n    \r\n    SELECT\r\n    \tcoalesce(c.relation, c.multiselecttable) as  tabname,\r\n    \tCOALESCE(\r\n        \tc.relationcolums ,\t\r\n            c.multicolums)->>0 as tabcolums\r\n    FROM framework.filters as f\r\n    \tJOIN framework.config as c on c.id = f.val_desc\r\n        \tand f.viewid = f.viewid\r\n    WHERE f.id = _filterid\r\n    INTO _tabname, _tabcolums;\r\n    \r\n\t/*_tabname = injson->>'tabname';\r\n    _tabcolums = injson->>'tabcolums';*/\r\n    \r\n  IF \r\n    (SELECT \r\n           count(t.*)\r\n    FROM information_schema.columns as t                                         \r\n    WHERE concat(t.table_schema,'.',t.table_name) = _tabname and \r\n    upper(t.column_name) = upper(_tabcolums)) = 0 THEN\r\n  \tperform raiserror('can not find table or column, please check input data');\r\n  END IF;  \r\n\r\n  _squery = concat(\r\n  \t'\r\n    SELECT array_to_json(array_agg(row_to_json(d))) FROM\r\n    (SELECT id as value, ' ,_tabcolums , ' as label FROM ', _tabname,') as d'\r\n  );\r\n  \r\n  EXECUTE format(_squery) INTO outjson; \r\n  outjson = coalesce(outjson,'[]');\r\n\r\nEND;\r\n
227297	framework	fn_gettables_sel	framework.fn_gettables_sel(injson  json,outjson out json)	ALL TABLES FOR ADMIN	2020-05-21 11:31:02.195905	1	f	fn_gettables_sel(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_gettables_sel(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_gettables_sel(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n\tSELECT \r\n\t\tconcat(TABLE_SCHEMA,'.',TABLE_NAME) as value,\r\n\t\tconcat(TABLE_SCHEMA,'.',TABLE_NAME) as label, *\r\n\tFROM INFORMATION_SCHEMA.TABLES\r\n\tORDER BY TABLE_SCHEMA, TABLE_NAME\r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'[]');\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nBEGIN\r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n\tSELECT \r\n\t\tconcat(TABLE_SCHEMA,'.',TABLE_NAME) as value,\r\n\t\tconcat(TABLE_SCHEMA,'.',TABLE_NAME) as label, *\r\n\tFROM INFORMATION_SCHEMA.TABLES\r\n\tORDER BY TABLE_SCHEMA, TABLE_NAME\r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'[]');\r\nEND;\r\n
227298	framework	fn_getusersettings	framework.fn_getusersettings(injson  json,outjson out json)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_getusersettings(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_getusersettings(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_getusersettings(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n\t_userid int;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n    \r\n    SELECT \r\n    \tu.usersettings\r\n    FROM framework.users as u\r\n    WHERE u.id = _userid\r\n    INTO outjson;\r\n\r\n\toutjson = coalesce(outjson,'[]');\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n\t_userid int;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n    \r\n    SELECT \r\n    \tu.usersettings\r\n    FROM framework.users as u\r\n    WHERE u.id = _userid\r\n    INTO outjson;\r\n\r\n\toutjson = coalesce(outjson,'[]');\r\nEND;\r\n
227299	framework	fn_htmldatatype	framework.fn_htmldatatype(sqldatatype  varchar,htmltype out varchar)	sql types into framework types	2020-05-21 11:31:02.195905	1	f	fn_htmldatatype(sqldatatype  varchar,htmltype out varchar)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_htmldatatype(sqldatatype  varchar,htmltype out varchar) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_htmldatatype(sqldatatype character varying, OUT htmltype character varying)\n RETURNS character varying\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\t\r\n    htmltype = 'text';\r\n\tIF sqldatatype in (\r\n    \t\t'int',\r\n            'integer', \r\n            'smallint', \r\n            'real', \r\n            'money', \r\n            'float', \r\n            'decimal', \r\n            'numeric', \r\n            'smallmoney', \r\n            'bigint',\r\n            'double precision'\r\n    ) THEN\r\n    \t htmltype = 'number';\r\n    END IF;     \r\n\tIF sqldatatype in (\r\n    \t'date',\r\n        'time',\r\n        'datetime2',\r\n        'datetimeoffset',\r\n        'smalldatetime',\r\n        'datetime',\r\n        'timestamp',\r\n        'timestamp without time zone',\r\n        'timestamp with time zone'\r\n    ) THEN\r\n    \t htmltype = 'date';\r\n\tEND IF; \r\n    IF sqldatatype in ('bit','boolean') THEN\r\n    \t htmltype = 'checkbox' ;   \r\n    END IF; \r\n    \t \r\n    \r\n        \r\n   -- RETURN htmltype\r\nEND;\r\n$function$\n	[{"argname":"sqldatatype","argmode":"input","argtype":"varchar"},{"argname":"htmltype","argmode":"output","argtype":"varchar"}]	varchar	\r\nBEGIN\r\n\t\r\n    htmltype = 'text';\r\n\tIF sqldatatype in (\r\n    \t\t'int',\r\n            'integer', \r\n            'smallint', \r\n            'real', \r\n            'money', \r\n            'float', \r\n            'decimal', \r\n            'numeric', \r\n            'smallmoney', \r\n            'bigint',\r\n            'double precision'\r\n    ) THEN\r\n    \t htmltype = 'number';\r\n    END IF;     \r\n\tIF sqldatatype in (\r\n    \t'date',\r\n        'time',\r\n        'datetime2',\r\n        'datetimeoffset',\r\n        'smalldatetime',\r\n        'datetime',\r\n        'timestamp',\r\n        'timestamp without time zone',\r\n        'timestamp with time zone'\r\n    ) THEN\r\n    \t htmltype = 'date';\r\n\tEND IF; \r\n    IF sqldatatype in ('bit','boolean') THEN\r\n    \t htmltype = 'checkbox' ;   \r\n    END IF; \r\n    \t \r\n    \r\n        \r\n   -- RETURN htmltype\r\nEND;\r\n
227303	framework	fn_mainmenu	framework.fn_mainmenu(injson  json,outjson out json)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_mainmenu(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_mainmenu(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_mainmenu(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\n  _roles json;\t\r\nBEGIN\r\n    -- NOT USED\r\n\t_userid = injson->>'userid';\r\n\t\t\r\n\tSELECT\r\n    \tu.roles\r\n    FROM framework.users as u\r\n    WHERE u.id = _userid\r\n    INTO _roles;\r\n\t\r\n\tSELECT\r\n    \tarray_to_json(array_agg(row_to_json(d))) \r\n    FROM (\r\n\t  SELECT \r\n        m.*,\r\n        (SELECT count(m2.id) FROM framework.mainmenu as m2 WHERE m2.parentid = m.id) as childs\r\n      FROM framework.mainmenu as m\r\n      WHERE ((\r\n\t        SELECT count(*)\r\n      \t\tFROM json_array_elements_text(_roles) as r\r\n            WHERE r.value::varchar = '0'\r\n       )>0     \r\n      \r\n      \t\t\t or \r\n      \t\t (SELECT count(*)\r\n                \t\t\tFROM json_array_elements_text(m.roles) as r\r\n                             JOIN json_array_elements_text(_roles) as r2 on r2.value::varchar = r.value ::varchar \r\n                            )>0)\r\n      ORDER BY m.orderby\r\n      ) as d\r\n    INTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  _userid int;\r\n  _roles json;\t\r\nBEGIN\r\n    -- NOT USED\r\n\t_userid = injson->>'userid';\r\n\t\t\r\n\tSELECT\r\n    \tu.roles\r\n    FROM framework.users as u\r\n    WHERE u.id = _userid\r\n    INTO _roles;\r\n\t\r\n\tSELECT\r\n    \tarray_to_json(array_agg(row_to_json(d))) \r\n    FROM (\r\n\t  SELECT \r\n        m.*,\r\n        (SELECT count(m2.id) FROM framework.mainmenu as m2 WHERE m2.parentid = m.id) as childs\r\n      FROM framework.mainmenu as m\r\n      WHERE ((\r\n\t        SELECT count(*)\r\n      \t\tFROM json_array_elements_text(_roles) as r\r\n            WHERE r.value::varchar = '0'\r\n       )>0     \r\n      \r\n      \t\t\t or \r\n      \t\t (SELECT count(*)\r\n                \t\t\tFROM json_array_elements_text(m.roles) as r\r\n                             JOIN json_array_elements_text(_roles) as r2 on r2.value::varchar = r.value ::varchar \r\n                            )>0)\r\n      ORDER BY m.orderby\r\n      ) as d\r\n    INTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\n\r\nEND;\r\n
227304	framework	fn_mainmenu_recurs	framework.fn_mainmenu_recurs(_roles  json,_parentid  int4,outjson out json)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_mainmenu_recurs(_roles  json,_parentid  int4,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_mainmenu_recurs(_roles  json,_parentid  int4,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_mainmenu_recurs(_roles json, _parentid integer, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    --NOT USED\r\n\tSELECT\r\n    \tarray_to_json(array_agg(row_to_json(d))) \r\n    FROM\r\n      (SELECT \r\n        m.*,\r\n        m.title as label,\r\n        m.path as to,\r\n        framework.fn_mainmenu_recurs(_roles,m.id) as items,\r\n        (SELECT count(m2.id) FROM framework.mainmenu as m2 WHERE m2.parentid = m.id) as childs\r\n      FROM framework.mainmenu as m\r\n      WHERE  ((SELECT count(*)\r\n      \t\t\tFROM json_array_elements_text(_roles) as r\r\n                WHERE r.value::varchar = '0'\r\n           \t\t)>0     \r\n      \r\n      \t\t\t or \r\n      \t\t (SELECT count(*)\r\n                \t\t\tFROM json_array_elements_text(m.roles) as r\r\n                             JOIN json_array_elements_text(_roles) as r2 on r2.value::varchar = r.value ::varchar \r\n                            )>0)\r\n      \tand coalesce(m.parentid,0) = coalesce(_parentid,0)\r\n      ORDER BY m.orderby\r\n      ) as d\r\n    INTO outjson;\r\nEND;\r\n$function$\n	[{"argname":"_roles","argmode":"input","argtype":"json"},{"argname":"_parentid","argmode":"input","argtype":"int4"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nBEGIN\r\n    --NOT USED\r\n\tSELECT\r\n    \tarray_to_json(array_agg(row_to_json(d))) \r\n    FROM\r\n      (SELECT \r\n        m.*,\r\n        m.title as label,\r\n        m.path as to,\r\n        framework.fn_mainmenu_recurs(_roles,m.id) as items,\r\n        (SELECT count(m2.id) FROM framework.mainmenu as m2 WHERE m2.parentid = m.id) as childs\r\n      FROM framework.mainmenu as m\r\n      WHERE  ((SELECT count(*)\r\n      \t\t\tFROM json_array_elements_text(_roles) as r\r\n                WHERE r.value::varchar = '0'\r\n           \t\t)>0     \r\n      \r\n      \t\t\t or \r\n      \t\t (SELECT count(*)\r\n                \t\t\tFROM json_array_elements_text(m.roles) as r\r\n                             JOIN json_array_elements_text(_roles) as r2 on r2.value::varchar = r.value ::varchar \r\n                            )>0)\r\n      \tand coalesce(m.parentid,0) = coalesce(_parentid,0)\r\n      ORDER BY m.orderby\r\n      ) as d\r\n    INTO outjson;\r\nEND;\r\n
227305	framework	fn_mainmenusigma	framework.fn_mainmenusigma(injson  json,outjson out json)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_mainmenusigma(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_mainmenusigma(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_mainmenusigma(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\n  _roles json;\r\n  _usermenu json;\r\n  _userdetail json;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n\t-- NOT USED\r\n\tSELECT\r\n    \tu.roles\r\n    FROM framework.users as u\r\n    WHERE u.id = _userid\r\n    INTO _roles;\r\n\t\r\n\r\n    \r\n\tIF _userid is null THEN\r\n    \tSELECT \r\n\t\t\t\t'[{"label": "Notifications", "icon": "pi pi-fw pi-inbox", "to":"/list/notifs"},\r\n\t\t\t\t{"label": "login", "icon": "pi pi-fw pi-power-off", "to": "/logout"}]' as usermenu\r\n        INTO _usermenu;        \r\n        \r\n\t\tSELECT row_to_json(d)\r\n        FROM\r\n        (SELECT \r\n        \t'' as login,\r\n            'unknown' as fam,\r\n            '' as im,\r\n            '' as ot,\r\n            0 as orgid,\r\n            '' as orgname,\r\n            '' as photo,\r\n            '{}' as usersettings) as d\r\n         INTO _userdetail;   \r\n    ELSE\r\n    \tSELECT \r\n\t\t\t\t'[{"label": "Account", "icon": "pi pi-fw pi-user", "to": "/getone/account?id=_userid_"},\r\n\t\t\t\t{"label": "Notifications", "icon": "pi pi-fw pi-inbox", "to":"/list/notifs?userid=_userid_"},\r\n                {"label": "My organization", "icon": "pi pi-fw pi-inbox", "to":"/getone/myorg?id=_orgid_"},\r\n\t\t\t\t{"label": "logout", "icon": "pi pi-fw pi-power-off", "to": "/logout"}]' as usermenu\r\n        INTO _usermenu;  \r\n        \r\n        SELECT row_to_json(d)\r\n        FROM\r\n        (SELECT \r\n        \tu.login,\r\n            u.fam,\r\n            u.im,\r\n            u.ot,\r\n            u.orgs,\r\n            u.orgid,\r\n        \to.orgname,\r\n            (u.photo->0)::json->>'src' as photo,\r\n            u.usersettings\r\n        FROM framework.users as u\r\n\t\t\tJOIN framework.orgs as o on u.orgid = o.id \r\n        WHERE u.id = _userid) as d\r\n        INTO _userdetail;\r\n    END IF;    \r\n\r\n    outjson = framework.fn_mainmenu_recurs(_roles, 0);\r\n\r\n\tSELECT\r\n    \trow_to_json(d)\r\n    FROM\r\n    (SELECT \r\n    \toutjson as mainmenu,\r\n        _userdetail as userdetail,\r\n        coalesce(_usermenu,'[]') as usermenu) as d\r\n    INTO outjson;    \r\n    \r\n    --outjson = coalesce(outjson,'[]');\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  _userid int;\r\n  _roles json;\r\n  _usermenu json;\r\n  _userdetail json;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n\t-- NOT USED\r\n\tSELECT\r\n    \tu.roles\r\n    FROM framework.users as u\r\n    WHERE u.id = _userid\r\n    INTO _roles;\r\n\t\r\n\r\n    \r\n\tIF _userid is null THEN\r\n    \tSELECT \r\n\t\t\t\t'[{"label": "Notifications", "icon": "pi pi-fw pi-inbox", "to":"/list/notifs"},\r\n\t\t\t\t{"label": "login", "icon": "pi pi-fw pi-power-off", "to": "/logout"}]' as usermenu\r\n        INTO _usermenu;        \r\n        \r\n\t\tSELECT row_to_json(d)\r\n        FROM\r\n        (SELECT \r\n        \t'' as login,\r\n            'unknown' as fam,\r\n            '' as im,\r\n            '' as ot,\r\n            0 as orgid,\r\n            '' as orgname,\r\n            '' as photo,\r\n            '{}' as usersettings) as d\r\n         INTO _userdetail;   \r\n    ELSE\r\n    \tSELECT \r\n\t\t\t\t'[{"label": "Account", "icon": "pi pi-fw pi-user", "to": "/getone/account?id=_userid_"},\r\n\t\t\t\t{"label": "Notifications", "icon": "pi pi-fw pi-inbox", "to":"/list/notifs?userid=_userid_"},\r\n                {"label": "My organization", "icon": "pi pi-fw pi-inbox", "to":"/getone/myorg?id=_orgid_"},\r\n\t\t\t\t{"label": "logout", "icon": "pi pi-fw pi-power-off", "to": "/logout"}]' as usermenu\r\n        INTO _usermenu;  \r\n        \r\n        SELECT row_to_json(d)\r\n        FROM\r\n        (SELECT \r\n        \tu.login,\r\n            u.fam,\r\n            u.im,\r\n            u.ot,\r\n            u.orgs,\r\n            u.orgid,\r\n        \to.orgname,\r\n            (u.photo->0)::json->>'src' as photo,\r\n            u.usersettings\r\n        FROM framework.users as u\r\n\t\t\tJOIN framework.orgs as o on u.orgid = o.id \r\n        WHERE u.id = _userid) as d\r\n        INTO _userdetail;\r\n    END IF;    \r\n\r\n    outjson = framework.fn_mainmenu_recurs(_roles, 0);\r\n\r\n\tSELECT\r\n    \trow_to_json(d)\r\n    FROM\r\n    (SELECT \r\n    \toutjson as mainmenu,\r\n        _userdetail as userdetail,\r\n        coalesce(_usermenu,'[]') as usermenu) as d\r\n    INTO outjson;    \r\n    \r\n    --outjson = coalesce(outjson,'[]');\r\nEND;\r\n
227308	framework	fn_menu_recurs	framework.fn_menu_recurs(_userid  int4,_roles  json,_parentid  int4,menu_id  int4,outjson out json)	GET MENU ITEMS \r\nRECURS BY PARENTID	2020-05-21 11:31:02.195905	1	f	fn_menu_recurs(_userid  int4,_roles  json,_parentid  int4,menu_id  int4,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_menu_recurs(_userid  int4,_roles  json,_parentid  int4,menu_id  int4,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_menu_recurs(_userid integer, _roles json, _parentid integer, menu_id integer, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n   SELECT\r\n   \t\tarray_to_json(array_agg(row_to_json(d))) \r\n   FROM (\r\n      SELECT \r\n        m.*, (\r\n\t\t  SELECT \r\n\t\t     count(n.id)\r\n\t\t  FROM framework.notifications as n\r\n\t\t  WHERE n.for_userid = _userid AND not n.isread\tAND\r\n\t\t        COALESCE(n.messagetype,'messagetype') = COALESCE(m.ws,'ws')\t \r\n\t\t) as notif_count,\r\n        m.title as label,\r\n        m.path as to,\r\n        framework.fn_menu_recurs(_userid, _roles,m.id,menu_id) as items, (\r\n        \tSELECT count(m2.id) \r\n            FROM framework.mainmenu as m2 \r\n            WHERE m2.parentid = m.id\r\n        ) as childs\r\n      FROM framework.mainmenu as m\r\n      \t--JOIN framework.menus as mn on mn.id = m.menuid --and not mn.ismainmenu \r\n      WHERE ((\r\n          SELECT count(*)\r\n          FROM json_array_elements_text(_roles) as r\r\n          WHERE r.value::varchar = '0'\r\n        ) > 0 OR (\r\n          SELECT count(*)\r\n          FROM json_array_elements_text(m.roles) as r\r\n            JOIN json_array_elements_text(_roles) as r2 on r2.value::varchar = r.value ::varchar \r\n        ) > 0 OR (\r\n          SELECT count(*)\r\n          FROM json_array_elements_text(m.roles) as r\r\n            JOIN json_array_elements_text(_roles) as r2 on r2.value::varchar = r.value ::varchar \r\n        ) > 0 OR m.roles::varchar='[]' OR m.roles is NULL \r\n    ) AND coalesce(m.parentid,0) = coalesce(_parentid,0) and m.menuid = menu_id and\r\n    m.nosession = (\r\n    \tCASE WHEN (SELECT count(*) FROM json_array_elements_text(_roles)) = 0 OR _roles is null\r\n    \tTHEN m.nosession \r\n        ELSE FALSE\r\n        END\r\n    )\r\n    ORDER BY m.orderby\r\n  ) as d\r\n  INTO outjson;\r\nEND;\r\n$function$\n	[{"argname":"_userid","argmode":"input","argtype":"int4"},{"argname":"_roles","argmode":"input","argtype":"json"},{"argname":"_parentid","argmode":"input","argtype":"int4"},{"argname":"menu_id","argmode":"input","argtype":"int4"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nBEGIN\r\n   SELECT\r\n   \t\tarray_to_json(array_agg(row_to_json(d))) \r\n   FROM (\r\n      SELECT \r\n        m.*, (\r\n\t\t  SELECT \r\n\t\t     count(n.id)\r\n\t\t  FROM framework.notifications as n\r\n\t\t  WHERE n.for_userid = _userid AND not n.isread\tAND\r\n\t\t        COALESCE(n.messagetype,'messagetype') = COALESCE(m.ws,'ws')\t \r\n\t\t) as notif_count,\r\n        m.title as label,\r\n        m.path as to,\r\n        framework.fn_menu_recurs(_userid, _roles,m.id,menu_id) as items, (\r\n        \tSELECT count(m2.id) \r\n            FROM framework.mainmenu as m2 \r\n            WHERE m2.parentid = m.id\r\n        ) as childs\r\n      FROM framework.mainmenu as m\r\n      \t--JOIN framework.menus as mn on mn.id = m.menuid --and not mn.ismainmenu \r\n      WHERE ((\r\n          SELECT count(*)\r\n          FROM json_array_elements_text(_roles) as r\r\n          WHERE r.value::varchar = '0'\r\n        ) > 0 OR (\r\n          SELECT count(*)\r\n          FROM json_array_elements_text(m.roles) as r\r\n            JOIN json_array_elements_text(_roles) as r2 on r2.value::varchar = r.value ::varchar \r\n        ) > 0 OR (\r\n          SELECT count(*)\r\n          FROM json_array_elements_text(m.roles) as r\r\n            JOIN json_array_elements_text(_roles) as r2 on r2.value::varchar = r.value ::varchar \r\n        ) > 0 OR m.roles::varchar='[]' OR m.roles is NULL \r\n    ) AND coalesce(m.parentid,0) = coalesce(_parentid,0) and m.menuid = menu_id and\r\n    m.nosession = (\r\n    \tCASE WHEN (SELECT count(*) FROM json_array_elements_text(_roles)) = 0 OR _roles is null\r\n    \tTHEN m.nosession \r\n        ELSE FALSE\r\n        END\r\n    )\r\n    ORDER BY m.orderby\r\n  ) as d\r\n  INTO outjson;\r\nEND;\r\n
227309	framework	fn_menu_recurs	framework.fn_menu_recurs(_userid  int4,_roles  json,_parentid  int4,menu_id  int4,_sessid  bpchar,outjson out json)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_menu_recurs(_userid  int4,_roles  json,_parentid  int4,menu_id  int4,_sessid  bpchar,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_menu_recurs(_userid  int4,_roles  json,_parentid  int4,menu_id  int4,_sessid  bpchar,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_menu_recurs(_userid integer, _roles json, _parentid integer, menu_id integer, _sessid character, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n   SELECT\r\n   \t\tarray_to_json(array_agg(row_to_json(d))) \r\n   FROM (\r\n      SELECT \r\n        m.*, (\r\n          SELECT \r\n             count(n.id)\r\n          FROM framework.notifications as n\r\n          WHERE (n.for_userid = _userid OR n.sessid = _sessid) AND not n.isread    AND\r\n                COALESCE(n.messagetype,'messagetype') = COALESCE(m.ws,'ws')     \r\n        ) as notif_count,\r\n        m.title as label,\r\n        m.path as to,\r\n        framework.fn_menu_recurs(_userid, _roles,m.id,menu_id, _sessid) as items, (\r\n            SELECT count(m2.id) \r\n            FROM framework.mainmenu as m2 \r\n            WHERE m2.parentid = m.id\r\n        ) as childs\r\n      FROM framework.mainmenu as m\r\n          --JOIN framework.menus as mn on mn.id = m.menuid --and not mn.ismainmenu \r\n      WHERE ((\r\n          SELECT count(*)\r\n          FROM json_array_elements_text(_roles) as r\r\n          WHERE r.value::varchar = '0'\r\n        ) > 0 OR (\r\n          SELECT count(*)\r\n          FROM json_array_elements_text(m.roles) as r\r\n            JOIN json_array_elements_text(_roles) as r2 on r2.value::varchar = r.value ::varchar \r\n        ) > 0 OR (\r\n          SELECT count(*)\r\n          FROM json_array_elements_text(m.roles) as r\r\n            JOIN json_array_elements_text(_roles) as r2 on r2.value::varchar = r.value ::varchar \r\n        ) > 0 OR m.roles::varchar='[]' OR m.roles is NULL \r\n    ) AND coalesce(m.parentid,0) = coalesce(_parentid,0) and m.menuid = menu_id and\r\n    m.nosession = (\r\n        CASE WHEN (SELECT count(*) FROM json_array_elements_text(_roles)) = 0 OR _roles is null\r\n        THEN m.nosession \r\n        ELSE FALSE\r\n        END\r\n    )\r\n    ORDER BY m.orderby\r\n  ) as d\r\n  INTO outjson;\r\nEND;\r\n$function$\n	[{"argname":"_userid","argmode":"input","argtype":"int4"},{"argname":"_roles","argmode":"input","argtype":"json"},{"argname":"_parentid","argmode":"input","argtype":"int4"},{"argname":"menu_id","argmode":"input","argtype":"int4"},{"argname":"_sessid","argmode":"input","argtype":"bpchar"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nBEGIN\r\n   SELECT\r\n   \t\tarray_to_json(array_agg(row_to_json(d))) \r\n   FROM (\r\n      SELECT \r\n        m.*, (\r\n          SELECT \r\n             count(n.id)\r\n          FROM framework.notifications as n\r\n          WHERE (n.for_userid = _userid OR n.sessid = _sessid) AND not n.isread    AND\r\n                COALESCE(n.messagetype,'messagetype') = COALESCE(m.ws,'ws')     \r\n        ) as notif_count,\r\n        m.title as label,\r\n        m.path as to,\r\n        framework.fn_menu_recurs(_userid, _roles,m.id,menu_id, _sessid) as items, (\r\n            SELECT count(m2.id) \r\n            FROM framework.mainmenu as m2 \r\n            WHERE m2.parentid = m.id\r\n        ) as childs\r\n      FROM framework.mainmenu as m\r\n          --JOIN framework.menus as mn on mn.id = m.menuid --and not mn.ismainmenu \r\n      WHERE ((\r\n          SELECT count(*)\r\n          FROM json_array_elements_text(_roles) as r\r\n          WHERE r.value::varchar = '0'\r\n        ) > 0 OR (\r\n          SELECT count(*)\r\n          FROM json_array_elements_text(m.roles) as r\r\n            JOIN json_array_elements_text(_roles) as r2 on r2.value::varchar = r.value ::varchar \r\n        ) > 0 OR (\r\n          SELECT count(*)\r\n          FROM json_array_elements_text(m.roles) as r\r\n            JOIN json_array_elements_text(_roles) as r2 on r2.value::varchar = r.value ::varchar \r\n        ) > 0 OR m.roles::varchar='[]' OR m.roles is NULL \r\n    ) AND coalesce(m.parentid,0) = coalesce(_parentid,0) and m.menuid = menu_id and\r\n    m.nosession = (\r\n        CASE WHEN (SELECT count(*) FROM json_array_elements_text(_roles)) = 0 OR _roles is null\r\n        THEN m.nosession \r\n        ELSE FALSE\r\n        END\r\n    )\r\n    ORDER BY m.orderby\r\n  ) as d\r\n  INTO outjson;\r\nEND;\r\n
227310	framework	fn_menus	framework.fn_menus(injson  json,outjson out json)	GET ALL MENUS	2020-05-21 11:31:02.195905	1	f	fn_menus(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_menus(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_menus(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\n  _roles json;\r\n  _usermenu json;\r\n  _userdetail json;\r\nBEGIN\r\n    _userid = injson->>'userid';    \r\n    SELECT\r\n        u.roles\r\n    FROM framework.users as u\r\n    WHERE u.id = _userid\r\n    INTO _roles;\r\n\r\n    IF _userid is null THEN\r\n        SELECT \r\n            '[{"label": "Notifications", "icon": "pi pi-fw pi-inbox", "to":"/list/notifs"},\r\n              {"label": "login", "icon": "pi pi-fw pi-power-off", "to": "/logout"}]' as usermenu\r\n        INTO _usermenu;        \r\n        \r\n        SELECT \r\n            row_to_json(d)\r\n        FROM (\r\n          SELECT \r\n              '' as login, 'unknown' as fam, '' as im,\r\n              '' as ot, 0 as orgid, '' as orgname,\r\n              '' as photo, '{}' as usersettings\r\n        ) as d\r\n         INTO _userdetail;   \r\n    ELSE\r\n        SELECT \r\n            '[\r\n\t\t\t\t{"label": "Account", "icon": "pi pi-fw pi-user", "to": "/getone/account?id=_userid_"},\r\n\t\t\t\t{"label": "Notifications", "icon": "pi pi-fw pi-inbox", "to":"/list/notifs?userid=_userid_"},\r\n\t\t\t\t{"label": "My organization", "icon": "pi pi-fw pi-inbox", "to":"/getone/myorg?id=_orgid_"},\r\n\t\t\t\t{"label": "logout", "icon": "pi pi-fw pi-power-off", "to": "/logout"}\r\n\t\t\t ]' as usermenu\r\n        INTO _usermenu;  \r\n        \r\n        SELECT row_to_json(d)\r\n        FROM (\r\n            SELECT \r\n              u.login, u.fam, u.im, u.ot,\r\n              u.orgs, u.orgid, o.orgname,\r\n              (u.photo->0)::json->>'src' as photo,\r\n              u.usersettings\r\n            FROM framework.users as u\r\n              LEFT JOIN framework.orgs as o on u.orgid = o.id \r\n            WHERE u.id = _userid\r\n\t\t) as d\r\n        INTO _userdetail;\r\n     \r\n    END IF;    \r\n    \r\n\r\n    --outjson = framework.fn_menu_recurs(_roles, 0);\r\n    SELECT\r\n        row_to_json(d)\r\n    FROM (\r\n\t  SELECT \r\n        --outjson as mainmenu,\r\n        _userdetail as userdetail, (\r\n\t\t    SELECT homepage \r\n\t\t\tFROM framework.mainsettings \r\n\t\t\tWHERE isactiv \r\n\t\t) as homepage, (\r\n\t\t    SELECT\r\n                array_to_json(array_agg(row_to_json(t)))\r\n             FROM (\r\n\t\t\t     SELECT \r\n                    ms.menutype as id,\r\n                    mt.mtypename as menutype,\r\n                    coalesce(framework.fn_menu_recurs(_userid,_roles, 0,ms.id),'[]') as menu\r\n                 FROM framework.menus as ms \r\n                      JOIN framework.menutypes as mt on mt.id = ms.menutype\r\n             ) as t\r\n\t\t) as menus,\r\n        coalesce(_usermenu,'[]') as usermenu\r\n\t) as d\r\n    INTO outjson;    \r\n    \r\n    --outjson = coalesce(outjson,'[]');\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  _userid int;\r\n  _roles json;\r\n  _usermenu json;\r\n  _userdetail json;\r\nBEGIN\r\n    _userid = injson->>'userid';    \r\n    SELECT\r\n        u.roles\r\n    FROM framework.users as u\r\n    WHERE u.id = _userid\r\n    INTO _roles;\r\n\r\n    IF _userid is null THEN\r\n        SELECT \r\n            '[{"label": "Notifications", "icon": "pi pi-fw pi-inbox", "to":"/list/notifs"},\r\n              {"label": "login", "icon": "pi pi-fw pi-power-off", "to": "/logout"}]' as usermenu\r\n        INTO _usermenu;        \r\n        \r\n        SELECT \r\n            row_to_json(d)\r\n        FROM (\r\n          SELECT \r\n              '' as login, 'unknown' as fam, '' as im,\r\n              '' as ot, 0 as orgid, '' as orgname,\r\n              '' as photo, '{}' as usersettings\r\n        ) as d\r\n         INTO _userdetail;   \r\n    ELSE\r\n        SELECT \r\n            '[\r\n\t\t\t\t{"label": "Account", "icon": "pi pi-fw pi-user", "to": "/getone/account?id=_userid_"},\r\n\t\t\t\t{"label": "Notifications", "icon": "pi pi-fw pi-inbox", "to":"/list/notifs?userid=_userid_"},\r\n\t\t\t\t{"label": "My organization", "icon": "pi pi-fw pi-inbox", "to":"/getone/myorg?id=_orgid_"},\r\n\t\t\t\t{"label": "logout", "icon": "pi pi-fw pi-power-off", "to": "/logout"}\r\n\t\t\t ]' as usermenu\r\n        INTO _usermenu;  \r\n        \r\n        SELECT row_to_json(d)\r\n        FROM (\r\n            SELECT \r\n              u.login, u.fam, u.im, u.ot,\r\n              u.orgs, u.orgid, o.orgname,\r\n              (u.photo->0)::json->>'src' as photo,\r\n              u.usersettings\r\n            FROM framework.users as u\r\n              LEFT JOIN framework.orgs as o on u.orgid = o.id \r\n            WHERE u.id = _userid\r\n\t\t) as d\r\n        INTO _userdetail;\r\n     \r\n    END IF;    \r\n    \r\n\r\n    --outjson = framework.fn_menu_recurs(_roles, 0);\r\n    SELECT\r\n        row_to_json(d)\r\n    FROM (\r\n\t  SELECT \r\n        --outjson as mainmenu,\r\n        _userdetail as userdetail, (\r\n\t\t    SELECT homepage \r\n\t\t\tFROM framework.mainsettings \r\n\t\t\tWHERE isactiv \r\n\t\t) as homepage, (\r\n\t\t    SELECT\r\n                array_to_json(array_agg(row_to_json(t)))\r\n             FROM (\r\n\t\t\t     SELECT \r\n                    ms.menutype as id,\r\n                    mt.mtypename as menutype,\r\n                    coalesce(framework.fn_menu_recurs(_userid,_roles, 0,ms.id),'[]') as menu\r\n                 FROM framework.menus as ms \r\n                      JOIN framework.menutypes as mt on mt.id = ms.menutype\r\n             ) as t\r\n\t\t) as menus,\r\n        coalesce(_usermenu,'[]') as usermenu\r\n\t) as d\r\n    INTO outjson;    \r\n    \r\n    --outjson = coalesce(outjson,'[]');\r\nEND;\r\n
227311	framework	fn_notif_setsended	framework.fn_notif_setsended(injson  json)	views notifications not sended	2020-05-21 11:31:02.195905	1	f	fn_notif_setsended(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_notif_setsended(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_notif_setsended(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n\t_id int; \r\nBEGIN\r\n\t_id = injson->>'id';\r\n    \r\n    UPDATE framework.viewsnotification\r\n    SET sended = now(),\r\n    \tissend = true\r\n    WHERE id = _id;\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n\t_id int; \r\nBEGIN\r\n\t_id = injson->>'id';\r\n    \r\n    UPDATE framework.viewsnotification\r\n    SET sended = now(),\r\n    \tissend = true\r\n    WHERE id = _id;\r\nEND;\r\n
227312	framework	fn_notifications_bysess	framework.fn_notifications_bysess(_sess  bpchar,outjson out json)	global notifications	2020-05-21 11:31:02.195905	1	f	fn_notifications_bysess(_sess  bpchar,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_notifications_bysess(_sess  bpchar,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_notifications_bysess(_sess character, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    _userid int;\r\nBEGIN\r\n\r\n    SELECT\r\n\t    s.userid\r\n\tFROM framework.sess as s\r\n\tWHERE s.id = _sess\r\n\tINTO _userid;\r\n\t\r\n\tSELECT\r\n\t     array_to_json(array_agg(row_to_json(d)))\r\n\tFROM (\r\n\t  SELECT \r\n\t\t   n.id, n.message, n.messagetype\r\n\t  FROM framework.notifications as n\r\n\t  WHERE (n.for_userid = coalesce(_userid,0) or n.sessid = coalesce(_sess,'')) and \r\n\t        not n.isread and (\r\n\t\t\t   SELECT count(*)\r\n\t\t\t   FROM json_array_elements_text(n.sended_sessions)\r\n\t\t\t   WHERE value::varchar = _sess\r\n\t\t\t) = 0\r\n    ) as d\r\n    INTO outjson;\r\n    \r\n      /*UPDATE framework.notifications as n\r\n      SET sended_sessions = n.sended_sessions::jsonb||concat('["',_sess,'"]')::jsonb\r\n      WHERE n.for_userid = _userid and not n.isread and (\r\n               SELECT count(*)\r\n               FROM json_array_elements_text(n.sended_sessions)\r\n               WHERE value::varchar = _sess\r\n            ) = 0;*/\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\n\r\nEND;\r\n$function$\n	[{"argname":"_sess","argmode":"input","argtype":"bpchar"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n    _userid int;\r\nBEGIN\r\n\r\n    SELECT\r\n\t    s.userid\r\n\tFROM framework.sess as s\r\n\tWHERE s.id = _sess\r\n\tINTO _userid;\r\n\t\r\n\tSELECT\r\n\t     array_to_json(array_agg(row_to_json(d)))\r\n\tFROM (\r\n\t  SELECT \r\n\t\t   n.id, n.message, n.messagetype\r\n\t  FROM framework.notifications as n\r\n\t  WHERE (n.for_userid = coalesce(_userid,0) or n.sessid = coalesce(_sess,'')) and \r\n\t        not n.isread and (\r\n\t\t\t   SELECT count(*)\r\n\t\t\t   FROM json_array_elements_text(n.sended_sessions)\r\n\t\t\t   WHERE value::varchar = _sess\r\n\t\t\t) = 0\r\n    ) as d\r\n    INTO outjson;\r\n    \r\n      /*UPDATE framework.notifications as n\r\n      SET sended_sessions = n.sended_sessions::jsonb||concat('["',_sess,'"]')::jsonb\r\n      WHERE n.for_userid = _userid and not n.isread and (\r\n               SELECT count(*)\r\n               FROM json_array_elements_text(n.sended_sessions)\r\n               WHERE value::varchar = _sess\r\n            ) = 0;*/\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\n\r\nEND;\r\n
227313	framework	fn_notifications_setreaded_by_userid	framework.fn_notifications_setreaded_by_userid(injson  json)	set notifs type notifications readed	2020-05-21 11:31:02.195905	1	f	fn_notifications_setreaded_by_userid(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_notifications_setreaded_by_userid(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_notifications_setreaded_by_userid(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\nBEGIN\r\n\r\n  _userid = injson->>'userid';\r\n  \r\n  IF _userid is null\r\n  THEN\r\n     PERFORM raiserror('userid is null');\r\n  END IF;\r\n  \r\n  UPDATE framework.notifications\r\n  SET isread = true\r\n  WHERE messagetype = 'notifs' and for_userid = _userid;\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _userid int;\r\nBEGIN\r\n\r\n  _userid = injson->>'userid';\r\n  \r\n  IF _userid is null\r\n  THEN\r\n     PERFORM raiserror('userid is null');\r\n  END IF;\r\n  \r\n  UPDATE framework.notifications\r\n  SET isread = true\r\n  WHERE messagetype = 'notifs' and for_userid = _userid;\r\n\r\nEND;\r\n
227314	framework	fn_notifications_setsended	framework.fn_notifications_setsended(_sess  bpchar)	set sended for sessionid 	2020-05-21 11:31:02.195905	1	f	fn_notifications_setsended(_sess  bpchar)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_notifications_setsended(_sess  bpchar) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_notifications_setsended(_sess character)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    _userid int;\r\nBEGIN\r\n\r\n    SELECT\r\n\t    s.userid\r\n\tFROM framework.sess as s\r\n\tWHERE s.id = _sess\r\n\tINTO _userid;\r\n\t\r\n\tUPDATE framework.notifications as n\r\n\tSET sended_sessions = n.sended_sessions::jsonb||concat('["',_sess,'"]')::jsonb\r\n\tWHERE n.for_userid = _userid and not n.isread and (\r\n\t\t\t   SELECT count(*)\r\n\t\t\t   FROM json_array_elements_text(n.sended_sessions)\r\n\t\t\t   WHERE value::varchar = _sess\r\n\t\t\t) = 0;\r\n\t\r\n\r\nEND;\r\n$function$\n	[{"argname":"_sess","argmode":"input","argtype":"bpchar"}]	void	\r\nDECLARE\r\n    _userid int;\r\nBEGIN\r\n\r\n    SELECT\r\n\t    s.userid\r\n\tFROM framework.sess as s\r\n\tWHERE s.id = _sess\r\n\tINTO _userid;\r\n\t\r\n\tUPDATE framework.notifications as n\r\n\tSET sended_sessions = n.sended_sessions::jsonb||concat('["',_sess,'"]')::jsonb\r\n\tWHERE n.for_userid = _userid and not n.isread and (\r\n\t\t\t   SELECT count(*)\r\n\t\t\t   FROM json_array_elements_text(n.sended_sessions)\r\n\t\t\t   WHERE value::varchar = _sess\r\n\t\t\t) = 0;\r\n\t\r\n\r\nEND;\r\n
227315	framework	fn_paramtypes	framework.fn_paramtypes(injson  json,outjson out json)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_paramtypes(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_paramtypes(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_paramtypes(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\r\n\tSELECT \r\n    \tarray_to_json(array_agg(row_to_json(d)))\r\n    FROM (\r\n\t  SELECT\r\n\t\t  a.val as label,\r\n\t\t  a.val as value\r\n\t  FROM framework.paramtypes as a\r\n\t) as d\r\n    INTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\n    \r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nBEGIN\r\n\r\n\tSELECT \r\n    \tarray_to_json(array_agg(row_to_json(d)))\r\n    FROM (\r\n\t  SELECT\r\n\t\t  a.val as label,\r\n\t\t  a.val as value\r\n\t  FROM framework.paramtypes as a\r\n\t) as d\r\n    INTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\n    \r\n\r\nEND;\r\n
227316	framework	fn_refreshconfig	framework.fn_refreshconfig(injson  json,outjson out json)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_refreshconfig(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_refreshconfig(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_refreshconfig(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _oldconfig JSON;\r\n  _newconfig JSON;\r\n  _tabname varchar(350);\r\n  ov json;\r\n  nw json;\r\n  isnotin boolean;\r\n  isin boolean;\r\n  i int;\r\nBEGIN\r\n    -- NOT USED\r\n\t--_oldconfig = injson->>'config';\r\n\t_tabname = injson->>'tabname';\r\n    \r\n    SELECT * FROM framework.fn_createconfig(injson) INTO _oldconfig;\r\n\r\n    \r\n   /*-- perform raiserror(_newconfig::varchar);\r\n    SELECT * FROM framework.fn_createconfig(injson) INTO _newconfig;\r\n\r\n    FOR nw in (SELECT * FROM json_array_elements_text(_newconfig))\r\n    LOOP \r\n    \tisnotin = true;\r\n        FOR ov in (SELECT * FROM json_array_elements_text(_oldconfig))\r\n        LOOP\r\n\t\t\tIF (ov->>'col')::varchar = (nw->>'col')::varchar \r\n            \tand \r\n            \tov->>'related' is null and ov->>'tpath' is null and isnotin\r\n                 THEN\r\n\t\t\t\tisnotin = false;   \r\n            END IF;\r\n        END LOOP;\r\n        \r\n\r\n        \r\n        IF isnotin  THEN\r\n        \tSELECT _oldconfig::jsonb || nw::jsonb\r\n            INTO _oldconfig;\r\n\t\tEND IF;\r\n    END LOOP;\r\n    i = 0;\r\n    FOR ov in (SELECT * FROM json_array_elements_text(_oldconfig))\r\n    LOOP\r\n    \t\r\n    \tisin = true;\r\n        FOR nw in (SELECT * FROM json_array_elements_text(_newconfig))\r\n        LOOP\r\n\t\t\tIF (nw->>'col')::varchar = (ov->>'col')::varchar  THEN\r\n\t\t\t\tisin = false;\r\n            END IF;\r\n\r\n        END LOOP;\r\n        IF isin and ov->>'related' is null THEN\r\n        \tSELECT _oldconfig::jsonb - i\r\n            INTO _oldconfig;\r\n\t\tEND IF;\r\n        i = i+1;\r\n    END LOOP;*/\r\n\t\r\n    outjson = _oldconfig;\r\n    \r\n    \r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  _oldconfig JSON;\r\n  _newconfig JSON;\r\n  _tabname varchar(350);\r\n  ov json;\r\n  nw json;\r\n  isnotin boolean;\r\n  isin boolean;\r\n  i int;\r\nBEGIN\r\n    -- NOT USED\r\n\t--_oldconfig = injson->>'config';\r\n\t_tabname = injson->>'tabname';\r\n    \r\n    SELECT * FROM framework.fn_createconfig(injson) INTO _oldconfig;\r\n\r\n    \r\n   /*-- perform raiserror(_newconfig::varchar);\r\n    SELECT * FROM framework.fn_createconfig(injson) INTO _newconfig;\r\n\r\n    FOR nw in (SELECT * FROM json_array_elements_text(_newconfig))\r\n    LOOP \r\n    \tisnotin = true;\r\n        FOR ov in (SELECT * FROM json_array_elements_text(_oldconfig))\r\n        LOOP\r\n\t\t\tIF (ov->>'col')::varchar = (nw->>'col')::varchar \r\n            \tand \r\n            \tov->>'related' is null and ov->>'tpath' is null and isnotin\r\n                 THEN\r\n\t\t\t\tisnotin = false;   \r\n            END IF;\r\n        END LOOP;\r\n        \r\n\r\n        \r\n        IF isnotin  THEN\r\n        \tSELECT _oldconfig::jsonb || nw::jsonb\r\n            INTO _oldconfig;\r\n\t\tEND IF;\r\n    END LOOP;\r\n    i = 0;\r\n    FOR ov in (SELECT * FROM json_array_elements_text(_oldconfig))\r\n    LOOP\r\n    \t\r\n    \tisin = true;\r\n        FOR nw in (SELECT * FROM json_array_elements_text(_newconfig))\r\n        LOOP\r\n\t\t\tIF (nw->>'col')::varchar = (ov->>'col')::varchar  THEN\r\n\t\t\t\tisin = false;\r\n            END IF;\r\n\r\n        END LOOP;\r\n        IF isin and ov->>'related' is null THEN\r\n        \tSELECT _oldconfig::jsonb - i\r\n            INTO _oldconfig;\r\n\t\tEND IF;\r\n        i = i+1;\r\n    END LOOP;*/\r\n\t\r\n    outjson = _oldconfig;\r\n    \r\n    \r\n\r\nEND;\r\n
227317	framework	fn_roles_fetch	framework.fn_roles_fetch(injson  json,outjson out json)	roles list	2020-05-21 11:31:02.195905	1	f	fn_roles_fetch(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_roles_fetch(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_roles_fetch(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\n-- функция возвращает список ролей\r\n-- если отправитель не дев, то убираем дев из списка\r\n-- если отправитель не сисадмин, то убираем сисадмина из списка\r\n-- автор: Сандан Д.Б.\r\n-- дата создания: 30.12.19\r\nDECLARE\r\n\t_userid int;\r\n    _roles JSON;\t\t-- для временного хранения ролей отправителя\r\n    _isdev int;\t\t\t-- флаг для проверки на наличие роли девелопер\r\n    _issysadmin int;\t-- флаг для проверки на наличие роли сисадмин\r\nBEGIN\r\n\r\n\t_isdev = 0;\r\n\t_userid = injson->>'userid';\r\n    \r\n    -- проверяем роль отправившего запрос\r\n\t-- если девелопер то убираем dev\r\n    -- если сисадмин то убираем сисадмина\r\n\r\n\t-- получаем роли отправителя\r\n\tSELECT    \t\r\n    \tu.roles \r\n\tFROM\r\n    \tframework.users AS u\r\n\tWHERE u.id = _userid\r\n\tINTO _roles;\r\n\r\n\t-- проверяем есть ли у него роль девелопера\r\n    SELECT\r\n    \t1\r\n    FROM\r\n    \tjson_array_elements_text(_roles) as q\r\n    WHERE q.value = '0'\r\n    INTO _isdev;\r\n    \r\n\t-- проверяем есть ли у него роль сисадмина\r\n    SELECT\r\n    \t1\r\n    FROM\r\n    \tjson_array_elements_text(_roles) as q\r\n    WHERE q.value = '1'\r\n    INTO _issysadmin;\r\n\r\n\t-- формируем массив ролей без дева\r\n\tSELECT\r\n    \tarray_to_json(array_agg(row_to_json(pz)))\r\n        FROM (\r\n\t\t\tSELECT \r\n            \tro.id AS "value",\r\n  \t\t\t\tro.rolename AS "label"\r\n\t\t\tFROM framework.roles AS ro\r\n            WHERE ro.id <> 0 \t\t\t-- 0 это ID у девелопера\r\n            ) AS pz\r\n\tINTO outjson;\r\n    \r\n    \r\n    -- удаляем элементы массива с сисадмином если отправитель не сисадмин\r\n\tIF _issysadmin IS NULL THEN\r\n\t-- формируем массив ролей для возврата    \r\n        SELECT\r\n            array_to_json(array_agg(row_to_json(pz)))\r\n            FROM (\r\n                SELECT\r\n                    (o->>'value')::int AS "value",\r\n                    o->>'label' AS "label"\r\n                FROM json_array_elements(outjson) AS o\r\n                WHERE o->>'value' <> '1'\t\t-- 1 это ID Администратора С-мы\r\n                ) AS pz\r\n        INTO outjson;\r\n    END IF;\r\n\r\n    outjson = COALESCE(outjson, '[]');\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\n-- функция возвращает список ролей\r\n-- если отправитель не дев, то убираем дев из списка\r\n-- если отправитель не сисадмин, то убираем сисадмина из списка\r\n-- автор: Сандан Д.Б.\r\n-- дата создания: 30.12.19\r\nDECLARE\r\n\t_userid int;\r\n    _roles JSON;\t\t-- для временного хранения ролей отправителя\r\n    _isdev int;\t\t\t-- флаг для проверки на наличие роли девелопер\r\n    _issysadmin int;\t-- флаг для проверки на наличие роли сисадмин\r\nBEGIN\r\n\r\n\t_isdev = 0;\r\n\t_userid = injson->>'userid';\r\n    \r\n    -- проверяем роль отправившего запрос\r\n\t-- если девелопер то убираем dev\r\n    -- если сисадмин то убираем сисадмина\r\n\r\n\t-- получаем роли отправителя\r\n\tSELECT    \t\r\n    \tu.roles \r\n\tFROM\r\n    \tframework.users AS u\r\n\tWHERE u.id = _userid\r\n\tINTO _roles;\r\n\r\n\t-- проверяем есть ли у него роль девелопера\r\n    SELECT\r\n    \t1\r\n    FROM\r\n    \tjson_array_elements_text(_roles) as q\r\n    WHERE q.value = '0'\r\n    INTO _isdev;\r\n    \r\n\t-- проверяем есть ли у него роль сисадмина\r\n    SELECT\r\n    \t1\r\n    FROM\r\n    \tjson_array_elements_text(_roles) as q\r\n    WHERE q.value = '1'\r\n    INTO _issysadmin;\r\n\r\n\t-- формируем массив ролей без дева\r\n\tSELECT\r\n    \tarray_to_json(array_agg(row_to_json(pz)))\r\n        FROM (\r\n\t\t\tSELECT \r\n            \tro.id AS "value",\r\n  \t\t\t\tro.rolename AS "label"\r\n\t\t\tFROM framework.roles AS ro\r\n            WHERE ro.id <> 0 \t\t\t-- 0 это ID у девелопера\r\n            ) AS pz\r\n\tINTO outjson;\r\n    \r\n    \r\n    -- удаляем элементы массива с сисадмином если отправитель не сисадмин\r\n\tIF _issysadmin IS NULL THEN\r\n\t-- формируем массив ролей для возврата    \r\n        SELECT\r\n            array_to_json(array_agg(row_to_json(pz)))\r\n            FROM (\r\n                SELECT\r\n                    (o->>'value')::int AS "value",\r\n                    o->>'label' AS "label"\r\n                FROM json_array_elements(outjson) AS o\r\n                WHERE o->>'value' <> '1'\t\t-- 1 это ID Администратора С-мы\r\n                ) AS pz\r\n        INTO outjson;\r\n    END IF;\r\n\r\n    outjson = COALESCE(outjson, '[]');\r\nEND;\r\n
227318	framework	fn_savestate	framework.fn_savestate(injson  json,outjson out json)	save all form state	2020-05-21 11:31:02.195905	1	f	fn_savestate(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_savestate(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_savestate(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n_squery varchar;\r\n_tablename varchar(300);\r\n_col varchar(350);\r\n_value varchar;\r\n_id varchar(300);\r\n_userid int;\r\n_relatecolumn varchar(150);\r\n_relatetable varchar(350);\r\n--_squery varchar;\r\n_err varchar;\r\n_oldata json;\r\n_newdata json;\r\n_id_int int;\r\n_id_seq varchar(200);\r\n_col_type varchar(300);\r\nrel_id varchar(36);\r\n_id_type varchar(150);\r\nrel_id_type varchar(150);\r\n_viewid int;\r\n_userroles json;\r\n_viewroles json;\r\n_type varchar(150);\r\n_relation varchar;\r\n_relationobj json;\r\n_relationval varchar;\r\n_key varchar(150);\r\n_x varchar;\r\n_rv varchar;\r\n_config json;\r\n_pv json;\r\n_data json;\r\n_insertvalues varchar;\r\n_rt_query varchar;\r\n_tpath json;\r\n_tp json;\r\n_tpast VARCHAR(150);\r\nBEGIN\r\n  _id = injson->>'id';\r\n  _userid = injson->>'userid';\r\n  _viewid = injson->>'viewid';\r\n  _data = injson->>'data';\r\n  _relation = injson->>'relation';\r\n  _relationobj = injson->>'relationobj';\r\n  \r\n  SELECT\r\n  \tv.tablename,\r\n    --v.config,\r\n    v.roles\r\n  FROM framework.views as v\r\n  WHERE v.id = _viewid\r\n  INTO _tablename, _viewroles;\r\n  \r\n  _config = framework.fn_config_to_json(_viewid);\r\n  \r\n  IF _viewid is NULL\r\n  THEN\r\n     PERFORM raiserror('view id is null');\r\n  END IF; \r\n\r\n  SELECT \r\n  \troles\r\n  FROM framework.users \r\n  WHERE id = _userid\r\n  INTO _userroles;\r\n  \r\n  --PERFORM raiserror(_relationval::varchar);\r\n    \r\n  IF _viewroles is null THEN\r\n      PERFORM raiserror('view is not found');\r\n  END IF;\r\n  \r\n  IF (SELECT count(*) FROM json_array_elements_text(_viewroles)) > 0 and \r\n    (SELECT count(*) \r\n     FROM json_array_elements_text(_viewroles) as v\r\n     \tJOIN json_array_elements_text(_userroles) as r on \r\n        ((v.value::json->>'value')::varchar = r.value::varchar\r\n        \tOR\r\n          v.value::varchar = r.value::varchar\r\n        )\r\n     ) = 0 THEN\r\n    \tPERFORM raiserror('m403err');\r\n  END IF;\r\n  \r\n  SELECT \r\n        t.data_type, t.column_default\r\n  FROM information_schema.columns as t                                         \r\n  WHERE concat(t.table_schema,'.',t.table_name) = _tablename and \r\n      upper(t.column_name) = 'ID'\r\n  INTO _id_type, _id_seq;\r\n  \r\n  IF _relation is not null  THEN\r\n  \tFOR _x in (SELECT regexp_split_to_table FROM regexp_split_to_table(_relation,','))\r\n    LOOP\r\n    \tIF _relationobj->>_x is not null THEN\r\n        \t_rv = _relationobj->>_x;\r\n            IF _rv = '_userid_' and \r\n               _tablename not in (\r\n                    'framework.defaultval',\r\n                    'framework.actions',\r\n                    'framework.act_parametrs',\r\n                    'framework.select_condition'\r\n               )  \r\n            THEN\r\n               \t_rv = _userid;\r\n            END IF;\r\n            IF _rv = '_orgs_' and \r\n               _tablename  not in (\r\n                    'framework.defaultval',\r\n                    'framework.actions',\r\n                    'framework.act_parametrs',\r\n                    'framework.select_condition'\r\n               )   \r\n            THEN\r\n               \tSELECT\r\n                   \tu.orgs::varchar \r\n                FROM framework.users as u\r\n                WHERE u.id = _userid::int\r\n                INTO _rv;\r\n            END IF;\r\n        \tIF _rv = '_orgid_' and \r\n               _tablename not in (\r\n                    'framework.defaultval',\r\n                    'framework.actions',\r\n                    'framework.act_parametrs',\r\n                    'framework.select_condition'\r\n               )  \r\n            THEN\r\n              SELECT\r\n                  u.orgid::varchar \r\n              FROM framework.users as u\r\n              WHERE u.id = _userid::int\r\n              INTO _rv;\r\n      \t\tEND IF;            \r\n      \t\t_relationval = concat(_relationval,',''',_rv,'''');\r\n            \r\n      END IF;\r\n  \tEND LOOP;\r\n    SELECT\r\n    \tstring_agg(concat('"',regexp_split_to_table,'"'),',')\r\n    FROM regexp_split_to_table(_relation,',')\r\n    INTO _relation;    \r\n  \t_relation = concat(',',_relation);  \r\n  ELSE\r\n  \t_relation = '';\r\n    _relationval = '';\r\n  END IF;\r\n  \r\n  IF _id is NULL THEN\r\n      IF _id_type in ( 'character','varchar','char') \r\n      THEN\r\n      \t_id = upper(uuid_in(md5(random()::text || now()::text)::cstring)::CHAR(36));\r\n      ELSE\r\n      \tEXECUTE format(concat('SELECT ',_id_seq,';')) INTO _id_int ;\r\n      \t_id = _id_int::varchar;\r\n      END IF;\r\n      _squery = concat('INSERT INTO ', _tablename, '(id',_relation);\r\n      _insertvalues = concat('VALUES ($1::',_id_type,_relationval);\r\n      \r\n      IF \r\n      \t(SELECT count(t.*)\r\n         FROM information_schema.columns as t\r\n         WHERE concat(t.table_schema,'.',t.table_name) = _tablename and \r\n             t.column_name = 'userid')>0 \r\n      THEN\r\n          _squery = concat(_squery,',userid');\r\n          _insertvalues = concat(_insertvalues,',$2'); \r\n      END IF;\r\n  ELSE\r\n      _squery = concat('UPDATE ', _tablename, ' SET ');\r\n      IF \r\n      \t(SELECT count(t.*)\r\n         FROM information_schema.columns as t\r\n         WHERE concat(t.table_schema,'.',t.table_name) = _tablename and \r\n             t.column_name = 'userid')>0 \r\n      THEN\r\n          _squery = concat(_squery,'userid = $2, ');\r\n      END IF;\r\n  END IF;\r\n  \r\n  FOR _pv in (SELECT value FROM json_array_elements(_config))\r\n  LOOP\r\n  \t_value = _data->>(_pv->>'key');\r\n    \r\n    IF _value = '_userid_' and \r\n       _tablename not in (\r\n       \t\t'framework.defaultval',\r\n            'framework.actions',\r\n            'framework.act_parametrs',\r\n            'framework.select_condition'\r\n       ) \r\n    THEN\r\n    \t_value = _userid;\r\n    END IF;\r\n    \r\n    IF _value = '_orgs_' and \r\n       _tablename not in (\r\n       \t\t'framework.defaultval',\r\n            'framework.actions',\r\n            'framework.act_parametrs',\r\n            'framework.select_condition'\r\n       )  \r\n    THEN\r\n    \tSELECT\r\n        \tu.orgs::varchar \r\n        FROM framework.users as u\r\n    \tWHERE u.id = _userid::int\r\n        INTO _value;\r\n    END IF;\r\n    \r\n    IF _value = '_orgid_' and \r\n       _tablename not in (\r\n       \t\t'framework.defaultval',\r\n            'framework.actions',\r\n            'framework.act_parametrs',\r\n            'framework.select_condition'\r\n       )  \r\n    THEN\r\n    \tSELECT\r\n        \tu.orgid::varchar \r\n        FROM framework.users as u\r\n    \tWHERE u.id = _userid::int\r\n        INTO _value;\r\n    END IF;\r\n    \r\n\t_relatetable = _pv->>'table';\r\n    _col = _pv->>'col';\r\n    _type = _pv->>'type';\r\n    _key = _pv->>'key';\r\n    \r\n    IF (_pv->>'visible')::boolean and (_pv->>'type') not in ('label','color','link','filelist','gallery') THEN\r\n      IF _relatetable is not null and _id is null\r\n      THEN\r\n        PERFORM raiserror('id can`t be null if relation');\r\n      END IF;\r\n      \r\n      \r\n      \r\n      \r\n      \r\n      IF _type = 'password' THEN\r\n         drop extension pgcrypto;\r\n         create extension pgcrypto;\r\n         SELECT encode(digest(_value, 'sha224'),'hex') INTO _value;\r\n      END IF;\r\n      IF _type <> 'array' THEN\r\n        IF _pv->>'table' is null THEN\r\n          SELECT t.data_type\r\n          FROM information_schema.columns as t\r\n          WHERE concat(t.table_schema,'.',t.table_name) = _tablename and \r\n                t.column_name = _col\r\n          INTO _col_type; \t\r\n           \r\n          IF _col_type = 'character' THEN\r\n            _col_type = 'varchar'; \r\n          END IF;\r\n         \r\n          IF _col_type is null THEN\r\n             perform raiserror('can not find out the column type. check table and column names');\r\n          END IF;\r\n        \r\n          IF _id_type = 'character' THEN\r\n            _id_type = 'varchar'; \r\n          END IF;\r\n          \r\n          _data = (_data::jsonb-(_pv->>'key'))::json;\r\n          _data = (jsonb_build_object((_pv->>'key'), _value) \r\n              || _data::jsonb)::json;\r\n          \r\n          IF (injson->>'id') is null THEN\r\n            IF _value is not null  THEN\r\n              _squery = concat(_squery,',"',_col,'"');\r\n              _insertvalues = concat(_insertvalues,',($3->>''',_key,''')::',_col_type);\r\n            END IF;\r\n          ELSE\r\n            IF _pv->>'table' is null THEN\r\n                _squery = concat(_squery,'"',_col,'" = ($3->>''',_key,''')::',_col_type,', ');\r\n            END IF;\r\n          END IF;\r\n        ELSE\r\n           SELECT t.data_type\r\n           FROM information_schema.columns as t\r\n           WHERE concat(t.table_schema,'.',t.table_name) = (_pv->>'table') and \r\n                 t.column_name = _col\r\n           INTO _col_type; \t\r\n             \r\n           IF _col_type = 'character' THEN\r\n              _col_type = 'varchar'; \r\n           END IF;\r\n           \r\n           IF _col_type is null THEN\r\n               perform raiserror('can not find out the column type. check table and column names');\r\n           END IF;\r\n          _rt_query = concat('UPDATE ',_pv->>'table',' SET "',_col,'" = ($2->>''',_key,''')::',_col_type,' FROM ',_tablename,' as t');\r\n          _tpath = _pv->>'tpath';\r\n          _tp = _tpath->0;\r\n          _tpast = 't';\r\n          FOR _tp in (SELECT value FROM json_array_elements(_tpath))\r\n          LOOP\r\n              _rt_query = concat(_rt_query,' JOIN ', _tp->>'table',' as ',_tp->>'t',' on ',_tpast,'."',_tp->>'col','" = ',_tp->>'t','.id');\r\n          END LOOP;\r\n          \r\n          _rt_query = concat(_rt_query,' WHERE t.id = $1::',_id_type);   \r\n          \r\n          EXECUTE format(_rt_query) USING _id,_data;\r\n        END IF;\r\n      END IF; \r\n\tEND IF;\r\n  END LOOP;\r\n  \r\n  IF injson->>'id' is null THEN\r\n  \t_squery = concat(_squery,') ',_insertvalues,'); ');\r\n    EXECUTE format(_squery) USING _id,_userid,_data;\r\n        \r\n    _squery = concat('\r\n      SElECT\r\n        row_to_json(d)\r\n      FROM (\r\n        SELECT *\r\n        FROM ',_tablename,'\r\n        WHERE id = $1::',_id_type,'\r\n      ) as d\r\n    ');\r\n    \r\n    EXECUTE format(_squery) USING _id INTO _newdata;\r\n    \r\n\tINSERT INTO framework.logtable (\r\n      \ttablename, tableid, opertype,\r\n        userid, oldata, newdata\r\n    ) VALUES (\r\n      \t_tablename, _id, 1,\r\n        _userid::int, '{}'::json, _newdata\r\n    );    \r\n  ELSE\r\n  \r\n    EXECUTE format(concat('\r\n      SElECT\r\n        row_to_json(d)\r\n      FROM (\r\n        SELECT *\r\n        FROM ',_tablename,'\r\n        WHERE id = $1::',_id_type,'\r\n      ) as d\r\n    ')) USING _id INTO _oldata;\r\n    \r\n  \t_squery = concat(substring(_squery,1,length(_squery) - 2),' WHERE id = $1::',_id_type);\r\n    EXECUTE format(_squery) USING _id,_userid,_data;\r\n    \r\n    EXECUTE format(concat('\r\n      SElECT\r\n        row_to_json(d)\r\n      FROM (\r\n        SELECT *\r\n        FROM ',_tablename,'\r\n        WHERE id = $1::',_id_type,'\r\n      ) as d\r\n    ')) USING _id INTO _newdata;\r\n    \r\n\tINSERT INTO framework.logtable (\r\n    \ttablename, tableid, opertype,\r\n        userid, oldata, newdata\r\n    ) VALUES (\r\n    \t_tablename, _id, 2,\r\n        _userid::int, _oldata, _newdata\r\n    );\r\n  END IF;\r\n  \r\n  SElECT\r\n    row_to_json(d)\r\n  FROM (\r\n      SELECT _id as id\r\n    ) as d\r\n  INTO outjson;\r\n  /*SElECT\r\n  \trow_to_json(d)\r\n  FROM (\r\n  \tSELECT _id as id,\r\n    \t_value as value\r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'{}');*/\r\n  \r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n_squery varchar;\r\n_tablename varchar(300);\r\n_col varchar(350);\r\n_value varchar;\r\n_id varchar(300);\r\n_userid int;\r\n_relatecolumn varchar(150);\r\n_relatetable varchar(350);\r\n--_squery varchar;\r\n_err varchar;\r\n_oldata json;\r\n_newdata json;\r\n_id_int int;\r\n_id_seq varchar(200);\r\n_col_type varchar(300);\r\nrel_id varchar(36);\r\n_id_type varchar(150);\r\nrel_id_type varchar(150);\r\n_viewid int;\r\n_userroles json;\r\n_viewroles json;\r\n_type varchar(150);\r\n_relation varchar;\r\n_relationobj json;\r\n_relationval varchar;\r\n_key varchar(150);\r\n_x varchar;\r\n_rv varchar;\r\n_config json;\r\n_pv json;\r\n_data json;\r\n_insertvalues varchar;\r\n_rt_query varchar;\r\n_tpath json;\r\n_tp json;\r\n_tpast VARCHAR(150);\r\nBEGIN\r\n  _id = injson->>'id';\r\n  _userid = injson->>'userid';\r\n  _viewid = injson->>'viewid';\r\n  _data = injson->>'data';\r\n  _relation = injson->>'relation';\r\n  _relationobj = injson->>'relationobj';\r\n  \r\n  SELECT\r\n  \tv.tablename,\r\n    --v.config,\r\n    v.roles\r\n  FROM framework.views as v\r\n  WHERE v.id = _viewid\r\n  INTO _tablename, _viewroles;\r\n  \r\n  _config = framework.fn_config_to_json(_viewid);\r\n  \r\n  IF _viewid is NULL\r\n  THEN\r\n     PERFORM raiserror('view id is null');\r\n  END IF; \r\n\r\n  SELECT \r\n  \troles\r\n  FROM framework.users \r\n  WHERE id = _userid\r\n  INTO _userroles;\r\n  \r\n  --PERFORM raiserror(_relationval::varchar);\r\n    \r\n  IF _viewroles is null THEN\r\n      PERFORM raiserror('view is not found');\r\n  END IF;\r\n  \r\n  IF (SELECT count(*) FROM json_array_elements_text(_viewroles)) > 0 and \r\n    (SELECT count(*) \r\n     FROM json_array_elements_text(_viewroles) as v\r\n     \tJOIN json_array_elements_text(_userroles) as r on \r\n        ((v.value::json->>'value')::varchar = r.value::varchar\r\n        \tOR\r\n          v.value::varchar = r.value::varchar\r\n        )\r\n     ) = 0 THEN\r\n    \tPERFORM raiserror('m403err');\r\n  END IF;\r\n  \r\n  SELECT \r\n        t.data_type, t.column_default\r\n  FROM information_schema.columns as t                                         \r\n  WHERE concat(t.table_schema,'.',t.table_name) = _tablename and \r\n      upper(t.column_name) = 'ID'\r\n  INTO _id_type, _id_seq;\r\n  \r\n  IF _relation is not null  THEN\r\n  \tFOR _x in (SELECT regexp_split_to_table FROM regexp_split_to_table(_relation,','))\r\n    LOOP\r\n    \tIF _relationobj->>_x is not null THEN\r\n        \t_rv = _relationobj->>_x;\r\n            IF _rv = '_userid_' and \r\n               _tablename not in (\r\n                    'framework.defaultval',\r\n                    'framework.actions',\r\n                    'framework.act_parametrs',\r\n                    'framework.select_condition'\r\n               )  \r\n            THEN\r\n               \t_rv = _userid;\r\n            END IF;\r\n            IF _rv = '_orgs_' and \r\n               _tablename  not in (\r\n                    'framework.defaultval',\r\n                    'framework.actions',\r\n                    'framework.act_parametrs',\r\n                    'framework.select_condition'\r\n               )   \r\n            THEN\r\n               \tSELECT\r\n                   \tu.orgs::varchar \r\n                FROM framework.users as u\r\n                WHERE u.id = _userid::int\r\n                INTO _rv;\r\n            END IF;\r\n        \tIF _rv = '_orgid_' and \r\n               _tablename not in (\r\n                    'framework.defaultval',\r\n                    'framework.actions',\r\n                    'framework.act_parametrs',\r\n                    'framework.select_condition'\r\n               )  \r\n            THEN\r\n              SELECT\r\n                  u.orgid::varchar \r\n              FROM framework.users as u\r\n              WHERE u.id = _userid::int\r\n              INTO _rv;\r\n      \t\tEND IF;            \r\n      \t\t_relationval = concat(_relationval,',''',_rv,'''');\r\n            \r\n      END IF;\r\n  \tEND LOOP;\r\n    SELECT\r\n    \tstring_agg(concat('"',regexp_split_to_table,'"'),',')\r\n    FROM regexp_split_to_table(_relation,',')\r\n    INTO _relation;    \r\n  \t_relation = concat(',',_relation);  \r\n  ELSE\r\n  \t_relation = '';\r\n    _relationval = '';\r\n  END IF;\r\n  \r\n  IF _id is NULL THEN\r\n      IF _id_type in ( 'character','varchar','char') \r\n      THEN\r\n      \t_id = upper(uuid_in(md5(random()::text || now()::text)::cstring)::CHAR(36));\r\n      ELSE\r\n      \tEXECUTE format(concat('SELECT ',_id_seq,';')) INTO _id_int ;\r\n      \t_id = _id_int::varchar;\r\n      END IF;\r\n      _squery = concat('INSERT INTO ', _tablename, '(id',_relation);\r\n      _insertvalues = concat('VALUES ($1::',_id_type,_relationval);\r\n      \r\n      IF \r\n      \t(SELECT count(t.*)\r\n         FROM information_schema.columns as t\r\n         WHERE concat(t.table_schema,'.',t.table_name) = _tablename and \r\n             t.column_name = 'userid')>0 \r\n      THEN\r\n          _squery = concat(_squery,',userid');\r\n          _insertvalues = concat(_insertvalues,',$2'); \r\n      END IF;\r\n  ELSE\r\n      _squery = concat('UPDATE ', _tablename, ' SET ');\r\n      IF \r\n      \t(SELECT count(t.*)\r\n         FROM information_schema.columns as t\r\n         WHERE concat(t.table_schema,'.',t.table_name) = _tablename and \r\n             t.column_name = 'userid')>0 \r\n      THEN\r\n          _squery = concat(_squery,'userid = $2, ');\r\n      END IF;\r\n  END IF;\r\n  \r\n  FOR _pv in (SELECT value FROM json_array_elements(_config))\r\n  LOOP\r\n  \t_value = _data->>(_pv->>'key');\r\n    \r\n    IF _value = '_userid_' and \r\n       _tablename not in (\r\n       \t\t'framework.defaultval',\r\n            'framework.actions',\r\n            'framework.act_parametrs',\r\n            'framework.select_condition'\r\n       ) \r\n    THEN\r\n    \t_value = _userid;\r\n    END IF;\r\n    \r\n    IF _value = '_orgs_' and \r\n       _tablename not in (\r\n       \t\t'framework.defaultval',\r\n            'framework.actions',\r\n            'framework.act_parametrs',\r\n            'framework.select_condition'\r\n       )  \r\n    THEN\r\n    \tSELECT\r\n        \tu.orgs::varchar \r\n        FROM framework.users as u\r\n    \tWHERE u.id = _userid::int\r\n        INTO _value;\r\n    END IF;\r\n    \r\n    IF _value = '_orgid_' and \r\n       _tablename not in (\r\n       \t\t'framework.defaultval',\r\n            'framework.actions',\r\n            'framework.act_parametrs',\r\n            'framework.select_condition'\r\n       )  \r\n    THEN\r\n    \tSELECT\r\n        \tu.orgid::varchar \r\n        FROM framework.users as u\r\n    \tWHERE u.id = _userid::int\r\n        INTO _value;\r\n    END IF;\r\n    \r\n\t_relatetable = _pv->>'table';\r\n    _col = _pv->>'col';\r\n    _type = _pv->>'type';\r\n    _key = _pv->>'key';\r\n    \r\n    IF (_pv->>'visible')::boolean and (_pv->>'type') not in ('label','color','link','filelist','gallery') THEN\r\n      IF _relatetable is not null and _id is null\r\n      THEN\r\n        PERFORM raiserror('id can`t be null if relation');\r\n      END IF;\r\n      \r\n      \r\n      \r\n      \r\n      \r\n      IF _type = 'password' THEN\r\n         drop extension pgcrypto;\r\n         create extension pgcrypto;\r\n         SELECT encode(digest(_value, 'sha224'),'hex') INTO _value;\r\n      END IF;\r\n      IF _type <> 'array' THEN\r\n        IF _pv->>'table' is null THEN\r\n          SELECT t.data_type\r\n          FROM information_schema.columns as t\r\n          WHERE concat(t.table_schema,'.',t.table_name) = _tablename and \r\n                t.column_name = _col\r\n          INTO _col_type; \t\r\n           \r\n          IF _col_type = 'character' THEN\r\n            _col_type = 'varchar'; \r\n          END IF;\r\n         \r\n          IF _col_type is null THEN\r\n             perform raiserror('can not find out the column type. check table and column names');\r\n          END IF;\r\n        \r\n          IF _id_type = 'character' THEN\r\n            _id_type = 'varchar'; \r\n          END IF;\r\n          \r\n          _data = (_data::jsonb-(_pv->>'key'))::json;\r\n          _data = (jsonb_build_object((_pv->>'key'), _value) \r\n              || _data::jsonb)::json;\r\n          \r\n          IF (injson->>'id') is null THEN\r\n            IF _value is not null  THEN\r\n              _squery = concat(_squery,',"',_col,'"');\r\n              _insertvalues = concat(_insertvalues,',($3->>''',_key,''')::',_col_type);\r\n            END IF;\r\n          ELSE\r\n            IF _pv->>'table' is null THEN\r\n                _squery = concat(_squery,'"',_col,'" = ($3->>''',_key,''')::',_col_type,', ');\r\n            END IF;\r\n          END IF;\r\n        ELSE\r\n           SELECT t.data_type\r\n           FROM information_schema.columns as t\r\n           WHERE concat(t.table_schema,'.',t.table_name) = (_pv->>'table') and \r\n                 t.column_name = _col\r\n           INTO _col_type; \t\r\n             \r\n           IF _col_type = 'character' THEN\r\n              _col_type = 'varchar'; \r\n           END IF;\r\n           \r\n           IF _col_type is null THEN\r\n               perform raiserror('can not find out the column type. check table and column names');\r\n           END IF;\r\n          _rt_query = concat('UPDATE ',_pv->>'table',' SET "',_col,'" = ($2->>''',_key,''')::',_col_type,' FROM ',_tablename,' as t');\r\n          _tpath = _pv->>'tpath';\r\n          _tp = _tpath->0;\r\n          _tpast = 't';\r\n          FOR _tp in (SELECT value FROM json_array_elements(_tpath))\r\n          LOOP\r\n              _rt_query = concat(_rt_query,' JOIN ', _tp->>'table',' as ',_tp->>'t',' on ',_tpast,'."',_tp->>'col','" = ',_tp->>'t','.id');\r\n          END LOOP;\r\n          \r\n          _rt_query = concat(_rt_query,' WHERE t.id = $1::',_id_type);   \r\n          \r\n          EXECUTE format(_rt_query) USING _id,_data;\r\n        END IF;\r\n      END IF; \r\n\tEND IF;\r\n  END LOOP;\r\n  \r\n  IF injson->>'id' is null THEN\r\n  \t_squery = concat(_squery,') ',_insertvalues,'); ');\r\n    EXECUTE format(_squery) USING _id,_userid,_data;\r\n        \r\n    _squery = concat('\r\n      SElECT\r\n        row_to_json(d)\r\n      FROM (\r\n        SELECT *\r\n        FROM ',_tablename,'\r\n        WHERE id = $1::',_id_type,'\r\n      ) as d\r\n    ');\r\n    \r\n    EXECUTE format(_squery) USING _id INTO _newdata;\r\n    \r\n\tINSERT INTO framework.logtable (\r\n      \ttablename, tableid, opertype,\r\n        userid, oldata, newdata\r\n    ) VALUES (\r\n      \t_tablename, _id, 1,\r\n        _userid::int, '{}'::json, _newdata\r\n    );    \r\n  ELSE\r\n  \r\n    EXECUTE format(concat('\r\n      SElECT\r\n        row_to_json(d)\r\n      FROM (\r\n        SELECT *\r\n        FROM ',_tablename,'\r\n        WHERE id = $1::',_id_type,'\r\n      ) as d\r\n    ')) USING _id INTO _oldata;\r\n    \r\n  \t_squery = concat(substring(_squery,1,length(_squery) - 2),' WHERE id = $1::',_id_type);\r\n    EXECUTE format(_squery) USING _id,_userid,_data;\r\n    \r\n    EXECUTE format(concat('\r\n      SElECT\r\n        row_to_json(d)\r\n      FROM (\r\n        SELECT *\r\n        FROM ',_tablename,'\r\n        WHERE id = $1::',_id_type,'\r\n      ) as d\r\n    ')) USING _id INTO _newdata;\r\n    \r\n\tINSERT INTO framework.logtable (\r\n    \ttablename, tableid, opertype,\r\n        userid, oldata, newdata\r\n    ) VALUES (\r\n    \t_tablename, _id, 2,\r\n        _userid::int, _oldata, _newdata\r\n    );\r\n  END IF;\r\n  \r\n  SElECT\r\n    row_to_json(d)\r\n  FROM (\r\n      SELECT _id as id\r\n    ) as d\r\n  INTO outjson;\r\n  /*SElECT\r\n  \trow_to_json(d)\r\n  FROM (\r\n  \tSELECT _id as id,\r\n    \t_value as value\r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'{}');*/\r\n  \r\nEND;\r\n
227320	framework	fn_saveusersettings	framework.fn_saveusersettings(injson  json)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_saveusersettings(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_saveusersettings(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_saveusersettings(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE \r\n\t_userid int;\r\n    _settings json;\r\n    _osettings json;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n    _settings = injson->'settings';\r\n    \r\n   UPDATE framework.users\r\n   SET usersettings = _settings\r\n   WHERE id = _userid;\r\n   \r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE \r\n\t_userid int;\r\n    _settings json;\r\n    _osettings json;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n    _settings = injson->'settings';\r\n    \r\n   UPDATE framework.users\r\n   SET usersettings = _settings\r\n   WHERE id = _userid;\r\n   \r\nEND;\r\n
227321	framework	fn_savevalue	framework.fn_savevalue(injson  json,outjson out json)	SAVE ONE COLUMN VALUE FOR TYPE form full	2020-05-21 11:31:02.195905	1	f	fn_savevalue(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_savevalue(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_savevalue(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n_tablename varchar(300);\r\n_col varchar(350);\r\n_value varchar;\r\n_id varchar(300);\r\n_userid varchar(150);\r\n_relatecolumn varchar(150);\r\n_relatetable varchar(350);\r\n_squery varchar;\r\n_err varchar;\r\n_oldata json;\r\n_newdata json;\r\n_id_int int;\r\n_col_type varchar(300);\r\nrel_id varchar(36);\r\n_id_type varchar(150);\r\nrel_id_type varchar(150);\r\n_viewid int;\r\n_userroles json;\r\n_viewroles json;\r\n_type varchar(150);\r\n_relation varchar;\r\n_relationobj json;\r\n_relationval varchar;\r\n_x varchar;\r\n_rv varchar;\r\nBEGIN\r\n  -- SAVE ONE COLUMN VALUE FOR TYPE form full\r\n  \r\n -- _tablename = injson->>'tablename';\r\n  _col = (injson->>'config')::json->>'col';\r\n  _value = injson->>'value';\r\n  _id = injson->>'id';\r\n  _userid = injson->>'userid';\r\n  _relatecolumn = (injson->>'config')::json->>'relatecolumn';\r\n  _relatetable = injson->>'relatetable';\r\n  _viewid = injson->>'viewid';\r\n  _type = (injson->>'config')::json->>'type';\r\n  _relation = injson->>'relation';\r\n  _relationobj = injson->>'relationobj';\r\n  \r\n\r\n    \r\n    IF _viewid is NULL\r\n    THEN\r\n      perform raiserror('view id is null');\r\n    END IF; \r\n    \r\n    SELECT \r\n    \troles,\r\n        tablename\r\n    FROM framework.views \r\n    WHERE id = _viewid\r\n    INTO _viewroles, _tablename;\r\n    \r\n   IF _tablename <> 'framework.defaultval'\r\n   THEN\r\n    IF _value = '_userid_' and\r\n       _tablename in (\r\n       \t\t'framework.defaultval',\r\n            'framework.actions',\r\n            'framework.act_parametrs',\r\n            'framework.select_condition'\r\n       )  \r\n    THEN\r\n    \t_value = _userid;\r\n    END IF;\r\n    IF _value = '_orgs_' and \r\n       _tablename in (\r\n       \t\t'framework.defaultval',\r\n            'framework.actions',\r\n            'framework.act_parametrs',\r\n            'framework.select_condition'\r\n       ) \r\n    THEN\r\n    \tSELECT\r\n        \tu.orgs::varchar \r\n        FROM framework.users as u\r\n    \tWHERE u.id = _userid::int\r\n        INTO _value;\r\n    END IF;\r\n    IF _value = '_orgid_' and \r\n       _tablename in (\r\n       \t\t'framework.defaultval',\r\n            'framework.actions',\r\n            'framework.act_parametrs',\r\n            'framework.select_condition'\r\n       ) \r\n    THEN\r\n    \tSELECT\r\n        \tu.orgid::varchar \r\n        FROM framework.users as u\r\n    \tWHERE u.id = _userid::int\r\n        INTO _value;\r\n    END IF;\r\n   END IF;\r\n    SELECT \r\n    \troles\r\n    FROM framework.users \r\n    WHERE id::varchar = _userid\r\n    INTO _userroles;\r\n    \r\n    IF _viewroles is null THEN\r\n    \tperform raiserror('view is not found');\r\n    END IF;\r\n    \r\n    IF (SELECT count(*) FROM json_array_elements_text(_viewroles)) > 0 and \r\n    (SELECT count(*) \r\n     FROM json_array_elements_text(_viewroles) as v\r\n     \tJOIN json_array_elements_text(_userroles) as r on  (\r\n        \t\t(v.value::json->>'value')::varchar = r.value::varchar\r\n                OR\r\n                v.value::varchar = r.value::varchar\r\n            )\r\n     ) = 0 THEN\r\n    \tPERFORM raiserror('m403err');\r\n    END IF;\r\n    \r\n    IF _tablename is NULL\r\n    THEN\r\n      perform raiserror('table is null');\r\n    END IF; \r\n    \r\n    IF _col is NULL\r\n    THEN\r\n      perform raiserror('col is null');\r\n    END IF;\r\n      \r\n    IF _relatetable is not null and _id is null\r\n    THEN\r\n      perform raiserror('id can`t be null if relation');\r\n    END IF;\r\n   \r\n   SELECT t.data_type\r\n   FROM information_schema.columns as t\r\n   WHERE concat(t.table_schema,'.',t.table_name) = _tablename and \r\n   \t\t t.column_name = _col\r\n   INTO _col_type; \t\r\n   \r\n   IF _col_type = 'character' THEN\r\n  \t_col_type = 'varchar'; \r\n   END IF;\r\n   \r\n   IF _col_type is null THEN\r\n   \t perform raiserror('can not find out the column type. check table and column names');\r\n   END IF;\r\n  \r\n  SELECT \r\n     t.data_type\r\n  FROM information_schema.columns as t                                         \r\n  WHERE concat(t.table_schema,'.',t.table_name) = _tablename and \r\n  upper(t.column_name) = 'ID'\r\n  INTO _id_type;\r\n  \r\n  IF _id_type = 'character' THEN\r\n  \t_id_type = 'varchar'; \r\n  END IF;\r\n  \r\n  IF _type = 'password' THEN\r\n     drop extension pgcrypto;\r\n     create extension pgcrypto;\r\n     SELECT encode(digest(_value, 'sha224'),'hex') INTO _value;\r\n  END IF;\r\n  \r\n  IF _relatetable is not null\r\n  THEN    \r\n  \t\r\n  \t IF _relatecolumn is null THEN\r\n     \tperform raiserror('can''t find relate column');\r\n     END IF;\t\r\n      \r\n     SELECT \r\n         t.data_type\r\n     FROM information_schema.columns as t                                         \r\n     WHERE concat(t.table_schema,'.',t.table_name) = _relatetable and \r\n     upper(t.column_name) = 'ID'\r\n     INTO rel_id_type;\r\n     \r\n     IF rel_id_type = 'character' THEN\r\n     \trel_id_type = 'varchar'; \r\n     END IF;\r\n     \r\n     IF rel_id_type is null THEN\r\n       perform raiserror('can not find out the relation ID type. check table and column names');\r\n     END IF;\r\n     \r\n      _squery = concat(_squery,'\r\n          SELECT \r\n               ',_relatecolumn,'::',_id_type,'\r\n          FROM ',_relatetable,'\r\n          WHERE id::',rel_id_type,' = $1::',rel_id_type,';\r\n      ');\r\n      \r\n      EXECUTE format(_squery) USING _id INTO rel_id;\r\n      \r\n      IF trim(coalesce(rel_id,'')) = ''\r\n      THEN\r\n          perform raiserror('id of relation table can not be NULL');\r\n      END IF;\r\n      BEGIN\r\n        _squery = concat('\r\n            SELECT row_to_json(d) FROM\t\r\n            (SELECT \r\n              "',_col,'"\r\n            FROM ',_tablename,'\r\n            WHERE id = $1::',_id_type,' ) as d;');\r\n            \r\n        EXECUTE format(_squery) USING rel_id INTO _oldata;\r\n        \r\n      END;\r\n      _squery = concat('SELECT row_to_json(d) FROM \r\n          (SELECT $1 as ',_col,') as d;');\r\n      \r\n      EXECUTE format(_squery) USING _value INTO _newdata; \r\n     \r\n      INSERT INTO framework.logtable (\r\n         tablename, tableid, opertype,\r\n         userid, oldata, newdata, colname\r\n      ) VALUES (\r\n         _tablename, rel_id, 2,\r\n         _userid::int, _oldata, _newdata, _col      \r\n      ); \r\n     IF (SELECT count(t.*)\r\n      FROM information_schema.columns as t\r\n      WHERE concat(t.table_schema,'.',t.table_name) = _tablename and \r\n           t.column_name = 'userid')>0 THEN\r\n     _squery = concat('          \r\n          UPDATE ', _tablename, ' \r\n          SET "',_col,'" = $2::',_col_type,' , userid = $3 \r\n          WHERE id::',_id_type,' = $1::',_id_type,'; \r\n      ');\t\r\n      EXECUTE format(_squery) USING rel_id,_value, _userid::int;\r\n      ELSE\r\n\t  \t  _squery = concat('          \r\n          UPDATE ', _tablename, ' \r\n          SET "',_col,'" = $2::',_col_type,'\r\n          WHERE id::',_id_type,' = $1::',_id_type,'; \r\n      ');\r\n      EXECUTE format(_squery) USING rel_id,_value;\r\n     END IF; \r\n  ELSE  \r\n\r\n    IF _id is NULL\r\n    THEN\r\n      IF _value is null \r\n      THEN\r\n        perform raiserror('value is null');\r\n      END IF;\r\n      IF _relation is not null THEN\r\n         FOR _x in (SELECT regexp_split_to_table FROM regexp_split_to_table(_relation,','))\r\n         LOOP\r\n            IF _relationobj->>_x is not null THEN\r\n  \t\t\t\t_rv = _relationobj->>_x;\r\n                IF _rv = '_userid_' and \r\n                   _tablename not in (\r\n                    'framework.defaultval',\r\n                    'framework.actions',\r\n                    'framework.act_parametrs',\r\n                    'framework.select_condition'\r\n                   )  \r\n                THEN\r\n                    _rv = _userid;\r\n                END IF;\r\n                IF _rv = '_orgs_' and \r\n                   _tablename not in (\r\n                      'framework.defaultval',\r\n                      'framework.actions',\r\n                      'framework.act_parametrs',\r\n                      'framework.select_condition'\r\n                   )  \r\n                THEN\r\n                    SELECT\r\n                        u.orgs::varchar \r\n                    FROM framework.users as u\r\n                    WHERE u.id = _userid::int\r\n                    INTO _rv;\r\n                END IF;\r\n                IF _rv = '_orgid_' and \r\n                   _tablename not in (\r\n                      'framework.defaultval',\r\n                      'framework.actions',\r\n                      'framework.act_parametrs',\r\n                      'framework.select_condition'\r\n                   )  \r\n                THEN\r\n                    SELECT\r\n                        u.orgid::varchar \r\n                    FROM framework.users as u\r\n                    WHERE u.id = _userid::int\r\n                    INTO _rv;\r\n                END IF;\r\n    \r\n                _relationval = concat(_relationval,',''',_rv,'''');\r\n            END IF;\r\n         END LOOP;\r\n         \r\n        SELECT\r\n            string_agg(concat('"',regexp_split_to_table,'"'),',')\r\n        FROM regexp_split_to_table(_relation,',')\r\n        INTO _relation;           \r\n        \r\n        _relation = concat(',',_relation);  \r\n      ELSE\r\n      \t_relation = '';\r\n        _relationval = '';\r\n      END IF; \r\n      \r\n      IF _id_type in ( 'character','varchar','char') \r\n      THEN\r\n      \t   _id = upper(uuid_in(md5(random()::text || now()::text)::cstring)::CHAR(36));\r\n      ELSE\r\n      \t   EXECUTE format(concat('SELECT nextval(''',_tablename,'_id_seq''::regclass);')) INTO _id_int ;\r\n           _id = _id_int::varchar;\r\n      END IF;   \r\n     IF \r\n      (SELECT count(t.*)\r\n       FROM information_schema.columns as t\r\n       WHERE concat(t.table_schema,'.',t.table_name) = _tablename and \r\n            t.column_name = 'userid') > 0 \r\n     THEN\r\n        _squery = concat(\r\n        \t'INSERT INTO ', \r\n            _tablename, \r\n            '(id,"',_col,'"',_relation,', userid) \r\n            VALUES ($1::',\r\n            _id_type,',$2::',\r\n            _col_type,_relationval,\r\n            ',$3); '\r\n        );  \r\n                            \r\n        EXECUTE format(_squery) USING _id,_value, _userid::int;\r\n     ELSE\r\n        _squery = concat(\r\n        \t'INSERT INTO ', \r\n            _tablename, \r\n            '(id,"',_col,'"',\r\n            _relation,') \r\n            VALUES ($1::',\r\n            _id_type,',$2::',\r\n            _col_type,_relationval,'); '\r\n        );                     \r\n     \tEXECUTE format(_squery) USING _id,_value;\r\n     END IF;   \r\n         \r\n      _squery = concat(\r\n      \t'SELECT row_to_json(d) FROM \r\n        \t(SELECT $1 as ',_col,') as d;'\r\n       );\r\n       IF _userid is not null\r\n       THEN       \r\n       EXECUTE format(_squery) USING _value INTO _newdata;\r\n                 \r\n         INSERT INTO framework.logtable (\r\n               tablename, tableid, opertype,\r\n               userid, newdata, colname\r\n         ) VALUES (\r\n               _tablename, _id, '1',\r\n               _userid::int, _newdata, _col\r\n         );    \r\n       END IF;           \r\n           \t\r\n  \tELSE\r\n    \r\n    \tIF trim(coalesce(_id,'')) = '' THEN\r\n        \tperform raiserror('id is null');\r\n        END IF;\r\n        \r\n         _squery = concat(\r\n         \t'SELECT row_to_json(d) FROM\t\r\n            \t (SELECT \r\n                  \t"',_col,'"\r\n                  FROM ',_tablename,'\r\n                  WHERE id = $1::',_id_type,') as d;'\r\n         );\r\n         EXECUTE format(_squery) USING _id INTO _oldata;  \r\n        IF (SELECT count(t.*)\r\n            FROM information_schema.columns as t\r\n            WHERE concat(t.table_schema,'.',t.table_name) = _tablename and \r\n               t.column_name = 'userid') > 0 \r\n        THEN\r\n             _squery = concat( \r\n             \t' UPDATE ', _tablename, ' \r\n                  SET "',_col,'" = $2::',_col_type,' , userid = $3\r\n                  WHERE id = $1::',_id_type,';'\r\n             );\r\n    \t\t\t\t\t\t\t\r\n             EXECUTE format(_squery) USING _id,_value, _userid::int; \r\n        ELSE\r\n             _squery = concat( \r\n             \t' UPDATE ', _tablename, ' \r\n                  SET "',_col,'" = $2::',_col_type,' \r\n                  WHERE id = $1::',_id_type,';'\r\n             );\r\n             EXECUTE format(_squery) USING _id,_value; \r\n        END IF;   \r\n  \r\n        _squery = concat(\r\n        \t'SELECT row_to_json(d) FROM \r\n            \t(SELECT $1 as ',_col,') as d;');                \r\n        EXECUTE format(_squery) USING _value INTO _newdata;\r\n        IF _userid is not null\r\n        THEN\r\n          INSERT INTO framework.logtable (\r\n                tablename, tableid, opertype,\r\n                userid, oldata, newdata, colname\r\n          ) VALUES (\r\n                _tablename, _id, 2,\r\n                _userid::int, _oldata, _newdata, _col\r\n          );       \r\n        END IF;    \r\n    END IF;\r\n  END IF; \r\n    \r\n  SElECT\r\n  \trow_to_json(d)\r\n  FROM (\r\n  \tSELECT _id as id,\r\n    \t_value as value\r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'{}');\r\n  \r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n_tablename varchar(300);\r\n_col varchar(350);\r\n_value varchar;\r\n_id varchar(300);\r\n_userid varchar(150);\r\n_relatecolumn varchar(150);\r\n_relatetable varchar(350);\r\n_squery varchar;\r\n_err varchar;\r\n_oldata json;\r\n_newdata json;\r\n_id_int int;\r\n_col_type varchar(300);\r\nrel_id varchar(36);\r\n_id_type varchar(150);\r\nrel_id_type varchar(150);\r\n_viewid int;\r\n_userroles json;\r\n_viewroles json;\r\n_type varchar(150);\r\n_relation varchar;\r\n_relationobj json;\r\n_relationval varchar;\r\n_x varchar;\r\n_rv varchar;\r\nBEGIN\r\n  -- SAVE ONE COLUMN VALUE FOR TYPE form full\r\n  \r\n -- _tablename = injson->>'tablename';\r\n  _col = (injson->>'config')::json->>'col';\r\n  _value = injson->>'value';\r\n  _id = injson->>'id';\r\n  _userid = injson->>'userid';\r\n  _relatecolumn = (injson->>'config')::json->>'relatecolumn';\r\n  _relatetable = injson->>'relatetable';\r\n  _viewid = injson->>'viewid';\r\n  _type = (injson->>'config')::json->>'type';\r\n  _relation = injson->>'relation';\r\n  _relationobj = injson->>'relationobj';\r\n  \r\n\r\n    \r\n    IF _viewid is NULL\r\n    THEN\r\n      perform raiserror('view id is null');\r\n    END IF; \r\n    \r\n    SELECT \r\n    \troles,\r\n        tablename\r\n    FROM framework.views \r\n    WHERE id = _viewid\r\n    INTO _viewroles, _tablename;\r\n    \r\n   IF _tablename <> 'framework.defaultval'\r\n   THEN\r\n    IF _value = '_userid_' and\r\n       _tablename in (\r\n       \t\t'framework.defaultval',\r\n            'framework.actions',\r\n            'framework.act_parametrs',\r\n            'framework.select_condition'\r\n       )  \r\n    THEN\r\n    \t_value = _userid;\r\n    END IF;\r\n    IF _value = '_orgs_' and \r\n       _tablename in (\r\n       \t\t'framework.defaultval',\r\n            'framework.actions',\r\n            'framework.act_parametrs',\r\n            'framework.select_condition'\r\n       ) \r\n    THEN\r\n    \tSELECT\r\n        \tu.orgs::varchar \r\n        FROM framework.users as u\r\n    \tWHERE u.id = _userid::int\r\n        INTO _value;\r\n    END IF;\r\n    IF _value = '_orgid_' and \r\n       _tablename in (\r\n       \t\t'framework.defaultval',\r\n            'framework.actions',\r\n            'framework.act_parametrs',\r\n            'framework.select_condition'\r\n       ) \r\n    THEN\r\n    \tSELECT\r\n        \tu.orgid::varchar \r\n        FROM framework.users as u\r\n    \tWHERE u.id = _userid::int\r\n        INTO _value;\r\n    END IF;\r\n   END IF;\r\n    SELECT \r\n    \troles\r\n    FROM framework.users \r\n    WHERE id::varchar = _userid\r\n    INTO _userroles;\r\n    \r\n    IF _viewroles is null THEN\r\n    \tperform raiserror('view is not found');\r\n    END IF;\r\n    \r\n    IF (SELECT count(*) FROM json_array_elements_text(_viewroles)) > 0 and \r\n    (SELECT count(*) \r\n     FROM json_array_elements_text(_viewroles) as v\r\n     \tJOIN json_array_elements_text(_userroles) as r on  (\r\n        \t\t(v.value::json->>'value')::varchar = r.value::varchar\r\n                OR\r\n                v.value::varchar = r.value::varchar\r\n            )\r\n     ) = 0 THEN\r\n    \tPERFORM raiserror('m403err');\r\n    END IF;\r\n    \r\n    IF _tablename is NULL\r\n    THEN\r\n      perform raiserror('table is null');\r\n    END IF; \r\n    \r\n    IF _col is NULL\r\n    THEN\r\n      perform raiserror('col is null');\r\n    END IF;\r\n      \r\n    IF _relatetable is not null and _id is null\r\n    THEN\r\n      perform raiserror('id can`t be null if relation');\r\n    END IF;\r\n   \r\n   SELECT t.data_type\r\n   FROM information_schema.columns as t\r\n   WHERE concat(t.table_schema,'.',t.table_name) = _tablename and \r\n   \t\t t.column_name = _col\r\n   INTO _col_type; \t\r\n   \r\n   IF _col_type = 'character' THEN\r\n  \t_col_type = 'varchar'; \r\n   END IF;\r\n   \r\n   IF _col_type is null THEN\r\n   \t perform raiserror('can not find out the column type. check table and column names');\r\n   END IF;\r\n  \r\n  SELECT \r\n     t.data_type\r\n  FROM information_schema.columns as t                                         \r\n  WHERE concat(t.table_schema,'.',t.table_name) = _tablename and \r\n  upper(t.column_name) = 'ID'\r\n  INTO _id_type;\r\n  \r\n  IF _id_type = 'character' THEN\r\n  \t_id_type = 'varchar'; \r\n  END IF;\r\n  \r\n  IF _type = 'password' THEN\r\n     drop extension pgcrypto;\r\n     create extension pgcrypto;\r\n     SELECT encode(digest(_value, 'sha224'),'hex') INTO _value;\r\n  END IF;\r\n  \r\n  IF _relatetable is not null\r\n  THEN    \r\n  \t\r\n  \t IF _relatecolumn is null THEN\r\n     \tperform raiserror('can''t find relate column');\r\n     END IF;\t\r\n      \r\n     SELECT \r\n         t.data_type\r\n     FROM information_schema.columns as t                                         \r\n     WHERE concat(t.table_schema,'.',t.table_name) = _relatetable and \r\n     upper(t.column_name) = 'ID'\r\n     INTO rel_id_type;\r\n     \r\n     IF rel_id_type = 'character' THEN\r\n     \trel_id_type = 'varchar'; \r\n     END IF;\r\n     \r\n     IF rel_id_type is null THEN\r\n       perform raiserror('can not find out the relation ID type. check table and column names');\r\n     END IF;\r\n     \r\n      _squery = concat(_squery,'\r\n          SELECT \r\n               ',_relatecolumn,'::',_id_type,'\r\n          FROM ',_relatetable,'\r\n          WHERE id::',rel_id_type,' = $1::',rel_id_type,';\r\n      ');\r\n      \r\n      EXECUTE format(_squery) USING _id INTO rel_id;\r\n      \r\n      IF trim(coalesce(rel_id,'')) = ''\r\n      THEN\r\n          perform raiserror('id of relation table can not be NULL');\r\n      END IF;\r\n      BEGIN\r\n        _squery = concat('\r\n            SELECT row_to_json(d) FROM\t\r\n            (SELECT \r\n              "',_col,'"\r\n            FROM ',_tablename,'\r\n            WHERE id = $1::',_id_type,' ) as d;');\r\n            \r\n        EXECUTE format(_squery) USING rel_id INTO _oldata;\r\n        \r\n      END;\r\n      _squery = concat('SELECT row_to_json(d) FROM \r\n          (SELECT $1 as ',_col,') as d;');\r\n      \r\n      EXECUTE format(_squery) USING _value INTO _newdata; \r\n     \r\n      INSERT INTO framework.logtable (\r\n         tablename, tableid, opertype,\r\n         userid, oldata, newdata, colname\r\n      ) VALUES (\r\n         _tablename, rel_id, 2,\r\n         _userid::int, _oldata, _newdata, _col      \r\n      ); \r\n     IF (SELECT count(t.*)\r\n      FROM information_schema.columns as t\r\n      WHERE concat(t.table_schema,'.',t.table_name) = _tablename and \r\n           t.column_name = 'userid')>0 THEN\r\n     _squery = concat('          \r\n          UPDATE ', _tablename, ' \r\n          SET "',_col,'" = $2::',_col_type,' , userid = $3 \r\n          WHERE id::',_id_type,' = $1::',_id_type,'; \r\n      ');\t\r\n      EXECUTE format(_squery) USING rel_id,_value, _userid::int;\r\n      ELSE\r\n\t  \t  _squery = concat('          \r\n          UPDATE ', _tablename, ' \r\n          SET "',_col,'" = $2::',_col_type,'\r\n          WHERE id::',_id_type,' = $1::',_id_type,'; \r\n      ');\r\n      EXECUTE format(_squery) USING rel_id,_value;\r\n     END IF; \r\n  ELSE  \r\n\r\n    IF _id is NULL\r\n    THEN\r\n      IF _value is null \r\n      THEN\r\n        perform raiserror('value is null');\r\n      END IF;\r\n      IF _relation is not null THEN\r\n         FOR _x in (SELECT regexp_split_to_table FROM regexp_split_to_table(_relation,','))\r\n         LOOP\r\n            IF _relationobj->>_x is not null THEN\r\n  \t\t\t\t_rv = _relationobj->>_x;\r\n                IF _rv = '_userid_' and \r\n                   _tablename not in (\r\n                    'framework.defaultval',\r\n                    'framework.actions',\r\n                    'framework.act_parametrs',\r\n                    'framework.select_condition'\r\n                   )  \r\n                THEN\r\n                    _rv = _userid;\r\n                END IF;\r\n                IF _rv = '_orgs_' and \r\n                   _tablename not in (\r\n                      'framework.defaultval',\r\n                      'framework.actions',\r\n                      'framework.act_parametrs',\r\n                      'framework.select_condition'\r\n                   )  \r\n                THEN\r\n                    SELECT\r\n                        u.orgs::varchar \r\n                    FROM framework.users as u\r\n                    WHERE u.id = _userid::int\r\n                    INTO _rv;\r\n                END IF;\r\n                IF _rv = '_orgid_' and \r\n                   _tablename not in (\r\n                      'framework.defaultval',\r\n                      'framework.actions',\r\n                      'framework.act_parametrs',\r\n                      'framework.select_condition'\r\n                   )  \r\n                THEN\r\n                    SELECT\r\n                        u.orgid::varchar \r\n                    FROM framework.users as u\r\n                    WHERE u.id = _userid::int\r\n                    INTO _rv;\r\n                END IF;\r\n    \r\n                _relationval = concat(_relationval,',''',_rv,'''');\r\n            END IF;\r\n         END LOOP;\r\n         \r\n        SELECT\r\n            string_agg(concat('"',regexp_split_to_table,'"'),',')\r\n        FROM regexp_split_to_table(_relation,',')\r\n        INTO _relation;           \r\n        \r\n        _relation = concat(',',_relation);  \r\n      ELSE\r\n      \t_relation = '';\r\n        _relationval = '';\r\n      END IF; \r\n      \r\n      IF _id_type in ( 'character','varchar','char') \r\n      THEN\r\n      \t   _id = upper(uuid_in(md5(random()::text || now()::text)::cstring)::CHAR(36));\r\n      ELSE\r\n      \t   EXECUTE format(concat('SELECT nextval(''',_tablename,'_id_seq''::regclass);')) INTO _id_int ;\r\n           _id = _id_int::varchar;\r\n      END IF;   \r\n     IF \r\n      (SELECT count(t.*)\r\n       FROM information_schema.columns as t\r\n       WHERE concat(t.table_schema,'.',t.table_name) = _tablename and \r\n            t.column_name = 'userid') > 0 \r\n     THEN\r\n        _squery = concat(\r\n        \t'INSERT INTO ', \r\n            _tablename, \r\n            '(id,"',_col,'"',_relation,', userid) \r\n            VALUES ($1::',\r\n            _id_type,',$2::',\r\n            _col_type,_relationval,\r\n            ',$3); '\r\n        );  \r\n                            \r\n        EXECUTE format(_squery) USING _id,_value, _userid::int;\r\n     ELSE\r\n        _squery = concat(\r\n        \t'INSERT INTO ', \r\n            _tablename, \r\n            '(id,"',_col,'"',\r\n            _relation,') \r\n            VALUES ($1::',\r\n            _id_type,',$2::',\r\n            _col_type,_relationval,'); '\r\n        );                     \r\n     \tEXECUTE format(_squery) USING _id,_value;\r\n     END IF;   \r\n         \r\n      _squery = concat(\r\n      \t'SELECT row_to_json(d) FROM \r\n        \t(SELECT $1 as ',_col,') as d;'\r\n       );\r\n       IF _userid is not null\r\n       THEN       \r\n       EXECUTE format(_squery) USING _value INTO _newdata;\r\n                 \r\n         INSERT INTO framework.logtable (\r\n               tablename, tableid, opertype,\r\n               userid, newdata, colname\r\n         ) VALUES (\r\n               _tablename, _id, '1',\r\n               _userid::int, _newdata, _col\r\n         );    \r\n       END IF;           \r\n           \t\r\n  \tELSE\r\n    \r\n    \tIF trim(coalesce(_id,'')) = '' THEN\r\n        \tperform raiserror('id is null');\r\n        END IF;\r\n        \r\n         _squery = concat(\r\n         \t'SELECT row_to_json(d) FROM\t\r\n            \t (SELECT \r\n                  \t"',_col,'"\r\n                  FROM ',_tablename,'\r\n                  WHERE id = $1::',_id_type,') as d;'\r\n         );\r\n         EXECUTE format(_squery) USING _id INTO _oldata;  \r\n        IF (SELECT count(t.*)\r\n            FROM information_schema.columns as t\r\n            WHERE concat(t.table_schema,'.',t.table_name) = _tablename and \r\n               t.column_name = 'userid') > 0 \r\n        THEN\r\n             _squery = concat( \r\n             \t' UPDATE ', _tablename, ' \r\n                  SET "',_col,'" = $2::',_col_type,' , userid = $3\r\n                  WHERE id = $1::',_id_type,';'\r\n             );\r\n    \t\t\t\t\t\t\t\r\n             EXECUTE format(_squery) USING _id,_value, _userid::int; \r\n        ELSE\r\n             _squery = concat( \r\n             \t' UPDATE ', _tablename, ' \r\n                  SET "',_col,'" = $2::',_col_type,' \r\n                  WHERE id = $1::',_id_type,';'\r\n             );\r\n             EXECUTE format(_squery) USING _id,_value; \r\n        END IF;   \r\n  \r\n        _squery = concat(\r\n        \t'SELECT row_to_json(d) FROM \r\n            \t(SELECT $1 as ',_col,') as d;');                \r\n        EXECUTE format(_squery) USING _value INTO _newdata;\r\n        IF _userid is not null\r\n        THEN\r\n          INSERT INTO framework.logtable (\r\n                tablename, tableid, opertype,\r\n                userid, oldata, newdata, colname\r\n          ) VALUES (\r\n                _tablename, _id, 2,\r\n                _userid::int, _oldata, _newdata, _col\r\n          );       \r\n        END IF;    \r\n    END IF;\r\n  END IF; \r\n    \r\n  SElECT\r\n  \trow_to_json(d)\r\n  FROM (\r\n  \tSELECT _id as id,\r\n    \t_value as value\r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'{}');\r\n  \r\nEND;\r\n
227323	framework	fn_sess	framework.fn_sess(_login  varchar,pass  varchar,sessid out bpchar)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_sess(_login  varchar,pass  varchar,sessid out bpchar)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_sess(_login  varchar,pass  varchar,sessid out bpchar) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_sess(_login character varying, pass character varying, OUT sessid character)\n RETURNS character\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  user_id int;\r\n  _orgid int;\r\nBEGIN\r\n\r\n\tSELECT \r\n    \tu.id,\r\n        u.orgs->0\r\n    FROM framework.users as u\r\n    WHERE u.isactive and u.login = _login and u.password = pass\r\n    INTO user_id, _orgid;\r\n    \r\n    IF user_id is null THEN\r\n    \tperform raiserror('User not active or not found. Check login password combination');\r\n    END IF;\r\n    \r\n    sessid = uuid_in(md5(random()::text || now()::text)::cstring)::CHAR(36);\r\n    \r\n    INSERT INTO framework.sess\r\n    (\r\n    \tid,\r\n        userid\r\n    )\r\n    VALUES \r\n    (\r\n    \tsessid,\r\n        user_id\r\n    );\r\n    \r\n    UPDATE framework.users\r\n    SET orgid = _orgid\r\n    WHERE orgid is null and id = user_id;\r\n\r\nEND;\r\n$function$\n	[{"argname":"_login","argmode":"input","argtype":"varchar"},{"argname":"pass","argmode":"input","argtype":"varchar"},{"argname":"sessid","argmode":"output","argtype":"bpchar"}]	bpchar	\r\nDECLARE\r\n  user_id int;\r\n  _orgid int;\r\nBEGIN\r\n\r\n\tSELECT \r\n    \tu.id,\r\n        u.orgs->0\r\n    FROM framework.users as u\r\n    WHERE u.isactive and u.login = _login and u.password = pass\r\n    INTO user_id, _orgid;\r\n    \r\n    IF user_id is null THEN\r\n    \tperform raiserror('User not active or not found. Check login password combination');\r\n    END IF;\r\n    \r\n    sessid = uuid_in(md5(random()::text || now()::text)::cstring)::CHAR(36);\r\n    \r\n    INSERT INTO framework.sess\r\n    (\r\n    \tid,\r\n        userid\r\n    )\r\n    VALUES \r\n    (\r\n    \tsessid,\r\n        user_id\r\n    );\r\n    \r\n    UPDATE framework.users\r\n    SET orgid = _orgid\r\n    WHERE orgid is null and id = user_id;\r\n\r\nEND;\r\n
227332	framework	fn_trees_bypath	framework.fn_trees_bypath(injson  json,outjson out json)	GET TREES BY PATH	2020-05-21 11:31:02.195905	1	f	fn_trees_bypath(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_trees_bypath(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_trees_bypath(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\n  _path varchar(350);\r\n  _roles json;\r\nBEGIN\r\n  _userid = injson->>'userid';\r\n  _path = injson->>'path';\r\n  SELECT\r\n  \tu.roles\r\n  FROM framework.users as u\r\n  WHERE u.id = _userid\r\n  INTO _roles;\r\n  \r\n  \r\n  SELECT \r\n  \trow_to_json(d)\r\n  FROM (\r\n  SELECT \r\n  \tt.id, t.title, t.descr, (\r\n\tSELECT \r\n      array_to_json(array_agg(row_to_json(t))) \r\n    FROM (\r\n\t     SELECT \r\n          \tta.*\r\n         FROM framework.treesacts as ta\r\n         WHERE coalesce(ta.act,'')<>'' and coalesce(ta.title,'')<>'' and \r\n\t\t       ta.treesid = t.id) as t) as acts,   \r\n    framework.fn_branchestree_recurs(0,t.id) as branches, (\r\n\t  SELECT\r\n    \tarray_to_json(array_agg(row_to_json(d))) \r\n      FROM (\r\n\t\tSELECT\r\n\t\t\ttb.id as key, tb.icon,\r\n\t\t\ttb.parentid, tb.treesid,\r\n\t\t\ttb.title as label, tb.treeviewtype,\r\n\t\t\tcoalesce(v.path,c.path) as path,\r\n\t\t\tv.viewtype, tb.ismain\r\n\t\tFROM framework.treesbranches as tb\r\n\t\t  LEFT JOIN framework.views as v on v.id = tb.viewid\r\n\t\t  LEFT JOIN framework.compos as c on c.id = tb.compoid\r\n\t\tWHERE tb.treesid = t.id and tb.title is not null\r\n\t\tORDER BY tb.orderby\r\n\t ) as d) as  items  \r\n  FROM framework.trees as t\r\n  WHERE t.url = _path and (t.roles is null or (\r\n\t  SELECT count(*)\r\n\t  FROM json_array_elements_text(t.roles) as t1\r\n    ) = 0 or (\r\n\t\tSELECT count(*)\r\n\t\tFROM json_array_elements_text(t.roles) as t1\r\n\t\tJOIN json_array_elements_text(_roles) as t2 on \r\n\t\t\t t1.value::varchar::int = t2.value::varchar::int or \r\n\t\t\t t2.value::varchar::int = '0'\r\n\t  )>0\r\n\t)\r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'{}');\r\n  \r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  _userid int;\r\n  _path varchar(350);\r\n  _roles json;\r\nBEGIN\r\n  _userid = injson->>'userid';\r\n  _path = injson->>'path';\r\n  SELECT\r\n  \tu.roles\r\n  FROM framework.users as u\r\n  WHERE u.id = _userid\r\n  INTO _roles;\r\n  \r\n  \r\n  SELECT \r\n  \trow_to_json(d)\r\n  FROM (\r\n  SELECT \r\n  \tt.id, t.title, t.descr, (\r\n\tSELECT \r\n      array_to_json(array_agg(row_to_json(t))) \r\n    FROM (\r\n\t     SELECT \r\n          \tta.*\r\n         FROM framework.treesacts as ta\r\n         WHERE coalesce(ta.act,'')<>'' and coalesce(ta.title,'')<>'' and \r\n\t\t       ta.treesid = t.id) as t) as acts,   \r\n    framework.fn_branchestree_recurs(0,t.id) as branches, (\r\n\t  SELECT\r\n    \tarray_to_json(array_agg(row_to_json(d))) \r\n      FROM (\r\n\t\tSELECT\r\n\t\t\ttb.id as key, tb.icon,\r\n\t\t\ttb.parentid, tb.treesid,\r\n\t\t\ttb.title as label, tb.treeviewtype,\r\n\t\t\tcoalesce(v.path,c.path) as path,\r\n\t\t\tv.viewtype, tb.ismain\r\n\t\tFROM framework.treesbranches as tb\r\n\t\t  LEFT JOIN framework.views as v on v.id = tb.viewid\r\n\t\t  LEFT JOIN framework.compos as c on c.id = tb.compoid\r\n\t\tWHERE tb.treesid = t.id and tb.title is not null\r\n\t\tORDER BY tb.orderby\r\n\t ) as d) as  items  \r\n  FROM framework.trees as t\r\n  WHERE t.url = _path and (t.roles is null or (\r\n\t  SELECT count(*)\r\n\t  FROM json_array_elements_text(t.roles) as t1\r\n    ) = 0 or (\r\n\t\tSELECT count(*)\r\n\t\tFROM json_array_elements_text(t.roles) as t1\r\n\t\tJOIN json_array_elements_text(_roles) as t2 on \r\n\t\t\t t1.value::varchar::int = t2.value::varchar::int or \r\n\t\t\t t2.value::varchar::int = '0'\r\n\t  )>0\r\n\t)\r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'{}');\r\n  \r\nEND;\r\n
227324	framework	fn_sess	framework.fn_sess(_login  varchar,pass  varchar,sessid inout bpchar)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_sess(_login  varchar,pass  varchar,sessid inout bpchar)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_sess(_login  varchar,pass  varchar,sessid inout bpchar) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_sess(_login character varying, pass character varying, INOUT sessid character)\n RETURNS character\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  user_id int;\r\n  _orgid int;\r\nBEGIN\r\n\r\n\tSELECT \r\n    \tu.id,\r\n        u.orgs->0\r\n    FROM framework.users as u\r\n    WHERE u.isactive and u.login = _login and u.password = pass\r\n    INTO user_id, _orgid;\r\n    \r\n    IF user_id is null THEN\r\n        perform raiserror('User not active or not found. Check login password combination');\r\n    END IF;\r\n    IF sessid is null\r\n    THEN\r\n        sessid = uuid_in(md5(random()::text || now()::text)::cstring)::CHAR(36);\r\n    END IF;\r\n    INSERT INTO framework.sess\r\n    (\r\n        id,\r\n        userid\r\n    )\r\n    VALUES \r\n    (\r\n        sessid,\r\n        user_id\r\n    );\r\n    \r\n    UPDATE framework.users\r\n    SET orgid = _orgid\r\n    WHERE orgid is null and id = user_id;\r\n\r\nEND;\r\n$function$\n	[{"argname":"_login","argmode":"input","argtype":"varchar"},{"argname":"pass","argmode":"input","argtype":"varchar"},{"argname":"sessid","argmode":"input/output","argtype":"bpchar"}]	bpchar	\r\nDECLARE\r\n  user_id int;\r\n  _orgid int;\r\nBEGIN\r\n\r\n\tSELECT \r\n    \tu.id,\r\n        u.orgs->0\r\n    FROM framework.users as u\r\n    WHERE u.isactive and u.login = _login and u.password = pass\r\n    INTO user_id, _orgid;\r\n    \r\n    IF user_id is null THEN\r\n        perform raiserror('User not active or not found. Check login password combination');\r\n    END IF;\r\n    IF sessid is null\r\n    THEN\r\n        sessid = uuid_in(md5(random()::text || now()::text)::cstring)::CHAR(36);\r\n    END IF;\r\n    INSERT INTO framework.sess\r\n    (\r\n        id,\r\n        userid\r\n    )\r\n    VALUES \r\n    (\r\n        sessid,\r\n        user_id\r\n    );\r\n    \r\n    UPDATE framework.users\r\n    SET orgid = _orgid\r\n    WHERE orgid is null and id = user_id;\r\n\r\nEND;\r\n
227325	framework	fn_tabcolumns	framework.fn_tabcolumns(injson  json,outjson out json)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_tabcolumns(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_tabcolumns(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_tabcolumns(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _tabname varchar(150);\r\nBEGIN\r\n  _tabname = injson->>'tabname';\r\n\r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n\tSELECT column_name as label,\r\n\t  column_name as value\r\n\tFROM information_schema.columns\r\n\tWHERE concat(table_schema,'.',table_name) = _tabname\r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'[]');\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  _tabname varchar(150);\r\nBEGIN\r\n  _tabname = injson->>'tabname';\r\n\r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n\tSELECT column_name as label,\r\n\t  column_name as value\r\n\tFROM information_schema.columns\r\n\tWHERE concat(table_schema,'.',table_name) = _tabname\r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'[]');\r\nEND;\r\n
227326	framework	fn_tabcolumns_for_filters	framework.fn_tabcolumns_for_filters(injson  json,outjson out json)	for select conditions	2020-05-21 11:31:02.195905	1	f	fn_tabcolumns_for_filters(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_tabcolumns_for_filters(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_tabcolumns_for_filters(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _viewid int;\r\n  _tabname varchar(150);\r\n  _substr varchar(540);\r\nBEGIN\r\n\r\n\t-- for select conditions\r\n  _viewid = (injson->'inputs')->>'id';\r\n  _substr = injson->>'substr';\r\n  \r\n  SELECT\r\n  \tv.tablename\r\n  FROM framework.views as v\r\n  WHERE v.id = _viewid\r\n  INTO _tabname;\r\n  \t\r\n  _substr = concat('%',upper(coalesce(_substr,'%')),'%');\r\n\r\n\t\r\n /* SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM\r\n  (SELECT column_name as label,\r\n    column_name as value\r\n  FROM information_schema.columns\r\n  WHERE concat(table_schema,'.',table_name) = _tabname and \r\n  \tupper(column_name) like _substr) as d\r\n  INTO outjson;*/\r\n  \r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n\t  SELECT\r\n\t\ttitle as label,\r\n\t\tid as value\r\n\t  FROM framework.config\r\n\t  WHERE viewid = _viewid\r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  \r\n  outjson = coalesce(outjson,'[]');\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  _viewid int;\r\n  _tabname varchar(150);\r\n  _substr varchar(540);\r\nBEGIN\r\n\r\n\t-- for select conditions\r\n  _viewid = (injson->'inputs')->>'id';\r\n  _substr = injson->>'substr';\r\n  \r\n  SELECT\r\n  \tv.tablename\r\n  FROM framework.views as v\r\n  WHERE v.id = _viewid\r\n  INTO _tabname;\r\n  \t\r\n  _substr = concat('%',upper(coalesce(_substr,'%')),'%');\r\n\r\n\t\r\n /* SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM\r\n  (SELECT column_name as label,\r\n    column_name as value\r\n  FROM information_schema.columns\r\n  WHERE concat(table_schema,'.',table_name) = _tabname and \r\n  \tupper(column_name) like _substr) as d\r\n  INTO outjson;*/\r\n  \r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n\t  SELECT\r\n\t\ttitle as label,\r\n\t\tid as value\r\n\t  FROM framework.config\r\n\t  WHERE viewid = _viewid\r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  \r\n  outjson = coalesce(outjson,'[]');\r\nEND;\r\n
227327	framework	fn_tabcolumns_for_filters_arr	framework.fn_tabcolumns_for_filters_arr(injson  json,outjson out json)	for select conditions	2020-05-21 11:31:02.195905	1	f	fn_tabcolumns_for_filters_arr(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_tabcolumns_for_filters_arr(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_tabcolumns_for_filters_arr(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _viewid int;\r\n  _tabname varchar(150);\r\n  _substr varchar(540);\r\n  _cols json;\r\nBEGIN\r\n\r\n\t-- for select conditions\r\n  _viewid = (injson->'inputs')->>'id';\r\n  _substr = injson->>'substr';\r\n  \r\n  SELECT\r\n  \tv.tablename\r\n  FROM framework.views as v\r\n  WHERE v.id = _viewid\r\n  INTO _tabname;\r\n  \t\r\n  --\r\n  IF _substr like '[%' THEN\r\n  \t_cols = _substr::json;\r\n  END IF;\t\r\n  \r\n  _substr = concat('%',upper(coalesce(_substr,'%')),'%');\r\n  \r\n  \r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n    SELECT\r\n      title as label,\r\n      id as value\r\n    FROM framework.config\r\n    WHERE viewid = _viewid and (\r\n    \tupper(title) in (\r\n          SELECT\r\n              upper(value::varchar)\r\n          FROM json_array_elements_text(_cols)\r\n    \t) OR upper(title) like _substr\r\n    )) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'[]');\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  _viewid int;\r\n  _tabname varchar(150);\r\n  _substr varchar(540);\r\n  _cols json;\r\nBEGIN\r\n\r\n\t-- for select conditions\r\n  _viewid = (injson->'inputs')->>'id';\r\n  _substr = injson->>'substr';\r\n  \r\n  SELECT\r\n  \tv.tablename\r\n  FROM framework.views as v\r\n  WHERE v.id = _viewid\r\n  INTO _tabname;\r\n  \t\r\n  --\r\n  IF _substr like '[%' THEN\r\n  \t_cols = _substr::json;\r\n  END IF;\t\r\n  \r\n  _substr = concat('%',upper(coalesce(_substr,'%')),'%');\r\n  \r\n  \r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n    SELECT\r\n      title as label,\r\n      id as value\r\n    FROM framework.config\r\n    WHERE viewid = _viewid and (\r\n    \tupper(title) in (\r\n          SELECT\r\n              upper(value::varchar)\r\n          FROM json_array_elements_text(_cols)\r\n    \t) OR upper(title) like _substr\r\n    )) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'[]');\r\nEND;\r\n
227357	framework	tr_calendar_actions_tr	framework.tr_calendar_actions_tr()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_calendar_actions_tr()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_calendar_actions_tr() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_calendar_actions_tr()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\r\n\tSELECT\r\n    \tcalendar_date, \r\n        calendar_date\r\n    FROM framework.calendar_test\r\n    WHERE id = NEW.calendar_id\r\n    INTO NEW."start", NEW."end";\r\n    \r\n    RETURN NEW;\r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN\r\n\r\n\tSELECT\r\n    \tcalendar_date, \r\n        calendar_date\r\n    FROM framework.calendar_test\r\n    WHERE id = NEW.calendar_id\r\n    INTO NEW."start", NEW."end";\r\n    \r\n    RETURN NEW;\r\n\r\nEND;\r\n
227358	framework	tr_config_tr	framework.tr_config_tr()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_config_tr()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_config_tr() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_config_tr()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n\t_col varchar(150);\r\n\t_title varchar(150);\r\n    _tablename varchar(350); -- view major table name\r\n    _tpath json;\r\n    _tt varchar(150);\r\nBEGIN\r\n\r\n\tSELECT\r\n    \tv.tablename\r\n    FROM framework.views as v\r\n    WHERE v.id = NEW.viewid\r\n    INTO _tablename;\r\n    \r\n    -- if related column from other table\r\n    IF NEW.table is not null \r\n    THEN\r\n    \t_tablename = NEW.table;\r\n    END IF;\r\n    \r\n    -- check multi type columns data_type in table\r\n    IF NEW.type like 'multi%' \r\n    THEN\r\n        -- data_type must be JSON\r\n        IF (\r\n          SELECT \r\n              data_type\r\n          FROM information_schema.columns\r\n          WHERE concat(table_schema,'.',table_name) = _tablename AND\r\n                column_name = NEW.col\r\n        ) <> 'json'\r\n        THEN\r\n        \tPERFORM raiserror('for type multi(select, typehead), column type must be JSON');\r\n        END IF;    \t\r\n    END IF;\r\n    \r\n    -- check relaition and type\r\n    IF NEW.relation is not null THEN\r\n      -- for multiselect, mu;titypehead types\t\r\n      -- only not api types\r\n      IF NEW.type like 'multi%' AND \r\n      \t NEW.type not like '%_api'\r\n      THEN\r\n      \tIF (\r\n        \tSELECT \r\n              count(table_name)\r\n            FROM information_schema.columns\r\n            WHERE concat(table_schema,'.',table_name) = NEW.relation\r\n        ) = 0 THEN\r\n        \tPERFORM raiserror(concat('table ',NEW.relation,' is not found'));\r\n        END IF;\r\n        \r\n        NEW.multiselecttable = NEW.relation;      \r\n        NEW.multicolums = NEW.relationcolums;\r\n        NEW.relationcolums = '[]';\r\n      END IF;\r\n      \r\n      -- if type _api\r\n      IF NEW.type like '%_api' AND \r\n      \t COALESCE(OLD.select_api,'') <> NEW.relation \r\n         and COALESCE(OLD.relation,'')<>NEW.relation\r\n      THEN    \r\n        NEW.select_api = NEW.relation;      \r\n      END IF;\r\n      \r\n      -- do not change relation\r\n      IF OLD.relation is null OR OLD.relation <> NEW.relation \r\n      THEN\r\n          NEW.relation = OLD.relation;\r\n      END IF;\r\n    END IF;\r\n    \r\n    \r\n\t-- add relation columns to config \r\n    -- only if not "array" type \r\n\tIF NEW.relationcolums is not null AND \r\n    \r\n       NOT NEW.copy AND\r\n       \r\n       NEW.type<>'array' AND\r\n       NOT NEW.depency AND\r\n       NEW.relation is not null AND\r\n       \r\n      (SELECT count(*) FROM json_array_elements(NEW.relationcolums)) > 0 AND \r\n      \r\n      (SELECT count(r.value) \r\n       FROM json_array_elements_text(NEW.relationcolums) as r\r\n       WHERE r.value::varchar not in (\r\n\t\t\tSELECT r2.value::varchar \t\r\n       \t\tFROM json_array_elements_text(coalesce(OLD.relationcolums,'[]'::json)) as r2\r\n       )) > 0\r\n       \r\n    THEN\r\n    \t_tt = NEW.t;\r\n    \tIF NEW.related = true \r\n        THEN\r\n            /*[\r\n            \t{"t": "t2", "col": "region_id", "table": "nsi.ros_j5phs5f9ra"}, \r\n                {"t": "t7", "col": "addressTypeId", "table": "nsi.ros_n4rellrh3d"}\r\n            ]*/\r\n            --IF (SELECT FROM ) \r\n            SELECT\r\n            \tarray_to_json(array_agg(row_to_json(d)))\r\n            FROM (\r\n              SELECT\r\n                   concat('t',NEW.t) as t, \r\n                   NEW.relatecolumn as col, \r\n                   NEW.table as table\r\n              UNION \r\n              SELECT\t\r\n                  concat(NEW.col,'_', NEW.t) as t, \r\n                  NEW.col, \r\n                  NEW.relation as table\r\n            ) as d\r\n            INTO _tpath;\r\n            \r\n            _tt = concat(NEW.col,'_', NEW.t);\r\n        \t--PERFORM raiserror('There is not realized yet!');\r\n        END IF;\r\n        _tpath = coalesce(_tpath,'[]');\r\n        \r\n    \tFOR _col in (\r\n        \tSELECT \r\n            \tVALUE::varchar \r\n            FROM json_array_elements_text(NEW.relationcolums)\r\n            WHERE value::varchar not in (\r\n              SELECT value::varchar\r\n              FROM json_array_elements_text(OLD.relationcolums)\r\n          )\r\n        )\r\n        LOOP\r\n        \t_title = _col;\r\n            \r\n        \tIF \r\n             (SELECT \r\n            \tcount(c.id)\r\n              FROM framework.config as c\r\n              WHERE c.viewid = NEW.viewid and c.col = _col) >0\r\n            THEN\r\n            \t_title = concat(_col,'_',NEW.id);\r\n            END IF;\r\n        \t\r\n            \r\n        \tINSERT INTO framework.config (\r\n               col, title, type, visible,\r\n               related, roles, relatecolumn,\r\n               relation,\r\n               relcol,\r\n               classname, "join", t,\r\n               "table", viewid,\r\n               column_order, tpath\r\n            )\r\n        \tSELECT\r\n              _col as col, _title as title, 'label' as type, true as visible,\r\n              true as related, '[]'::json as roles, NEW.col as relatecolumn,\r\n              (\r\n                SELECT \r\n                  \tconcat(y.table_schema, '.', y.table_name)\r\n                FROM information_schema.table_constraints as c\r\n                   \tJOIN information_schema.key_column_usage AS x ON\r\n                       \tc.constraint_name = x.constraint_name and\r\n                        x.column_name = _col\r\n                    JOIN information_schema.constraint_column_usage AS y ON \r\n                       \ty.constraint_name = c.constraint_name and\r\n                        y.constraint_schema = c.constraint_schema\r\n                WHERE concat(c.table_schema ,'.',c.table_name) = NEW.relation \r\n                    \tand\r\n                      c.constraint_type = 'FOREIGN KEY'\r\n                LIMIT 1                \r\n                \r\n              ) as relation,\r\n              COALESCE((\r\n                SELECT \r\n                  \tconcat(y.column_name)\r\n                FROM information_schema.table_constraints as c\r\n                  \tJOIN information_schema.key_column_usage AS x ON\r\n                         c.constraint_name = x.constraint_name and\r\n                         x.column_name = _col\r\n                    JOIN information_schema.constraint_column_usage AS y ON \r\n                      \ty.constraint_name = c.constraint_name and\r\n                        y.constraint_schema = c.constraint_schema\r\n                WHERE concat(c.table_schema ,'.',c.table_name) = NEW.relation \r\n                   \t  and\r\n                     c.constraint_type = 'FOREIGN KEY'\r\n                LIMIT 1\r\n              ),NEW.relcol) as relcol,\r\n              '' as classname, false as "join", _tt as t,\r\n              NEW.relation as "table", NEW.viewid,\r\n              coalesce((\r\n              \tSELECT \r\n                 max(c.column_order) \r\n            \tFROM framework.config as c\r\n            \tWHERE c.viewid = NEW.viewid),0\r\n              ) + 1, _tpath;\r\n        END LOOP;\r\n    END IF;\r\n    \r\n    -- check function changing \r\n    IF (OLD.fn is null and NEW.fn is not null) OR\r\n       (OLD.fn is not null and NEW.fn is null)\r\n    THEN\r\n    \tPERFORM raiserror('You can not change simple column to function column');\r\n    END IF;\r\n\t\r\n    IF NEW.depency and NEW.depencycol is null \r\n    THEN\r\n    \tPERFORM raiserror('depencycol can not be empty (null) when depency=TRUE!');\r\n    END IF;\r\n    \r\n\t-- change column order in all config\r\n\t/*IF OLD.column_order<>NEW.column_order and \r\n\t  (SELECT\r\n\t     count(id)\r\n\t   FROM framework.config\r\n\t   WHERE viewid = NEW.viewid and column_order = NEW.column_order) > 0 \r\n\tTHEN\r\n\t   UPDATE framework.config\r\n\t   SET\r\n\t      column_order = column_order + 1\r\n\t   WHERE viewid = NEW.viewid AND column_order >= NEW.column_order;\r\n\tEND IF;*/\r\n\r\n\tRETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n\t_col varchar(150);\r\n\t_title varchar(150);\r\n    _tablename varchar(350); -- view major table name\r\n    _tpath json;\r\n    _tt varchar(150);\r\nBEGIN\r\n\r\n\tSELECT\r\n    \tv.tablename\r\n    FROM framework.views as v\r\n    WHERE v.id = NEW.viewid\r\n    INTO _tablename;\r\n    \r\n    -- if related column from other table\r\n    IF NEW.table is not null \r\n    THEN\r\n    \t_tablename = NEW.table;\r\n    END IF;\r\n    \r\n    -- check multi type columns data_type in table\r\n    IF NEW.type like 'multi%' \r\n    THEN\r\n        -- data_type must be JSON\r\n        IF (\r\n          SELECT \r\n              data_type\r\n          FROM information_schema.columns\r\n          WHERE concat(table_schema,'.',table_name) = _tablename AND\r\n                column_name = NEW.col\r\n        ) <> 'json'\r\n        THEN\r\n        \tPERFORM raiserror('for type multi(select, typehead), column type must be JSON');\r\n        END IF;    \t\r\n    END IF;\r\n    \r\n    -- check relaition and type\r\n    IF NEW.relation is not null THEN\r\n      -- for multiselect, mu;titypehead types\t\r\n      -- only not api types\r\n      IF NEW.type like 'multi%' AND \r\n      \t NEW.type not like '%_api'\r\n      THEN\r\n      \tIF (\r\n        \tSELECT \r\n              count(table_name)\r\n            FROM information_schema.columns\r\n            WHERE concat(table_schema,'.',table_name) = NEW.relation\r\n        ) = 0 THEN\r\n        \tPERFORM raiserror(concat('table ',NEW.relation,' is not found'));\r\n        END IF;\r\n        \r\n        NEW.multiselecttable = NEW.relation;      \r\n        NEW.multicolums = NEW.relationcolums;\r\n        NEW.relationcolums = '[]';\r\n      END IF;\r\n      \r\n      -- if type _api\r\n      IF NEW.type like '%_api' AND \r\n      \t COALESCE(OLD.select_api,'') <> NEW.relation \r\n         and COALESCE(OLD.relation,'')<>NEW.relation\r\n      THEN    \r\n        NEW.select_api = NEW.relation;      \r\n      END IF;\r\n      \r\n      -- do not change relation\r\n      IF OLD.relation is null OR OLD.relation <> NEW.relation \r\n      THEN\r\n          NEW.relation = OLD.relation;\r\n      END IF;\r\n    END IF;\r\n    \r\n    \r\n\t-- add relation columns to config \r\n    -- only if not "array" type \r\n\tIF NEW.relationcolums is not null AND \r\n    \r\n       NOT NEW.copy AND\r\n       \r\n       NEW.type<>'array' AND\r\n       NOT NEW.depency AND\r\n       NEW.relation is not null AND\r\n       \r\n      (SELECT count(*) FROM json_array_elements(NEW.relationcolums)) > 0 AND \r\n      \r\n      (SELECT count(r.value) \r\n       FROM json_array_elements_text(NEW.relationcolums) as r\r\n       WHERE r.value::varchar not in (\r\n\t\t\tSELECT r2.value::varchar \t\r\n       \t\tFROM json_array_elements_text(coalesce(OLD.relationcolums,'[]'::json)) as r2\r\n       )) > 0\r\n       \r\n    THEN\r\n    \t_tt = NEW.t;\r\n    \tIF NEW.related = true \r\n        THEN\r\n            /*[\r\n            \t{"t": "t2", "col": "region_id", "table": "nsi.ros_j5phs5f9ra"}, \r\n                {"t": "t7", "col": "addressTypeId", "table": "nsi.ros_n4rellrh3d"}\r\n            ]*/\r\n            --IF (SELECT FROM ) \r\n            SELECT\r\n            \tarray_to_json(array_agg(row_to_json(d)))\r\n            FROM (\r\n              SELECT\r\n                   concat('t',NEW.t) as t, \r\n                   NEW.relatecolumn as col, \r\n                   NEW.table as table\r\n              UNION \r\n              SELECT\t\r\n                  concat(NEW.col,'_', NEW.t) as t, \r\n                  NEW.col, \r\n                  NEW.relation as table\r\n            ) as d\r\n            INTO _tpath;\r\n            \r\n            _tt = concat(NEW.col,'_', NEW.t);\r\n        \t--PERFORM raiserror('There is not realized yet!');\r\n        END IF;\r\n        _tpath = coalesce(_tpath,'[]');\r\n        \r\n    \tFOR _col in (\r\n        \tSELECT \r\n            \tVALUE::varchar \r\n            FROM json_array_elements_text(NEW.relationcolums)\r\n            WHERE value::varchar not in (\r\n              SELECT value::varchar\r\n              FROM json_array_elements_text(OLD.relationcolums)\r\n          )\r\n        )\r\n        LOOP\r\n        \t_title = _col;\r\n            \r\n        \tIF \r\n             (SELECT \r\n            \tcount(c.id)\r\n              FROM framework.config as c\r\n              WHERE c.viewid = NEW.viewid and c.col = _col) >0\r\n            THEN\r\n            \t_title = concat(_col,'_',NEW.id);\r\n            END IF;\r\n        \t\r\n            \r\n        \tINSERT INTO framework.config (\r\n               col, title, type, visible,\r\n               related, roles, relatecolumn,\r\n               relation,\r\n               relcol,\r\n               classname, "join", t,\r\n               "table", viewid,\r\n               column_order, tpath\r\n            )\r\n        \tSELECT\r\n              _col as col, _title as title, 'label' as type, true as visible,\r\n              true as related, '[]'::json as roles, NEW.col as relatecolumn,\r\n              (\r\n                SELECT \r\n                  \tconcat(y.table_schema, '.', y.table_name)\r\n                FROM information_schema.table_constraints as c\r\n                   \tJOIN information_schema.key_column_usage AS x ON\r\n                       \tc.constraint_name = x.constraint_name and\r\n                        x.column_name = _col\r\n                    JOIN information_schema.constraint_column_usage AS y ON \r\n                       \ty.constraint_name = c.constraint_name and\r\n                        y.constraint_schema = c.constraint_schema\r\n                WHERE concat(c.table_schema ,'.',c.table_name) = NEW.relation \r\n                    \tand\r\n                      c.constraint_type = 'FOREIGN KEY'\r\n                LIMIT 1                \r\n                \r\n              ) as relation,\r\n              COALESCE((\r\n                SELECT \r\n                  \tconcat(y.column_name)\r\n                FROM information_schema.table_constraints as c\r\n                  \tJOIN information_schema.key_column_usage AS x ON\r\n                         c.constraint_name = x.constraint_name and\r\n                         x.column_name = _col\r\n                    JOIN information_schema.constraint_column_usage AS y ON \r\n                      \ty.constraint_name = c.constraint_name and\r\n                        y.constraint_schema = c.constraint_schema\r\n                WHERE concat(c.table_schema ,'.',c.table_name) = NEW.relation \r\n                   \t  and\r\n                     c.constraint_type = 'FOREIGN KEY'\r\n                LIMIT 1\r\n              ),NEW.relcol) as relcol,\r\n              '' as classname, false as "join", _tt as t,\r\n              NEW.relation as "table", NEW.viewid,\r\n              coalesce((\r\n              \tSELECT \r\n                 max(c.column_order) \r\n            \tFROM framework.config as c\r\n            \tWHERE c.viewid = NEW.viewid),0\r\n              ) + 1, _tpath;\r\n        END LOOP;\r\n    END IF;\r\n    \r\n    -- check function changing \r\n    IF (OLD.fn is null and NEW.fn is not null) OR\r\n       (OLD.fn is not null and NEW.fn is null)\r\n    THEN\r\n    \tPERFORM raiserror('You can not change simple column to function column');\r\n    END IF;\r\n\t\r\n    IF NEW.depency and NEW.depencycol is null \r\n    THEN\r\n    \tPERFORM raiserror('depencycol can not be empty (null) when depency=TRUE!');\r\n    END IF;\r\n    \r\n\t-- change column order in all config\r\n\t/*IF OLD.column_order<>NEW.column_order and \r\n\t  (SELECT\r\n\t     count(id)\r\n\t   FROM framework.config\r\n\t   WHERE viewid = NEW.viewid and column_order = NEW.column_order) > 0 \r\n\tTHEN\r\n\t   UPDATE framework.config\r\n\t   SET\r\n\t      column_order = column_order + 1\r\n\t   WHERE viewid = NEW.viewid AND column_order >= NEW.column_order;\r\n\tEND IF;*/\r\n\r\n\tRETURN NEW;\r\nEND;\r\n
227328	framework	fn_tabcolumns_for_sc	framework.fn_tabcolumns_for_sc(injson  json,outjson out json)	for select conditions	2020-05-21 11:31:02.195905	1	f	fn_tabcolumns_for_sc(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_tabcolumns_for_sc(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_tabcolumns_for_sc(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _tabname varchar(150);\r\n  _substr varchar(540);\r\nBEGIN\r\n\r\n\t-- for select conditions\r\n  _tabname = (injson->'inputs')->>'table';\r\n  _substr = injson->>'substr';\r\n  \t\r\n  _substr = concat('%',upper(coalesce(_substr,'%')),'%');\r\n\r\n\t\r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n\tSELECT column_name as label,\r\n\t  column_name as value\r\n\tFROM information_schema.columns\r\n\tWHERE concat(table_schema,'.',table_name) = _tabname and \r\n\t  upper(column_name) like _substr\r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'[]');\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  _tabname varchar(150);\r\n  _substr varchar(540);\r\nBEGIN\r\n\r\n\t-- for select conditions\r\n  _tabname = (injson->'inputs')->>'table';\r\n  _substr = injson->>'substr';\r\n  \t\r\n  _substr = concat('%',upper(coalesce(_substr,'%')),'%');\r\n\r\n\t\r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n\tSELECT column_name as label,\r\n\t  column_name as value\r\n\tFROM information_schema.columns\r\n\tWHERE concat(table_schema,'.',table_name) = _tabname and \r\n\t  upper(column_name) like _substr\r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'[]');\r\nEND;\r\n
227329	framework	fn_tabcolumns_selforconfig_depselect	framework.fn_tabcolumns_selforconfig_depselect(injson  json,outjson out json)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_tabcolumns_selforconfig_depselect(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_tabcolumns_selforconfig_depselect(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_tabcolumns_selforconfig_depselect(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _tabname varchar(150);\r\n  _substr varchar(350);\r\n  _config json;\r\n  _key1 varchar(400);\r\nBEGIN\r\n  _config = (injson->'config');\r\n  \r\n  SELECT \r\n  \tcc.value->>'key'\r\n  FROM json_array_elements(_config) as cc \r\n  WHERE (cc.value->>'title') = 'relation table'\r\n  INTO _key1;\r\n\r\n  _tabname = (injson->'data')->>'relation_relation';\r\n  _substr = injson->>'substr';\t\r\n  \r\n  _substr = upper(concat('%',coalesce(_substr,'%'),'%'));\r\n  \r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n\tSELECT column_name as label,\r\n\t  column_name as value\r\n\tFROM information_schema.columns\r\n\tWHERE concat(table_schema,'.',table_name) = _tabname\r\n\t AND upper(column_name) like _substr\r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'[]');\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  _tabname varchar(150);\r\n  _substr varchar(350);\r\n  _config json;\r\n  _key1 varchar(400);\r\nBEGIN\r\n  _config = (injson->'config');\r\n  \r\n  SELECT \r\n  \tcc.value->>'key'\r\n  FROM json_array_elements(_config) as cc \r\n  WHERE (cc.value->>'title') = 'relation table'\r\n  INTO _key1;\r\n\r\n  _tabname = (injson->'data')->>'relation_relation';\r\n  _substr = injson->>'substr';\t\r\n  \r\n  _substr = upper(concat('%',coalesce(_substr,'%'),'%'));\r\n  \r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n\tSELECT column_name as label,\r\n\t  column_name as value\r\n\tFROM information_schema.columns\r\n\tWHERE concat(table_schema,'.',table_name) = _tabname\r\n\t AND upper(column_name) like _substr\r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'[]');\r\nEND;\r\n
227330	framework	fn_tabcolumns_selforconfig_multiselect	framework.fn_tabcolumns_selforconfig_multiselect(injson  json,outjson out json)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_tabcolumns_selforconfig_multiselect(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_tabcolumns_selforconfig_multiselect(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_tabcolumns_selforconfig_multiselect(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _tabname varchar(150);\r\n  _substr varchar(350);\r\n  _config json;\r\n  _key1 varchar(400);\r\nBEGIN\r\n  _config = (injson->'config');\r\n  \r\n  SELECT \r\n  \tcc.value->>'key'\r\n  FROM json_array_elements(_config) as cc \r\n  WHERE (cc.value->>'title') = 'multiselecttable'\r\n  INTO _key1;\r\n -- _key1 = _config->>'key';\r\n  \r\n  _tabname = (injson->'data')->>_key1;\r\n  _substr = injson->>'substr';\t\r\n  \r\n  _substr = upper(concat('%',coalesce(_substr,'%'),'%'));\r\n  \r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n\tSELECT column_name as label,\r\n\t  column_name as value\r\n\tFROM information_schema.columns\r\n\tWHERE concat(table_schema,'.',table_name) = _tabname\r\n\t AND upper(column_name) like _substr\r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'[]');\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  _tabname varchar(150);\r\n  _substr varchar(350);\r\n  _config json;\r\n  _key1 varchar(400);\r\nBEGIN\r\n  _config = (injson->'config');\r\n  \r\n  SELECT \r\n  \tcc.value->>'key'\r\n  FROM json_array_elements(_config) as cc \r\n  WHERE (cc.value->>'title') = 'multiselecttable'\r\n  INTO _key1;\r\n -- _key1 = _config->>'key';\r\n  \r\n  _tabname = (injson->'data')->>_key1;\r\n  _substr = injson->>'substr';\t\r\n  \r\n  _substr = upper(concat('%',coalesce(_substr,'%'),'%'));\r\n  \r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n\tSELECT column_name as label,\r\n\t  column_name as value\r\n\tFROM information_schema.columns\r\n\tWHERE concat(table_schema,'.',table_name) = _tabname\r\n\t AND upper(column_name) like _substr\r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'[]');\r\nEND;\r\n
227331	framework	fn_tabcolumns_selforconfig_relselect	framework.fn_tabcolumns_selforconfig_relselect(injson  json,outjson out json)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_tabcolumns_selforconfig_relselect(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_tabcolumns_selforconfig_relselect(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_tabcolumns_selforconfig_relselect(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _tabname varchar(150);\r\n  _substr varchar(350);\r\n  _config json;\r\n  _key1 varchar(400);\r\nBEGIN\r\n  _config = (injson->'config');\r\n  \r\n  SELECT \r\n  \tcc.value->>'key'\r\n  FROM json_array_elements(_config) as cc \r\n  WHERE (cc.value->>'title') = 'relation table'\r\n  INTO _key1;\r\n\r\n  _tabname = (injson->'data')->>_key1;\r\n  _substr = injson->>'substr';\t\r\n  \r\n  _substr = upper(concat('%',coalesce(_substr,'%'),'%'));\r\n  \r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n\tSELECT column_name as label,\r\n\t  column_name as value\r\n\tFROM information_schema.columns\r\n\tWHERE concat(table_schema,'.',table_name) = _tabname\r\n\t AND upper(column_name) like _substr\r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'[]');\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  _tabname varchar(150);\r\n  _substr varchar(350);\r\n  _config json;\r\n  _key1 varchar(400);\r\nBEGIN\r\n  _config = (injson->'config');\r\n  \r\n  SELECT \r\n  \tcc.value->>'key'\r\n  FROM json_array_elements(_config) as cc \r\n  WHERE (cc.value->>'title') = 'relation table'\r\n  INTO _key1;\r\n\r\n  _tabname = (injson->'data')->>_key1;\r\n  _substr = injson->>'substr';\t\r\n  \r\n  _substr = upper(concat('%',coalesce(_substr,'%'),'%'));\r\n  \r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n\tSELECT column_name as label,\r\n\t  column_name as value\r\n\tFROM information_schema.columns\r\n\tWHERE concat(table_schema,'.',table_name) = _tabname\r\n\t AND upper(column_name) like _substr\r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'[]');\r\nEND;\r\n
227384	public	fn_completed_colorblack	public.fn_completed_colorblack(t  bool,c out varchar)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_completed_colorblack(t  bool,c out varchar)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.fn_completed_colorblack(t  bool,c out varchar) \r\n*/\r\nCREATE OR REPLACE FUNCTION public.fn_completed_colorblack(t boolean, OUT c character varying)\n RETURNS character varying\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\tc = 'black';\r\n    IF not  t THEN\r\n    \tc = 'red';\r\n    END IF;\r\n\r\nEND;\r\n$function$\n	[{"argname":"t","argmode":"input","argtype":"bool"},{"argname":"c","argmode":"output","argtype":"varchar"}]	varchar	\r\nBEGIN\r\n\tc = 'black';\r\n    IF not  t THEN\r\n    \tc = 'red';\r\n    END IF;\r\n\r\nEND;\r\n
227333	framework	fn_userjson	framework.fn_userjson(sessid  bpchar,outjson out json)	USERJSON	2020-05-21 11:31:02.195905	1	f	fn_userjson(sessid  bpchar,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_userjson(sessid  bpchar,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_userjson(sessid character, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\r\n\tSELECT row_to_json(d)\r\n    FROM (\r\n      SELECT\r\n          u.roles, orgs as orgs,\r\n          u.id, u.fam, u.im,\r\n          u.ot, u.login,\r\n          u.usersettings, u.orgid,\r\n          s.id as sessid\r\n      FROM framework.sess as s\r\n          JOIN framework.users as u on u.id = s.userid\r\n      WHERE upper(s.id) = upper(sessid) and u.isactive\r\n    ) as d\r\n    INTO outjson;\r\n    IF outjson is null and (\r\n    \tSELECT "primaryAuthorization"\r\n        FROM framework.mainsettings WHERE isactiv\r\n       ) = '1'\r\n    THEN\r\n    \tperform raiserror('m401err');\r\n    END IF;\r\n    outjson = coalesce(outjson,'{}');\r\n\t\r\n\r\nEND;\r\n$function$\n	[{"argname":"sessid","argmode":"input","argtype":"bpchar"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nBEGIN\r\n\r\n\tSELECT row_to_json(d)\r\n    FROM (\r\n      SELECT\r\n          u.roles, orgs as orgs,\r\n          u.id, u.fam, u.im,\r\n          u.ot, u.login,\r\n          u.usersettings, u.orgid,\r\n          s.id as sessid\r\n      FROM framework.sess as s\r\n          JOIN framework.users as u on u.id = s.userid\r\n      WHERE upper(s.id) = upper(sessid) and u.isactive\r\n    ) as d\r\n    INTO outjson;\r\n    IF outjson is null and (\r\n    \tSELECT "primaryAuthorization"\r\n        FROM framework.mainsettings WHERE isactiv\r\n       ) = '1'\r\n    THEN\r\n    \tperform raiserror('m401err');\r\n    END IF;\r\n    outjson = coalesce(outjson,'{}');\r\n\t\r\n\r\nEND;\r\n
227335	framework	fn_userorgs	framework.fn_userorgs(injson  json,outjson out json)	Change user orgid	2020-05-21 11:31:02.195905	1	f	fn_userorgs(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_userorgs(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_userorgs(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\n  _orgs json;\r\n  _roles JSON;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n\t\r\n    SELECT\r\n    \tu.roles,\r\n        u.orgs\r\n    FROM framework.users as u\r\n    WHERE u.id = _userid\r\n    INTO _roles,_orgs;\r\n    \r\n    IF (\r\n\t    SELECT count(*) \r\n        FROM json_array_elements_text(_roles) \r\n        WHERE VALUE::varchar = '0'\r\n\t) = 0 THEN\r\n    \tSELECT\r\n        \tarray_to_json(array_agg(row_to_json(d))) \r\n        FROM (\r\n\t\t  SELECT\r\n\t\t\t  o.id as value,\r\n\t\t\t  o.orgname as label\r\n\t\t  FROM framework.orgs as o\r\n\t\t\t  JOIN json_array_elements_text(_orgs)  as o1 on o1.value::varchar::int = o.id\r\n  \t\t  UNION ALL \r\n\t\t  SELECT\r\n\t\t\t  o.id as value,\r\n\t\t\t  o.orgname as label\r\n\t\t  FROM framework.orgs as o\r\n\t\t\t  JOIN json_array_elements_text(_orgs)  as o1 on o1.value::varchar::int = o.parentid\r\n\t\t\r\n\t\t) as d\r\n        INTO outjson;    \r\n    ELSE\r\n    \tSELECT\r\n        \tarray_to_json(array_agg(row_to_json(d))) \r\n        FROM (\r\n\t\t  SELECT\r\n\t\t\t  o.id as value,\r\n\t\t\t  o.orgname as label\r\n\t\t  FROM framework.orgs as o\r\n\t\t) as d\r\n        INTO outjson;  \r\n    END IF;    \r\n    \r\n    outjson = coalesce(outjson,'[]');\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  _userid int;\r\n  _orgs json;\r\n  _roles JSON;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n\t\r\n    SELECT\r\n    \tu.roles,\r\n        u.orgs\r\n    FROM framework.users as u\r\n    WHERE u.id = _userid\r\n    INTO _roles,_orgs;\r\n    \r\n    IF (\r\n\t    SELECT count(*) \r\n        FROM json_array_elements_text(_roles) \r\n        WHERE VALUE::varchar = '0'\r\n\t) = 0 THEN\r\n    \tSELECT\r\n        \tarray_to_json(array_agg(row_to_json(d))) \r\n        FROM (\r\n\t\t  SELECT\r\n\t\t\t  o.id as value,\r\n\t\t\t  o.orgname as label\r\n\t\t  FROM framework.orgs as o\r\n\t\t\t  JOIN json_array_elements_text(_orgs)  as o1 on o1.value::varchar::int = o.id\r\n  \t\t  UNION ALL \r\n\t\t  SELECT\r\n\t\t\t  o.id as value,\r\n\t\t\t  o.orgname as label\r\n\t\t  FROM framework.orgs as o\r\n\t\t\t  JOIN json_array_elements_text(_orgs)  as o1 on o1.value::varchar::int = o.parentid\r\n\t\t\r\n\t\t) as d\r\n        INTO outjson;    \r\n    ELSE\r\n    \tSELECT\r\n        \tarray_to_json(array_agg(row_to_json(d))) \r\n        FROM (\r\n\t\t  SELECT\r\n\t\t\t  o.id as value,\r\n\t\t\t  o.orgname as label\r\n\t\t  FROM framework.orgs as o\r\n\t\t) as d\r\n        INTO outjson;  \r\n    END IF;    \r\n    \r\n    outjson = coalesce(outjson,'[]');\r\n\r\nEND;\r\n
227336	framework	fn_view_byid	framework.fn_view_byid(injson  json,outjson out json,roles out json)	GET VIEW DATA BY id	2020-05-21 11:31:02.195905	1	f	fn_view_byid(injson  json,outjson out json,roles out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_view_byid(injson  json,outjson out json,roles out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_view_byid(injson json, OUT outjson json, OUT roles json)\n RETURNS record\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE \r\n\t_id int;\r\nBEGIN\r\n  -- GET VIEW DATA BY id\r\n  _id = injson->>'id'; \t\r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n\tSELECT id as value, rolename as label \r\n\tFROM  framework.roles\r\n  ) as d\r\n  INTO roles; \r\n\r\n  SELECT \r\n  \trow_to_json(d)\r\n  FROM (\r\n     SELECT \r\n    \tv.id, v.title, v.tablename,\r\n        v.descr, v.path, v.pagination,\r\n        v.viewtype, v.config, v.orderby,\r\n        v.groupby, v.filters, v.acts,\r\n        v.roles, v.classname, v.ispagesize,\r\n        v.pagecount, v.foundcount, v.subscrible,\r\n        v.checker, v.api\r\n    FROM framework.views as v\r\n    WHERE v.id = _id\r\n ) as d\r\n INTO outjson;\r\n    \r\n outjson = coalesce(outjson,'{}');\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"},{"argname":"roles","argmode":"output","argtype":"json"}]	record	\r\nDECLARE \r\n\t_id int;\r\nBEGIN\r\n  -- GET VIEW DATA BY id\r\n  _id = injson->>'id'; \t\r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n\tSELECT id as value, rolename as label \r\n\tFROM  framework.roles\r\n  ) as d\r\n  INTO roles; \r\n\r\n  SELECT \r\n  \trow_to_json(d)\r\n  FROM (\r\n     SELECT \r\n    \tv.id, v.title, v.tablename,\r\n        v.descr, v.path, v.pagination,\r\n        v.viewtype, v.config, v.orderby,\r\n        v.groupby, v.filters, v.acts,\r\n        v.roles, v.classname, v.ispagesize,\r\n        v.pagecount, v.foundcount, v.subscrible,\r\n        v.checker, v.api\r\n    FROM framework.views as v\r\n    WHERE v.id = _id\r\n ) as d\r\n INTO outjson;\r\n    \r\n outjson = coalesce(outjson,'{}');\r\nEND;\r\n
227337	framework	fn_view_cols_for_fn	framework.fn_view_cols_for_fn(injson  json,outjson out json)	-- columns for visible_condition fncols	2020-05-21 11:31:02.195905	1	f	fn_view_cols_for_fn(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_view_cols_for_fn(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_view_cols_for_fn(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n\t_viewid int;\r\n    _n int;\r\n    _substr varchar(540);\r\nBEGIN\r\n\r\n    -- columns for fncols select_api\r\n    \r\n    _viewid = (injson->'inputs')->>'id';\r\n      \r\n    \r\n     /*SELECT\r\n        viewid\r\n    FROM framework.config\r\n    WHERE id = _n\r\n    INTO _viewid; */   \r\n    \r\n    SELECT\r\n        array_to_json(array_agg(row_to_json(d)))\r\n    FROM(\r\n       SELECT\r\n          concat(title,' / ',col) as label,\r\n          id::varchar as value\r\n       FROM framework.config\r\n       WHERE viewid = _viewid  \r\n       UNION\r\n       SELECT\r\n          value::varchar as label,\r\n          value::varchar as value\r\n       FROM json_array_elements_text('["_userid_", "_orgid_", "_orgs_", "_sesid_"]'::json)\r\n    ) as d\r\n    INTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n\t_viewid int;\r\n    _n int;\r\n    _substr varchar(540);\r\nBEGIN\r\n\r\n    -- columns for fncols select_api\r\n    \r\n    _viewid = (injson->'inputs')->>'id';\r\n      \r\n    \r\n     /*SELECT\r\n        viewid\r\n    FROM framework.config\r\n    WHERE id = _n\r\n    INTO _viewid; */   \r\n    \r\n    SELECT\r\n        array_to_json(array_agg(row_to_json(d)))\r\n    FROM(\r\n       SELECT\r\n          concat(title,' / ',col) as label,\r\n          id::varchar as value\r\n       FROM framework.config\r\n       WHERE viewid = _viewid  \r\n       UNION\r\n       SELECT\r\n          value::varchar as label,\r\n          value::varchar as value\r\n       FROM json_array_elements_text('["_userid_", "_orgid_", "_orgs_", "_sesid_"]'::json)\r\n    ) as d\r\n    INTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\n\r\nEND;\r\n
227426	sqlmanager	tr_foreignkeys_tr_title	sqlmanager.tr_foreignkeys_tr_title()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_foreignkeys_tr_title()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_foreignkeys_tr_title() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_foreignkeys_tr_title()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n\r\n\tIF NOT NEW.noscript and OLD.ftitle <> NEW.ftitle\r\n    THEN\r\n      squery = concat('\r\n        ALTER TABLE ', NEW.maintablename ,'\r\n          RENAME CONSTRAINT "',OLD.ftitle,'" TO "', NEW.ftitle  , '";\r\n      ');\r\n      \r\n      EXECUTE squery;\r\n          \r\n    END IF;\r\n    RETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n\r\n\tIF NOT NEW.noscript and OLD.ftitle <> NEW.ftitle\r\n    THEN\r\n      squery = concat('\r\n        ALTER TABLE ', NEW.maintablename ,'\r\n          RENAME CONSTRAINT "',OLD.ftitle,'" TO "', NEW.ftitle  , '";\r\n      ');\r\n      \r\n      EXECUTE squery;\r\n          \r\n    END IF;\r\n    RETURN NEW;\r\nEND;\r\n
227338	framework	fn_view_cols_for_param	framework.fn_view_cols_for_param(injson  json,outjson out json)	-- columns for visible_condition select_api	2020-05-21 11:31:02.195905	1	f	fn_view_cols_for_param(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_view_cols_for_param(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_view_cols_for_param(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n\t_viewid int;\r\n    _n int;\r\n    _substr varchar(540);\r\nBEGIN\r\n\r\n\t-- columns for visible_condition select_api\r\n    \r\n\t_n = (injson->'inputs')->>'actionid';\r\n\t_substr = injson->>'substr';\r\n    --_viewid = (injson->'inputs')->>'viewid';\r\n  \t\r\n    _substr = coalesce(_substr,'%');\r\n    \r\n \t_viewid = COALESCE(_viewid,(SELECT\r\n    \tviewid\r\n    FROM framework.actions\r\n    WHERE id = _n\r\n    ));    \r\n    \r\n    SELECT\r\n    \tarray_to_json(array_agg(row_to_json(d)))\r\n    FROM (\r\n\t  SELECT\r\n\t\t  concat(title,' / ',col) as label,\r\n\t\t  id as value\r\n\t  FROM framework.config\r\n\t  WHERE viewid = _viewid and \r\n\t\t  id::varchar like _substr\r\n\t) as d\r\n    INTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n\t_viewid int;\r\n    _n int;\r\n    _substr varchar(540);\r\nBEGIN\r\n\r\n\t-- columns for visible_condition select_api\r\n    \r\n\t_n = (injson->'inputs')->>'actionid';\r\n\t_substr = injson->>'substr';\r\n    --_viewid = (injson->'inputs')->>'viewid';\r\n  \t\r\n    _substr = coalesce(_substr,'%');\r\n    \r\n \t_viewid = COALESCE(_viewid,(SELECT\r\n    \tviewid\r\n    FROM framework.actions\r\n    WHERE id = _n\r\n    ));    \r\n    \r\n    SELECT\r\n    \tarray_to_json(array_agg(row_to_json(d)))\r\n    FROM (\r\n\t  SELECT\r\n\t\t  concat(title,' / ',col) as label,\r\n\t\t  id as value\r\n\t  FROM framework.config\r\n\t  WHERE viewid = _viewid and \r\n\t\t  id::varchar like _substr\r\n\t) as d\r\n    INTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\n\r\nEND;\r\n
227339	framework	fn_view_cols_for_sc	framework.fn_view_cols_for_sc(injson  json,outjson out json)	-- columns for visible_condition select_api	2020-05-21 11:31:02.195905	1	f	fn_view_cols_for_sc(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_view_cols_for_sc(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_view_cols_for_sc(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n\t_viewid int;\r\n    _n int;\r\n    _substr varchar(540);\r\nBEGIN\r\n\r\n\t-- columns for visible_condition select_api\r\n    \r\n\t_n = (injson->'inputs')->>'configid';\r\n\t_substr = injson->>'substr';\r\n    _viewid = (injson->'inputs')->>'viewid';\r\n  \t\r\n    _substr = coalesce(_substr,'%');\r\n    \r\n \t_viewid = COALESCE(_viewid,(SELECT\r\n    \tviewid\r\n    FROM framework.config\r\n    WHERE id = _n\r\n    ));    \r\n    \r\n    SELECT\r\n    \tarray_to_json(array_agg(row_to_json(d)))\r\n    FROM\r\n    (SELECT\r\n    \tconcat(title,' / ',col) as label,\r\n        id as value\r\n    FROM framework.config\r\n    WHERE viewid = _viewid and \r\n    \tid::varchar like _substr) as d\r\n    INTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n\t_viewid int;\r\n    _n int;\r\n    _substr varchar(540);\r\nBEGIN\r\n\r\n\t-- columns for visible_condition select_api\r\n    \r\n\t_n = (injson->'inputs')->>'configid';\r\n\t_substr = injson->>'substr';\r\n    _viewid = (injson->'inputs')->>'viewid';\r\n  \t\r\n    _substr = coalesce(_substr,'%');\r\n    \r\n \t_viewid = COALESCE(_viewid,(SELECT\r\n    \tviewid\r\n    FROM framework.config\r\n    WHERE id = _n\r\n    ));    \r\n    \r\n    SELECT\r\n    \tarray_to_json(array_agg(row_to_json(d)))\r\n    FROM\r\n    (SELECT\r\n    \tconcat(title,' / ',col) as label,\r\n        id as value\r\n    FROM framework.config\r\n    WHERE viewid = _viewid and \r\n    \tid::varchar like _substr) as d\r\n    INTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\n\r\nEND;\r\n
227340	framework	fn_view_deletebyid	framework.fn_view_deletebyid(injson  json)	delete view	2020-05-21 11:31:02.195905	1	f	fn_view_deletebyid(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_view_deletebyid(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_view_deletebyid(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE \r\n\tolddata json;\r\n    view_headerdata json;\r\n    _vid int;\r\n    _user_id int;\r\nBEGIN\r\n\t_vid = injson->>'id';\r\n    _user_id = injson->>'userid';\r\n    \r\n    SELECT row_to_json(d)\r\n    FROM\r\n    (SELECT\r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.actions\r\n          WHERE viewid = _vid \r\n      ) as d) as actions,\r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.visible_condition\r\n          WHERE configid in (\r\n              SELECT id FROM framework.config WHERE viewid = _vid\r\n            )\r\n      ) as d) as visible_condition,\r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.select_condition\r\n          WHERE configid in (\r\n              SELECT id FROM framework.config WHERE viewid = _vid\r\n            )\r\n      ) as d) as select_condition,\r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.defaultval\r\n          WHERE configid in (\r\n             SELECT id FROM framework.config WHERE viewid = _vid\r\n          )\r\n      ) as d) as defaultval,\r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.filters\r\n          WHERE viewid = _vid \r\n      ) as d) as filters,      \r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.config\r\n          WHERE viewid = _vid \r\n      ) as d) as config\r\n    ) as d\r\n    INTO olddata;\r\n\r\n\tIF olddata->>'filters' IS NULL THEN\r\n    \tolddata = olddata::jsonb - 'filters' || '{"filters":"[]"}';\r\n    END IF;\r\n\tIF olddata->>'actions' IS NULL THEN\r\n    \tolddata = olddata::jsonb - 'actions' || '{"actions":"[]"}';\r\n    END IF;\r\n\tIF olddata->>'config' IS NULL THEN\r\n    \tolddata = olddata::jsonb - 'config' || '{"config":"[]"}';\r\n    END IF;\r\n\tIF olddata->>'defaultval' IS NULL THEN\r\n    \tolddata = olddata::jsonb - 'defaultval' || '{"defaultval":"[]"}';\r\n    END IF;\r\n\tIF olddata->>'visible_condition' IS NULL THEN\r\n    \tolddata = olddata::jsonb - 'visible_condition' || '{"visible_condition":"[]"}';\r\n    END IF;\r\n\tIF olddata->>'select_condition' IS NULL THEN\r\n    \tolddata = olddata::jsonb - 'select_condition' || '{"select_condition":"[]"}';\r\n    END IF;\r\n    \r\n--\tperform raiserror(olddata::varchar);\r\n\r\n    SELECT row_to_json(d)\r\n    FROM (\r\n    \tSELECT *\r\n        FROM framework.views\r\n\t    WHERE id = _vid\r\n        ) AS d\r\n    INTO view_headerdata;\r\n    \r\n    olddata = view_headerdata::jsonb || olddata::jsonb;\r\n    \r\n    DELETE FROM framework.views\r\n    WHERE id = _vid;\r\n    \r\n    INSERT INTO framework.logtable(\r\n      tablename, tableid, \r\n      opertype, oldata, newdata,\r\n      userid\r\n    ) VALUES (\r\n    \t'framework.views', _vid::varchar,\r\n        '3', olddata, '[]'::json,\r\n        _user_id\r\n    );\r\n     \r\n    \r\n    --PERFORM raiserror(format('fn_view_deletebyid, id=(%s), userid=(%s), olddata=(%s)', _vid, _user_id, olddata));\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE \r\n\tolddata json;\r\n    view_headerdata json;\r\n    _vid int;\r\n    _user_id int;\r\nBEGIN\r\n\t_vid = injson->>'id';\r\n    _user_id = injson->>'userid';\r\n    \r\n    SELECT row_to_json(d)\r\n    FROM\r\n    (SELECT\r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.actions\r\n          WHERE viewid = _vid \r\n      ) as d) as actions,\r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.visible_condition\r\n          WHERE configid in (\r\n              SELECT id FROM framework.config WHERE viewid = _vid\r\n            )\r\n      ) as d) as visible_condition,\r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.select_condition\r\n          WHERE configid in (\r\n              SELECT id FROM framework.config WHERE viewid = _vid\r\n            )\r\n      ) as d) as select_condition,\r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.defaultval\r\n          WHERE configid in (\r\n             SELECT id FROM framework.config WHERE viewid = _vid\r\n          )\r\n      ) as d) as defaultval,\r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.filters\r\n          WHERE viewid = _vid \r\n      ) as d) as filters,      \r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.config\r\n          WHERE viewid = _vid \r\n      ) as d) as config\r\n    ) as d\r\n    INTO olddata;\r\n\r\n\tIF olddata->>'filters' IS NULL THEN\r\n    \tolddata = olddata::jsonb - 'filters' || '{"filters":"[]"}';\r\n    END IF;\r\n\tIF olddata->>'actions' IS NULL THEN\r\n    \tolddata = olddata::jsonb - 'actions' || '{"actions":"[]"}';\r\n    END IF;\r\n\tIF olddata->>'config' IS NULL THEN\r\n    \tolddata = olddata::jsonb - 'config' || '{"config":"[]"}';\r\n    END IF;\r\n\tIF olddata->>'defaultval' IS NULL THEN\r\n    \tolddata = olddata::jsonb - 'defaultval' || '{"defaultval":"[]"}';\r\n    END IF;\r\n\tIF olddata->>'visible_condition' IS NULL THEN\r\n    \tolddata = olddata::jsonb - 'visible_condition' || '{"visible_condition":"[]"}';\r\n    END IF;\r\n\tIF olddata->>'select_condition' IS NULL THEN\r\n    \tolddata = olddata::jsonb - 'select_condition' || '{"select_condition":"[]"}';\r\n    END IF;\r\n    \r\n--\tperform raiserror(olddata::varchar);\r\n\r\n    SELECT row_to_json(d)\r\n    FROM (\r\n    \tSELECT *\r\n        FROM framework.views\r\n\t    WHERE id = _vid\r\n        ) AS d\r\n    INTO view_headerdata;\r\n    \r\n    olddata = view_headerdata::jsonb || olddata::jsonb;\r\n    \r\n    DELETE FROM framework.views\r\n    WHERE id = _vid;\r\n    \r\n    INSERT INTO framework.logtable(\r\n      tablename, tableid, \r\n      opertype, oldata, newdata,\r\n      userid\r\n    ) VALUES (\r\n    \t'framework.views', _vid::varchar,\r\n        '3', olddata, '[]'::json,\r\n        _user_id\r\n    );\r\n     \r\n    \r\n    --PERFORM raiserror(format('fn_view_deletebyid, id=(%s), userid=(%s), olddata=(%s)', _vid, _user_id, olddata));\r\n\r\nEND;\r\n
227341	framework	fn_view_getByPath	framework.fn_view_getByPath(_path  varchar,_viewtype  varchar,outjson out json)	get view config by path	2020-05-21 11:31:02.195905	1	f	fn_view_getByPath(_path  varchar,_viewtype  varchar,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_view_getByPath(_path  varchar,_viewtype  varchar,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework."fn_view_getByPath"(_path character varying, _viewtype character varying, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\n--DECLARE\r\n  --_calendar_actions_cols varchar(500); -- FOR ERROR\r\n -- _relation varchar(250);\r\n -- _relation_columns json;\r\nBEGIN\r\n IF (SELECT count(v.id)  \r\n     FROM framework.views as v\r\n      WHERE v."path" = _path ) = 0\r\n THEN\r\n     PERFORM raiserror('view is not found');\r\n END IF;\r\n \r\n IF _viewtype = 'list' and (SELECT count(v.id)  \r\n     FROM framework.views as v\r\n      WHERE v."path" = _path and v.viewtype in ('table','tiles','table_api','calendar')) = 0\r\n THEN\r\n     PERFORM raiserror('view with type list is not found');\r\n END IF;\r\n \r\n IF _viewtype = 'getone' and (SELECT count(v.id)  \r\n     FROM framework.views as v\r\n      WHERE v."path" = _path and v.viewtype like '%form%') = 0\r\n THEN\r\n     PERFORM raiserror('view with type getone is not found');\r\n END IF; \r\n \r\n IF (\r\n  SELECT v.viewtype \r\n  FROM framework.views as v\r\n  WHERE v."path" = _path ) = 'calendar' \r\n THEN\r\n     -- Calendar checks\r\n    \r\n    IF (\r\n        SELECT count(c.id) \r\n        FROM framework.views as v\r\n            JOIN framework.config as c on c.viewid = v.id and c.visible and c.type = 'calendarStartDate'\r\n        WHERE v."path" = _path \r\n    ) = 0\r\n    THEN\r\n         PERFORM raiserror('view with type "calendar" must have one column typeof "calendarStartDate"');\r\n     END IF;\r\n    \r\n    \r\n    IF (\r\n        SELECT count(c.id) \r\n        FROM framework.views as v\r\n            JOIN framework.config as c on c.viewid = v.id and c.visible and c.type = 'calendarEndDate'\r\n        WHERE v."path" = _path \r\n    ) = 0\r\n    THEN\r\n         PERFORM raiserror('view with type "calendar" must have one column typeof "calendarEndDate"');\r\n     END IF;\r\n    \r\n    IF (\r\n        SELECT count(c.id) \r\n        FROM framework.views as v\r\n            JOIN framework.config as c on c.viewid = v.id and c.visible and c.type = 'calendarTitle'\r\n        WHERE v."path" = _path \r\n    ) = 0\r\n    THEN\r\n         PERFORM raiserror('view with type "calendar" must have one column typeof "calendarTitle"');\r\n     END IF;\r\n END IF;\r\n \r\n SELECT\r\n   row_to_json(d)\r\n FROM\r\n  (SELECT\r\n      v.id,\r\n    v.title,\r\n    v.pagecount,\r\n    v.pagination,\r\n    v.checker,\r\n    v.classname,\r\n    v.orderby,\r\n    v.ispagesize,\r\n    v.subscrible,\r\n    COALESCE((SELECT\r\n         array_to_json(array_agg(row_to_json(d)))\r\n     FROM\r\n    (SELECT\r\n        value as value,\r\n        value as label\r\n    FROM json_array_elements(v.roles) as rl) as d),'[]') as roles\r\n        \r\n    ,\r\n    v.viewtype,\r\n    v.tablename,\r\n    \r\n    COALESCE((\r\n      SELECT\r\n          array_to_json(array_agg(row_to_json(d)))\r\n      FROM \r\n       (\r\n        SELECT\r\n            f.title,\r\n            f.id,\r\n            f.type,\r\n            f.t,\r\n            f.classname,\r\n            c.col as column,\r\n            \r\n            CASE WHEN f.columns is not null\r\n            THEN\r\n            COALESCE((\r\n              SELECT\r\n                array_to_json(array_agg(row_to_json(d)))\r\n              FROM\r\n                (\r\n                  SELECT\r\n                      cc.col as label,\r\n                      cc.title as value,\r\n                      concat(cc.col,'_',cc.id::varchar) as key,\r\n                      CASE WHEN cc.related THEN cc.t\r\n                      ELSE '1'\r\n                      END as t\r\n                  FROM json_array_elements_text(f.columns) as ff\r\n                      JOIN framework.config as cc on cc.viewid = v.id and (\r\n                           cc.title = ff.value::varchar OR cc.id::varchar = ff.value::varchar\r\n                      )\r\n                ) as d),'[]')\r\n            ELSE\r\n              null\r\n            END as columns,           \r\n            COALESCE((SELECT\r\n                array_to_json(array_agg(row_to_json(d)))\r\n             FROM\r\n            (SELECT\r\n                value as value,\r\n                value as label\r\n            FROM json_array_elements(f.roles) as rl) as d),'[]') as roles,\r\n            f."table"\r\n        FROM framework.filters as f\r\n            LEFT JOIN framework.config as c on c.id = f.val_desc\r\n        WHERE f.viewid = v.id\r\n        ORDER BY f.column_order\r\n    ) as d),'[]') as filters,\r\n    \r\n   COALESCE( (SELECT\r\n            array_to_json(array_agg(row_to_json(d)))\r\n     FROM (\r\n      SELECT\r\n          a.act_url as act,\r\n        a.title,\r\n        a.icon,\r\n        a.classname,\r\n        a.act_type as "type",\r\n        a.main_action as ismain,\r\n        coalesce((SELECT\r\n           array_to_json(array_agg(row_to_json(d)))\r\n         FROM\r\n            (SELECT\r\n                value as value,\r\n                value as label\r\n            FROM json_array_elements(a.roles) as rl) as d),'[]') as roles\r\n        ,\r\n        a.forevery as isforevery,\r\n        a.ask_confirm as actapiconfirm,\r\n        a.refresh_data as actapirefresh,\r\n        upper(a.api_type) as actapitype,\r\n        a.api_method as actapimethod,\r\n        (SELECT\r\n            array_to_json(array_agg(row_to_json(d)))\r\n         FROM\r\n            (SELECT\r\n              CASE WHEN ap.val_desc is not null\r\n              THEN\r\n              json_build_object(\r\n                  'value',cc.title,\r\n                  'label',cc.title,\r\n                  't', cc.t,\r\n                  'key',concat(cc.col,'_',cc.id::varchar)\r\n              )\r\n              ELSE\r\n                  null\r\n              END\r\n               as paramcolumn,\r\n             ap.paramconst,\r\n             ap.paraminput,\r\n             ap.paramt,\r\n             ap.paramtitle,\r\n             ap.query_type\r\n            FROM framework.act_parametrs as ap\r\n                LEFT JOIN framework.config as cc on cc.id = ap.val_desc\r\n            WHERE ap.actionid = a.id\r\n            ORDER BY ap.orderby\r\n            ) as d\r\n        ) as parametrs,\r\n       (SELECT\r\n               array_to_json(array_agg(row_to_json(d)))\r\n        FROM\r\n        (\r\n        SELECT\r\n            av.value,\r\n            json_build_object(\r\n                'label',cc.col,\r\n                't',cc.t,\r\n                'value', cc.title,\r\n                'key', concat(cc.col,'_',cc.id::varchar)\r\n            ) as col,\r\n            json_build_object('value',op.value,'js',op.js) as operation\r\n        FROM framework.act_visible_condions as av\r\n            LEFT JOIN framework.operations as op on op.value = av.operation\r\n            LEFT JOIN framework.config as cc on cc.viewid = v.id and cc.id = av.val_desc\r\n        WHERE av.actionid = a.id\r\n        ) as d) as act_visible_condition \r\n      FROM framework.actions as a\r\n      WHERE a.viewid = v.id\r\n      ORDER BY a.column_order) as d\r\n    \r\n    ),'[]') as acts\r\n    ,\r\n    framework.fn_config_to_json(v.id) as config\r\n  FROM framework.views as v\r\n  WHERE v."path" = _path) as d\r\n  INTO outjson;\r\n\r\nEND;\r\n$function$\n	[{"argname":"_path","argmode":"input","argtype":"varchar"},{"argname":"_viewtype","argmode":"input","argtype":"varchar"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\n--DECLARE\r\n  --_calendar_actions_cols varchar(500); -- FOR ERROR\r\n -- _relation varchar(250);\r\n -- _relation_columns json;\r\nBEGIN\r\n IF (SELECT count(v.id)  \r\n     FROM framework.views as v\r\n      WHERE v."path" = _path ) = 0\r\n THEN\r\n     PERFORM raiserror('view is not found');\r\n END IF;\r\n \r\n IF _viewtype = 'list' and (SELECT count(v.id)  \r\n     FROM framework.views as v\r\n      WHERE v."path" = _path and v.viewtype in ('table','tiles','table_api','calendar')) = 0\r\n THEN\r\n     PERFORM raiserror('view with type list is not found');\r\n END IF;\r\n \r\n IF _viewtype = 'getone' and (SELECT count(v.id)  \r\n     FROM framework.views as v\r\n      WHERE v."path" = _path and v.viewtype like '%form%') = 0\r\n THEN\r\n     PERFORM raiserror('view with type getone is not found');\r\n END IF; \r\n \r\n IF (\r\n  SELECT v.viewtype \r\n  FROM framework.views as v\r\n  WHERE v."path" = _path ) = 'calendar' \r\n THEN\r\n     -- Calendar checks\r\n    \r\n    IF (\r\n        SELECT count(c.id) \r\n        FROM framework.views as v\r\n            JOIN framework.config as c on c.viewid = v.id and c.visible and c.type = 'calendarStartDate'\r\n        WHERE v."path" = _path \r\n    ) = 0\r\n    THEN\r\n         PERFORM raiserror('view with type "calendar" must have one column typeof "calendarStartDate"');\r\n     END IF;\r\n    \r\n    \r\n    IF (\r\n        SELECT count(c.id) \r\n        FROM framework.views as v\r\n            JOIN framework.config as c on c.viewid = v.id and c.visible and c.type = 'calendarEndDate'\r\n        WHERE v."path" = _path \r\n    ) = 0\r\n    THEN\r\n         PERFORM raiserror('view with type "calendar" must have one column typeof "calendarEndDate"');\r\n     END IF;\r\n    \r\n    IF (\r\n        SELECT count(c.id) \r\n        FROM framework.views as v\r\n            JOIN framework.config as c on c.viewid = v.id and c.visible and c.type = 'calendarTitle'\r\n        WHERE v."path" = _path \r\n    ) = 0\r\n    THEN\r\n         PERFORM raiserror('view with type "calendar" must have one column typeof "calendarTitle"');\r\n     END IF;\r\n END IF;\r\n \r\n SELECT\r\n   row_to_json(d)\r\n FROM\r\n  (SELECT\r\n      v.id,\r\n    v.title,\r\n    v.pagecount,\r\n    v.pagination,\r\n    v.checker,\r\n    v.classname,\r\n    v.orderby,\r\n    v.ispagesize,\r\n    v.subscrible,\r\n    COALESCE((SELECT\r\n         array_to_json(array_agg(row_to_json(d)))\r\n     FROM\r\n    (SELECT\r\n        value as value,\r\n        value as label\r\n    FROM json_array_elements(v.roles) as rl) as d),'[]') as roles\r\n        \r\n    ,\r\n    v.viewtype,\r\n    v.tablename,\r\n    \r\n    COALESCE((\r\n      SELECT\r\n          array_to_json(array_agg(row_to_json(d)))\r\n      FROM \r\n       (\r\n        SELECT\r\n            f.title,\r\n            f.id,\r\n            f.type,\r\n            f.t,\r\n            f.classname,\r\n            c.col as column,\r\n            \r\n            CASE WHEN f.columns is not null\r\n            THEN\r\n            COALESCE((\r\n              SELECT\r\n                array_to_json(array_agg(row_to_json(d)))\r\n              FROM\r\n                (\r\n                  SELECT\r\n                      cc.col as label,\r\n                      cc.title as value,\r\n                      concat(cc.col,'_',cc.id::varchar) as key,\r\n                      CASE WHEN cc.related THEN cc.t\r\n                      ELSE '1'\r\n                      END as t\r\n                  FROM json_array_elements_text(f.columns) as ff\r\n                      JOIN framework.config as cc on cc.viewid = v.id and (\r\n                           cc.title = ff.value::varchar OR cc.id::varchar = ff.value::varchar\r\n                      )\r\n                ) as d),'[]')\r\n            ELSE\r\n              null\r\n            END as columns,           \r\n            COALESCE((SELECT\r\n                array_to_json(array_agg(row_to_json(d)))\r\n             FROM\r\n            (SELECT\r\n                value as value,\r\n                value as label\r\n            FROM json_array_elements(f.roles) as rl) as d),'[]') as roles,\r\n            f."table"\r\n        FROM framework.filters as f\r\n            LEFT JOIN framework.config as c on c.id = f.val_desc\r\n        WHERE f.viewid = v.id\r\n        ORDER BY f.column_order\r\n    ) as d),'[]') as filters,\r\n    \r\n   COALESCE( (SELECT\r\n            array_to_json(array_agg(row_to_json(d)))\r\n     FROM (\r\n      SELECT\r\n          a.act_url as act,\r\n        a.title,\r\n        a.icon,\r\n        a.classname,\r\n        a.act_type as "type",\r\n        a.main_action as ismain,\r\n        coalesce((SELECT\r\n           array_to_json(array_agg(row_to_json(d)))\r\n         FROM\r\n            (SELECT\r\n                value as value,\r\n                value as label\r\n            FROM json_array_elements(a.roles) as rl) as d),'[]') as roles\r\n        ,\r\n        a.forevery as isforevery,\r\n        a.ask_confirm as actapiconfirm,\r\n        a.refresh_data as actapirefresh,\r\n        upper(a.api_type) as actapitype,\r\n        a.api_method as actapimethod,\r\n        (SELECT\r\n            array_to_json(array_agg(row_to_json(d)))\r\n         FROM\r\n            (SELECT\r\n              CASE WHEN ap.val_desc is not null\r\n              THEN\r\n              json_build_object(\r\n                  'value',cc.title,\r\n                  'label',cc.title,\r\n                  't', cc.t,\r\n                  'key',concat(cc.col,'_',cc.id::varchar)\r\n              )\r\n              ELSE\r\n                  null\r\n              END\r\n               as paramcolumn,\r\n             ap.paramconst,\r\n             ap.paraminput,\r\n             ap.paramt,\r\n             ap.paramtitle,\r\n             ap.query_type\r\n            FROM framework.act_parametrs as ap\r\n                LEFT JOIN framework.config as cc on cc.id = ap.val_desc\r\n            WHERE ap.actionid = a.id\r\n            ORDER BY ap.orderby\r\n            ) as d\r\n        ) as parametrs,\r\n       (SELECT\r\n               array_to_json(array_agg(row_to_json(d)))\r\n        FROM\r\n        (\r\n        SELECT\r\n            av.value,\r\n            json_build_object(\r\n                'label',cc.col,\r\n                't',cc.t,\r\n                'value', cc.title,\r\n                'key', concat(cc.col,'_',cc.id::varchar)\r\n            ) as col,\r\n            json_build_object('value',op.value,'js',op.js) as operation\r\n        FROM framework.act_visible_condions as av\r\n            LEFT JOIN framework.operations as op on op.value = av.operation\r\n            LEFT JOIN framework.config as cc on cc.viewid = v.id and cc.id = av.val_desc\r\n        WHERE av.actionid = a.id\r\n        ) as d) as act_visible_condition \r\n      FROM framework.actions as a\r\n      WHERE a.viewid = v.id\r\n      ORDER BY a.column_order) as d\r\n    \r\n    ),'[]') as acts\r\n    ,\r\n    framework.fn_config_to_json(v.id) as config\r\n  FROM framework.views as v\r\n  WHERE v."path" = _path) as d\r\n  INTO outjson;\r\n\r\nEND;\r\n
227349	framework	fn_viewnotif_get	framework.fn_viewnotif_get(injson  json,outjson out json)	FOR WS NOTFICATIONS	2020-05-21 11:31:02.195905	1	f	fn_viewnotif_get(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_viewnotif_get(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_viewnotif_get(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _viewid int;\r\n  _userid int;\r\n  viewpath varchar;\r\n  ids json;\r\nBEGIN\r\n\r\n\t-- FOR WS NOTFICATIONS\r\n\r\n\tviewpath = injson->>'viewpath';\r\n \t_userid = injson->>'userid';   \r\n    ids = injson->>'ids';\r\n\r\n\tIF viewpath is null THEN\r\n    \tperform raiserror('no viewpath');\r\n    END IF;\r\n     \r\n\tSELECT \r\n    \tv.id\r\n    FROM framework.views as v\r\n\tWHERE v.path = viewpath\r\n    INTO _viewid;\r\n    \r\n\tIF _viewid is null THEN\r\n    \tperform raiserror('no viewid');\r\n    END IF;\r\n    \r\n    -- СТАРЫЙ РАБОЧИЙ КОД \r\n    IF ids is not NULL and ids::varchar <> '[]'\r\n    THEN \r\n      SELECT array_to_json(array_agg(row_to_json(d)))\r\n      FROM (\r\n\t\tSELECT *\r\n\t\tFROM framework.viewsnotification as v\r\n\t\t\tJOIN json_array_elements_text(ids) as n on (n.value::varchar = v.tableid or v.tableid is null)\r\n\t\tWHERE v.viewid = _viewid and \r\n\t\t\t (v.foruser = _userid or v.foruser is null) and not v.isread and not v.issend\r\n      ) as d    \r\n       INTO outjson; \r\n    ELSE\r\n      SELECT array_to_json(array_agg(row_to_json(d)))\r\n      FROM (\r\n\t\tSELECT *\r\n\t\tFROM framework.viewsnotification as v\r\n\t\t   -- JOIN json_array_elements_text(ids) as n on (n.value::varchar = v.tableid or v.tableid is null)\r\n\t\tWHERE v.viewid = _viewid and v.tableid is null and\r\n\t\t\t (v.foruser = _userid or v.foruser is null) and not v.isread and not v.issend\r\n       ) as d    \r\n       INTO outjson; \r\n    END IF;  \r\n    -- НОВЫЙ КОД ГДЕ РАСКОМЕНТИРОВАН v.tableid is null\r\n/*    SELECT array_to_json(array_agg(row_to_json(d)))\r\n    FROM\r\n    (SELECT *\r\n    FROM framework.viewsnotification as v\r\n    \tJOIN json_array_elements_text(ids) as n on (n.value::varchar = v.tableid or v.tableid is null)\r\n    WHERE v.viewid = _viewid and \r\n    \t (v.foruser = _userid or v.foruser is null) and not v.isread and not v.issend\r\n     ) as d    \r\n     INTO outjson;      */\r\n\t\r\n    outjson = COALESCE(outjson,'[]');\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  _viewid int;\r\n  _userid int;\r\n  viewpath varchar;\r\n  ids json;\r\nBEGIN\r\n\r\n\t-- FOR WS NOTFICATIONS\r\n\r\n\tviewpath = injson->>'viewpath';\r\n \t_userid = injson->>'userid';   \r\n    ids = injson->>'ids';\r\n\r\n\tIF viewpath is null THEN\r\n    \tperform raiserror('no viewpath');\r\n    END IF;\r\n     \r\n\tSELECT \r\n    \tv.id\r\n    FROM framework.views as v\r\n\tWHERE v.path = viewpath\r\n    INTO _viewid;\r\n    \r\n\tIF _viewid is null THEN\r\n    \tperform raiserror('no viewid');\r\n    END IF;\r\n    \r\n    -- СТАРЫЙ РАБОЧИЙ КОД \r\n    IF ids is not NULL and ids::varchar <> '[]'\r\n    THEN \r\n      SELECT array_to_json(array_agg(row_to_json(d)))\r\n      FROM (\r\n\t\tSELECT *\r\n\t\tFROM framework.viewsnotification as v\r\n\t\t\tJOIN json_array_elements_text(ids) as n on (n.value::varchar = v.tableid or v.tableid is null)\r\n\t\tWHERE v.viewid = _viewid and \r\n\t\t\t (v.foruser = _userid or v.foruser is null) and not v.isread and not v.issend\r\n      ) as d    \r\n       INTO outjson; \r\n    ELSE\r\n      SELECT array_to_json(array_agg(row_to_json(d)))\r\n      FROM (\r\n\t\tSELECT *\r\n\t\tFROM framework.viewsnotification as v\r\n\t\t   -- JOIN json_array_elements_text(ids) as n on (n.value::varchar = v.tableid or v.tableid is null)\r\n\t\tWHERE v.viewid = _viewid and v.tableid is null and\r\n\t\t\t (v.foruser = _userid or v.foruser is null) and not v.isread and not v.issend\r\n       ) as d    \r\n       INTO outjson; \r\n    END IF;  \r\n    -- НОВЫЙ КОД ГДЕ РАСКОМЕНТИРОВАН v.tableid is null\r\n/*    SELECT array_to_json(array_agg(row_to_json(d)))\r\n    FROM\r\n    (SELECT *\r\n    FROM framework.viewsnotification as v\r\n    \tJOIN json_array_elements_text(ids) as n on (n.value::varchar = v.tableid or v.tableid is null)\r\n    WHERE v.viewid = _viewid and \r\n    \t (v.foruser = _userid or v.foruser is null) and not v.isread and not v.issend\r\n     ) as d    \r\n     INTO outjson;      */\r\n\t\r\n    outjson = COALESCE(outjson,'[]');\r\nEND;\r\n
227441	sqlmanager	tr_tablecolumns_tr_del	sqlmanager.tr_tablecolumns_tr_del()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_tablecolumns_tr_del()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_tablecolumns_tr_del() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_tablecolumns_tr_del()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n   squery varchar;\r\n\r\nBEGIN\r\n\r\n\tIF not OLD.noscript\r\n    THEN\r\n      squery = concat('\r\n          ALTER TABLE ',OLD.tablename,'\r\n            DROP COLUMN "',OLD.colname,'";'\r\n      );\r\n      \r\n      EXECUTE squery;    \r\n    END IF;\r\n    \r\n    RETURN OLD;\r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n   squery varchar;\r\n\r\nBEGIN\r\n\r\n\tIF not OLD.noscript\r\n    THEN\r\n      squery = concat('\r\n          ALTER TABLE ',OLD.tablename,'\r\n            DROP COLUMN "',OLD.colname,'";'\r\n      );\r\n      \r\n      EXECUTE squery;    \r\n    END IF;\r\n    \r\n    RETURN OLD;\r\n\r\nEND;\r\n
227343	framework	fn_view_getByPath_showSQL	framework.fn_view_getByPath_showSQL(_path  varchar,outjson out json)	for show sql button	2020-05-21 11:31:02.195905	1	f	fn_view_getByPath_showSQL(_path  varchar,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_view_getByPath_showSQL(_path  varchar,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework."fn_view_getByPath_showSQL"(_path character varying, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\n--DECLARE\r\n  --variable_name datatype;\r\nBEGIN\r\n IF (SELECT count(v.id)  \r\n     FROM framework.views as v\r\n \t WHERE v."path" = _path ) = 0\r\n THEN\r\n \tPERFORM raiserror('view is not found');\r\n END IF;\r\n \r\n\r\n \r\n SELECT\r\n   row_to_json(d)\r\n FROM\r\n  (SELECT\r\n  \tv.id,\r\n    v.title,\r\n    v.pagecount,\r\n    v.pagination,\r\n    v.checker,\r\n    v.classname,\r\n    v.orderby,\r\n    v.ispagesize,\r\n    v.subscrible,\r\n    COALESCE((SELECT\r\n     \tarray_to_json(array_agg(row_to_json(d)))\r\n     FROM\r\n    (SELECT\r\n    \tvalue as value,\r\n        value as label\r\n    FROM json_array_elements(v.roles) as rl) as d),'[]') as roles\r\n    \t\r\n    ,\r\n    v.viewtype,\r\n    v.tablename,\r\n    \r\n    COALESCE((\r\n      SELECT\r\n      \tarray_to_json(array_agg(row_to_json(d)))\r\n      FROM \r\n       (\r\n        SELECT\r\n            f.title,\r\n            f.id,\r\n            f.type,\r\n            f.t,\r\n            f.classname,\r\n            f."column",\r\n            \r\n            CASE WHEN f.columns is not null\r\n            THEN\r\n            (\r\n              SELECT\r\n                array_to_json(array_agg(row_to_json(d)))\r\n              FROM\r\n                (\r\n                  SELECT\r\n                      cc.col as label,\r\n                      cc.title as value,\r\n                      concat(cc.col,'_',cc.id::varchar) as key,\r\n                      CASE WHEN cc.relation is not null THEN cc.t\r\n                      ELSE '1'\r\n                      END as t\r\n                  FROM json_array_elements_text(f.columns) as ff\r\n                      JOIN framework.config as cc on cc.viewid = v.id and cc.title = ff.value::varchar\r\n                ) as d)\r\n            ELSE\r\n              null\r\n            END as columns,           \r\n            COALESCE((SELECT\r\n                array_to_json(array_agg(row_to_json(d)))\r\n             FROM\r\n            (SELECT\r\n                value as value,\r\n                value as label\r\n            FROM json_array_elements(f.roles) as rl) as d),'[]') as roles,\r\n            f."table"\r\n        FROM framework.filters as f\r\n        WHERE f.viewid = v.id\r\n        ORDER BY f.column_order\r\n    ) as d),'[]') as filters,\r\n    \r\n   COALESCE( (SELECT\r\n   \t \tarray_to_json(array_agg(row_to_json(d)))\r\n     FROM (\r\n      SELECT\r\n      \ta.act_url as act,\r\n        a.title,\r\n        a.icon,\r\n        a.classname,\r\n        a.act_type as "type",\r\n        a.main_action as ismain,\r\n        coalesce((SELECT\r\n           array_to_json(array_agg(row_to_json(d)))\r\n         FROM\r\n            (SELECT\r\n                value as value,\r\n                value as label\r\n            FROM json_array_elements(a.roles) as rl) as d),'[]') as roles\r\n        ,\r\n        a.forevery as isforevery,\r\n        a.ask_confirm as actapiconfirm,\r\n        a.refresh_data as actapirefresh,\r\n        upper(a.api_type) as actapitype,\r\n        a.api_method as actapimethod,\r\n        (SELECT\r\n        \tarray_to_json(array_agg(row_to_json(d)))\r\n         FROM\r\n            (SELECT\r\n              CASE WHEN ap.val_desc is not null\r\n              THEN\r\n              json_build_object(\r\n                  'value',cc.title,\r\n                  'label',cc.title,\r\n                  't', cc.t,\r\n                  'key',concat(cc.col,'_',cc.id::varchar)\r\n              )\r\n              ELSE\r\n              \tnull\r\n              END\r\n               as paramcolumn,\r\n             ap.paramconst,\r\n             ap.paraminput,\r\n             ap.paramt,\r\n             ap.paramtitle,\r\n             ap.query_type\r\n            FROM framework.act_parametrs as ap\r\n            \tLEFT JOIN framework.config as cc on cc.id = ap.val_desc\r\n            WHERE ap.actionid = a.id\r\n            ) as d\r\n        ) as parametrs,\r\n       (SELECT\r\n      \t \tarray_to_json(array_agg(row_to_json(d)))\r\n        FROM\r\n        (\r\n        SELECT\r\n            av.value,\r\n            json_build_object(\r\n            \t'label',cc.col,\r\n                't',cc.t,\r\n                'value', cc.title,\r\n                'key', concat(cc.col,'_',cc.id::varchar)\r\n            ) as col,\r\n            json_build_object('value',op.value,'js',op.js) as operation\r\n        FROM framework.act_visible_condions as av\r\n        \tLEFT JOIN framework.operations as op on op.value = av.operation\r\n            LEFT JOIN framework.config as cc on cc.viewid = v.id and cc.id = av.val_desc\r\n        WHERE av.actionid = a.id\r\n        ) as d) as act_visible_condition \r\n      FROM framework.actions as a\r\n      WHERE a.viewid = v.id\r\n      ORDER BY a.column_order) as d\r\n    \r\n    ),'[]') as acts\r\n    ,\r\n    framework.fn_config_to_json(v.id) as config\r\n  FROM framework.views as v\r\n  WHERE v."path" = _path) as d\r\n  INTO outjson;\r\n\r\nEND;\r\n$function$\n	[{"argname":"_path","argmode":"input","argtype":"varchar"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\n--DECLARE\r\n  --variable_name datatype;\r\nBEGIN\r\n IF (SELECT count(v.id)  \r\n     FROM framework.views as v\r\n \t WHERE v."path" = _path ) = 0\r\n THEN\r\n \tPERFORM raiserror('view is not found');\r\n END IF;\r\n \r\n\r\n \r\n SELECT\r\n   row_to_json(d)\r\n FROM\r\n  (SELECT\r\n  \tv.id,\r\n    v.title,\r\n    v.pagecount,\r\n    v.pagination,\r\n    v.checker,\r\n    v.classname,\r\n    v.orderby,\r\n    v.ispagesize,\r\n    v.subscrible,\r\n    COALESCE((SELECT\r\n     \tarray_to_json(array_agg(row_to_json(d)))\r\n     FROM\r\n    (SELECT\r\n    \tvalue as value,\r\n        value as label\r\n    FROM json_array_elements(v.roles) as rl) as d),'[]') as roles\r\n    \t\r\n    ,\r\n    v.viewtype,\r\n    v.tablename,\r\n    \r\n    COALESCE((\r\n      SELECT\r\n      \tarray_to_json(array_agg(row_to_json(d)))\r\n      FROM \r\n       (\r\n        SELECT\r\n            f.title,\r\n            f.id,\r\n            f.type,\r\n            f.t,\r\n            f.classname,\r\n            f."column",\r\n            \r\n            CASE WHEN f.columns is not null\r\n            THEN\r\n            (\r\n              SELECT\r\n                array_to_json(array_agg(row_to_json(d)))\r\n              FROM\r\n                (\r\n                  SELECT\r\n                      cc.col as label,\r\n                      cc.title as value,\r\n                      concat(cc.col,'_',cc.id::varchar) as key,\r\n                      CASE WHEN cc.relation is not null THEN cc.t\r\n                      ELSE '1'\r\n                      END as t\r\n                  FROM json_array_elements_text(f.columns) as ff\r\n                      JOIN framework.config as cc on cc.viewid = v.id and cc.title = ff.value::varchar\r\n                ) as d)\r\n            ELSE\r\n              null\r\n            END as columns,           \r\n            COALESCE((SELECT\r\n                array_to_json(array_agg(row_to_json(d)))\r\n             FROM\r\n            (SELECT\r\n                value as value,\r\n                value as label\r\n            FROM json_array_elements(f.roles) as rl) as d),'[]') as roles,\r\n            f."table"\r\n        FROM framework.filters as f\r\n        WHERE f.viewid = v.id\r\n        ORDER BY f.column_order\r\n    ) as d),'[]') as filters,\r\n    \r\n   COALESCE( (SELECT\r\n   \t \tarray_to_json(array_agg(row_to_json(d)))\r\n     FROM (\r\n      SELECT\r\n      \ta.act_url as act,\r\n        a.title,\r\n        a.icon,\r\n        a.classname,\r\n        a.act_type as "type",\r\n        a.main_action as ismain,\r\n        coalesce((SELECT\r\n           array_to_json(array_agg(row_to_json(d)))\r\n         FROM\r\n            (SELECT\r\n                value as value,\r\n                value as label\r\n            FROM json_array_elements(a.roles) as rl) as d),'[]') as roles\r\n        ,\r\n        a.forevery as isforevery,\r\n        a.ask_confirm as actapiconfirm,\r\n        a.refresh_data as actapirefresh,\r\n        upper(a.api_type) as actapitype,\r\n        a.api_method as actapimethod,\r\n        (SELECT\r\n        \tarray_to_json(array_agg(row_to_json(d)))\r\n         FROM\r\n            (SELECT\r\n              CASE WHEN ap.val_desc is not null\r\n              THEN\r\n              json_build_object(\r\n                  'value',cc.title,\r\n                  'label',cc.title,\r\n                  't', cc.t,\r\n                  'key',concat(cc.col,'_',cc.id::varchar)\r\n              )\r\n              ELSE\r\n              \tnull\r\n              END\r\n               as paramcolumn,\r\n             ap.paramconst,\r\n             ap.paraminput,\r\n             ap.paramt,\r\n             ap.paramtitle,\r\n             ap.query_type\r\n            FROM framework.act_parametrs as ap\r\n            \tLEFT JOIN framework.config as cc on cc.id = ap.val_desc\r\n            WHERE ap.actionid = a.id\r\n            ) as d\r\n        ) as parametrs,\r\n       (SELECT\r\n      \t \tarray_to_json(array_agg(row_to_json(d)))\r\n        FROM\r\n        (\r\n        SELECT\r\n            av.value,\r\n            json_build_object(\r\n            \t'label',cc.col,\r\n                't',cc.t,\r\n                'value', cc.title,\r\n                'key', concat(cc.col,'_',cc.id::varchar)\r\n            ) as col,\r\n            json_build_object('value',op.value,'js',op.js) as operation\r\n        FROM framework.act_visible_condions as av\r\n        \tLEFT JOIN framework.operations as op on op.value = av.operation\r\n            LEFT JOIN framework.config as cc on cc.viewid = v.id and cc.id = av.val_desc\r\n        WHERE av.actionid = a.id\r\n        ) as d) as act_visible_condition \r\n      FROM framework.actions as a\r\n      WHERE a.viewid = v.id\r\n      ORDER BY a.column_order) as d\r\n    \r\n    ),'[]') as acts\r\n    ,\r\n    framework.fn_config_to_json(v.id) as config\r\n  FROM framework.views as v\r\n  WHERE v."path" = _path) as d\r\n  INTO outjson;\r\n\r\nEND;\r\n
227344	framework	fn_view_json_for_copy	framework.fn_view_json_for_copy(_id  int4,outjson out json)	GET VIEW IN JSON FOR COPY TO ANOTHER DB	2020-05-21 11:31:02.195905	1	f	fn_view_json_for_copy(_id  int4,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_view_json_for_copy(_id  int4,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_view_json_for_copy(_id integer, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  \r\nBEGIN\r\n\t-- GET VIEW IN JSON FOR COPY TO ANOTHER DB\r\n    \r\n    SELECT\r\n    \trow_to_json(dd)\r\n    FROM (\r\n      SELECT (\r\n          SELECT\r\n            row_to_json(d)\r\n          FROM (\r\n            SELECT\r\n                v.*\r\n            FROM framework.views as v\r\n            WHERE v.id = _id\r\n          ) as d\r\n      \t) as "view", COALESCE((\r\n          SELECT\r\n            array_to_json(array_agg(row_to_json(d)))\r\n          FROM (\r\n            SELECT\r\n                c.*                \r\n            FROM framework.config as c\r\n            WHERE c.viewid = _id\r\n          ) as d\r\n        ),'[]') as config, COALESCE((\r\n          SELECT\r\n            array_to_json(array_agg(row_to_json(d)))\r\n          FROM (\r\n            SELECT\r\n                a.*\r\n            FROM framework.actions as a\r\n            WHERE a.viewid = _id\r\n          ) as d\r\n        ),'[]') actions, COALESCE((\r\n          SELECT\r\n            array_to_json(array_agg(row_to_json(d)))\r\n          FROM (\r\n            SELECT\r\n                f.*\r\n            FROM framework.filters as f\r\n            WHERE f.viewid = _id\r\n        ) as d\r\n      ),'[]') as  filters,COALESCE((\r\n      \tSELECT\r\n        \tarray_to_json(array_agg(row_to_json(d)))\r\n        FROM (\r\n        \tSELECT vc.*\r\n            FROM framework.config as c\r\n            \tJOIN framework.visible_condition as vc on vc.configid = c.id  \r\n            WHERE c.viewid = _id\r\n        ) as d ),'[]'\r\n      ) visible_condition, COALESCE((\r\n      \tSELECT\r\n        \tarray_to_json(array_agg(row_to_json(d)))\r\n        FROM (\r\n        \tSELECT sc.*\r\n            FROM framework.config as c \r\n            \tJOIN framework.select_condition as sc on sc.configid = c.id \r\n            WHERE c.viewid = _id\r\n        ) as d),'[]') as select_condition, COALESCE((\r\n        SELECT\r\n        \tarray_to_json(array_agg(row_to_json(d)))\r\n        FROM (\r\n        \tSELECT dv.*\r\n            FROM framework.config as c\r\n               \tJOIN framework.defaultval as dv on dv.configid = c.id \r\n            WHERE c.viewid = _id\r\n      \t) as d),'[]') defaultval,COALESCE((\r\n        SELECT\r\n           array_to_json(array_agg(row_to_json(d)))\r\n        FROM (\r\n         \tSELECT\r\n            \tap.*\r\n            FROM framework.actions as a\r\n            \tJOIN framework.act_parametrs as ap on ap.actionid = a.id\r\n            WHERE a.viewid = _id\r\n        ) as d),'[]') as act_parametrs, COALESCE((\r\n        \tSELECT\r\n               array_to_json(array_agg(row_to_json(d)))\r\n            FROM (\r\n            \tSELECT\r\n                   av.*\r\n                FROM framework.actions as a\r\n                \tJOIN framework.act_visible_condions as av on av.actionid = a.id\r\n                WHERE a.viewid = _id\r\n            ) as d),'[]') as act_visible_condions\r\n    ) as dd\r\n    INTO outjson;\r\n\r\nEND;\r\n$function$\n	[{"argname":"_id","argmode":"input","argtype":"int4"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  \r\nBEGIN\r\n\t-- GET VIEW IN JSON FOR COPY TO ANOTHER DB\r\n    \r\n    SELECT\r\n    \trow_to_json(dd)\r\n    FROM (\r\n      SELECT (\r\n          SELECT\r\n            row_to_json(d)\r\n          FROM (\r\n            SELECT\r\n                v.*\r\n            FROM framework.views as v\r\n            WHERE v.id = _id\r\n          ) as d\r\n      \t) as "view", COALESCE((\r\n          SELECT\r\n            array_to_json(array_agg(row_to_json(d)))\r\n          FROM (\r\n            SELECT\r\n                c.*                \r\n            FROM framework.config as c\r\n            WHERE c.viewid = _id\r\n          ) as d\r\n        ),'[]') as config, COALESCE((\r\n          SELECT\r\n            array_to_json(array_agg(row_to_json(d)))\r\n          FROM (\r\n            SELECT\r\n                a.*\r\n            FROM framework.actions as a\r\n            WHERE a.viewid = _id\r\n          ) as d\r\n        ),'[]') actions, COALESCE((\r\n          SELECT\r\n            array_to_json(array_agg(row_to_json(d)))\r\n          FROM (\r\n            SELECT\r\n                f.*\r\n            FROM framework.filters as f\r\n            WHERE f.viewid = _id\r\n        ) as d\r\n      ),'[]') as  filters,COALESCE((\r\n      \tSELECT\r\n        \tarray_to_json(array_agg(row_to_json(d)))\r\n        FROM (\r\n        \tSELECT vc.*\r\n            FROM framework.config as c\r\n            \tJOIN framework.visible_condition as vc on vc.configid = c.id  \r\n            WHERE c.viewid = _id\r\n        ) as d ),'[]'\r\n      ) visible_condition, COALESCE((\r\n      \tSELECT\r\n        \tarray_to_json(array_agg(row_to_json(d)))\r\n        FROM (\r\n        \tSELECT sc.*\r\n            FROM framework.config as c \r\n            \tJOIN framework.select_condition as sc on sc.configid = c.id \r\n            WHERE c.viewid = _id\r\n        ) as d),'[]') as select_condition, COALESCE((\r\n        SELECT\r\n        \tarray_to_json(array_agg(row_to_json(d)))\r\n        FROM (\r\n        \tSELECT dv.*\r\n            FROM framework.config as c\r\n               \tJOIN framework.defaultval as dv on dv.configid = c.id \r\n            WHERE c.viewid = _id\r\n      \t) as d),'[]') defaultval,COALESCE((\r\n        SELECT\r\n           array_to_json(array_agg(row_to_json(d)))\r\n        FROM (\r\n         \tSELECT\r\n            \tap.*\r\n            FROM framework.actions as a\r\n            \tJOIN framework.act_parametrs as ap on ap.actionid = a.id\r\n            WHERE a.viewid = _id\r\n        ) as d),'[]') as act_parametrs, COALESCE((\r\n        \tSELECT\r\n               array_to_json(array_agg(row_to_json(d)))\r\n            FROM (\r\n            \tSELECT\r\n                   av.*\r\n                FROM framework.actions as a\r\n                \tJOIN framework.act_visible_condions as av on av.actionid = a.id\r\n                WHERE a.viewid = _id\r\n            ) as d),'[]') as act_visible_condions\r\n    ) as dd\r\n    INTO outjson;\r\n\r\nEND;\r\n
227345	framework	fn_view_json_parse	framework.fn_view_json_parse(injson  json,_n  int4)	PARSE VIEW FROM JSON \r\nFROM framework.fn_vew_json_for_copy function	2020-05-21 11:31:02.195905	1	f	fn_view_json_parse(injson  json,_n  int4)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_view_json_parse(injson  json,_n  int4) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_view_json_parse(injson json, _n integer DEFAULT 2)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  \r\nBEGIN\r\n\tBEGIN\r\n      INSERT INTO framework.views (\r\n        id,\r\n        title, descr,\r\n        tablename, viewtype,\r\n        pagination,\r\n        "path", roles,\r\n        classname, orderby,\r\n        ispagesize, pagecount,\r\n        foundcount, subscrible,\r\n        checker, copy\r\n      )\r\n      SELECT \r\n          ((injson->'view')->>'id')::smallint*_n,\r\n          ((injson->'view')->>'title'), ((injson->'view')->>'descr'),\r\n          ((injson->'view')->>'tablename'), ((injson->'view')->>'viewtype'),\r\n          ((injson->'view')->>'pagination')::boolean, \r\n          ((injson->'view')->>'path'), ((injson->'view')->'roles'),\r\n          ((injson->'view')->>'classname'), ((injson->'view')->>'orderby')::boolean,\r\n          ((injson->'view')->>'ispagesize')::boolean, ((injson->'view')->>'pagecount')::boolean,\r\n          ((injson->'view')->>'foundcount')::boolean, ((injson->'view')->>'subscrible')::boolean,\r\n          ((injson->'view')->>'checker')::boolean, true;\r\n    END;\r\n    INSERT INTO framework.config (\r\n      id, viewid,\r\n      t, col,\r\n      column_id, title,\r\n      type, roles,\r\n      visible, required,\r\n      width, "join",\r\n      classname, updatable,\r\n      relation, select_api,\r\n      multiselecttable,\r\n      orderby, orderbydesc,\r\n      relcol, depency,\r\n      relationcolums, multicolums,\r\n      depencycol, column_order,\r\n      fn, fncolumns,\r\n      relatecolumn, "table",\r\n      related, tpath,\r\n      editable, "copy"\r\n    ) SELECT \r\n    \t (value->>'id')::smallint*_n, (value->>'viewid')::smallint*_n,\r\n    \t (value->>'t'), (value->>'col'),\r\n         (value->>'column_id')::int, (value->>'title'),\r\n         (value->>'type'), (value->'roles'),\r\n         (value->>'visible')::boolean, (value->>'required')::boolean,\r\n    \t (value->>'width'), (value->>'join')::boolean,\r\n         (value->>'classname'), (value->>'updatable')::boolean, \r\n         (value->>'relation'), (value->>'select_api'), \r\n         (value->>'multiselecttable'),\r\n\t\t (value->>'orderby')::boolean, (value->>'orderbydesc')::boolean,\r\n         (value->>'relcol'), (value->>'depency')::boolean,\r\n\t     (value->'relationcolums'), (value->'multicolums'),\r\n    \t (value->>'depencycol'), (value->>'column_order')::SMALLINT,\r\n    \t (value->>'fn'), array_to_json(ARRAY(SELECT value::varchar::int*20\r\n         \tFROM json_array_elements_text(coalesce((value->>'fncolumns')::json,'[]'::json)::json))),\r\n    \t (value->>'relatecolumn'), (value->>'table'),\r\n         (value->>'related')::boolean, (value->'tpath'),\r\n         (value->>'editable')::boolean, true\r\n    FROM json_array_elements(injson->'config') ;\r\n         \r\n     INSERT INTO framework.visible_condition (\r\n      id, configid,\r\n      val_desc, col,\r\n      title, operation,\r\n      value\r\n     ) \r\n     SELECT \r\n    \t (value->>'id')::int, (value->>'configid')::int*_n,\r\n \t\t (value->>'val_desc')::int*_n, (value->>'col'),\r\n         (value->>'title'), (value->>'operation'),\r\n         (value->>'value')\r\n     FROM json_array_elements(injson->'visible_condition') ;\r\n    \r\n     INSERT INTO framework.select_condition (\r\n      id, configid,\r\n      col, operation,\r\n      const, value,\r\n      val_desc\r\n     )      \r\n     SELECT \r\n    \t (value->>'id')::int, (value->>'configid')::int*_n,\r\n \t\t (value->>'col'), (value->>'operation'),\r\n         (value->>'const'), (value->>'value'),\r\n         (value->>'val_desc')::int*20\r\n     FROM json_array_elements(injson->'select_condition');\r\n         \r\n     INSERT INTO framework.defaultval (\r\n      id, configid,\r\n      bool, act,\r\n      value\r\n     )      \r\n     SELECT \r\n    \t (value->>'id')::int*_n, (value->>'configid')::int*_n,\r\n \t\t (value->>'bool'), (value->>'act'),\r\n         (value->>'value')\r\n     FROM json_array_elements(injson->'defaultval');\r\n     \r\n     INSERT INTO framework.actions (\r\n      id, column_order,\r\n      title, viewid,\r\n      icon, classname,\r\n      act_url, api_method,\r\n      api_type, refresh_data,\r\n      ask_confirm, roles,\r\n      forevery, main_action,\r\n      act_type\r\n     ) \r\n     SELECT \r\n    \t (value->>'id')::int*_n, (value->>'column_order')::int,\r\n \t\t (value->>'title'), (value->>'viewid')::int*_n,\r\n         (value->>'icon'), (value->>'classname'),\r\n         (value->>'act_url'), (value->>'api_method'),\r\n         (value->>'api_type'), (value->>'refresh_data')::boolean,  \r\n         (value->>'ask_confirm')::boolean, (value->'roles'),\r\n         (value->>'forevery')::boolean, (value->>'main_action')::boolean,\r\n\t\t(value->>'act_type')\r\n     FROM json_array_elements(injson->'actions')\r\n      ;     \r\n         \r\n    INSERT INTO framework.act_parametrs (\r\n      id, actionid,\r\n      paramtitle, paramt,\r\n      paramconst, paraminput,\r\n      paramcolumn, val_desc,\r\n      query_type, "order by"\r\n    ) \r\n     SELECT \r\n    \t (value->>'id')::int, (value->>'actionid')::int*_n,\r\n \t\t (value->>'paramtitle'), (value->>'paramt'),\r\n         (value->>'paramconst'), (value->>'paraminput'),\r\n         (value->>'paramcolumn'), (value->>'val_desc')::int*_n,\r\n         (value->>'query_type'), (value->>'order by')::int\r\n     FROM json_array_elements(injson->'act_parametrs');\r\n         \r\n    INSERT INTO framework.act_visible_condions (\r\n      id, actionid,\r\n      val_desc, col,\r\n      title, operation,\r\n      value\r\n    ) \r\n     SELECT \r\n    \t (value->>'id')::int,  (value->>'actionid')::int*_n,\r\n \t\t (value->>'val_desc')::int*_n, (value->>'col'),\r\n         (value->>'title'), \r\n         (value->>'operation'),\r\n         (value->>'value')\r\n     FROM json_array_elements(injson->'act_visible_condions');\r\n\r\n\tINSERT INTO framework.filters (\r\n      id, column_order,\r\n      viewid, title,\r\n      type, classname,\r\n      "column", columns,\r\n      roles, t,\r\n      "table", val_desc\r\n    ) \r\n    SELECT\r\n    \t (value->>'id')::int*_n,  (value->>'column_order')::smallint,\r\n \t\t (value->>'viewid')::int*_n, (value->>'title'),\r\n         (value->>'type'), (value->>'classname'),\r\n         (value->>'column'), (value->'columns'),\r\n         (value->'roles'), (value->>'t'),\r\n         (value->'table'), (value->>'val_desc')::int*_n\r\n    FROM json_array_elements(injson->'filters')\r\n         ;\r\n         \r\n     \r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"_n","argmode":"input","argtype":"int4"}]	void	\r\nDECLARE\r\n  \r\nBEGIN\r\n\tBEGIN\r\n      INSERT INTO framework.views (\r\n        id,\r\n        title, descr,\r\n        tablename, viewtype,\r\n        pagination,\r\n        "path", roles,\r\n        classname, orderby,\r\n        ispagesize, pagecount,\r\n        foundcount, subscrible,\r\n        checker, copy\r\n      )\r\n      SELECT \r\n          ((injson->'view')->>'id')::smallint*_n,\r\n          ((injson->'view')->>'title'), ((injson->'view')->>'descr'),\r\n          ((injson->'view')->>'tablename'), ((injson->'view')->>'viewtype'),\r\n          ((injson->'view')->>'pagination')::boolean, \r\n          ((injson->'view')->>'path'), ((injson->'view')->'roles'),\r\n          ((injson->'view')->>'classname'), ((injson->'view')->>'orderby')::boolean,\r\n          ((injson->'view')->>'ispagesize')::boolean, ((injson->'view')->>'pagecount')::boolean,\r\n          ((injson->'view')->>'foundcount')::boolean, ((injson->'view')->>'subscrible')::boolean,\r\n          ((injson->'view')->>'checker')::boolean, true;\r\n    END;\r\n    INSERT INTO framework.config (\r\n      id, viewid,\r\n      t, col,\r\n      column_id, title,\r\n      type, roles,\r\n      visible, required,\r\n      width, "join",\r\n      classname, updatable,\r\n      relation, select_api,\r\n      multiselecttable,\r\n      orderby, orderbydesc,\r\n      relcol, depency,\r\n      relationcolums, multicolums,\r\n      depencycol, column_order,\r\n      fn, fncolumns,\r\n      relatecolumn, "table",\r\n      related, tpath,\r\n      editable, "copy"\r\n    ) SELECT \r\n    \t (value->>'id')::smallint*_n, (value->>'viewid')::smallint*_n,\r\n    \t (value->>'t'), (value->>'col'),\r\n         (value->>'column_id')::int, (value->>'title'),\r\n         (value->>'type'), (value->'roles'),\r\n         (value->>'visible')::boolean, (value->>'required')::boolean,\r\n    \t (value->>'width'), (value->>'join')::boolean,\r\n         (value->>'classname'), (value->>'updatable')::boolean, \r\n         (value->>'relation'), (value->>'select_api'), \r\n         (value->>'multiselecttable'),\r\n\t\t (value->>'orderby')::boolean, (value->>'orderbydesc')::boolean,\r\n         (value->>'relcol'), (value->>'depency')::boolean,\r\n\t     (value->'relationcolums'), (value->'multicolums'),\r\n    \t (value->>'depencycol'), (value->>'column_order')::SMALLINT,\r\n    \t (value->>'fn'), array_to_json(ARRAY(SELECT value::varchar::int*20\r\n         \tFROM json_array_elements_text(coalesce((value->>'fncolumns')::json,'[]'::json)::json))),\r\n    \t (value->>'relatecolumn'), (value->>'table'),\r\n         (value->>'related')::boolean, (value->'tpath'),\r\n         (value->>'editable')::boolean, true\r\n    FROM json_array_elements(injson->'config') ;\r\n         \r\n     INSERT INTO framework.visible_condition (\r\n      id, configid,\r\n      val_desc, col,\r\n      title, operation,\r\n      value\r\n     ) \r\n     SELECT \r\n    \t (value->>'id')::int, (value->>'configid')::int*_n,\r\n \t\t (value->>'val_desc')::int*_n, (value->>'col'),\r\n         (value->>'title'), (value->>'operation'),\r\n         (value->>'value')\r\n     FROM json_array_elements(injson->'visible_condition') ;\r\n    \r\n     INSERT INTO framework.select_condition (\r\n      id, configid,\r\n      col, operation,\r\n      const, value,\r\n      val_desc\r\n     )      \r\n     SELECT \r\n    \t (value->>'id')::int, (value->>'configid')::int*_n,\r\n \t\t (value->>'col'), (value->>'operation'),\r\n         (value->>'const'), (value->>'value'),\r\n         (value->>'val_desc')::int*20\r\n     FROM json_array_elements(injson->'select_condition');\r\n         \r\n     INSERT INTO framework.defaultval (\r\n      id, configid,\r\n      bool, act,\r\n      value\r\n     )      \r\n     SELECT \r\n    \t (value->>'id')::int*_n, (value->>'configid')::int*_n,\r\n \t\t (value->>'bool'), (value->>'act'),\r\n         (value->>'value')\r\n     FROM json_array_elements(injson->'defaultval');\r\n     \r\n     INSERT INTO framework.actions (\r\n      id, column_order,\r\n      title, viewid,\r\n      icon, classname,\r\n      act_url, api_method,\r\n      api_type, refresh_data,\r\n      ask_confirm, roles,\r\n      forevery, main_action,\r\n      act_type\r\n     ) \r\n     SELECT \r\n    \t (value->>'id')::int*_n, (value->>'column_order')::int,\r\n \t\t (value->>'title'), (value->>'viewid')::int*_n,\r\n         (value->>'icon'), (value->>'classname'),\r\n         (value->>'act_url'), (value->>'api_method'),\r\n         (value->>'api_type'), (value->>'refresh_data')::boolean,  \r\n         (value->>'ask_confirm')::boolean, (value->'roles'),\r\n         (value->>'forevery')::boolean, (value->>'main_action')::boolean,\r\n\t\t(value->>'act_type')\r\n     FROM json_array_elements(injson->'actions')\r\n      ;     \r\n         \r\n    INSERT INTO framework.act_parametrs (\r\n      id, actionid,\r\n      paramtitle, paramt,\r\n      paramconst, paraminput,\r\n      paramcolumn, val_desc,\r\n      query_type, "order by"\r\n    ) \r\n     SELECT \r\n    \t (value->>'id')::int, (value->>'actionid')::int*_n,\r\n \t\t (value->>'paramtitle'), (value->>'paramt'),\r\n         (value->>'paramconst'), (value->>'paraminput'),\r\n         (value->>'paramcolumn'), (value->>'val_desc')::int*_n,\r\n         (value->>'query_type'), (value->>'order by')::int\r\n     FROM json_array_elements(injson->'act_parametrs');\r\n         \r\n    INSERT INTO framework.act_visible_condions (\r\n      id, actionid,\r\n      val_desc, col,\r\n      title, operation,\r\n      value\r\n    ) \r\n     SELECT \r\n    \t (value->>'id')::int,  (value->>'actionid')::int*_n,\r\n \t\t (value->>'val_desc')::int*_n, (value->>'col'),\r\n         (value->>'title'), \r\n         (value->>'operation'),\r\n         (value->>'value')\r\n     FROM json_array_elements(injson->'act_visible_condions');\r\n\r\n\tINSERT INTO framework.filters (\r\n      id, column_order,\r\n      viewid, title,\r\n      type, classname,\r\n      "column", columns,\r\n      roles, t,\r\n      "table", val_desc\r\n    ) \r\n    SELECT\r\n    \t (value->>'id')::int*_n,  (value->>'column_order')::smallint,\r\n \t\t (value->>'viewid')::int*_n, (value->>'title'),\r\n         (value->>'type'), (value->>'classname'),\r\n         (value->>'column'), (value->'columns'),\r\n         (value->'roles'), (value->>'t'),\r\n         (value->'table'), (value->>'val_desc')::int*_n\r\n    FROM json_array_elements(injson->'filters')\r\n         ;\r\n         \r\n     \r\nEND;\r\n
227346	framework	fn_view_link_showsql	framework.fn_view_link_showsql(_path  varchar,_link out json)	-- SQL SHOW LINK GENERATOR	2020-05-21 11:31:02.195905	1	f	fn_view_link_showsql(_path  varchar,_link out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_view_link_showsql(_path  varchar,_link out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_view_link_showsql(_path character varying, OUT _link json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\n-- SQL SHOW LINK GENERATOR\r\nBEGIN\r\n\t_link = json_build_object(\r\n    \t'link', (\r\n\t\t   SELECT\r\n\t\t\t  concat(maindomain,'/schema?path=', _path)\r\n\t\t   FROM framework.mainsettings\r\n\t\t   WHERE isactiv\r\n\t\t ),\r\n        'title',\r\n        'show sql'\r\n\t);\r\nEND;\r\n$function$\n	[{"argname":"_path","argmode":"input","argtype":"varchar"},{"argname":"_link","argmode":"output","argtype":"json"}]	json	\r\n-- SQL SHOW LINK GENERATOR\r\nBEGIN\r\n\t_link = json_build_object(\r\n    \t'link', (\r\n\t\t   SELECT\r\n\t\t\t  concat(maindomain,'/schema?path=', _path)\r\n\t\t   FROM framework.mainsettings\r\n\t\t   WHERE isactiv\r\n\t\t ),\r\n        'title',\r\n        'show sql'\r\n\t);\r\nEND;\r\n
227396	reports	fn_call_report	reports.fn_call_report(injson  json,outjson out json)	ФУНКЦИЯ ВЫЗОВА ФУНКЦИИ ОТЧЁТА	2020-05-21 11:31:02.195905	1	f	fn_call_report(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nreports.fn_call_report(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION reports.fn_call_report(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  report_path VARCHAR(350);\r\n  _roles json;\r\n  _userroles json;\r\n  _sess char(36);\r\n  _userid char(36);\r\n  _fn_title VARCHAR(350);  \r\n  squery varchar;\r\n  _template_path varchar(300);\r\n  _ishtml boolean; \r\nBEGIN\r\n  report_path = injson->>'report_path';\r\n  _sess =injson->>'sess';\r\n  injson = injson->>'injson';\r\n  \r\n  SELECT \r\n  \trl.functitle,\r\n    rl.roles,\r\n    rl.template_path,\r\n    rl.ishtml\r\n  FROM reports.reportlist as rl\r\n  WHERE rl.path = report_path\r\n  INTO _fn_title, _roles, _template_path, _ishtml;\r\n  \r\n  IF _fn_title is null THEN\r\n  \tPERFORM raiserror('404');\r\n  END IF; \r\n  \r\n  SELECT\r\n      u.id,\r\n      u.roles\r\n  FROM framework.users as u\r\n      JOIN framework.sess as s on s.userid = u.id\r\n  WHERE s.id = _sess\r\n  INTO _userid, _userroles;\r\n  \r\n  IF _roles is not null and (\r\n      SELECT count(*) \r\n      FROM json_array_elements_text(_roles)\r\n    ) <> 0 AND (\r\n    \tSELECT count(*) \r\n        FROM json_array_elements_text(_userroles)\r\n    ) <> 0\r\n  THEN\r\n \tIF (\r\n          SELECT \r\n              count(*) \r\n          FROM json_array_elements_text(_userroles) as u\r\n              JOIN json_array_elements_text(_roles) as r on \r\n                  u.value::varchar::int = r.value::varchar::int\r\n        ) = 0 AND (\r\n          SELECT \r\n              count(*) \r\n          FROM json_array_elements_text(_userroles)\r\n          WHERE value::varchar = '0'\r\n        ) = 0\r\n \tTHEN\r\n    \tPERFORM raiserror('access denied');\r\n    END IF;\r\n  END IF;\r\n  \r\n  SELECT injson::jsonb || (\r\n  \tSELECT row_to_json(d) \r\n    FROM (\r\n    \tSELECT _userid as userid\r\n    ) as d\r\n  )::jsonb\r\n  INTO injson;\r\n\r\n  squery = concat('\r\n    SELECT \r\n       row_to_json(d) \r\n    FROM\r\n       ( \r\n         select \r\n         \toutjson\r\n            \r\n         from ',_fn_title,'($1)\r\n       ) as d;'\r\n    );\r\n    \r\n  EXECUTE format(squery) INTO outjson USING injson;\r\n  \r\n  outjson =  (outjson::jsonb||(SELECT row_to_json(d) FROM (\r\n  \tSELECT \r\n      _template_path as template_path,\r\n      _ishtml as ishtml\r\n  ) as d)::jsonb)::jsonb;\r\n  \r\n  outjson = coalesce(outjson,'{}');\r\n \r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  report_path VARCHAR(350);\r\n  _roles json;\r\n  _userroles json;\r\n  _sess char(36);\r\n  _userid char(36);\r\n  _fn_title VARCHAR(350);  \r\n  squery varchar;\r\n  _template_path varchar(300);\r\n  _ishtml boolean; \r\nBEGIN\r\n  report_path = injson->>'report_path';\r\n  _sess =injson->>'sess';\r\n  injson = injson->>'injson';\r\n  \r\n  SELECT \r\n  \trl.functitle,\r\n    rl.roles,\r\n    rl.template_path,\r\n    rl.ishtml\r\n  FROM reports.reportlist as rl\r\n  WHERE rl.path = report_path\r\n  INTO _fn_title, _roles, _template_path, _ishtml;\r\n  \r\n  IF _fn_title is null THEN\r\n  \tPERFORM raiserror('404');\r\n  END IF; \r\n  \r\n  SELECT\r\n      u.id,\r\n      u.roles\r\n  FROM framework.users as u\r\n      JOIN framework.sess as s on s.userid = u.id\r\n  WHERE s.id = _sess\r\n  INTO _userid, _userroles;\r\n  \r\n  IF _roles is not null and (\r\n      SELECT count(*) \r\n      FROM json_array_elements_text(_roles)\r\n    ) <> 0 AND (\r\n    \tSELECT count(*) \r\n        FROM json_array_elements_text(_userroles)\r\n    ) <> 0\r\n  THEN\r\n \tIF (\r\n          SELECT \r\n              count(*) \r\n          FROM json_array_elements_text(_userroles) as u\r\n              JOIN json_array_elements_text(_roles) as r on \r\n                  u.value::varchar::int = r.value::varchar::int\r\n        ) = 0 AND (\r\n          SELECT \r\n              count(*) \r\n          FROM json_array_elements_text(_userroles)\r\n          WHERE value::varchar = '0'\r\n        ) = 0\r\n \tTHEN\r\n    \tPERFORM raiserror('access denied');\r\n    END IF;\r\n  END IF;\r\n  \r\n  SELECT injson::jsonb || (\r\n  \tSELECT row_to_json(d) \r\n    FROM (\r\n    \tSELECT _userid as userid\r\n    ) as d\r\n  )::jsonb\r\n  INTO injson;\r\n\r\n  squery = concat('\r\n    SELECT \r\n       row_to_json(d) \r\n    FROM\r\n       ( \r\n         select \r\n         \toutjson\r\n            \r\n         from ',_fn_title,'($1)\r\n       ) as d;'\r\n    );\r\n    \r\n  EXECUTE format(squery) INTO outjson USING injson;\r\n  \r\n  outjson =  (outjson::jsonb||(SELECT row_to_json(d) FROM (\r\n  \tSELECT \r\n      _template_path as template_path,\r\n      _ishtml as ishtml\r\n  ) as d)::jsonb)::jsonb;\r\n  \r\n  outjson = coalesce(outjson,'{}');\r\n \r\nEND;\r\n
227347	framework	fn_view_setKeys	framework.fn_view_setKeys()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_view_setKeys()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_view_setKeys() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework."fn_view_setKeys"()\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\n/*\r\n\tADD "key" IN CONFIG\r\n\tFOR TRANSFER TO NEW VERSION\r\n*/\r\nBEGIN\r\n\tUPDATE framework.views SET config = (\r\n\tSELECT \r\n    \tjson_build_array (\r\n\t\t  ARRAY ( \r\n\t\t\tSELECT \r\n\t\t\t\tvalue::jsonb || (\r\n\t\t\t\t\tjsonb_build_object( 'key',\r\n\t\t\t\t\t\tconcat(\r\n\t\t\t\t\t\t\tvalue->>'col','_',                         \t\r\n\t\t\t\t\t\t\tSUBSTRING((uuid_in(md5(random()::text || now()::text)::cstring)::CHAR(36)),1,5)\r\n\t\t\t\t\t\t)) \r\n\t\t\t\t)::jsonb as conf\r\n\t\t\tFROM json_array_elements(config)\r\n\t\t  ) \r\n\t\t)\r\n\t)->0;\r\n    \r\n    UPDATE framework.views as v\r\n\tSET acts = \r\n\tjsonb_build_array(\r\n\t\tARRAY(\r\n          (SELECT\r\n            (a.value::jsonb - 'parametrs') ||\r\n            jsonb_build_object('parametrs',\r\n              jsonb_build_array(\r\n                ARRAY(\r\n                  SELECT\r\n                    CASE WHEN coalesce((p.value->>'paramconst'),'') = ''\r\n                    THEN\r\n\r\n                    jsonb_build_object('paramcolumn',\r\n                      (p.value->'paramcolumn')::jsonb ||\r\n                       test."fn_setParamsKey"(\r\n                            v.config,\r\n                            (p.value->>'paramcolumn')::jsonb\r\n                        )\r\n                      ) || p.value::jsonb - 'paramcolumn'\r\n                    ELSE\r\n                      (p.value)::jsonb\r\n                    END\r\n                  FROM json_array_elements(coalesce((a.value->>'parametrs')::json,'[]')) as p\r\n\r\n\r\n                )\r\n              )->0\r\n            )\r\n\r\n\r\n    \t FROM json_array_elements(v.acts) as a\r\n     \t)\r\n   \t )\r\n\t)->0;\r\nEND;\r\n$function$\n	[]	void	\r\n/*\r\n\tADD "key" IN CONFIG\r\n\tFOR TRANSFER TO NEW VERSION\r\n*/\r\nBEGIN\r\n\tUPDATE framework.views SET config = (\r\n\tSELECT \r\n    \tjson_build_array (\r\n\t\t  ARRAY ( \r\n\t\t\tSELECT \r\n\t\t\t\tvalue::jsonb || (\r\n\t\t\t\t\tjsonb_build_object( 'key',\r\n\t\t\t\t\t\tconcat(\r\n\t\t\t\t\t\t\tvalue->>'col','_',                         \t\r\n\t\t\t\t\t\t\tSUBSTRING((uuid_in(md5(random()::text || now()::text)::cstring)::CHAR(36)),1,5)\r\n\t\t\t\t\t\t)) \r\n\t\t\t\t)::jsonb as conf\r\n\t\t\tFROM json_array_elements(config)\r\n\t\t  ) \r\n\t\t)\r\n\t)->0;\r\n    \r\n    UPDATE framework.views as v\r\n\tSET acts = \r\n\tjsonb_build_array(\r\n\t\tARRAY(\r\n          (SELECT\r\n            (a.value::jsonb - 'parametrs') ||\r\n            jsonb_build_object('parametrs',\r\n              jsonb_build_array(\r\n                ARRAY(\r\n                  SELECT\r\n                    CASE WHEN coalesce((p.value->>'paramconst'),'') = ''\r\n                    THEN\r\n\r\n                    jsonb_build_object('paramcolumn',\r\n                      (p.value->'paramcolumn')::jsonb ||\r\n                       test."fn_setParamsKey"(\r\n                            v.config,\r\n                            (p.value->>'paramcolumn')::jsonb\r\n                        )\r\n                      ) || p.value::jsonb - 'paramcolumn'\r\n                    ELSE\r\n                      (p.value)::jsonb\r\n                    END\r\n                  FROM json_array_elements(coalesce((a.value->>'parametrs')::json,'[]')) as p\r\n\r\n\r\n                )\r\n              )->0\r\n            )\r\n\r\n\r\n    \t FROM json_array_elements(v.acts) as a\r\n     \t)\r\n   \t )\r\n\t)->0;\r\nEND;\r\n
227348	framework	fn_view_title_link	framework.fn_view_title_link(viewid  int4,title  varchar,lnk out json)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_view_title_link(viewid  int4,title  varchar,lnk out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_view_title_link(viewid  int4,title  varchar,lnk out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_view_title_link(viewid integer, title character varying, OUT lnk json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n/*\r\n\tOLD V004\r\n    NEED TO REMOVE AFTER TESTS\r\n\r\n*/\r\n\tSELECT\r\n    \trow_to_json(d)\r\n    FROM\r\n\t(SELECT \r\n    \tconcat('/composition/view?id=',viewid,'&act_id=-1&fl_id=-1&N=-1&_doctitle_=View: ', title) as link,\r\n        title as title) as d\r\n    INTO lnk;\r\n\r\nEND;\r\n$function$\n	[{"argname":"viewid","argmode":"input","argtype":"int4"},{"argname":"title","argmode":"input","argtype":"varchar"},{"argname":"lnk","argmode":"output","argtype":"json"}]	json	\r\nBEGIN\r\n/*\r\n\tOLD V004\r\n    NEED TO REMOVE AFTER TESTS\r\n\r\n*/\r\n\tSELECT\r\n    \trow_to_json(d)\r\n    FROM\r\n\t(SELECT \r\n    \tconcat('/composition/view?id=',viewid,'&act_id=-1&fl_id=-1&N=-1&_doctitle_=View: ', title) as link,\r\n        title as title) as d\r\n    INTO lnk;\r\n\r\nEND;\r\n
227365	framework	tr_dialogs_tr_ins_after	framework.tr_dialogs_tr_ins_after()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_dialogs_tr_ins_after()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_dialogs_tr_ins_after() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_dialogs_tr_ins_after()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE \r\n\t_id int;\r\n    _users json;\r\nBEGIN\r\n    -- SEND FIRST MESSAGE\r\n    IF NEW.dtype = '1' AND NEW.first_message::varchar <> '{}'\r\n    THEN\r\n      PERFORM framework.fn_dialog_message_send(\r\n         NEW.first_message\r\n      );\r\n    END IF;\r\n\r\n    RETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE \r\n\t_id int;\r\n    _users json;\r\nBEGIN\r\n    -- SEND FIRST MESSAGE\r\n    IF NEW.dtype = '1' AND NEW.first_message::varchar <> '{}'\r\n    THEN\r\n      PERFORM framework.fn_dialog_message_send(\r\n         NEW.first_message\r\n      );\r\n    END IF;\r\n\r\n    RETURN NEW;\r\nEND;\r\n
227350	framework	fn_viewsave	framework.fn_viewsave(injson  json,outjson out json)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_viewsave(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_viewsave(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.fn_viewsave(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _id int ;\r\n  _title varchar(150) ;\r\n  _descr varchar(1500) ;\r\n  _tablename varchar(350) ;\r\n  _viewtype varchar(200) ;\r\n  _pagination boolean ;\r\n  _config JSON ;\r\n  _path varchar(150) ;\r\n  _orderby boolean ;\r\n  _pagesize boolean ;\r\n  _pagecount boolean ;\r\n  _foundcount boolean ;\r\n  _subscrible boolean;\r\n  _checker boolean;  \r\n  _groupby JSON ;\r\n  _filters JSON ;\r\n  _acts JSON ;\r\n  _roles JSON ;\r\n  _classname varchar(400) ;\r\n  _userid varchar(250) ;\r\n  _newdata json;\r\n  _oldata json;\r\nBEGIN\r\n  _id  = injson->>'id';\r\n  _title  = injson->>'title';\r\n  _descr  = injson->>'descr';\r\n  _tablename  = injson->>'tablename';\r\n  _viewtype  = injson->>'viewtype';\r\n  _pagination  = injson->>'pagination';\r\n  _config = injson->>'config';\r\n  _path = injson->>'path';\r\n  _orderby = injson->>'orderby';\r\n  _groupby = injson->>'groupby';\r\n  _filters = injson->>'filters';\r\n  _acts = injson->>'acts';\r\n  _roles = injson->>'roles';\r\n  _classname = injson->>'classname';\r\n  _userid = injson->>'userid';\r\n  _pagesize = injson->>'ispagesize';\r\n  _pagecount = injson->>'pagecount';\r\n  _foundcount = injson->>'foundcount';\r\n  _subscrible = injson->>'subscrible';\r\n  _checker = injson->>'checker';\r\n IF _id is null THEN\r\n  \r\n    IF coalesce(_title,'') = '' THEN\r\n        PERFORM raiserror('title is null');\r\n    END IF;\r\n      \r\n    IF coalesce(_descr,'') = '' THEN\r\n        PERFORM raiserror('descr is null');\r\n    END IF;\r\n      \r\n    IF coalesce(_tablename,'') = '' THEN\r\n        perform raiserror('tablename is null');  \r\n    END IF;\r\n      \r\n    IF coalesce(_viewtype,'') = '' THEN\r\n        perform raiserror('viewtype is null');\r\n    END IF;    \r\n\r\n    _pagination = coalesce(_pagination,false);\r\n\r\n    IF coalesce(_config::varchar,'[]') = '[]' THEN\r\n    \tperform raiserror('config is null');\t\r\n    END IF;\r\n    \r\n    IF _path is null THEN\r\n    \tperform raiserror('path is null');\r\n    END IF;  \r\n    \r\n    _orderby = coalesce(_orderby,false);\r\n    _pagesize = coalesce(_pagesize,true);\r\n    _pagecount = coalesce(_pagecount,true);\r\n    _foundcount = coalesce(_foundcount,true);\r\n    _subscrible = coalesce(_subscrible,false);\r\n    \r\n    _groupby = coalesce(_groupby,'[]');\r\n    _roles = coalesce(_roles,'[]');\r\n    _filters = coalesce(_filters,'[]');\r\n\t_acts = coalesce(_acts,'[]');\r\n    \r\n    IF (SELECT \r\n        count(*)\r\n    FROM INFORMATION_SCHEMA.TABLES\r\n    WHERE concat('',TABLE_SCHEMA,'.', TABLE_NAME) = _tablename) = 0\r\n    THEN\r\n      perform raiserror('table is not exist');\r\n    END IF;\r\n    \r\n    _id = nextval('framework.views_id_seq'::regclass);\r\n\t   \r\n\r\n    INSERT INTO framework.views (\r\n    \tid,\r\n      title ,\r\n      descr ,\r\n      tablename ,\r\n      viewtype ,\r\n      pagination ,\r\n      config ,\r\n      "path" ,\r\n      orderby ,\r\n      groupby ,\r\n      filters ,\r\n      acts,\r\n      roles,\r\n      classname,\r\n      ispagesize,\r\n      pagecount,\r\n      foundcount,\r\n      subscrible,\r\n      checker\r\n    )\r\n    VALUES (\r\n      _id,\t\r\n      _title ,\r\n      _descr ,\r\n      _tablename ,\r\n      _viewtype ,\r\n      _pagination ,\r\n      _config ,\r\n      _path ,\r\n      _orderby ,\r\n      _groupby ,\r\n      _filters ,\r\n      _acts,\r\n      _roles,\r\n      _classname,\r\n      _pagesize,\r\n      _pagecount,\r\n      _foundcount ,\r\n      _subscrible   ,\r\n      coalesce(_checker,false)  \r\n    );\r\n    \r\n\r\n    _newdata  = (\r\n      SELECT row_to_json(d) \r\n      FROM \r\n      (SELECT *\r\n      FROM framework.views  \r\n      WHERE id = _id) as d\r\n    );\r\n  \tINSERT INTO framework.logtable (\r\n      tablename,\r\n      tableid,\r\n      opertype,\r\n      userid,\r\n      newdata\r\n    ) VALUES (\r\n      'framework.views',\r\n      _id::varchar(150),\r\n      '1',\r\n      _userid::int ,\r\n     _newdata   \r\n    );\r\n\toutjson = (select row_to_json(d) from ( select _id as id) as d);\r\n  ELSE\r\n     _oldata = (\r\n        SELECT row_to_json(d)\r\n        FROM\r\n        (SELECT * \r\n        FROM framework.views  \r\n        WHERE id = _id) as d\r\n\r\n      );\r\n\r\n      \r\n      UPDATE framework.views \r\n      SET\r\n        title = coalesce(_title,title),\r\n        descr = coalesce(_descr,descr),\r\n        viewtype = coalesce(_viewtype,viewtype),\r\n        pagination = coalesce(_pagination,pagination),\r\n        config = coalesce(_config,config),\r\n        "path" = coalesce(_path,"path"),\r\n        orderby = coalesce(_orderby,orderby),\r\n        groupby = coalesce(_groupby,'[]'),\r\n        filters = coalesce(_filters,'[]'),\r\n        acts = coalesce(_acts,'[]'),\r\n        roles = coalesce(_roles,'[]'),\r\n        classname = _classname,\r\n        ispagesize = coalesce(_pagesize,ispagesize),\r\n        pagecount = coalesce(_pagecount,pagecount),  \r\n        foundcount = coalesce(_foundcount,foundcount),\r\n        subscrible = coalesce(_subscrible,subscrible) ,\r\n        checker = coalesce(_checker,checker)\r\n      WHERE id = _id;\r\n      \r\n      _newdata = (\r\n      \tSELECT\r\n        \trow_to_json(d)\r\n        FROM\r\n        (SELECT * \r\n        FROM framework.views  \r\n        WHERE id = _id) as d\r\n       \r\n      );\r\n      \r\n      IF _oldata::varchar <> _newdata::varchar THEN\r\n        INSERT INTO framework.logtable (\r\n          tablename, tableid,\r\n          opertype, userid,\r\n          oldata, newdata\r\n        ) VALUES (\r\n          'framework.views', _id::varchar(150),\r\n          '2', _userid::int ,\r\n         _oldata, _newdata   \r\n        );\r\n    END IF;\r\n  END IF; \r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  _id int ;\r\n  _title varchar(150) ;\r\n  _descr varchar(1500) ;\r\n  _tablename varchar(350) ;\r\n  _viewtype varchar(200) ;\r\n  _pagination boolean ;\r\n  _config JSON ;\r\n  _path varchar(150) ;\r\n  _orderby boolean ;\r\n  _pagesize boolean ;\r\n  _pagecount boolean ;\r\n  _foundcount boolean ;\r\n  _subscrible boolean;\r\n  _checker boolean;  \r\n  _groupby JSON ;\r\n  _filters JSON ;\r\n  _acts JSON ;\r\n  _roles JSON ;\r\n  _classname varchar(400) ;\r\n  _userid varchar(250) ;\r\n  _newdata json;\r\n  _oldata json;\r\nBEGIN\r\n  _id  = injson->>'id';\r\n  _title  = injson->>'title';\r\n  _descr  = injson->>'descr';\r\n  _tablename  = injson->>'tablename';\r\n  _viewtype  = injson->>'viewtype';\r\n  _pagination  = injson->>'pagination';\r\n  _config = injson->>'config';\r\n  _path = injson->>'path';\r\n  _orderby = injson->>'orderby';\r\n  _groupby = injson->>'groupby';\r\n  _filters = injson->>'filters';\r\n  _acts = injson->>'acts';\r\n  _roles = injson->>'roles';\r\n  _classname = injson->>'classname';\r\n  _userid = injson->>'userid';\r\n  _pagesize = injson->>'ispagesize';\r\n  _pagecount = injson->>'pagecount';\r\n  _foundcount = injson->>'foundcount';\r\n  _subscrible = injson->>'subscrible';\r\n  _checker = injson->>'checker';\r\n IF _id is null THEN\r\n  \r\n    IF coalesce(_title,'') = '' THEN\r\n        PERFORM raiserror('title is null');\r\n    END IF;\r\n      \r\n    IF coalesce(_descr,'') = '' THEN\r\n        PERFORM raiserror('descr is null');\r\n    END IF;\r\n      \r\n    IF coalesce(_tablename,'') = '' THEN\r\n        perform raiserror('tablename is null');  \r\n    END IF;\r\n      \r\n    IF coalesce(_viewtype,'') = '' THEN\r\n        perform raiserror('viewtype is null');\r\n    END IF;    \r\n\r\n    _pagination = coalesce(_pagination,false);\r\n\r\n    IF coalesce(_config::varchar,'[]') = '[]' THEN\r\n    \tperform raiserror('config is null');\t\r\n    END IF;\r\n    \r\n    IF _path is null THEN\r\n    \tperform raiserror('path is null');\r\n    END IF;  \r\n    \r\n    _orderby = coalesce(_orderby,false);\r\n    _pagesize = coalesce(_pagesize,true);\r\n    _pagecount = coalesce(_pagecount,true);\r\n    _foundcount = coalesce(_foundcount,true);\r\n    _subscrible = coalesce(_subscrible,false);\r\n    \r\n    _groupby = coalesce(_groupby,'[]');\r\n    _roles = coalesce(_roles,'[]');\r\n    _filters = coalesce(_filters,'[]');\r\n\t_acts = coalesce(_acts,'[]');\r\n    \r\n    IF (SELECT \r\n        count(*)\r\n    FROM INFORMATION_SCHEMA.TABLES\r\n    WHERE concat('',TABLE_SCHEMA,'.', TABLE_NAME) = _tablename) = 0\r\n    THEN\r\n      perform raiserror('table is not exist');\r\n    END IF;\r\n    \r\n    _id = nextval('framework.views_id_seq'::regclass);\r\n\t   \r\n\r\n    INSERT INTO framework.views (\r\n    \tid,\r\n      title ,\r\n      descr ,\r\n      tablename ,\r\n      viewtype ,\r\n      pagination ,\r\n      config ,\r\n      "path" ,\r\n      orderby ,\r\n      groupby ,\r\n      filters ,\r\n      acts,\r\n      roles,\r\n      classname,\r\n      ispagesize,\r\n      pagecount,\r\n      foundcount,\r\n      subscrible,\r\n      checker\r\n    )\r\n    VALUES (\r\n      _id,\t\r\n      _title ,\r\n      _descr ,\r\n      _tablename ,\r\n      _viewtype ,\r\n      _pagination ,\r\n      _config ,\r\n      _path ,\r\n      _orderby ,\r\n      _groupby ,\r\n      _filters ,\r\n      _acts,\r\n      _roles,\r\n      _classname,\r\n      _pagesize,\r\n      _pagecount,\r\n      _foundcount ,\r\n      _subscrible   ,\r\n      coalesce(_checker,false)  \r\n    );\r\n    \r\n\r\n    _newdata  = (\r\n      SELECT row_to_json(d) \r\n      FROM \r\n      (SELECT *\r\n      FROM framework.views  \r\n      WHERE id = _id) as d\r\n    );\r\n  \tINSERT INTO framework.logtable (\r\n      tablename,\r\n      tableid,\r\n      opertype,\r\n      userid,\r\n      newdata\r\n    ) VALUES (\r\n      'framework.views',\r\n      _id::varchar(150),\r\n      '1',\r\n      _userid::int ,\r\n     _newdata   \r\n    );\r\n\toutjson = (select row_to_json(d) from ( select _id as id) as d);\r\n  ELSE\r\n     _oldata = (\r\n        SELECT row_to_json(d)\r\n        FROM\r\n        (SELECT * \r\n        FROM framework.views  \r\n        WHERE id = _id) as d\r\n\r\n      );\r\n\r\n      \r\n      UPDATE framework.views \r\n      SET\r\n        title = coalesce(_title,title),\r\n        descr = coalesce(_descr,descr),\r\n        viewtype = coalesce(_viewtype,viewtype),\r\n        pagination = coalesce(_pagination,pagination),\r\n        config = coalesce(_config,config),\r\n        "path" = coalesce(_path,"path"),\r\n        orderby = coalesce(_orderby,orderby),\r\n        groupby = coalesce(_groupby,'[]'),\r\n        filters = coalesce(_filters,'[]'),\r\n        acts = coalesce(_acts,'[]'),\r\n        roles = coalesce(_roles,'[]'),\r\n        classname = _classname,\r\n        ispagesize = coalesce(_pagesize,ispagesize),\r\n        pagecount = coalesce(_pagecount,pagecount),  \r\n        foundcount = coalesce(_foundcount,foundcount),\r\n        subscrible = coalesce(_subscrible,subscrible) ,\r\n        checker = coalesce(_checker,checker)\r\n      WHERE id = _id;\r\n      \r\n      _newdata = (\r\n      \tSELECT\r\n        \trow_to_json(d)\r\n        FROM\r\n        (SELECT * \r\n        FROM framework.views  \r\n        WHERE id = _id) as d\r\n       \r\n      );\r\n      \r\n      IF _oldata::varchar <> _newdata::varchar THEN\r\n        INSERT INTO framework.logtable (\r\n          tablename, tableid,\r\n          opertype, userid,\r\n          oldata, newdata\r\n        ) VALUES (\r\n          'framework.views', _id::varchar(150),\r\n          '2', _userid::int ,\r\n         _oldata, _newdata   \r\n        );\r\n    END IF;\r\n  END IF; \r\nEND;\r\n
227351	framework	fn_viewsave_V004	framework.fn_viewsave_V004(injson  json,outjson out json)	/*\r\n\tOLD V004\r\n    NEED TO REMOVE AFTER TESTS\r\n\r\n*/	2020-05-21 11:31:02.195905	1	f	fn_viewsave_V004(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.fn_viewsave_V004(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework."fn_viewsave_V004"(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _id int ;\r\n  _title varchar(150) ;\r\n  _descr varchar(1500) ;\r\n  _tablename varchar(350) ;\r\n  _viewtype varchar(200) ;\r\n  _pagination boolean ;\r\n  _config JSON ;\r\n  _path varchar(150) ;\r\n  _orderby boolean ;\r\n  _pagesize boolean ;\r\n  _pagecount boolean ;\r\n  _foundcount boolean ;\r\n  _subscrible boolean;\r\n  _checker boolean;  \r\n  _groupby JSON ;\r\n  _filters JSON ;\r\n  _acts JSON ;\r\n  _roles JSON ;\r\n  _classname varchar(400) ;\r\n  _userid varchar(250) ;\r\n  _newdata json;\r\n  _oldata json;\r\nBEGIN\r\n  _id  = injson->>'id';\r\n  _title  = injson->>'title';\r\n  _descr  = injson->>'descr';\r\n  _tablename  = injson->>'tablename';\r\n  _viewtype  = injson->>'viewtype';\r\n  _pagination  = injson->>'pagination';\r\n  _config = injson->>'config';\r\n  _path = injson->>'path';\r\n  _orderby = injson->>'orderby';\r\n  _groupby = injson->>'groupby';\r\n  _filters = injson->>'filters';\r\n  _acts = injson->>'acts';\r\n  _roles = injson->>'roles';\r\n  _classname = injson->>'classname';\r\n  _userid = injson->>'userid';\r\n  _pagesize = injson->>'ispagesize';\r\n  _pagecount = injson->>'pagecount';\r\n  _foundcount = injson->>'foundcount';\r\n  _subscrible = injson->>'subscrible';\r\n  _checker = injson->>'checker';\r\n IF _id is null THEN\r\n/*\r\n\tOLD V004\r\n    NEED TO REMOVE AFTER TESTS\r\n\r\n*/\r\n    IF coalesce(_title,'') = '' THEN\r\n        PERFORM raiserror('title is null');\r\n    END IF;\r\n      \r\n    IF coalesce(_descr,'') = '' THEN\r\n        PERFORM raiserror('descr is null');\r\n    END IF;\r\n      \r\n    IF coalesce(_tablename,'') = '' THEN\r\n        perform raiserror('tablename is null');  \r\n    END IF;\r\n      \r\n    IF coalesce(_viewtype,'') = '' THEN\r\n        perform raiserror('viewtype is null');\r\n    END IF;    \r\n\r\n    _pagination = coalesce(_pagination,false);\r\n\r\n    IF coalesce(_config::varchar,'[]') = '[]' THEN\r\n    \tperform raiserror('config is null');\t\r\n    END IF;\r\n    \r\n    IF _path is null THEN\r\n    \tperform raiserror('path is null');\r\n    END IF;  \r\n    \r\n    _orderby = coalesce(_orderby,false);\r\n    _pagesize = coalesce(_pagesize,true);\r\n    _pagecount = coalesce(_pagecount,true);\r\n    _foundcount = coalesce(_foundcount,true);\r\n    _subscrible = coalesce(_subscrible,false);\r\n    \r\n    _groupby = coalesce(_groupby,'[]');\r\n    _roles = coalesce(_roles,'[]');\r\n    _filters = coalesce(_filters,'[]');\r\n\t_acts = coalesce(_acts,'[]');\r\n    \r\n    IF (SELECT \r\n        count(*)\r\n    FROM INFORMATION_SCHEMA.TABLES\r\n    WHERE concat('',TABLE_SCHEMA,'.', TABLE_NAME) = _tablename) = 0\r\n    THEN\r\n      perform raiserror('table is not exist');\r\n    END IF;\r\n    \r\n    _id = nextval('framework.views_id_seq'::regclass);\r\n\t   \r\n\r\n    INSERT INTO framework.views (\r\n    \tid,\r\n      title ,\r\n      descr ,\r\n      tablename ,\r\n      viewtype ,\r\n      pagination ,\r\n      config ,\r\n      "path" ,\r\n      orderby ,\r\n      groupby ,\r\n      filters ,\r\n      acts,\r\n      roles,\r\n      classname,\r\n      ispagesize,\r\n      pagecount,\r\n      foundcount,\r\n      subscrible,\r\n      checker\r\n    )\r\n    VALUES (\r\n      _id,\t\r\n      _title ,\r\n      _descr ,\r\n      _tablename ,\r\n      _viewtype ,\r\n      _pagination ,\r\n      _config ,\r\n      _path ,\r\n      _orderby ,\r\n      _groupby ,\r\n      _filters ,\r\n      _acts,\r\n      _roles,\r\n      _classname,\r\n      _pagesize,\r\n      _pagecount,\r\n      _foundcount ,\r\n      _subscrible   ,\r\n      coalesce(_checker,false)  \r\n    );\r\n    \r\n\r\n    _newdata  = (\r\n      SELECT row_to_json(d) \r\n      FROM \r\n      (SELECT *\r\n      FROM framework.views  \r\n      WHERE id = _id) as d\r\n    );\r\n  \tINSERT INTO framework.logtable (\r\n      tablename,\r\n      tableid,\r\n      opertype,\r\n      userid,\r\n      newdata\r\n    ) VALUES (\r\n      'framework.views',\r\n      _id::varchar(150),\r\n      '1',\r\n      _userid::int ,\r\n     _newdata   \r\n    );\r\n\toutjson = (select row_to_json(d) from ( select _id as id) as d);\r\n  ELSE\r\n     _oldata = (\r\n        SELECT row_to_json(d)\r\n        FROM\r\n        (SELECT * \r\n        FROM framework.views  \r\n        WHERE id = _id) as d\r\n\r\n      );\r\n\r\n      \r\n      UPDATE framework.views \r\n      SET\r\n        title = coalesce(_title,title),\r\n        descr = coalesce(_descr,descr),\r\n        viewtype = coalesce(_viewtype,viewtype),\r\n        pagination = coalesce(_pagination,pagination),\r\n        config = coalesce(_config,config),\r\n        "path" = coalesce(_path,"path"),\r\n        orderby = coalesce(_orderby,orderby),\r\n        groupby = coalesce(_groupby,'[]'),\r\n        filters = coalesce(_filters,'[]'),\r\n        acts = coalesce(_acts,'[]'),\r\n        roles = coalesce(_roles,'[]'),\r\n        classname = _classname,\r\n        ispagesize = coalesce(_pagesize,ispagesize),\r\n        pagecount = coalesce(_pagecount,pagecount),  \r\n        foundcount = coalesce(_foundcount,foundcount),\r\n        subscrible = coalesce(_subscrible,subscrible) ,\r\n        checker = coalesce(_checker,checker)\r\n      WHERE id = _id;\r\n      \r\n      _newdata = (\r\n      \tSELECT\r\n        \trow_to_json(d)\r\n        FROM\r\n        (SELECT * \r\n        FROM framework.views  \r\n        WHERE id = _id) as d\r\n       \r\n      );\r\n      \r\n      IF _oldata::varchar <> _newdata::varchar THEN\r\n        INSERT INTO framework.logtable (\r\n          tablename,\r\n          tableid,\r\n          opertype,\r\n          userid,\r\n          oldata,\r\n          newdata\r\n        ) VALUES (\r\n          'framework.views',\r\n          _id::varchar(150),\r\n          '2',\r\n          _userid::int ,\r\n         _oldata,\r\n         _newdata   \r\n        );\r\n    END IF;\r\n  END IF; \r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  _id int ;\r\n  _title varchar(150) ;\r\n  _descr varchar(1500) ;\r\n  _tablename varchar(350) ;\r\n  _viewtype varchar(200) ;\r\n  _pagination boolean ;\r\n  _config JSON ;\r\n  _path varchar(150) ;\r\n  _orderby boolean ;\r\n  _pagesize boolean ;\r\n  _pagecount boolean ;\r\n  _foundcount boolean ;\r\n  _subscrible boolean;\r\n  _checker boolean;  \r\n  _groupby JSON ;\r\n  _filters JSON ;\r\n  _acts JSON ;\r\n  _roles JSON ;\r\n  _classname varchar(400) ;\r\n  _userid varchar(250) ;\r\n  _newdata json;\r\n  _oldata json;\r\nBEGIN\r\n  _id  = injson->>'id';\r\n  _title  = injson->>'title';\r\n  _descr  = injson->>'descr';\r\n  _tablename  = injson->>'tablename';\r\n  _viewtype  = injson->>'viewtype';\r\n  _pagination  = injson->>'pagination';\r\n  _config = injson->>'config';\r\n  _path = injson->>'path';\r\n  _orderby = injson->>'orderby';\r\n  _groupby = injson->>'groupby';\r\n  _filters = injson->>'filters';\r\n  _acts = injson->>'acts';\r\n  _roles = injson->>'roles';\r\n  _classname = injson->>'classname';\r\n  _userid = injson->>'userid';\r\n  _pagesize = injson->>'ispagesize';\r\n  _pagecount = injson->>'pagecount';\r\n  _foundcount = injson->>'foundcount';\r\n  _subscrible = injson->>'subscrible';\r\n  _checker = injson->>'checker';\r\n IF _id is null THEN\r\n/*\r\n\tOLD V004\r\n    NEED TO REMOVE AFTER TESTS\r\n\r\n*/\r\n    IF coalesce(_title,'') = '' THEN\r\n        PERFORM raiserror('title is null');\r\n    END IF;\r\n      \r\n    IF coalesce(_descr,'') = '' THEN\r\n        PERFORM raiserror('descr is null');\r\n    END IF;\r\n      \r\n    IF coalesce(_tablename,'') = '' THEN\r\n        perform raiserror('tablename is null');  \r\n    END IF;\r\n      \r\n    IF coalesce(_viewtype,'') = '' THEN\r\n        perform raiserror('viewtype is null');\r\n    END IF;    \r\n\r\n    _pagination = coalesce(_pagination,false);\r\n\r\n    IF coalesce(_config::varchar,'[]') = '[]' THEN\r\n    \tperform raiserror('config is null');\t\r\n    END IF;\r\n    \r\n    IF _path is null THEN\r\n    \tperform raiserror('path is null');\r\n    END IF;  \r\n    \r\n    _orderby = coalesce(_orderby,false);\r\n    _pagesize = coalesce(_pagesize,true);\r\n    _pagecount = coalesce(_pagecount,true);\r\n    _foundcount = coalesce(_foundcount,true);\r\n    _subscrible = coalesce(_subscrible,false);\r\n    \r\n    _groupby = coalesce(_groupby,'[]');\r\n    _roles = coalesce(_roles,'[]');\r\n    _filters = coalesce(_filters,'[]');\r\n\t_acts = coalesce(_acts,'[]');\r\n    \r\n    IF (SELECT \r\n        count(*)\r\n    FROM INFORMATION_SCHEMA.TABLES\r\n    WHERE concat('',TABLE_SCHEMA,'.', TABLE_NAME) = _tablename) = 0\r\n    THEN\r\n      perform raiserror('table is not exist');\r\n    END IF;\r\n    \r\n    _id = nextval('framework.views_id_seq'::regclass);\r\n\t   \r\n\r\n    INSERT INTO framework.views (\r\n    \tid,\r\n      title ,\r\n      descr ,\r\n      tablename ,\r\n      viewtype ,\r\n      pagination ,\r\n      config ,\r\n      "path" ,\r\n      orderby ,\r\n      groupby ,\r\n      filters ,\r\n      acts,\r\n      roles,\r\n      classname,\r\n      ispagesize,\r\n      pagecount,\r\n      foundcount,\r\n      subscrible,\r\n      checker\r\n    )\r\n    VALUES (\r\n      _id,\t\r\n      _title ,\r\n      _descr ,\r\n      _tablename ,\r\n      _viewtype ,\r\n      _pagination ,\r\n      _config ,\r\n      _path ,\r\n      _orderby ,\r\n      _groupby ,\r\n      _filters ,\r\n      _acts,\r\n      _roles,\r\n      _classname,\r\n      _pagesize,\r\n      _pagecount,\r\n      _foundcount ,\r\n      _subscrible   ,\r\n      coalesce(_checker,false)  \r\n    );\r\n    \r\n\r\n    _newdata  = (\r\n      SELECT row_to_json(d) \r\n      FROM \r\n      (SELECT *\r\n      FROM framework.views  \r\n      WHERE id = _id) as d\r\n    );\r\n  \tINSERT INTO framework.logtable (\r\n      tablename,\r\n      tableid,\r\n      opertype,\r\n      userid,\r\n      newdata\r\n    ) VALUES (\r\n      'framework.views',\r\n      _id::varchar(150),\r\n      '1',\r\n      _userid::int ,\r\n     _newdata   \r\n    );\r\n\toutjson = (select row_to_json(d) from ( select _id as id) as d);\r\n  ELSE\r\n     _oldata = (\r\n        SELECT row_to_json(d)\r\n        FROM\r\n        (SELECT * \r\n        FROM framework.views  \r\n        WHERE id = _id) as d\r\n\r\n      );\r\n\r\n      \r\n      UPDATE framework.views \r\n      SET\r\n        title = coalesce(_title,title),\r\n        descr = coalesce(_descr,descr),\r\n        viewtype = coalesce(_viewtype,viewtype),\r\n        pagination = coalesce(_pagination,pagination),\r\n        config = coalesce(_config,config),\r\n        "path" = coalesce(_path,"path"),\r\n        orderby = coalesce(_orderby,orderby),\r\n        groupby = coalesce(_groupby,'[]'),\r\n        filters = coalesce(_filters,'[]'),\r\n        acts = coalesce(_acts,'[]'),\r\n        roles = coalesce(_roles,'[]'),\r\n        classname = _classname,\r\n        ispagesize = coalesce(_pagesize,ispagesize),\r\n        pagecount = coalesce(_pagecount,pagecount),  \r\n        foundcount = coalesce(_foundcount,foundcount),\r\n        subscrible = coalesce(_subscrible,subscrible) ,\r\n        checker = coalesce(_checker,checker)\r\n      WHERE id = _id;\r\n      \r\n      _newdata = (\r\n      \tSELECT\r\n        \trow_to_json(d)\r\n        FROM\r\n        (SELECT * \r\n        FROM framework.views  \r\n        WHERE id = _id) as d\r\n       \r\n      );\r\n      \r\n      IF _oldata::varchar <> _newdata::varchar THEN\r\n        INSERT INTO framework.logtable (\r\n          tablename,\r\n          tableid,\r\n          opertype,\r\n          userid,\r\n          oldata,\r\n          newdata\r\n        ) VALUES (\r\n          'framework.views',\r\n          _id::varchar(150),\r\n          '2',\r\n          _userid::int ,\r\n         _oldata,\r\n         _newdata   \r\n        );\r\n    END IF;\r\n  END IF; \r\nEND;\r\n
227352	framework	get_colcongif	framework.get_colcongif(injson  json,outjson out json)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	get_colcongif(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.get_colcongif(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.get_colcongif(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  col varchar(350);\r\n  _table varchar(350);\r\n  \r\nBEGIN\r\n  col = injson->>'col';\r\n  _table = injson->>'table';\r\n  SELECT\r\n  \trow_to_json(d) \r\n  FROM (\r\n   SELECT \r\n      \tCASE WHEN y.table_schema is not null \r\n            THEN  concat(y.table_schema , '.' , y.table_name)\r\n             ELSE y.table_schema\r\n        END\t\t\r\n      as relation      \r\n   FROM information_schema.columns as t\r\n \t  left join pg_catalog.pg_statio_all_tables as st on \r\n      \t\tst.schemaname = t.table_schema \r\n      \t\tand st.relname = t.table_name\t\r\n \t  left join pg_catalog.pg_description pgd on pgd.objoid=st.relid\r\n\t\t\tand pgd.objsubid=t.ordinal_position\r\n       left join information_schema.table_constraints as c on c.table_name = t.table_name\r\n      \tand c.table_schema = t.table_schema and c.constraint_type = 'FOREIGN KEY'\r\n         \r\n      LEFT JOIN information_schema.key_column_usage AS x ON \r\n      c.constraint_name = x.constraint_name and x.column_name = t.column_name                        \r\n\t  LEFT JOIN information_schema.constraint_column_usage \r\n        AS y ON y.constraint_name = c.constraint_name and x.column_name = t.column_name \r\n                                 \r\n WHERE concat(t.table_schema,'.',t.table_name) = _table and t.column_name = col) as d\r\n INTO outjson;\r\n \r\n outjson = coalesce(outjson,'{}');\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  col varchar(350);\r\n  _table varchar(350);\r\n  \r\nBEGIN\r\n  col = injson->>'col';\r\n  _table = injson->>'table';\r\n  SELECT\r\n  \trow_to_json(d) \r\n  FROM (\r\n   SELECT \r\n      \tCASE WHEN y.table_schema is not null \r\n            THEN  concat(y.table_schema , '.' , y.table_name)\r\n             ELSE y.table_schema\r\n        END\t\t\r\n      as relation      \r\n   FROM information_schema.columns as t\r\n \t  left join pg_catalog.pg_statio_all_tables as st on \r\n      \t\tst.schemaname = t.table_schema \r\n      \t\tand st.relname = t.table_name\t\r\n \t  left join pg_catalog.pg_description pgd on pgd.objoid=st.relid\r\n\t\t\tand pgd.objsubid=t.ordinal_position\r\n       left join information_schema.table_constraints as c on c.table_name = t.table_name\r\n      \tand c.table_schema = t.table_schema and c.constraint_type = 'FOREIGN KEY'\r\n         \r\n      LEFT JOIN information_schema.key_column_usage AS x ON \r\n      c.constraint_name = x.constraint_name and x.column_name = t.column_name                        \r\n\t  LEFT JOIN information_schema.constraint_column_usage \r\n        AS y ON y.constraint_name = c.constraint_name and x.column_name = t.column_name \r\n                                 \r\n WHERE concat(t.table_schema,'.',t.table_name) = _table and t.column_name = col) as d\r\n INTO outjson;\r\n \r\n outjson = coalesce(outjson,'{}');\r\n\r\nEND;\r\n
227353	framework	get_colcongif_V004	framework.get_colcongif_V004(injson  json,outjson out json)	/*\r\n\tOLD V004\r\n    NEED TO REMOVE AFTER TESTS\r\n\r\n*/	2020-05-21 11:31:02.195905	1	f	get_colcongif_V004(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.get_colcongif_V004(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION framework."get_colcongif_V004"(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  col varchar(350);\r\n  _table varchar(350);\r\n  \r\nBEGIN\r\n/*\r\n\tOLD V004\r\n    NEED TO REMOVE AFTER TESTS\r\n\r\n*/\r\n  \t\r\n\r\n  col = injson->>'col';\r\n  _table = injson->>'table';\r\n  SELECT\r\n  \trow_to_json(d) \r\n  FROM\r\n  (SELECT \r\n      \tCASE WHEN y.table_schema is not null \r\n            THEN  concat(y.table_schema , '.' , y.table_name)\r\n             ELSE y.table_schema\r\n        END\t\t\r\n      as relation      \r\n FROM information_schema.columns as t\r\n \t  left join pg_catalog.pg_statio_all_tables as st on \r\n      \t\tst.schemaname = t.table_schema \r\n      \t\tand st.relname = t.table_name\t\r\n \t  left join pg_catalog.pg_description pgd on pgd.objoid=st.relid\r\n\t\t\tand pgd.objsubid=t.ordinal_position\r\n       left join information_schema.table_constraints as c on c.table_name = t.table_name\r\n      \tand c.table_schema = t.table_schema and c.constraint_type = 'FOREIGN KEY'\r\n         \r\n      LEFT JOIN information_schema.key_column_usage AS x ON \r\n      c.constraint_name = x.constraint_name and x.column_name = t.column_name                        \r\n\t  LEFT JOIN information_schema.constraint_column_usage \r\n        AS y ON y.constraint_name = c.constraint_name and x.column_name = t.column_name \r\n                                 \r\n WHERE concat(t.table_schema,'.',t.table_name) = _table and t.column_name = col) as d\r\n INTO outjson;\r\n \r\n outjson = coalesce(outjson,'{}');\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  col varchar(350);\r\n  _table varchar(350);\r\n  \r\nBEGIN\r\n/*\r\n\tOLD V004\r\n    NEED TO REMOVE AFTER TESTS\r\n\r\n*/\r\n  \t\r\n\r\n  col = injson->>'col';\r\n  _table = injson->>'table';\r\n  SELECT\r\n  \trow_to_json(d) \r\n  FROM\r\n  (SELECT \r\n      \tCASE WHEN y.table_schema is not null \r\n            THEN  concat(y.table_schema , '.' , y.table_name)\r\n             ELSE y.table_schema\r\n        END\t\t\r\n      as relation      \r\n FROM information_schema.columns as t\r\n \t  left join pg_catalog.pg_statio_all_tables as st on \r\n      \t\tst.schemaname = t.table_schema \r\n      \t\tand st.relname = t.table_name\t\r\n \t  left join pg_catalog.pg_description pgd on pgd.objoid=st.relid\r\n\t\t\tand pgd.objsubid=t.ordinal_position\r\n       left join information_schema.table_constraints as c on c.table_name = t.table_name\r\n      \tand c.table_schema = t.table_schema and c.constraint_type = 'FOREIGN KEY'\r\n         \r\n      LEFT JOIN information_schema.key_column_usage AS x ON \r\n      c.constraint_name = x.constraint_name and x.column_name = t.column_name                        \r\n\t  LEFT JOIN information_schema.constraint_column_usage \r\n        AS y ON y.constraint_name = c.constraint_name and x.column_name = t.column_name \r\n                                 \r\n WHERE concat(t.table_schema,'.',t.table_name) = _table and t.column_name = col) as d\r\n INTO outjson;\r\n \r\n outjson = coalesce(outjson,'{}');\r\n\r\nEND;\r\n
227354	framework	tr_act_parametrs_tr	framework.tr_act_parametrs_tr()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_act_parametrs_tr()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_act_parametrs_tr() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_act_parametrs_tr()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\r\n\tIF (\r\n    \tSELECT act_type\r\n        FROM framework.actions\r\n        WHERE id = NEW.actionid\r\n      ) = 'onLoad' and (NEW.paramconst is not null OR \r\n      NEW.val_desc is not null )\r\n    THEN\r\n    \tPERFORM raiserror('onLoad type parametr can be only from url');\r\n    END IF;\r\n    \r\n    RETURN NEW;\r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN\r\n\r\n\tIF (\r\n    \tSELECT act_type\r\n        FROM framework.actions\r\n        WHERE id = NEW.actionid\r\n      ) = 'onLoad' and (NEW.paramconst is not null OR \r\n      NEW.val_desc is not null )\r\n    THEN\r\n    \tPERFORM raiserror('onLoad type parametr can be only from url');\r\n    END IF;\r\n    \r\n    RETURN NEW;\r\n\r\nEND;\r\n
227355	framework	tr_actions_tr	framework.tr_actions_tr()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_actions_tr()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_actions_tr() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_actions_tr()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\tIF NEW.act_type in ('API', 'onLoad') and \r\n       NEW.api_type is NULL \r\n    THEN\r\n    \tNEW.api_type = 'get';\t\r\n        NEW.classname = coalesce(NEW.classname,'success');\r\n    END IF;\r\n    \r\n    IF NEW.act_type = 'Save' THEN\r\n    \tNEW.forevery = false;\r\n        NEW.classname = coalesce(NEW.classname,'success');\r\n    END IF; \r\n\t\r\n    IF NEW.act_type in ('Delete', 'Expand') THEN\r\n    \tNEW.forevery = true;\r\n        NEW.classname = coalesce(NEW.classname,'danger');\r\n    END IF; \r\n\r\n    \r\n    IF NEW.act_type = 'Expand' and not (\r\n    \tNEW.act_url like '/list/%' OR \r\n\t\tNEW.act_url like '/getone/%'\r\n      )    \r\n    THEN\r\n    \tPERFORM raiserror('Expand act must have list or getone url');\r\n    END IF;\r\n\tRETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN\r\n\tIF NEW.act_type in ('API', 'onLoad') and \r\n       NEW.api_type is NULL \r\n    THEN\r\n    \tNEW.api_type = 'get';\t\r\n        NEW.classname = coalesce(NEW.classname,'success');\r\n    END IF;\r\n    \r\n    IF NEW.act_type = 'Save' THEN\r\n    \tNEW.forevery = false;\r\n        NEW.classname = coalesce(NEW.classname,'success');\r\n    END IF; \r\n\t\r\n    IF NEW.act_type in ('Delete', 'Expand') THEN\r\n    \tNEW.forevery = true;\r\n        NEW.classname = coalesce(NEW.classname,'danger');\r\n    END IF; \r\n\r\n    \r\n    IF NEW.act_type = 'Expand' and not (\r\n    \tNEW.act_url like '/list/%' OR \r\n\t\tNEW.act_url like '/getone/%'\r\n      )    \r\n    THEN\r\n    \tPERFORM raiserror('Expand act must have list or getone url');\r\n    END IF;\r\n\tRETURN NEW;\r\nEND;\r\n
227356	framework	tr_actions_tr_del	framework.tr_actions_tr_del()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_actions_tr_del()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_actions_tr_del() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_actions_tr_del()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\r\n\tDELETE FROM framework.act_parametrs WHERE actionid = OLD.id;\r\n    DELETE FROM framework.act_visible_condions WHERE actionid = OLD.id;\r\n    \r\n    RETURN OLD;\r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN\r\n\r\n\tDELETE FROM framework.act_parametrs WHERE actionid = OLD.id;\r\n    DELETE FROM framework.act_visible_condions WHERE actionid = OLD.id;\r\n    \r\n    RETURN OLD;\r\nEND;\r\n
227360	framework	tr_config_tr_del	framework.tr_config_tr_del()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_config_tr_del()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_config_tr_del() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_config_tr_del()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\r\n\t-- column use in fncols \r\n    IF OLD.fncolumns::varchar like '[%]' and (\r\n    \tSELECT \r\n        \tcount(id)\r\n        FROM framework.config\r\n        WHERE (\r\n        \tSELECT \r\n            \tcount(*)\r\n            FROM json_array_elements_text(OLD.fncolumns)\r\n            WHERE value::varchar = OLD.id::varchar \r\n        ) > 0\r\n    ) > 0 THEN\r\n    \tPERFORM raiserror('column use in fn columns');\r\n    END IF;\r\n    \r\n\tDELETE FROM framework.visible_condition WHERE configid = OLD.id;\r\n\tDELETE FROM framework.select_condition WHERE configid = OLD.id;\r\n\t\r\n\tDELETE FROM framework.defaultval WHERE configid = OLD.id;\r\n    \r\n    RETURN OLD;\r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN\r\n\r\n\t-- column use in fncols \r\n    IF OLD.fncolumns::varchar like '[%]' and (\r\n    \tSELECT \r\n        \tcount(id)\r\n        FROM framework.config\r\n        WHERE (\r\n        \tSELECT \r\n            \tcount(*)\r\n            FROM json_array_elements_text(OLD.fncolumns)\r\n            WHERE value::varchar = OLD.id::varchar \r\n        ) > 0\r\n    ) > 0 THEN\r\n    \tPERFORM raiserror('column use in fn columns');\r\n    END IF;\r\n    \r\n\tDELETE FROM framework.visible_condition WHERE configid = OLD.id;\r\n\tDELETE FROM framework.select_condition WHERE configid = OLD.id;\r\n\t\r\n\tDELETE FROM framework.defaultval WHERE configid = OLD.id;\r\n    \r\n    RETURN OLD;\r\n\r\nEND;\r\n
227361	framework	tr_config_tr_ins	framework.tr_config_tr_ins()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_config_tr_ins()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_config_tr_ins() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_config_tr_ins()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\r\n\tIF (\r\n    \tSELECT \r\n        \tcount(c.id)\r\n        FROM framework.config as c\r\n        WHERE c.title = NEW.title and c.viewid = NEW.viewid\r\n    ) > 0\r\n    THEN\r\n    \tNEW.title = CONCAT(NEW.title,'_',NEW.id::varchar);\r\n    END IF;\r\n\r\n\t-- IF FN PARAMETR IS FN\r\n\tIF NEW.fn is not null\r\n    THEN\r\n    \tIF NEW.fncolumns is not null and (\r\n        \tSELECT\r\n            \tcount(c.id)\r\n            FROM framework.config as c \r\n            \tJOIN json_array_elements_text(NEW.fncolumns) as fc on c.id::varchar = fc.value::varchar\r\n            WHERE c.fn is not null\r\n        ) > 0\r\n        THEN\r\n        \tPERFORM raiserror('fn columns can not be fn');\r\n        END IF;\r\n    END IF;\r\n    \r\n    -- CHECK T NUMBER\r\n    IF NEW.table is NULL AND (\r\n    \tSELECT\r\n        \tcount(c.id)\r\n        FROM framework.config as c\r\n        WHERE c.viewid = NEW.viewid and c.t = NEW.t\r\n       ) > 0\r\n    THEN\r\n    \tSELECT\r\n        \tmax(c.t::int) + 1\r\n        FROM framework.config as c\r\n        WHERE c.viewid = NEW.viewid and isnumeric(c.t)\r\n        INTO NEW.t;     \r\n    END IF;\r\n    \r\n\tRETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN\r\n\r\n\tIF (\r\n    \tSELECT \r\n        \tcount(c.id)\r\n        FROM framework.config as c\r\n        WHERE c.title = NEW.title and c.viewid = NEW.viewid\r\n    ) > 0\r\n    THEN\r\n    \tNEW.title = CONCAT(NEW.title,'_',NEW.id::varchar);\r\n    END IF;\r\n\r\n\t-- IF FN PARAMETR IS FN\r\n\tIF NEW.fn is not null\r\n    THEN\r\n    \tIF NEW.fncolumns is not null and (\r\n        \tSELECT\r\n            \tcount(c.id)\r\n            FROM framework.config as c \r\n            \tJOIN json_array_elements_text(NEW.fncolumns) as fc on c.id::varchar = fc.value::varchar\r\n            WHERE c.fn is not null\r\n        ) > 0\r\n        THEN\r\n        \tPERFORM raiserror('fn columns can not be fn');\r\n        END IF;\r\n    END IF;\r\n    \r\n    -- CHECK T NUMBER\r\n    IF NEW.table is NULL AND (\r\n    \tSELECT\r\n        \tcount(c.id)\r\n        FROM framework.config as c\r\n        WHERE c.viewid = NEW.viewid and c.t = NEW.t\r\n       ) > 0\r\n    THEN\r\n    \tSELECT\r\n        \tmax(c.t::int) + 1\r\n        FROM framework.config as c\r\n        WHERE c.viewid = NEW.viewid and isnumeric(c.t)\r\n        INTO NEW.t;     \r\n    END IF;\r\n    \r\n\tRETURN NEW;\r\nEND;\r\n
227362	framework	tr_dialog_messages_tr_ins	framework.tr_dialog_messages_tr_ins()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_dialog_messages_tr_ins()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_dialog_messages_tr_ins() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_dialog_messages_tr_ins()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE \r\n\t_dialog_users json;\r\n    _status smallint;\r\nBEGIN\r\n\t\r\n\t-- CHECK USER ACCESS IN DIALOG\r\n\tSELECT\r\n    \td.users,\r\n        d.status\r\n    FROM framework.dialogs as d\r\n    WHERE d.id = NEW.dialog_id\r\n    INTO \r\n    \t_dialog_users,\r\n        _status\r\n        ;\r\n    \r\n    IF NEW.userid not in (\r\n    \t\tSELECT value::varchar::int \r\n        \tFROM json_array_elements(_dialog_users)\r\n    \t) \r\n    THEN\r\n    \tPERFORM raiserror('Access denied. User not in dialog');\r\n    END IF;\r\n    \r\n    -- CHECK DIALOG STATUS\r\n    IF _status in ('2')\r\n    THEN\r\n    \tPERFORM raiserror('Dialog is closed');\r\n    END IF;\r\n    \r\n    \r\n    -- CHECK USER ACTIVATION\r\n    IF (\r\n    \tSELECT \r\n        \tcount(u.id)\r\n        FROM framework.users as u\r\n        WHERE u.id = NEW.userid and u.isactive\r\n     ) = 0 \r\n    THEN\r\n    \tPERFORM raiserror('User not found or not active');\r\n    END IF;\r\n     \r\n    -- COPY MESSAGE IF FORWARDED\r\n    IF NEW.forwarded_from IS NOT NULL \r\n    THEN\r\n    \tSELECT\r\n        \td.message_text,\r\n            d.files,\r\n            d.images\r\n        FROM framework.dialog_messages as d\r\n        WHERE d.id = NEW.forwarded_from\r\n        INTO \r\n        \tNEW.message_text,\r\n            NEW.files,\r\n            NEW.images;\r\n    END IF;\r\n    \r\n    -- CHECK MESSAGE TEXT\r\n    NEW.message_text = COALESCE(NEW.message_text,'');\r\n    IF NEW.message_text = '' AND (\r\n      SELECT\r\n          count(*)\r\n      FROM json_array_elements(NEW.files)\r\n \t) = 0 AND (\r\n      SELECT\r\n          count(*)\r\n      FROM json_array_elements(NEW.images)\r\n    ) = 0\r\n    THEN\r\n\t\tPERFORM raiserror('Message is empty');\r\n    END IF;\r\n\r\n    -- DEFAULTS\r\n    NEW.files = COALESCE(NEW.files,'[]');    \r\n    NEW.images = COALESCE(NEW.images,'[]');\r\n    NEW.user_reads = array_to_json(ARRAY(\r\n    \tSELECT\r\n        \tNEW.userid\r\n    ));\r\n    \r\n    \r\n\tRETURN NEW;\r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE \r\n\t_dialog_users json;\r\n    _status smallint;\r\nBEGIN\r\n\t\r\n\t-- CHECK USER ACCESS IN DIALOG\r\n\tSELECT\r\n    \td.users,\r\n        d.status\r\n    FROM framework.dialogs as d\r\n    WHERE d.id = NEW.dialog_id\r\n    INTO \r\n    \t_dialog_users,\r\n        _status\r\n        ;\r\n    \r\n    IF NEW.userid not in (\r\n    \t\tSELECT value::varchar::int \r\n        \tFROM json_array_elements(_dialog_users)\r\n    \t) \r\n    THEN\r\n    \tPERFORM raiserror('Access denied. User not in dialog');\r\n    END IF;\r\n    \r\n    -- CHECK DIALOG STATUS\r\n    IF _status in ('2')\r\n    THEN\r\n    \tPERFORM raiserror('Dialog is closed');\r\n    END IF;\r\n    \r\n    \r\n    -- CHECK USER ACTIVATION\r\n    IF (\r\n    \tSELECT \r\n        \tcount(u.id)\r\n        FROM framework.users as u\r\n        WHERE u.id = NEW.userid and u.isactive\r\n     ) = 0 \r\n    THEN\r\n    \tPERFORM raiserror('User not found or not active');\r\n    END IF;\r\n     \r\n    -- COPY MESSAGE IF FORWARDED\r\n    IF NEW.forwarded_from IS NOT NULL \r\n    THEN\r\n    \tSELECT\r\n        \td.message_text,\r\n            d.files,\r\n            d.images\r\n        FROM framework.dialog_messages as d\r\n        WHERE d.id = NEW.forwarded_from\r\n        INTO \r\n        \tNEW.message_text,\r\n            NEW.files,\r\n            NEW.images;\r\n    END IF;\r\n    \r\n    -- CHECK MESSAGE TEXT\r\n    NEW.message_text = COALESCE(NEW.message_text,'');\r\n    IF NEW.message_text = '' AND (\r\n      SELECT\r\n          count(*)\r\n      FROM json_array_elements(NEW.files)\r\n \t) = 0 AND (\r\n      SELECT\r\n          count(*)\r\n      FROM json_array_elements(NEW.images)\r\n    ) = 0\r\n    THEN\r\n\t\tPERFORM raiserror('Message is empty');\r\n    END IF;\r\n\r\n    -- DEFAULTS\r\n    NEW.files = COALESCE(NEW.files,'[]');    \r\n    NEW.images = COALESCE(NEW.images,'[]');\r\n    NEW.user_reads = array_to_json(ARRAY(\r\n    \tSELECT\r\n        \tNEW.userid\r\n    ));\r\n    \r\n    \r\n\tRETURN NEW;\r\n\r\nEND;\r\n
227363	framework	tr_dialogs_tr_edit	framework.tr_dialogs_tr_edit()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_dialogs_tr_edit()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_dialogs_tr_edit() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_dialogs_tr_edit()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\r\n   IF NEW.dtype = '1' THEN\r\n      NEW.title = OLD.title;\r\n   END IF;\r\n   \r\n   RETURN NEW;\r\n  \r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN\r\n\r\n   IF NEW.dtype = '1' THEN\r\n      NEW.title = OLD.title;\r\n   END IF;\r\n   \r\n   RETURN NEW;\r\n  \r\nEND;\r\n
227364	framework	tr_dialogs_tr_ins	framework.tr_dialogs_tr_ins()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_dialogs_tr_ins()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_dialogs_tr_ins() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_dialogs_tr_ins()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\t\r\n\t-- IF PERSONAL DIALOG\r\n\tIF NEW.dtype = '1' \r\n    THEN\r\n    \tIF (\r\n        \tSELECT count(*) \r\n        \tFROM json_array_elements(NEW.users)\r\n        ) <> 2\r\n        THEN\r\n        \tPERFORM raiserror('For pesonal dialog must be 2 users');\r\n        END IF;\r\n        \r\n        \r\n    \tNEW.title = COALESCE(NEW.title,\r\n        \t(\r\n              SELECT\r\n                  string_agg(us.login,',') \r\n              FROM json_array_elements(NEW.users) as u\r\n                  JOIN framework.users as us on us.id = u.value::varchar::int\r\n            )\r\n        );\r\n        \r\n        -- CHECK DUBLICATES\r\n        IF (\r\n        \tSELECT \t\r\n            \tcount(d.id)\r\n        \tFROM framework.dialogs as d\r\n            WHERE  d.dtype = NEW.dtype and (\r\n            \tSELECT count(*) \r\n                FROM json_array_elements(NEW.users) as u1\r\n                \tJOIN json_array_elements(d.users) as u2 on u1.value::varchar::int = u2.value::varchar::int\r\n            ) = 2\r\n        ) > 0\r\n        THEN\r\n        \tPERFORM raiserror('Dialog already exist');\r\n        END IF;\r\n        \r\n        \r\n    END IF; \r\n    \r\n    -- CHECK USERS\r\n    IF (\r\n    \tSELECT count(*) \r\n    \tFROM json_array_elements(NEW.users)\r\n    ) <> (\r\n      SELECT\r\n     \t count(*)\r\n      FROM json_array_elements(NEW.users) as u\r\n      \tJOIN framework.users as us on us.id = u.value::varchar::int\r\n      WHERE us.isactive\r\n    )\r\n    THEN\r\n    \tPERFORM raiserror('One of dialogs user are not found or not active');\r\n    END IF;\r\n    \r\n    NEW.creator = NEW.userid;\r\n    \r\n    -- SET ADMINS BY DEFAULT\r\n\tNEW.dialog_admins = array_to_json(\r\n    \tARRAY(\r\n        \tSELECT NEW.userid\r\n        )\r\n    );\r\n    \r\n\tRETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN\r\n\t\r\n\t-- IF PERSONAL DIALOG\r\n\tIF NEW.dtype = '1' \r\n    THEN\r\n    \tIF (\r\n        \tSELECT count(*) \r\n        \tFROM json_array_elements(NEW.users)\r\n        ) <> 2\r\n        THEN\r\n        \tPERFORM raiserror('For pesonal dialog must be 2 users');\r\n        END IF;\r\n        \r\n        \r\n    \tNEW.title = COALESCE(NEW.title,\r\n        \t(\r\n              SELECT\r\n                  string_agg(us.login,',') \r\n              FROM json_array_elements(NEW.users) as u\r\n                  JOIN framework.users as us on us.id = u.value::varchar::int\r\n            )\r\n        );\r\n        \r\n        -- CHECK DUBLICATES\r\n        IF (\r\n        \tSELECT \t\r\n            \tcount(d.id)\r\n        \tFROM framework.dialogs as d\r\n            WHERE  d.dtype = NEW.dtype and (\r\n            \tSELECT count(*) \r\n                FROM json_array_elements(NEW.users) as u1\r\n                \tJOIN json_array_elements(d.users) as u2 on u1.value::varchar::int = u2.value::varchar::int\r\n            ) = 2\r\n        ) > 0\r\n        THEN\r\n        \tPERFORM raiserror('Dialog already exist');\r\n        END IF;\r\n        \r\n        \r\n    END IF; \r\n    \r\n    -- CHECK USERS\r\n    IF (\r\n    \tSELECT count(*) \r\n    \tFROM json_array_elements(NEW.users)\r\n    ) <> (\r\n      SELECT\r\n     \t count(*)\r\n      FROM json_array_elements(NEW.users) as u\r\n      \tJOIN framework.users as us on us.id = u.value::varchar::int\r\n      WHERE us.isactive\r\n    )\r\n    THEN\r\n    \tPERFORM raiserror('One of dialogs user are not found or not active');\r\n    END IF;\r\n    \r\n    NEW.creator = NEW.userid;\r\n    \r\n    -- SET ADMINS BY DEFAULT\r\n\tNEW.dialog_admins = array_to_json(\r\n    \tARRAY(\r\n        \tSELECT NEW.userid\r\n        )\r\n    );\r\n    \r\n\tRETURN NEW;\r\nEND;\r\n
227366	framework	tr_filters_tr	framework.tr_filters_tr()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_filters_tr()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_filters_tr() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_filters_tr()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\t\r\n\t-- get column title\r\n\tIF NEW.val_desc is not NULL\r\n    THEN \r\n    \tSELECT\r\n        \tcol, t\r\n        FROM framework.config\r\n        WHERE id = NEW.val_desc\r\n        INTO NEW."column", NEW.t;\r\n        IF /*(\r\n          SELECT\r\n              relation\r\n          FROM framework.config\r\n          WHERE id = NEW.val_desc\r\n        ) is null AND*/ (\r\n          SELECT\r\n              "table"\r\n          FROM framework.config\r\n          WHERE id = NEW.val_desc\r\n        ) is null \r\n        THEN\r\n        \tNEW.t = '1';\r\n        END IF;\r\n\t\t\r\n        \r\n\tEND IF;\r\n    \r\n    -- columns only for typehead type\r\n    IF NEW.type<>'typehead' THEN\r\n    \tNEW.columns = '[]'::json;\r\n    ELSE\r\n    \tNEW."column" = null;\r\n    END IF;\r\n    \r\n    RETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN\r\n\t\r\n\t-- get column title\r\n\tIF NEW.val_desc is not NULL\r\n    THEN \r\n    \tSELECT\r\n        \tcol, t\r\n        FROM framework.config\r\n        WHERE id = NEW.val_desc\r\n        INTO NEW."column", NEW.t;\r\n        IF /*(\r\n          SELECT\r\n              relation\r\n          FROM framework.config\r\n          WHERE id = NEW.val_desc\r\n        ) is null AND*/ (\r\n          SELECT\r\n              "table"\r\n          FROM framework.config\r\n          WHERE id = NEW.val_desc\r\n        ) is null \r\n        THEN\r\n        \tNEW.t = '1';\r\n        END IF;\r\n\t\t\r\n        \r\n\tEND IF;\r\n    \r\n    -- columns only for typehead type\r\n    IF NEW.type<>'typehead' THEN\r\n    \tNEW.columns = '[]'::json;\r\n    ELSE\r\n    \tNEW."column" = null;\r\n    END IF;\r\n    \r\n    RETURN NEW;\r\nEND;\r\n
227367	framework	tr_mainmenu_tr	framework.tr_mainmenu_tr()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_mainmenu_tr()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_mainmenu_tr() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_mainmenu_tr()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\r\n\tIF NEW.parentid is not null and NEW.parentid = NEW.id THEN\r\n    \tPERFORM raiserror('parent id can not be = id');\r\n    END IF;\r\n    \r\n    IF NEW.parentid is not null and \r\n    \tNEW.menuid is not null and\r\n    (SELECT \r\n    \tm.menutype\r\n     FROM framework.menus as m\r\n     WHERE m.id = NEW.menuid\r\n     ) = '3' THEN\r\n     \tPERFORM raiserror('Footer menu can not have child elements');\r\n    END IF;\r\n    \r\n    RETURN NEW;\r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN\r\n\r\n\tIF NEW.parentid is not null and NEW.parentid = NEW.id THEN\r\n    \tPERFORM raiserror('parent id can not be = id');\r\n    END IF;\r\n    \r\n    IF NEW.parentid is not null and \r\n    \tNEW.menuid is not null and\r\n    (SELECT \r\n    \tm.menutype\r\n     FROM framework.menus as m\r\n     WHERE m.id = NEW.menuid\r\n     ) = '3' THEN\r\n     \tPERFORM raiserror('Footer menu can not have child elements');\r\n    END IF;\r\n    \r\n    RETURN NEW;\r\n\r\nEND;\r\n
227368	framework	tr_menu_tr	framework.tr_menu_tr()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_menu_tr()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_menu_tr() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_menu_tr()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\r\n\tIF NEW.ismainmenu and NEW.menutype in ('1','2')\r\n    THEN\r\n    \tUPDATE framework.menus\r\n        SET ismainmenu = false\r\n        WHERE id <> NEW.id;\r\n    END IF;\r\n    IF NEW.menutype not in ('1','2') THEN\r\n    \tNEW.ismainmenu = false; \r\n    END IF;\r\n    \r\n   \r\n    \r\n    RETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN\r\n\r\n\tIF NEW.ismainmenu and NEW.menutype in ('1','2')\r\n    THEN\r\n    \tUPDATE framework.menus\r\n        SET ismainmenu = false\r\n        WHERE id <> NEW.id;\r\n    END IF;\r\n    IF NEW.menutype not in ('1','2') THEN\r\n    \tNEW.ismainmenu = false; \r\n    END IF;\r\n    \r\n   \r\n    \r\n    RETURN NEW;\r\nEND;\r\n
227369	framework	tr_menus_tr_del	framework.tr_menus_tr_del()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_menus_tr_del()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_menus_tr_del() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_menus_tr_del()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\r\n\tIF OLD.ismainmenu = true THEN\r\n    \tPERFORM raiserror('Access denied. It is main menu');\r\n    END IF;\r\n    \r\n    DELETE FROM framework.mainmenu WHERE menuid = OLD.id;\r\n    \r\n    RETURN OLD;\r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN\r\n\r\n\tIF OLD.ismainmenu = true THEN\r\n    \tPERFORM raiserror('Access denied. It is main menu');\r\n    END IF;\r\n    \r\n    DELETE FROM framework.mainmenu WHERE menuid = OLD.id;\r\n    \r\n    RETURN OLD;\r\nEND;\r\n
227370	framework	tr_notifications_tr_check	framework.tr_notifications_tr_check()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_notifications_tr_check()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_notifications_tr_check() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_notifications_tr_check()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n\r\nBEGIN\r\n\r\n\tIF NEW.for_userid is NULL AND \r\n       NEW.sessid is NULL\r\n    THEN\r\n    \tPERFORM raiserror('no session and user');\r\n    END IF;\r\n    \r\n    RETURN NEW;\r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n\r\nBEGIN\r\n\r\n\tIF NEW.for_userid is NULL AND \r\n       NEW.sessid is NULL\r\n    THEN\r\n    \tPERFORM raiserror('no session and user');\r\n    END IF;\r\n    \r\n    RETURN NEW;\r\n\r\nEND;\r\n
227371	framework	tr_orgs	framework.tr_orgs()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_orgs()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_orgs() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_orgs()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _useroles json;\r\n  _userorgs json;\r\n  _orgs json;\r\n  _org int;\r\n  _parentid int;\r\nBEGIN\r\n\tSELECT \r\n    \tu.roles,\r\n        u.orgs\r\n    FROM framework.users as u\r\n    WHERE u.id = NEW.userid\r\n    INTO _useroles,_userorgs;\r\n    _orgs = concat('[',NEW.id::varchar,']')::json;\r\n    \r\n\tIF COALESCE(NEW.parentid,0)<>0 THEN \r\n      WHILE COALESCE(NEW.parentid,0)<>0\r\n      LOOP\r\n          SELECT\r\n              parentid\r\n          FROM framework.orgs\r\n          WHERE id = _org\r\n          INTO _parentid;\r\n          IF coalesce(_parentid,0) <> 0 THEN\r\n              SELECT\r\n                  (_orgs::jsonb || concat('[',_parentid::varchar,']')::jsonb)::json   \r\n              INTO _orgs;\r\n          END IF;\r\n      END LOOP;    \r\n    END IF;     \r\n    \r\n    IF NEW.orgtype in (2,3,4) and \r\n       (\r\n       \t(SELECT count(*)\r\n         FROM json_array_elements_text(_useroles)\r\n         WHERE value::varchar::int in (0,3)) = 0\r\n         OR \r\n        (SELECT count(*)\r\n         FROM json_array_elements_text(_orgs) as o\r\n          \tJOIN json_array_elements_text(_userorgs) as uo on \r\n                  \tuo.value::varchar::int = o.value::varchar::int\r\n        ) = 0\r\n      ) THEN\r\n      \tPERFORM raiserror('Отказано в доступе');\r\n    END IF;\t\r\n    \r\n    IF NEW.orgtype in (1,5) and  -- Разрешить редактировать только админам системы, либо админам организаций\r\n       (\r\n       \t(SELECT count(*)\r\n         FROM json_array_elements_text(_useroles)\r\n         WHERE value::varchar::int in (0,1)) = 0\r\n         OR \r\n        (\r\n           (SELECT count(*)\r\n           FROM json_array_elements_text(_orgs) as o\r\n              JOIN json_array_elements_text(_userorgs) as uo on \r\n                      uo.value::varchar::int = o.value::varchar::int\r\n           ) = 0 \r\n           AND \r\n          (SELECT count(*)\r\n           FROM json_array_elements_text(_useroles)\r\n           WHERE value::varchar::int in (0,1,2)) = 0\r\n       )\r\n      ) THEN\r\n      \tPERFORM raiserror('Отказано в доступе');\r\n    END IF;\t\r\n    \r\n    IF NEW.ogrn is not null and not isnumeric(NEW.ogrn)\r\n    \tand length(NEW.ogrn)<>13\r\n    THEN\r\n\t\tPERFORM raiserror('ошибка в формате ОГРН');\r\n    END IF;\r\n    \r\n    IF NEW.inn is not null and not isnumeric(NEW.inn)\r\n    \tand length(NEW.inn)<>10\r\n    THEN\r\n\t\tPERFORM raiserror('ошибка в формате ИНН');\r\n    END IF;\r\n\r\n\tIF new.orgname<>'' and new.orgtype is not null THEN\r\n    \tNEW.completed = true;\r\n    END IF;\r\n      \r\n\tRETURN new;\r\n\r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n  _useroles json;\r\n  _userorgs json;\r\n  _orgs json;\r\n  _org int;\r\n  _parentid int;\r\nBEGIN\r\n\tSELECT \r\n    \tu.roles,\r\n        u.orgs\r\n    FROM framework.users as u\r\n    WHERE u.id = NEW.userid\r\n    INTO _useroles,_userorgs;\r\n    _orgs = concat('[',NEW.id::varchar,']')::json;\r\n    \r\n\tIF COALESCE(NEW.parentid,0)<>0 THEN \r\n      WHILE COALESCE(NEW.parentid,0)<>0\r\n      LOOP\r\n          SELECT\r\n              parentid\r\n          FROM framework.orgs\r\n          WHERE id = _org\r\n          INTO _parentid;\r\n          IF coalesce(_parentid,0) <> 0 THEN\r\n              SELECT\r\n                  (_orgs::jsonb || concat('[',_parentid::varchar,']')::jsonb)::json   \r\n              INTO _orgs;\r\n          END IF;\r\n      END LOOP;    \r\n    END IF;     \r\n    \r\n    IF NEW.orgtype in (2,3,4) and \r\n       (\r\n       \t(SELECT count(*)\r\n         FROM json_array_elements_text(_useroles)\r\n         WHERE value::varchar::int in (0,3)) = 0\r\n         OR \r\n        (SELECT count(*)\r\n         FROM json_array_elements_text(_orgs) as o\r\n          \tJOIN json_array_elements_text(_userorgs) as uo on \r\n                  \tuo.value::varchar::int = o.value::varchar::int\r\n        ) = 0\r\n      ) THEN\r\n      \tPERFORM raiserror('Отказано в доступе');\r\n    END IF;\t\r\n    \r\n    IF NEW.orgtype in (1,5) and  -- Разрешить редактировать только админам системы, либо админам организаций\r\n       (\r\n       \t(SELECT count(*)\r\n         FROM json_array_elements_text(_useroles)\r\n         WHERE value::varchar::int in (0,1)) = 0\r\n         OR \r\n        (\r\n           (SELECT count(*)\r\n           FROM json_array_elements_text(_orgs) as o\r\n              JOIN json_array_elements_text(_userorgs) as uo on \r\n                      uo.value::varchar::int = o.value::varchar::int\r\n           ) = 0 \r\n           AND \r\n          (SELECT count(*)\r\n           FROM json_array_elements_text(_useroles)\r\n           WHERE value::varchar::int in (0,1,2)) = 0\r\n       )\r\n      ) THEN\r\n      \tPERFORM raiserror('Отказано в доступе');\r\n    END IF;\t\r\n    \r\n    IF NEW.ogrn is not null and not isnumeric(NEW.ogrn)\r\n    \tand length(NEW.ogrn)<>13\r\n    THEN\r\n\t\tPERFORM raiserror('ошибка в формате ОГРН');\r\n    END IF;\r\n    \r\n    IF NEW.inn is not null and not isnumeric(NEW.inn)\r\n    \tand length(NEW.inn)<>10\r\n    THEN\r\n\t\tPERFORM raiserror('ошибка в формате ИНН');\r\n    END IF;\r\n\r\n\tIF new.orgname<>'' and new.orgtype is not null THEN\r\n    \tNEW.completed = true;\r\n    END IF;\r\n      \r\n\tRETURN new;\r\n\r\n\r\nEND;\r\n
227414	sqlmanager	fn_functions_onload	sqlmanager.fn_functions_onload(injson  json)	functions_onload 	2020-05-21 11:31:02.195905	1	f	fn_functions_onload(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.fn_functions_onload(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.fn_functions_onload(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n    UPDATE sqlmanager.functionslist\r\n    SET noscript = true; \r\n   \r\n    UPDATE sqlmanager.functionslist as f\r\n    SET\r\n\t\tfunctiontitle = p.proname,\r\n        functionschema = ns.nspname, \r\n        fullname = concat(\r\n        \tns.nspname,'.', p.proname,'(', \r\n        \tsqlmanager.fn_function_args_text(\r\n            \tARRAY_TO_JSON(p.proargnames),\r\n                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),\r\n                ARRAY_TO_JSON(p.proargmodes)\r\n            ) ,')'\r\n        ),\r\n        descr = COALESCE(pg_catalog.obj_description(p.oid),'<NO TITLE>'),\r\n        userid = _userid,\r\n        functionfulltitle = concat( p.proname,'(',\r\n        \tsqlmanager.fn_function_args_text(\r\n            \tARRAY_TO_JSON(p.proargnames),\r\n                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),\r\n                ARRAY_TO_JSON(p.proargmodes)\r\n            ),')'),\r\n          dll = pg_get_functiondef(p.oid),\r\n          args = sqlmanager.fn_function_args_json(\r\n            \tARRAY_TO_JSON(p.proargnames),\r\n                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),\r\n                ARRAY_TO_JSON(p.proargmodes)\r\n          ),\r\n          returntype = t.typname\r\n    FROM pg_proc as p\r\n    \tJOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n    \tLEFT JOIN pg_type as t on t.oid = p.prorettype\r\n\r\n    WHERE p.oid = f.id and (\r\n    \tf.functiontitle <> p.proname OR\r\n        f.functionschema <> ns.nspname OR\r\n        f.descr <> COALESCE(pg_catalog.obj_description(p.oid),'<NO TITLE>') OR\r\n        f.dll <> pg_get_functiondef(p.oid)\r\n    );\r\n    \r\n    INSERT INTO sqlmanager.functionslist(\r\n      id, functionschema,\r\n      functiontitle,\r\n      fullname, descr,\r\n      userid, functionfulltitle, \r\n      dll, args, returntype\r\n    )\r\n    SELECT \r\n        p.oid, ns.nspname, p.proname, \r\n        concat(ns.nspname,'.', p.proname,'(', \r\n        \tsqlmanager.fn_function_args_text(\r\n            \tARRAY_TO_JSON(p.proargnames),\r\n                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),\r\n                ARRAY_TO_JSON(p.proargmodes)\r\n            )\r\n        ,')'),\r\n        COALESCE(pg_catalog.obj_description(p.oid),'<NO TITLE>'),\r\n        _userid, concat( p.proname,'(', \r\n        \tsqlmanager.fn_function_args_text(\r\n            \tARRAY_TO_JSON(p.proargnames),\r\n                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),\r\n                ARRAY_TO_JSON(p.proargmodes)\r\n            )\r\n        ,')'), \r\n          pg_get_functiondef(p.oid),\r\n\t\t  sqlmanager.fn_function_args_json(\r\n            \tARRAY_TO_JSON(p.proargnames),\r\n                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),\r\n                ARRAY_TO_JSON(p.proargmodes)\r\n          )\r\n          , t.typname\r\n    FROM pg_proc as p\r\n        JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n       \tLEFT JOIN pg_type as t on t.oid = p.prorettype\r\n    WHERE ns.nspname not in ('pg_catalog','information_schema')\r\n    \tand p.oid not in (\r\n        \tSELECT id FROM sqlmanager.functionslist \r\n        )\r\n    ;\r\n    \r\n    DELETE FROM sqlmanager.functionslist \r\n    WHERE id not in (\r\n    \tSELECT p.oid\r\n        FROM pg_proc as p\r\n         INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n    \tWHERE ns.nspname not in ('pg_catalog','information_schema')\r\n    );\r\n\r\n    UPDATE sqlmanager.functionslist\r\n    SET noscript = false; \r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _userid int;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n    UPDATE sqlmanager.functionslist\r\n    SET noscript = true; \r\n   \r\n    UPDATE sqlmanager.functionslist as f\r\n    SET\r\n\t\tfunctiontitle = p.proname,\r\n        functionschema = ns.nspname, \r\n        fullname = concat(\r\n        \tns.nspname,'.', p.proname,'(', \r\n        \tsqlmanager.fn_function_args_text(\r\n            \tARRAY_TO_JSON(p.proargnames),\r\n                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),\r\n                ARRAY_TO_JSON(p.proargmodes)\r\n            ) ,')'\r\n        ),\r\n        descr = COALESCE(pg_catalog.obj_description(p.oid),'<NO TITLE>'),\r\n        userid = _userid,\r\n        functionfulltitle = concat( p.proname,'(',\r\n        \tsqlmanager.fn_function_args_text(\r\n            \tARRAY_TO_JSON(p.proargnames),\r\n                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),\r\n                ARRAY_TO_JSON(p.proargmodes)\r\n            ),')'),\r\n          dll = pg_get_functiondef(p.oid),\r\n          args = sqlmanager.fn_function_args_json(\r\n            \tARRAY_TO_JSON(p.proargnames),\r\n                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),\r\n                ARRAY_TO_JSON(p.proargmodes)\r\n          ),\r\n          returntype = t.typname\r\n    FROM pg_proc as p\r\n    \tJOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n    \tLEFT JOIN pg_type as t on t.oid = p.prorettype\r\n\r\n    WHERE p.oid = f.id and (\r\n    \tf.functiontitle <> p.proname OR\r\n        f.functionschema <> ns.nspname OR\r\n        f.descr <> COALESCE(pg_catalog.obj_description(p.oid),'<NO TITLE>') OR\r\n        f.dll <> pg_get_functiondef(p.oid)\r\n    );\r\n    \r\n    INSERT INTO sqlmanager.functionslist(\r\n      id, functionschema,\r\n      functiontitle,\r\n      fullname, descr,\r\n      userid, functionfulltitle, \r\n      dll, args, returntype\r\n    )\r\n    SELECT \r\n        p.oid, ns.nspname, p.proname, \r\n        concat(ns.nspname,'.', p.proname,'(', \r\n        \tsqlmanager.fn_function_args_text(\r\n            \tARRAY_TO_JSON(p.proargnames),\r\n                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),\r\n                ARRAY_TO_JSON(p.proargmodes)\r\n            )\r\n        ,')'),\r\n        COALESCE(pg_catalog.obj_description(p.oid),'<NO TITLE>'),\r\n        _userid, concat( p.proname,'(', \r\n        \tsqlmanager.fn_function_args_text(\r\n            \tARRAY_TO_JSON(p.proargnames),\r\n                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),\r\n                ARRAY_TO_JSON(p.proargmodes)\r\n            )\r\n        ,')'), \r\n          pg_get_functiondef(p.oid),\r\n\t\t  sqlmanager.fn_function_args_json(\r\n            \tARRAY_TO_JSON(p.proargnames),\r\n                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),\r\n                ARRAY_TO_JSON(p.proargmodes)\r\n          )\r\n          , t.typname\r\n    FROM pg_proc as p\r\n        JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n       \tLEFT JOIN pg_type as t on t.oid = p.prorettype\r\n    WHERE ns.nspname not in ('pg_catalog','information_schema')\r\n    \tand p.oid not in (\r\n        \tSELECT id FROM sqlmanager.functionslist \r\n        )\r\n    ;\r\n    \r\n    DELETE FROM sqlmanager.functionslist \r\n    WHERE id not in (\r\n    \tSELECT p.oid\r\n        FROM pg_proc as p\r\n         INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n    \tWHERE ns.nspname not in ('pg_catalog','information_schema')\r\n    );\r\n\r\n    UPDATE sqlmanager.functionslist\r\n    SET noscript = false; \r\nEND;\r\n
227372	framework	tr_select_condition_tr	framework.tr_select_condition_tr()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_select_condition_tr()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_select_condition_tr() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_select_condition_tr()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    \r\n\tIF NEW.const is null and NEW.val_desc is null and NEW.operation not like '%null%'\r\n    THEN\r\n    \tPERFORM raiserror('const or value is null');\r\n    END IF;\r\n    \r\n    IF NEW.const is not null and NEW.value is not null\r\n    THEN\r\n    \tNEW.value = null;\r\n    END IF;\r\n    SELECT\r\n    \trow_to_json(d)\r\n    FROM\r\n    (SELECT\r\n    \tc.t,\r\n        c.id as key,\r\n        c.col as label,\r\n        c.title as value\r\n    FROM framework.config as c\r\n    WHERE c.id = NEW.val_desc) as d\r\n    INTO NEW.value;\r\n    \r\n    RETURN NEW;\r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN\r\n    \r\n\tIF NEW.const is null and NEW.val_desc is null and NEW.operation not like '%null%'\r\n    THEN\r\n    \tPERFORM raiserror('const or value is null');\r\n    END IF;\r\n    \r\n    IF NEW.const is not null and NEW.value is not null\r\n    THEN\r\n    \tNEW.value = null;\r\n    END IF;\r\n    SELECT\r\n    \trow_to_json(d)\r\n    FROM\r\n    (SELECT\r\n    \tc.t,\r\n        c.id as key,\r\n        c.col as label,\r\n        c.title as value\r\n    FROM framework.config as c\r\n    WHERE c.id = NEW.val_desc) as d\r\n    INTO NEW.value;\r\n    \r\n    RETURN NEW;\r\n\r\nEND;\r\n
227373	framework	tr_spapi_tr	framework.tr_spapi_tr()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_spapi_tr()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_spapi_tr() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_spapi_tr()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\t\r\n\t-- existing in db\r\n\tIF (\r\n      SELECT \r\n        count(p.proname)\r\n      FROM pg_proc p \r\n      INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n      WHERE format('%I.%I', ns.nspname, p.proname) = NEW.procedurename \r\n    ) = 0 THEN\r\n    \tPERFORM raiserror('Can not found selected function');\r\n    END IF;\r\n    \r\n    -- Check function description\r\n    IF COALESCE((\r\n      SELECT \r\n          pd.description\r\n      FROM pg_proc p \r\n          INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n          LEFT JOIN pg_catalog.pg_description as pd on p.oid = pd.objoid\r\n      WHERE format('%I.%I', ns.nspname, p.proname) = NEW.procedurename \r\n    ),'') = '' THEN\r\n    \tPERFORM raiserror('Function without description');\r\n    END IF;\r\n    \r\n    -- IN parametr check\r\n    IF (\r\n      SELECT count(p.proname)\t\r\n      FROM pg_proc p \r\n          INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n          LEFT JOIN pg_catalog.pg_description as pd on p.oid = pd.objoid\r\n          LEFT JOIN pg_type as pt on pt.oid = p.proargtypes[0]::int\r\n      WHERE format('%I.%I', ns.nspname, p.proname) = NEW.procedurename \r\n      and p.proargnames[1] = 'injson' and upper(pt.typname) like '%JSON' \r\n      --and p.proargmodes[1] = 'i'\r\n    ) = 0 THEN\r\n    \tPERFORM raiserror('Check injson parametr');\r\n    END IF;\r\n    \r\n\t-- title\r\n\tIF (\r\n      SELECT \r\n        p.proname\r\n      FROM pg_proc p \r\n      INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n      WHERE format('%I.%I', ns.nspname, p.proname) = NEW.procedurename \r\n    ) not like 'fn_%' THEN\r\n    \tPERFORM raiserror('Function title must begun with fn_');\r\n    END IF;\r\n    \r\n    -- check api method path\r\n    new.methodname = regexp_replace(new.methodname, '[^a-z0-9_]-', '', 'g');\r\n    \r\n    RETURN NEW;\r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN\r\n\t\r\n\t-- existing in db\r\n\tIF (\r\n      SELECT \r\n        count(p.proname)\r\n      FROM pg_proc p \r\n      INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n      WHERE format('%I.%I', ns.nspname, p.proname) = NEW.procedurename \r\n    ) = 0 THEN\r\n    \tPERFORM raiserror('Can not found selected function');\r\n    END IF;\r\n    \r\n    -- Check function description\r\n    IF COALESCE((\r\n      SELECT \r\n          pd.description\r\n      FROM pg_proc p \r\n          INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n          LEFT JOIN pg_catalog.pg_description as pd on p.oid = pd.objoid\r\n      WHERE format('%I.%I', ns.nspname, p.proname) = NEW.procedurename \r\n    ),'') = '' THEN\r\n    \tPERFORM raiserror('Function without description');\r\n    END IF;\r\n    \r\n    -- IN parametr check\r\n    IF (\r\n      SELECT count(p.proname)\t\r\n      FROM pg_proc p \r\n          INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n          LEFT JOIN pg_catalog.pg_description as pd on p.oid = pd.objoid\r\n          LEFT JOIN pg_type as pt on pt.oid = p.proargtypes[0]::int\r\n      WHERE format('%I.%I', ns.nspname, p.proname) = NEW.procedurename \r\n      and p.proargnames[1] = 'injson' and upper(pt.typname) like '%JSON' \r\n      --and p.proargmodes[1] = 'i'\r\n    ) = 0 THEN\r\n    \tPERFORM raiserror('Check injson parametr');\r\n    END IF;\r\n    \r\n\t-- title\r\n\tIF (\r\n      SELECT \r\n        p.proname\r\n      FROM pg_proc p \r\n      INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n      WHERE format('%I.%I', ns.nspname, p.proname) = NEW.procedurename \r\n    ) not like 'fn_%' THEN\r\n    \tPERFORM raiserror('Function title must begun with fn_');\r\n    END IF;\r\n    \r\n    -- check api method path\r\n    new.methodname = regexp_replace(new.methodname, '[^a-z0-9_]-', '', 'g');\r\n    \r\n    RETURN NEW;\r\n\r\nEND;\r\n
227374	framework	tr_trees_add_org	framework.tr_trees_add_org()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_trees_add_org()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_trees_add_org() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_trees_add_org()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _orgid int;\r\nBEGIN\r\n\tSELECT \r\n    \torgid\r\n    FROM framework.users\r\n    WHERE id = NEW.userid\r\n    INTO _orgid;\r\n    \r\n    UPDATE framework.trees\r\n    SET orgid = _orgid\r\n    WHERE id = NEW.id;\r\n    \r\n    return null;\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n  _orgid int;\r\nBEGIN\r\n\tSELECT \r\n    \torgid\r\n    FROM framework.users\r\n    WHERE id = NEW.userid\r\n    INTO _orgid;\r\n    \r\n    UPDATE framework.trees\r\n    SET orgid = _orgid\r\n    WHERE id = NEW.id;\r\n    \r\n    return null;\r\nEND;\r\n
227375	framework	tr_trees_tr_del	framework.tr_trees_tr_del()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_trees_tr_del()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_trees_tr_del() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_trees_tr_del()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\r\n\tDELETE FROM framework.treesbranches WHERE treesid = OLD.id;\r\n    DELETE FROM framework.treesacts WHERE treesid = OLD.id;\r\n    \r\n    RETURN OLD; \r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN\r\n\r\n\tDELETE FROM framework.treesbranches WHERE treesid = OLD.id;\r\n    DELETE FROM framework.treesacts WHERE treesid = OLD.id;\r\n    \r\n    RETURN OLD; \r\n\r\nEND;\r\n
227376	framework	tr_treesbranch_check	framework.tr_treesbranch_check()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_treesbranch_check()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_treesbranch_check() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_treesbranch_check()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\tIF TG_OP = 'UPDATE' and  NEW.compoid is not null and OLD.compoid is null  THEN\r\n    \tNEW.viewid = null;\r\n    END IF;\r\n    \r\n\tIF TG_OP = 'UPDATE' and NEW.viewid is not null and OLD.viewid is null  THEN\r\n    \tNEW.compoid = null;\r\n    END IF;    \r\n    \r\n\tIF NEW.ismain THEN\r\n    \tUPDATE framework.treesbranches\r\n        SET ismain = false\r\n        WHERE treesid = NEW.treesid and id<>NEW.id;\r\n    END IF;\r\n    \r\n    return \tNEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN\r\n\tIF TG_OP = 'UPDATE' and  NEW.compoid is not null and OLD.compoid is null  THEN\r\n    \tNEW.viewid = null;\r\n    END IF;\r\n    \r\n\tIF TG_OP = 'UPDATE' and NEW.viewid is not null and OLD.viewid is null  THEN\r\n    \tNEW.compoid = null;\r\n    END IF;    \r\n    \r\n\tIF NEW.ismain THEN\r\n    \tUPDATE framework.treesbranches\r\n        SET ismain = false\r\n        WHERE treesid = NEW.treesid and id<>NEW.id;\r\n    END IF;\r\n    \r\n    return \tNEW;\r\nEND;\r\n
227377	framework	tr_user_check	framework.tr_user_check()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_user_check()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_user_check() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_user_check()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE \r\n\tuseroles json;\r\n    \r\nBEGIN\r\n\r\n    IF NEW.fam is not null and NEW.fam = '' THEN\r\n    \tperform raiserror('fam is null');\r\n    END IF;\r\n    IF NEW.im is not null and NEW.im = '' THEN\r\n    \tperform raiserror('im is null');\r\n    END IF;\r\n\r\n    IF NEW.login is not null and NEW.login = '' THEN\r\n    \tperform raiserror('login is null');\r\n    END IF;\r\n    IF TG_OP = 'INSERT' and NEW.password is null THEN\r\n    \tperform raiserror('password is null');\r\n    END IF;\r\n    IF TG_OP = 'UPDATE' and NEW.password is not null and NEW.password = 'd14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f' THEN\r\n    \tNEW.password = OLD.password;\r\n    END IF;\r\n\r\n\r\n\tIF NEW.roles is not null and  NEW.roles::varchar not like '[%]' THEN\r\n    \tperform raiserror('roles format error');\r\n    END IF;\r\n\tIF NEW.orgs is not null and  NEW.orgs::varchar not like '[%]' THEN\r\n    \tperform raiserror('orgs format error');\r\n    END IF;\r\n\t\r\n\tIF NEW.orgid is null and NEW.orgs is not null\r\n\tTHEN\r\n\t   SELECT\r\n\t      value::varchar::int\r\n\t   FROM json_array_elements_text(NEW.orgs)\r\n\t   LIMIT 1\r\n\t   INTO NEW.orgid;\r\n\tEND IF;\r\n\t\r\n\tIF NEW.roles is not null and (SELECT count(*) FROM json_array_elements_text(NEW.roles)) = 0 THEN\r\n    \tperform raiserror('no roles');\r\n    END IF;\r\n    \r\n    SELECT\r\n    \t roles\r\n    FROM framework.users\r\n    WHERE id = NEW.userid\r\n    INTO useroles;\r\n    \r\n\r\n    IF TG_OP = 'UPDATE' and NEW.roles::VARCHAR<>OLD.roles::varchar THEN\r\n      \t\r\n       IF (SELECT \r\n          coalesce( min(r.hierarchy),100000)\r\n        FROM  json_array_elements_text(Old.roles) as o\r\n          JOIN framework.roles as r on r.id = o.value::varchar::smallint) <\r\n        (SELECT \r\n              coalesce( min(r.hierarchy),100000)\r\n        FROM  json_array_elements_text(useroles) as o\r\n          JOIN framework.roles as r on r.id = o.value::varchar::smallint) THEN\r\n         perform raiserror('u can not change the roles');\r\n         \r\n       END IF;   \r\n  \r\n          \r\n    END IF;\r\n\r\n    return NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE \r\n\tuseroles json;\r\n    \r\nBEGIN\r\n\r\n    IF NEW.fam is not null and NEW.fam = '' THEN\r\n    \tperform raiserror('fam is null');\r\n    END IF;\r\n    IF NEW.im is not null and NEW.im = '' THEN\r\n    \tperform raiserror('im is null');\r\n    END IF;\r\n\r\n    IF NEW.login is not null and NEW.login = '' THEN\r\n    \tperform raiserror('login is null');\r\n    END IF;\r\n    IF TG_OP = 'INSERT' and NEW.password is null THEN\r\n    \tperform raiserror('password is null');\r\n    END IF;\r\n    IF TG_OP = 'UPDATE' and NEW.password is not null and NEW.password = 'd14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f' THEN\r\n    \tNEW.password = OLD.password;\r\n    END IF;\r\n\r\n\r\n\tIF NEW.roles is not null and  NEW.roles::varchar not like '[%]' THEN\r\n    \tperform raiserror('roles format error');\r\n    END IF;\r\n\tIF NEW.orgs is not null and  NEW.orgs::varchar not like '[%]' THEN\r\n    \tperform raiserror('orgs format error');\r\n    END IF;\r\n\t\r\n\tIF NEW.orgid is null and NEW.orgs is not null\r\n\tTHEN\r\n\t   SELECT\r\n\t      value::varchar::int\r\n\t   FROM json_array_elements_text(NEW.orgs)\r\n\t   LIMIT 1\r\n\t   INTO NEW.orgid;\r\n\tEND IF;\r\n\t\r\n\tIF NEW.roles is not null and (SELECT count(*) FROM json_array_elements_text(NEW.roles)) = 0 THEN\r\n    \tperform raiserror('no roles');\r\n    END IF;\r\n    \r\n    SELECT\r\n    \t roles\r\n    FROM framework.users\r\n    WHERE id = NEW.userid\r\n    INTO useroles;\r\n    \r\n\r\n    IF TG_OP = 'UPDATE' and NEW.roles::VARCHAR<>OLD.roles::varchar THEN\r\n      \t\r\n       IF (SELECT \r\n          coalesce( min(r.hierarchy),100000)\r\n        FROM  json_array_elements_text(Old.roles) as o\r\n          JOIN framework.roles as r on r.id = o.value::varchar::smallint) <\r\n        (SELECT \r\n              coalesce( min(r.hierarchy),100000)\r\n        FROM  json_array_elements_text(useroles) as o\r\n          JOIN framework.roles as r on r.id = o.value::varchar::smallint) THEN\r\n         perform raiserror('u can not change the roles');\r\n         \r\n       END IF;   \r\n  \r\n          \r\n    END IF;\r\n\r\n    return NEW;\r\nEND;\r\n
227378	framework	tr_view_tr_check	framework.tr_view_tr_check()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_view_tr_check()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_view_tr_check() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_view_tr_check()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\tIF NEW.viewtype like '%api' and NEW.tablename is NULL THEN\r\n    -- if data-binding from API method - view type is api, tablename is not neccesary\r\n    \tNEW.tablename = '';\r\n    END IF;\r\n    \r\n    SELECT\t\t\r\n    \tCOALESCE(NEW.descr,p.description)\r\n    FROM pg_catalog.pg_statio_all_tables as t\r\n    \tLEFT JOIN pg_catalog.pg_description as p on p.objoid = t.relid\r\n    WHERE concat(t.schemaname::varchar,'.',t.relname::varchar) = NEW.tablename \r\n    INTO NEW.descr;\r\n    \r\n    IF coalesce((\r\n      SELECT\t\t\r\n          p.description\r\n      FROM pg_catalog.pg_statio_all_tables as t\r\n          LEFT JOIN pg_catalog.pg_description as p on p.objoid = t.relid\r\n      WHERE concat(t.schemaname::varchar,'.',t.relname::varchar) = NEW.tablename \r\n      LIMIT 1\r\n    ),'') = '' THEN\r\n       PERFORM raiserror('Table has no description');\r\n    END IF;\r\n\r\n    RETURN NEW;\r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN\r\n\tIF NEW.viewtype like '%api' and NEW.tablename is NULL THEN\r\n    -- if data-binding from API method - view type is api, tablename is not neccesary\r\n    \tNEW.tablename = '';\r\n    END IF;\r\n    \r\n    SELECT\t\t\r\n    \tCOALESCE(NEW.descr,p.description)\r\n    FROM pg_catalog.pg_statio_all_tables as t\r\n    \tLEFT JOIN pg_catalog.pg_description as p on p.objoid = t.relid\r\n    WHERE concat(t.schemaname::varchar,'.',t.relname::varchar) = NEW.tablename \r\n    INTO NEW.descr;\r\n    \r\n    IF coalesce((\r\n      SELECT\t\t\r\n          p.description\r\n      FROM pg_catalog.pg_statio_all_tables as t\r\n          LEFT JOIN pg_catalog.pg_description as p on p.objoid = t.relid\r\n      WHERE concat(t.schemaname::varchar,'.',t.relname::varchar) = NEW.tablename \r\n      LIMIT 1\r\n    ),'') = '' THEN\r\n       PERFORM raiserror('Table has no description');\r\n    END IF;\r\n\r\n    RETURN NEW;\r\n\r\nEND;\r\n
227379	framework	tr_views_tr_del	framework.tr_views_tr_del()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_views_tr_del()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_views_tr_del() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_views_tr_del()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE \r\n\tolddata json;\r\nBEGIN\r\n/*\r\n    SELECT row_to_json(d)\r\n    FROM\r\n    (SELECT \r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.actions\r\n          WHERE viewid = OLD.id \r\n      ) as d) as actions,\r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.visible_condition\r\n          WHERE configid in (\r\n              SELECT id FROM framework.config WHERE viewid = OLD.id\r\n            )\r\n      ) as d) as visible_condition,\r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.select_condition\r\n          WHERE configid in (\r\n              SELECT id FROM framework.config WHERE viewid = OLD.id\r\n            )\r\n      ) as d) as select_condition,\r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.defaultval\r\n          WHERE configid in (\r\n             SELECT id FROM framework.config WHERE viewid = OLD.id\r\n          )\r\n      ) as d) as defaultval,\r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.config\r\n          WHERE viewid = OLD.id \r\n      ) as d) as config,\r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.filters\r\n          WHERE viewid = OLD.id \r\n      ) as d) as filters\r\n    ) as d\r\n    INTO olddata;\r\n*/    \r\n    \r\n    \r\n   -- UPDATE framework.views SET config = olddata WHERE id = OLD.id;\r\n    DELETE FROM framework.act_parametrs WHERE val_desc in (\r\n      SELECT id FROM framework.config WHERE viewid = OLD.id\r\n    ); \r\n    \r\n   DELETE FROM framework.act_visible_condions WHERE val_desc in (\r\n      SELECT id FROM framework.config WHERE viewid = OLD.id\r\n    ); \r\n    DELETE FROM framework.actions WHERE viewid = OLD.id;    \r\n        \r\n\tDELETE FROM framework.visible_condition WHERE configid in (\r\n      SELECT id FROM framework.config WHERE viewid = OLD.id\r\n    );\r\n    \r\n\tDELETE FROM framework.visible_condition WHERE val_desc in (\r\n      SELECT id FROM framework.config WHERE viewid = OLD.id\r\n    );\r\n    \r\n\tDELETE FROM framework.select_condition WHERE configid in (\r\n      SELECT id FROM framework.config WHERE viewid = OLD.id\r\n    );\r\n    \r\n\tDELETE FROM framework.select_condition WHERE val_desc in (\r\n      SELECT id FROM framework.config WHERE viewid = OLD.id\r\n    ); \r\n    \r\n\tDELETE FROM framework.defaultval WHERE configid in (\r\n      SELECT id FROM framework.config WHERE viewid = OLD.id\r\n    );\r\n    DELETE FROM framework.filters WHERE val_desc in (\r\n      SELECT id FROM framework.config WHERE viewid = OLD.id\r\n    );\r\n    DELETE FROM framework.filters WHERE viewid = OLD.id;\r\n\r\n\tDELETE FROM framework.config WHERE viewid = OLD.id and fn is not null;\r\n\tDELETE FROM framework.config WHERE viewid = OLD.id and fn is null;\t\r\n\t\r\n    \r\n/*    \r\n    INSERT INTO framework.logtable(\r\n      tablename, tableid, \r\n      opertype, oldata, newdata,\r\n      userid\r\n    ) VALUES (\r\n    \t'framework.views', OLD.id::varchar,\r\n        '3', olddata, '[]'::json,\r\n        1\r\n    );\r\n*/    \r\n    RETURN OLD;  \r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE \r\n\tolddata json;\r\nBEGIN\r\n/*\r\n    SELECT row_to_json(d)\r\n    FROM\r\n    (SELECT \r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.actions\r\n          WHERE viewid = OLD.id \r\n      ) as d) as actions,\r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.visible_condition\r\n          WHERE configid in (\r\n              SELECT id FROM framework.config WHERE viewid = OLD.id\r\n            )\r\n      ) as d) as visible_condition,\r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.select_condition\r\n          WHERE configid in (\r\n              SELECT id FROM framework.config WHERE viewid = OLD.id\r\n            )\r\n      ) as d) as select_condition,\r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.defaultval\r\n          WHERE configid in (\r\n             SELECT id FROM framework.config WHERE viewid = OLD.id\r\n          )\r\n      ) as d) as defaultval,\r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.config\r\n          WHERE viewid = OLD.id \r\n      ) as d) as config,\r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.filters\r\n          WHERE viewid = OLD.id \r\n      ) as d) as filters\r\n    ) as d\r\n    INTO olddata;\r\n*/    \r\n    \r\n    \r\n   -- UPDATE framework.views SET config = olddata WHERE id = OLD.id;\r\n    DELETE FROM framework.act_parametrs WHERE val_desc in (\r\n      SELECT id FROM framework.config WHERE viewid = OLD.id\r\n    ); \r\n    \r\n   DELETE FROM framework.act_visible_condions WHERE val_desc in (\r\n      SELECT id FROM framework.config WHERE viewid = OLD.id\r\n    ); \r\n    DELETE FROM framework.actions WHERE viewid = OLD.id;    \r\n        \r\n\tDELETE FROM framework.visible_condition WHERE configid in (\r\n      SELECT id FROM framework.config WHERE viewid = OLD.id\r\n    );\r\n    \r\n\tDELETE FROM framework.visible_condition WHERE val_desc in (\r\n      SELECT id FROM framework.config WHERE viewid = OLD.id\r\n    );\r\n    \r\n\tDELETE FROM framework.select_condition WHERE configid in (\r\n      SELECT id FROM framework.config WHERE viewid = OLD.id\r\n    );\r\n    \r\n\tDELETE FROM framework.select_condition WHERE val_desc in (\r\n      SELECT id FROM framework.config WHERE viewid = OLD.id\r\n    ); \r\n    \r\n\tDELETE FROM framework.defaultval WHERE configid in (\r\n      SELECT id FROM framework.config WHERE viewid = OLD.id\r\n    );\r\n    DELETE FROM framework.filters WHERE val_desc in (\r\n      SELECT id FROM framework.config WHERE viewid = OLD.id\r\n    );\r\n    DELETE FROM framework.filters WHERE viewid = OLD.id;\r\n\r\n\tDELETE FROM framework.config WHERE viewid = OLD.id and fn is not null;\r\n\tDELETE FROM framework.config WHERE viewid = OLD.id and fn is null;\t\r\n\t\r\n    \r\n/*    \r\n    INSERT INTO framework.logtable(\r\n      tablename, tableid, \r\n      opertype, oldata, newdata,\r\n      userid\r\n    ) VALUES (\r\n    \t'framework.views', OLD.id::varchar,\r\n        '3', olddata, '[]'::json,\r\n        1\r\n    );\r\n*/    \r\n    RETURN OLD;  \r\n\r\nEND;\r\n
227380	framework	tr_views_tr_ins_after	framework.tr_views_tr_ins_after()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_views_tr_ins_after()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_views_tr_ins_after() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_views_tr_ins_after()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\tIF not NEW.copy THEN\r\n      INSERT INTO framework.config (\r\n        viewid, t, col, column_id, title, type,\r\n        roles, visible, required, width,\r\n        "join", classname, updatable,\r\n        relation, select_api, multiselecttable,\r\n        orderby, orderbydesc, relcol,\r\n        depency, depencycol, relationcolums,\r\n        multicolums, column_order, fn,\r\n        fncolumns, relatecolumn, "table",\r\n        related\r\n      )\r\n      SELECT \r\n        NEW.id, c.value->>'t' as t, c.value->>'col' as col, \r\n        (c.value->>'column_id')::INTEGER as column_id,\r\n        c.value->>'title' as title, c.value->>'type' as type,\r\n        \r\n        (CASE WHEN (c.value->>'roles')::varchar like '[%'\r\n        THEN\r\n        json_build_array(array(SELECT\r\n                value->'value'\r\n           FROM json_array_elements((c.value->>'roles')::json)\r\n        ))->0\r\n        ELSE\r\n            '[]'::json\r\n        END) as roles,\r\n         \r\n        coalesce((c.value->>'visible' )::BOOLEAN,false) as visible,\r\n        COALESCE((c.value->>'required')::BOOLEAN,false) as required,\r\n        c.value->>'width' as width,\r\n        COALESCE((c.value->>'join')::BOOLEAN,false) as join,\r\n        c.value->>'classname' as classname,\r\n        COALESCE((c.value->>'updatable')::BOOLEAN,false) as updatable,\r\n        c.value->>'relation' as relation,\r\n        c.value->>'select_api' as select_api,   \r\n        c.value->>'multiselecttable' as multiselecttable,\r\n        COALESCE((c.value->>'orderby')::BOOLEAN,false) as orderby,\r\n        COALESCE((c.value->>'orderbydesc')::BOOLEAN,false) as orderbydesc,\r\n        c.value->>'relcol' as relcol,\r\n        COALESCE((c.value->>'depency')::BOOLEAN,false) as depency,\r\n        c.value->>'depencycol' as depencycol,\r\n        \r\n        (CASE WHEN (c.value->>'relationcolums')::varchar like '[%'\r\n        THEN\r\n        json_build_array(array(SELECT\r\n                value->'value'\r\n           FROM json_array_elements((c.value->>'relationcolums')::json)\r\n        ))->0\r\n        ELSE\r\n         '[]'::json\r\n        END) as relationcolums,\r\n         \r\n        (CASE WHEN (c.value->>'multicolums')::varchar like '[%'\r\n        THEN\r\n            json_build_array(array(SELECT\r\n                value->'value'\r\n           FROM json_array_elements((c.value->>'multicolums')::json)\r\n            ))->0\r\n        ELSE\r\n            '[]'::json\r\n        END\r\n        ) as multicolums,\r\n        \r\n        (row_number() over (PARTITION BY 0))*10 as column_order,\r\n        (c.value->'fn')->>'value' as fn,\r\n        \r\n        (CASE WHEN (c.value->>'fncolumns')::varchar like '[%'\r\n        THEN\r\n           json_build_array(array(SELECT\r\n                value->'value'\r\n           FROM json_array_elements((c.value->'fncolumns')::json)\r\n        ))->0 \r\n        ELSE\r\n         null\r\n        END ) as fncolumns,\r\n        \r\n        c.value->>'relatecolumn',\r\n        c.value->>'table',\r\n        coalesce((c.value->>'related')::boolean,false)\r\n     FROM json_array_elements(framework.fn_createconfig(json_build_object('tabname',NEW.tablename ))) as c;\t\r\n\tEND IF;\r\n\tRETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN\r\n\tIF not NEW.copy THEN\r\n      INSERT INTO framework.config (\r\n        viewid, t, col, column_id, title, type,\r\n        roles, visible, required, width,\r\n        "join", classname, updatable,\r\n        relation, select_api, multiselecttable,\r\n        orderby, orderbydesc, relcol,\r\n        depency, depencycol, relationcolums,\r\n        multicolums, column_order, fn,\r\n        fncolumns, relatecolumn, "table",\r\n        related\r\n      )\r\n      SELECT \r\n        NEW.id, c.value->>'t' as t, c.value->>'col' as col, \r\n        (c.value->>'column_id')::INTEGER as column_id,\r\n        c.value->>'title' as title, c.value->>'type' as type,\r\n        \r\n        (CASE WHEN (c.value->>'roles')::varchar like '[%'\r\n        THEN\r\n        json_build_array(array(SELECT\r\n                value->'value'\r\n           FROM json_array_elements((c.value->>'roles')::json)\r\n        ))->0\r\n        ELSE\r\n            '[]'::json\r\n        END) as roles,\r\n         \r\n        coalesce((c.value->>'visible' )::BOOLEAN,false) as visible,\r\n        COALESCE((c.value->>'required')::BOOLEAN,false) as required,\r\n        c.value->>'width' as width,\r\n        COALESCE((c.value->>'join')::BOOLEAN,false) as join,\r\n        c.value->>'classname' as classname,\r\n        COALESCE((c.value->>'updatable')::BOOLEAN,false) as updatable,\r\n        c.value->>'relation' as relation,\r\n        c.value->>'select_api' as select_api,   \r\n        c.value->>'multiselecttable' as multiselecttable,\r\n        COALESCE((c.value->>'orderby')::BOOLEAN,false) as orderby,\r\n        COALESCE((c.value->>'orderbydesc')::BOOLEAN,false) as orderbydesc,\r\n        c.value->>'relcol' as relcol,\r\n        COALESCE((c.value->>'depency')::BOOLEAN,false) as depency,\r\n        c.value->>'depencycol' as depencycol,\r\n        \r\n        (CASE WHEN (c.value->>'relationcolums')::varchar like '[%'\r\n        THEN\r\n        json_build_array(array(SELECT\r\n                value->'value'\r\n           FROM json_array_elements((c.value->>'relationcolums')::json)\r\n        ))->0\r\n        ELSE\r\n         '[]'::json\r\n        END) as relationcolums,\r\n         \r\n        (CASE WHEN (c.value->>'multicolums')::varchar like '[%'\r\n        THEN\r\n            json_build_array(array(SELECT\r\n                value->'value'\r\n           FROM json_array_elements((c.value->>'multicolums')::json)\r\n            ))->0\r\n        ELSE\r\n            '[]'::json\r\n        END\r\n        ) as multicolums,\r\n        \r\n        (row_number() over (PARTITION BY 0))*10 as column_order,\r\n        (c.value->'fn')->>'value' as fn,\r\n        \r\n        (CASE WHEN (c.value->>'fncolumns')::varchar like '[%'\r\n        THEN\r\n           json_build_array(array(SELECT\r\n                value->'value'\r\n           FROM json_array_elements((c.value->'fncolumns')::json)\r\n        ))->0 \r\n        ELSE\r\n         null\r\n        END ) as fncolumns,\r\n        \r\n        c.value->>'relatecolumn',\r\n        c.value->>'table',\r\n        coalesce((c.value->>'related')::boolean,false)\r\n     FROM json_array_elements(framework.fn_createconfig(json_build_object('tabname',NEW.tablename ))) as c;\t\r\n\tEND IF;\r\n\tRETURN NEW;\r\nEND;\r\n
227381	framework	tr_viewsnotification_del_doubles	framework.tr_viewsnotification_del_doubles()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_viewsnotification_del_doubles()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_viewsnotification_del_doubles() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_viewsnotification_del_doubles()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN /*Этот  триггер удаляет дубли  сообщений по полю doublemess*/ \r\n  if (old.issend=false and new.issend=true and not (new.doublemess is null))  then -- если информация о том что issend изменен на получен и причем принимает участие поле doublemess\r\n    delete from framework.viewsnotification \r\n    where doublemess=new.doublemess and id<>new.id;\r\n  end if; \r\n  RETURN NEW;\r\nEXCEPTION\r\nWHEN others THEN\r\n  RETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN /*Этот  триггер удаляет дубли  сообщений по полю doublemess*/ \r\n  if (old.issend=false and new.issend=true and not (new.doublemess is null))  then -- если информация о том что issend изменен на получен и причем принимает участие поле doublemess\r\n    delete from framework.viewsnotification \r\n    where doublemess=new.doublemess and id<>new.id;\r\n  end if; \r\n  RETURN NEW;\r\nEXCEPTION\r\nWHEN others THEN\r\n  RETURN NEW;\r\nEND;\r\n
227382	framework	tr_visible_condition_tr	framework.tr_visible_condition_tr()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_visible_condition_tr()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nframework.tr_visible_condition_tr() \r\n*/\r\nCREATE OR REPLACE FUNCTION framework.tr_visible_condition_tr()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\r\n\tIF NEW.value is null and NEW.operation not like '%null%'\r\n    THEN\r\n    \tPERFORM raiserror('value is null');\r\n    END IF; \r\n    \r\n\tIF NEW.val_desc is null\r\n    THEN\r\n    \tPERFORM raiserror('val_desc is null');\r\n    END IF;     \r\n    \r\n    RETURN NEW;\r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN\r\n\r\n\tIF NEW.value is null and NEW.operation not like '%null%'\r\n    THEN\r\n    \tPERFORM raiserror('value is null');\r\n    END IF; \r\n    \r\n\tIF NEW.val_desc is null\r\n    THEN\r\n    \tPERFORM raiserror('val_desc is null');\r\n    END IF;     \r\n    \r\n    RETURN NEW;\r\n\r\nEND;\r\n
227383	public	fn_completed_color	public.fn_completed_color(c  bool,color out varchar)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_completed_color(c  bool,color out varchar)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.fn_completed_color(c  bool,color out varchar) \r\n*/\r\nCREATE OR REPLACE FUNCTION public.fn_completed_color(c boolean, OUT color character varying)\n RETURNS character varying\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\tcolor = 'red';\r\n\r\n\tIF c THEN\r\n    \tcolor = 'green';\r\n    END IF;     \r\n\r\nEND;\r\n$function$\n	[{"argname":"c","argmode":"input","argtype":"bool"},{"argname":"color","argmode":"output","argtype":"varchar"}]	varchar	\r\nBEGIN\r\n\tcolor = 'red';\r\n\r\n\tIF c THEN\r\n    \tcolor = 'green';\r\n    END IF;     \r\n\r\nEND;\r\n
227385	public	fn_corect_error_view_config	public.fn_corect_error_view_config(_id  int4,_result out varchar)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_corect_error_view_config(_id  int4,_result out varchar)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.fn_corect_error_view_config(_id  int4,_result out varchar) \r\n*/\r\nCREATE OR REPLACE FUNCTION public.fn_corect_error_view_config(_id integer, OUT _result character varying)\n RETURNS character varying\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _i int;\r\n  _act json; \r\n  _acts json[];\r\n  _newact json;\r\nBEGIN\r\n _result='';\r\n _i=0;\r\n FOR  _act in (select value from json_array_elements ((select acts from framework.views where  id=_id)::json) as d) \r\n LOOP\r\n  _i=_i+1;\r\n  --_result=(concat(_result,' ',_i::varchar,'-',_act->>'title'::varchar,' ',_act->>'isforevery'::varchar,', '));\r\n  if _act->>'isforevery' is null \r\n    then\r\n     _newact=(_act::jsonb||'{"isforevery":"false"}'::jsonb)::json;\r\n     /*_acts=row_to_json\r\n     (\r\n         select value from json_array_elements (_acts)\r\n         -- union  select _newact\r\n     );*/\r\n     \r\n    else   \r\n     _newact=_act;\r\n  end if;\r\n END LOOP;\r\n _result=_newact::varchar;\r\n return;\r\nEND;\r\n$function$\n	[{"argname":"_id","argmode":"input","argtype":"int4"},{"argname":"_result","argmode":"output","argtype":"varchar"}]	varchar	\r\nDECLARE\r\n  _i int;\r\n  _act json; \r\n  _acts json[];\r\n  _newact json;\r\nBEGIN\r\n _result='';\r\n _i=0;\r\n FOR  _act in (select value from json_array_elements ((select acts from framework.views where  id=_id)::json) as d) \r\n LOOP\r\n  _i=_i+1;\r\n  --_result=(concat(_result,' ',_i::varchar,'-',_act->>'title'::varchar,' ',_act->>'isforevery'::varchar,', '));\r\n  if _act->>'isforevery' is null \r\n    then\r\n     _newact=(_act::jsonb||'{"isforevery":"false"}'::jsonb)::json;\r\n     /*_acts=row_to_json\r\n     (\r\n         select value from json_array_elements (_acts)\r\n         -- union  select _newact\r\n     );*/\r\n     \r\n    else   \r\n     _newact=_act;\r\n  end if;\r\n END LOOP;\r\n _result=_newact::varchar;\r\n return;\r\nEND;\r\n
227386	public	fn_users_getorgs	public.fn_users_getorgs(injson  json,result out varchar)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_users_getorgs(injson  json,result out varchar)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.fn_users_getorgs(injson  json,result out varchar) \r\n*/\r\nCREATE OR REPLACE FUNCTION public.fn_users_getorgs(injson json, OUT result character varying)\n RETURNS character varying\n LANGUAGE plpgsql\nAS $function$\r\n\r\n\r\nBEGIN\r\n    SELECT \r\n    \tstring_agg(ro.orgname, ', ')\r\n    FROM\r\n        json_array_elements_text(injson) as q\r\n    JOIN framework.orgs AS ro ON ro.id = q.value::VARCHAR::int\r\n    INTO result;\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"result","argmode":"output","argtype":"varchar"}]	varchar	\r\n\r\n\r\nBEGIN\r\n    SELECT \r\n    \tstring_agg(ro.orgname, ', ')\r\n    FROM\r\n        json_array_elements_text(injson) as q\r\n    JOIN framework.orgs AS ro ON ro.id = q.value::VARCHAR::int\r\n    INTO result;\r\nEND;\r\n
227387	public	fn_users_getroles	public.fn_users_getroles(injson  json,result out varchar)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_users_getroles(injson  json,result out varchar)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.fn_users_getroles(injson  json,result out varchar) \r\n*/\r\nCREATE OR REPLACE FUNCTION public.fn_users_getroles(injson json, OUT result character varying)\n RETURNS character varying\n LANGUAGE plpgsql\nAS $function$\r\n\r\nBEGIN\r\n    SELECT \r\n        string_agg(ro.rolename, ', ')\r\n    FROM\r\n        json_array_elements_text(injson) as q\r\n    JOIN framework.roles AS ro ON ro.id = q.value::VARCHAR::int\r\n    INTO result;\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"result","argmode":"output","argtype":"varchar"}]	varchar	\r\n\r\nBEGIN\r\n    SELECT \r\n        string_agg(ro.rolename, ', ')\r\n    FROM\r\n        json_array_elements_text(injson) as q\r\n    JOIN framework.roles AS ro ON ro.id = q.value::VARCHAR::int\r\n    INTO result;\r\nEND;\r\n
227388	public	fn_view_copy_json_test	public.fn_view_copy_json_test(_id  int4,outjson out json)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_view_copy_json_test(_id  int4,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.fn_view_copy_json_test(_id  int4,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION public.fn_view_copy_json_test(_id integer, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  SELECT\r\n      row_to_json(d)\r\n  FROM \r\n  (SELECT COALESCE((\r\n      SELECT \r\n         row_to_json(f)\r\n      FROM (\r\n        SELECT v.*\r\n        FROM framework.views as v\r\n        WHERE v.id = _id\r\n      ) as f),'[]') as view, COALESCE((\r\n        SELECT\r\n            array_to_json(array_agg(row_to_json(f)))\r\n        FROM (\r\n            SELECT\r\n                c.*\r\n            FROM framework.config as c\r\n            WHERE c.viewid = _id\r\n        ) as f),'[]') as config, COALESCE((\r\n        SELECT\r\n            array_to_json(array_agg(row_to_json(f)))\r\n        FROM (\r\n            SELECT\r\n                a.*\r\n            FROM framework.actions as a\r\n            WHERE a.viewid = _id\r\n        ) as f),'[]') as actions, COALESCE((\r\n        SELECT\r\n            array_to_json(array_agg(row_to_json(f)))\r\n        FROM (\r\n            SELECT\r\n                ff.*\r\n            FROM framework.filters as ff\r\n            WHERE ff.viewid = _id\r\n        ) as f),'[]') as filters, COALESCE((\r\n        SELECT\r\n            array_to_json(array_agg(row_to_json(f)))\r\n        FROM (\r\n            SELECT\r\n                ap.*\r\n            FROM framework.act_parametrs as ap\r\n              JOIN framework.actions as a on a.id = ap.actionid\r\n            WHERE a.viewid = _id\r\n        ) as f),'[]') as act_parametrs, COALESCE((\r\n          SELECT\r\n              array_to_json(array_agg(row_to_json(f)))\r\n          FROM (\r\n              SELECT\r\n                  vc.*\r\n              FROM framework.visible_condition as vc\r\n                JOIN framework.config as c on c.id = vc.configid\r\n              WHERE c.viewid = _id\r\n          ) as f),'[]') as visible_condition, COALESCE((\r\n          SELECT\r\n              array_to_json(array_agg(row_to_json(f)))\r\n          FROM (\r\n              SELECT\r\n                  sc.*\r\n              FROM framework.select_condition as sc\r\n                JOIN framework.config as c on c.id = sc.configid\r\n              WHERE c.viewid = _id\r\n          ) as f),'[]') as select_condition,  COALESCE((\r\n          SELECT\r\n              array_to_json(array_agg(row_to_json(f)))\r\n          FROM (\r\n              SELECT\r\n                  df.*\r\n              FROM framework.defaultval as df\r\n                JOIN framework.config as c on c.id = df.configid\r\n              WHERE c.viewid = _id\r\n          ) as f),'[]') as defaultval, COALESCE((\r\n          SELECT\r\n              array_to_json(array_agg(row_to_json(f)))\r\n          FROM (\r\n              SELECT\r\n                  av.*\r\n              FROM framework.act_visible_condions as av\r\n                JOIN framework.actions as a on a.id = av.actionid\r\n              WHERE a.viewid = _id\r\n          ) as f),'[]') as act_visible_condions) as d\r\n    INTO outjson    \r\n        ;\r\n      \r\n\r\nEND;\r\n$function$\n	[{"argname":"_id","argmode":"input","argtype":"int4"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nBEGIN\r\n  SELECT\r\n      row_to_json(d)\r\n  FROM \r\n  (SELECT COALESCE((\r\n      SELECT \r\n         row_to_json(f)\r\n      FROM (\r\n        SELECT v.*\r\n        FROM framework.views as v\r\n        WHERE v.id = _id\r\n      ) as f),'[]') as view, COALESCE((\r\n        SELECT\r\n            array_to_json(array_agg(row_to_json(f)))\r\n        FROM (\r\n            SELECT\r\n                c.*\r\n            FROM framework.config as c\r\n            WHERE c.viewid = _id\r\n        ) as f),'[]') as config, COALESCE((\r\n        SELECT\r\n            array_to_json(array_agg(row_to_json(f)))\r\n        FROM (\r\n            SELECT\r\n                a.*\r\n            FROM framework.actions as a\r\n            WHERE a.viewid = _id\r\n        ) as f),'[]') as actions, COALESCE((\r\n        SELECT\r\n            array_to_json(array_agg(row_to_json(f)))\r\n        FROM (\r\n            SELECT\r\n                ff.*\r\n            FROM framework.filters as ff\r\n            WHERE ff.viewid = _id\r\n        ) as f),'[]') as filters, COALESCE((\r\n        SELECT\r\n            array_to_json(array_agg(row_to_json(f)))\r\n        FROM (\r\n            SELECT\r\n                ap.*\r\n            FROM framework.act_parametrs as ap\r\n              JOIN framework.actions as a on a.id = ap.actionid\r\n            WHERE a.viewid = _id\r\n        ) as f),'[]') as act_parametrs, COALESCE((\r\n          SELECT\r\n              array_to_json(array_agg(row_to_json(f)))\r\n          FROM (\r\n              SELECT\r\n                  vc.*\r\n              FROM framework.visible_condition as vc\r\n                JOIN framework.config as c on c.id = vc.configid\r\n              WHERE c.viewid = _id\r\n          ) as f),'[]') as visible_condition, COALESCE((\r\n          SELECT\r\n              array_to_json(array_agg(row_to_json(f)))\r\n          FROM (\r\n              SELECT\r\n                  sc.*\r\n              FROM framework.select_condition as sc\r\n                JOIN framework.config as c on c.id = sc.configid\r\n              WHERE c.viewid = _id\r\n          ) as f),'[]') as select_condition,  COALESCE((\r\n          SELECT\r\n              array_to_json(array_agg(row_to_json(f)))\r\n          FROM (\r\n              SELECT\r\n                  df.*\r\n              FROM framework.defaultval as df\r\n                JOIN framework.config as c on c.id = df.configid\r\n              WHERE c.viewid = _id\r\n          ) as f),'[]') as defaultval, COALESCE((\r\n          SELECT\r\n              array_to_json(array_agg(row_to_json(f)))\r\n          FROM (\r\n              SELECT\r\n                  av.*\r\n              FROM framework.act_visible_condions as av\r\n                JOIN framework.actions as a on a.id = av.actionid\r\n              WHERE a.viewid = _id\r\n          ) as f),'[]') as act_visible_condions) as d\r\n    INTO outjson    \r\n        ;\r\n      \r\n\r\nEND;\r\n
227389	public	fn_withoutDesc_setRightFnTitle	public.fn_withoutDesc_setRightFnTitle(_schemaname  varchar,_fn_name  varchar,_newschemaname  varchar)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_withoutDesc_setRightFnTitle(_schemaname  varchar,_fn_name  varchar,_newschemaname  varchar)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.fn_withoutDesc_setRightFnTitle(_schemaname  varchar,_fn_name  varchar,_newschemaname  varchar) \r\n*/\r\nCREATE OR REPLACE FUNCTION public."fn_withoutDesc_setRightFnTitle"(_schemaname character varying, _fn_name character varying, _newschemaname character varying)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _squery varchar;\r\n  _nfnname varchar(500);\r\nBEGIN\r\n\r\n\tIF _schemaname<>_newschemaname\r\n    THEN\r\n      _squery = CONCAT(\r\n          'ALTER FUNCTION "',_schemaname,'"."', _fn_name,\r\n          '"() SET SCHEMA "',_newschemaname,'";'\r\n      );\r\n      EXECUTE(_squery);\r\n    END IF;\r\n    \r\n    \r\n\r\n\r\n    \r\n   --_squery = CONCAT(_squery,' SET SCHEMA ', _schemaname,' ',_newschemaname,';');\r\n    \r\n    \r\n    \r\n    IF _fn_name not like 'tr_%'\r\n    THEN\r\n    \t_nfnname = _fn_name;\r\n    \tIF _nfnname like 'fn_%'\r\n        THEN\r\n        \t_nfnname = replace(_fn_name,'fn_','');\r\n        END IF;\r\n        \r\n        _nfnname = concat('"tr_', _nfnname,'"');\r\n        _squery = CONCAT(\r\n        \t'ALTER FUNCTION "',_newschemaname,'"."', _fn_name,\r\n            '"() RENAME TO ', _nfnname,';'\r\n        );\r\n        EXECUTE(_squery);\r\n    END IF;\r\n\t\r\n\r\nEND;\r\n$function$\n	[{"argname":"_schemaname","argmode":"input","argtype":"varchar"},{"argname":"_fn_name","argmode":"input","argtype":"varchar"},{"argname":"_newschemaname","argmode":"input","argtype":"varchar"}]	void	\r\nDECLARE\r\n  _squery varchar;\r\n  _nfnname varchar(500);\r\nBEGIN\r\n\r\n\tIF _schemaname<>_newschemaname\r\n    THEN\r\n      _squery = CONCAT(\r\n          'ALTER FUNCTION "',_schemaname,'"."', _fn_name,\r\n          '"() SET SCHEMA "',_newschemaname,'";'\r\n      );\r\n      EXECUTE(_squery);\r\n    END IF;\r\n    \r\n    \r\n\r\n\r\n    \r\n   --_squery = CONCAT(_squery,' SET SCHEMA ', _schemaname,' ',_newschemaname,';');\r\n    \r\n    \r\n    \r\n    IF _fn_name not like 'tr_%'\r\n    THEN\r\n    \t_nfnname = _fn_name;\r\n    \tIF _nfnname like 'fn_%'\r\n        THEN\r\n        \t_nfnname = replace(_fn_name,'fn_','');\r\n        END IF;\r\n        \r\n        _nfnname = concat('"tr_', _nfnname,'"');\r\n        _squery = CONCAT(\r\n        \t'ALTER FUNCTION "',_newschemaname,'"."', _fn_name,\r\n            '"() RENAME TO ', _nfnname,';'\r\n        );\r\n        EXECUTE(_squery);\r\n    END IF;\r\n\t\r\n\r\nEND;\r\n
227390	public	fn_withoutDesc_tables	public.fn_withoutDesc_tables(_schema  varchar,schema  varchar,tablename  varchar,description  varchar)	ТАБЛИЦЫ БЕЗ ОПИСАНИЙ	2020-05-21 11:31:02.195905	1	f	fn_withoutDesc_tables(_schema  varchar,schema  varchar,tablename  varchar,description  varchar)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.fn_withoutDesc_tables(_schema  varchar,schema  varchar,tablename  varchar,description  varchar) \r\n*/\r\nCREATE OR REPLACE FUNCTION public."fn_withoutDesc_tables"(_schema character varying)\n RETURNS TABLE(schema character varying, tablename character varying, description character varying)\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  RETURN QUERY\r\n  SELECT \r\n\t   t.schemaname::varchar, \r\n\t   t.relname::varchar as table,\r\n\t   COALESCE(p.description,'НЕТ ОПИСАНИЯ')::varchar as desc\r\n  FROM pg_catalog.pg_statio_all_tables as t\r\n\t  LEFT JOIN pg_catalog.pg_description as p on p.objoid = t.relid\r\n  WHERE t.schemaname = _schema and (COALESCE(p.description,'') = '' OR\r\n\t\tp.description = 'НЕТ ОПИСАНИЯ');\r\n\r\nEND;\r\n$function$\n	[{"argname":"_schema","argmode":"input","argtype":"varchar"},{"argname":"schema","argmode":"input","argtype":"varchar"},{"argname":"tablename","argmode":"input","argtype":"varchar"},{"argname":"description","argmode":"input","argtype":"varchar"}]	record	\r\nBEGIN\r\n  RETURN QUERY\r\n  SELECT \r\n\t   t.schemaname::varchar, \r\n\t   t.relname::varchar as table,\r\n\t   COALESCE(p.description,'НЕТ ОПИСАНИЯ')::varchar as desc\r\n  FROM pg_catalog.pg_statio_all_tables as t\r\n\t  LEFT JOIN pg_catalog.pg_description as p on p.objoid = t.relid\r\n  WHERE t.schemaname = _schema and (COALESCE(p.description,'') = '' OR\r\n\t\tp.description = 'НЕТ ОПИСАНИЯ');\r\n\r\nEND;\r\n
227391	public	fn_withoutDesc_triggers	public.fn_withoutDesc_triggers(_schemaname  varchar,tab  varchar,tg_name  varchar,function_shema  varchar,fnresult  varchar)	 -- triggers with wrong schemas and names	2020-05-21 11:31:02.195905	1	f	fn_withoutDesc_triggers(_schemaname  varchar,tab  varchar,tg_name  varchar,function_shema  varchar,fnresult  varchar)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.fn_withoutDesc_triggers(_schemaname  varchar,tab  varchar,tg_name  varchar,function_shema  varchar,fnresult  varchar) \r\n*/\r\nCREATE OR REPLACE FUNCTION public."fn_withoutDesc_triggers"(_schemaname character varying)\n RETURNS TABLE(tab character varying, tg_name character varying, function_shema character varying, fnresult character varying)\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  RETURN QUERY\r\n  SELECT \r\n   --c.*,\r\n      CONCAT(n.nspname,'.', c.relname)::varchar as tablename, \r\n      t.tgname::varchar as tg_name,\r\n      concat(pn.nspname,'.', p.proname)::varchar as functionschema ,\r\n      "fn_withoutDesc_setRightFnTitle"(\r\n         pn.nspname::varchar,\r\n         p.proname::varchar,\r\n     \t n.nspname::varchar   \r\n      )::varchar as fn_result\r\n  FROM pg_trigger as t\r\n       JOIN pg_class as c on c.oid = t.tgrelid \r\n       JOIN pg_namespace as n on n.oid = c.relnamespace\r\n       JOIN pg_proc as p on p.oid = t.tgfoid\r\n       JOIN pg_namespace pn ON pn.oid = p.pronamespace\r\n  WHERE n.nspname = _schemaname and not t.tgisinternal \r\n      AND ( n.nspname <> pn.nspname OR p.proname not like 'tr_%');\r\nEND;\r\n$function$\n	[{"argname":"_schemaname","argmode":"input","argtype":"varchar"},{"argname":"tab","argmode":"input","argtype":"varchar"},{"argname":"tg_name","argmode":"input","argtype":"varchar"},{"argname":"function_shema","argmode":"input","argtype":"varchar"},{"argname":"fnresult","argmode":"input","argtype":"varchar"}]	record	\r\nBEGIN\r\n  RETURN QUERY\r\n  SELECT \r\n   --c.*,\r\n      CONCAT(n.nspname,'.', c.relname)::varchar as tablename, \r\n      t.tgname::varchar as tg_name,\r\n      concat(pn.nspname,'.', p.proname)::varchar as functionschema ,\r\n      "fn_withoutDesc_setRightFnTitle"(\r\n         pn.nspname::varchar,\r\n         p.proname::varchar,\r\n     \t n.nspname::varchar   \r\n      )::varchar as fn_result\r\n  FROM pg_trigger as t\r\n       JOIN pg_class as c on c.oid = t.tgrelid \r\n       JOIN pg_namespace as n on n.oid = c.relnamespace\r\n       JOIN pg_proc as p on p.oid = t.tgfoid\r\n       JOIN pg_namespace pn ON pn.oid = p.pronamespace\r\n  WHERE n.nspname = _schemaname and not t.tgisinternal \r\n      AND ( n.nspname <> pn.nspname OR p.proname not like 'tr_%');\r\nEND;\r\n
227392	public	fn_withoutDesc_triggers_test	public.fn_withoutDesc_triggers_test(_schemaname  varchar,tab  varchar,tg_name  varchar,function_shema  varchar,fnresult  json)	 -- triggers with wrong schemas and names	2020-05-21 11:31:02.195905	1	f	fn_withoutDesc_triggers_test(_schemaname  varchar,tab  varchar,tg_name  varchar,function_shema  varchar,fnresult  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.fn_withoutDesc_triggers_test(_schemaname  varchar,tab  varchar,tg_name  varchar,function_shema  varchar,fnresult  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION public."fn_withoutDesc_triggers_test"(_schemaname character varying)\n RETURNS TABLE(tab character varying, tg_name character varying, function_shema character varying, fnresult json)\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  RETURN QUERY\r\n  SELECT \r\n   --c.*,\r\n      CONCAT(n.nspname,'.', c.relname)::varchar as tablename, \r\n      t.tgname::varchar as tg_name,\r\n      concat(pn.nspname,'.', p.proname)::varchar as functionschema ,\r\n      t.tgargs as fnresult\r\n  FROM pg_trigger as t\r\n       JOIN pg_class as c on c.oid = t.tgrelid \r\n       JOIN pg_namespace as n on n.oid = c.relnamespace\r\n       JOIN pg_proc as p on p.oid = t.tgfoid\r\n       JOIN pg_namespace pn ON pn.oid = p.pronamespace\r\n  WHERE n.nspname = _schemaname ;\r\nEND;\r\n$function$\n	[{"argname":"_schemaname","argmode":"input","argtype":"varchar"},{"argname":"tab","argmode":"input","argtype":"varchar"},{"argname":"tg_name","argmode":"input","argtype":"varchar"},{"argname":"function_shema","argmode":"input","argtype":"varchar"},{"argname":"fnresult","argmode":"input","argtype":"json"}]	record	\r\nBEGIN\r\n  RETURN QUERY\r\n  SELECT \r\n   --c.*,\r\n      CONCAT(n.nspname,'.', c.relname)::varchar as tablename, \r\n      t.tgname::varchar as tg_name,\r\n      concat(pn.nspname,'.', p.proname)::varchar as functionschema ,\r\n      t.tgargs as fnresult\r\n  FROM pg_trigger as t\r\n       JOIN pg_class as c on c.oid = t.tgrelid \r\n       JOIN pg_namespace as n on n.oid = c.relnamespace\r\n       JOIN pg_proc as p on p.oid = t.tgfoid\r\n       JOIN pg_namespace pn ON pn.oid = p.pronamespace\r\n  WHERE n.nspname = _schemaname ;\r\nEND;\r\n
227393	public	fn_yesorno	public.fn_yesorno(b  bool,y out varchar)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_yesorno(b  bool,y out varchar)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.fn_yesorno(b  bool,y out varchar) \r\n*/\r\nCREATE OR REPLACE FUNCTION public.fn_yesorno(b boolean, OUT y character varying)\n RETURNS character varying\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\tIF b THEN\r\n    \ty = 'ДА';\r\n    ELSE\r\n    \ty = 'НЕТ';\r\n    END IF;\r\n\r\nEND;\r\n$function$\n	[{"argname":"b","argmode":"input","argtype":"bool"},{"argname":"y","argmode":"output","argtype":"varchar"}]	varchar	\r\nBEGIN\r\n\tIF b THEN\r\n    \ty = 'ДА';\r\n    ELSE\r\n    \ty = 'НЕТ';\r\n    END IF;\r\n\r\nEND;\r\n
227394	public	isnumeric	public.isnumeric()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	isnumeric()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.isnumeric() \r\n*/\r\nCREATE OR REPLACE FUNCTION public.isnumeric(text)\n RETURNS boolean\n LANGUAGE plpgsql\n IMMUTABLE STRICT\nAS $function$\r\nDECLARE x NUMERIC;\r\nBEGIN\r\n    x = $1::NUMERIC;\r\n    RETURN TRUE;\r\nEXCEPTION WHEN others THEN\r\n    RETURN FALSE;\r\nEND;\r\n$function$\n	[]	bool	\r\nDECLARE x NUMERIC;\r\nBEGIN\r\n    x = $1::NUMERIC;\r\n    RETURN TRUE;\r\nEXCEPTION WHEN others THEN\r\n    RETURN FALSE;\r\nEND;\r\n
227395	public	raiserror	public.raiserror(_hint  varchar)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	raiserror(_hint  varchar)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\npublic.raiserror(_hint  varchar) \r\n*/\r\nCREATE OR REPLACE FUNCTION public.raiserror(_hint character varying)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\tRAISE EXCEPTION 'usererror' USING HINT=concat(_hint,'+++___');\r\nEND;\r\n$function$\n	[{"argname":"_hint","argmode":"input","argtype":"varchar"}]	void	\r\nBEGIN\r\n\tRAISE EXCEPTION 'usererror' USING HINT=concat(_hint,'+++___');\r\nEND;\r\n
227397	reports	fn_getmethod_info	reports.fn_getmethod_info(injson  json,outjson out json)	get method info	2020-05-21 11:31:02.195905	1	f	fn_getmethod_info(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nreports.fn_getmethod_info(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION reports.fn_getmethod_info(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n\t_id int; \r\nBEGIN\r\n\t_id = injson->>'id';\r\n\t\r\n\r\n\tSELECT\r\n    \trow_to_json(d)\r\n    FROM (\r\n\t  SELECT\r\n\t\t  s.methodname,\r\n\t\t  s.methodtype,\r\n\t\t  mt.methotypename\r\n\t  FROM framework.spapi as s\r\n\t\t  LEFT JOIN framework.methodtypes as mt on mt.id = s.methodtype\r\n\t  WHERE s.id = _id\r\n\t) as d\r\n\tinto outjson;\r\n    \r\n    outjson = coalesce(outjson,'{}');\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n\t_id int; \r\nBEGIN\r\n\t_id = injson->>'id';\r\n\t\r\n\r\n\tSELECT\r\n    \trow_to_json(d)\r\n    FROM (\r\n\t  SELECT\r\n\t\t  s.methodname,\r\n\t\t  s.methodtype,\r\n\t\t  mt.methotypename\r\n\t  FROM framework.spapi as s\r\n\t\t  LEFT JOIN framework.methodtypes as mt on mt.id = s.methodtype\r\n\t  WHERE s.id = _id\r\n\t) as d\r\n\tinto outjson;\r\n    \r\n    outjson = coalesce(outjson,'{}');\r\nEND;\r\n
227405	sqlmanager	fn_fk_maintablecols_select	sqlmanager.fn_fk_maintablecols_select(injson  json,outjson out json)	FOREIGN KEYS MAINTABLE FIELDS	2020-05-21 11:31:02.195905	1	f	fn_fk_maintablecols_select(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.fn_fk_maintablecols_select(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.fn_fk_maintablecols_select(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _tablename varchar(300);\r\nBEGIN\r\n\r\n\t_tablename = (injson->'inputs')->>'tablename';\r\n    _tablename = COALESCE(_tablename, (injson->'inputs')->>'maintablename');\r\n      \r\n    SELECT \r\n      array_to_json(array_agg(row_to_json(d)))\r\n    FROM (\r\n      SELECT \r\n      \tcolumn_name as label, column_name as value\r\n      FROM information_schema.columns\r\n      WHERE concat(table_schema,'.',table_name) = _tablename\r\n    ) as d\r\n    INTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  _tablename varchar(300);\r\nBEGIN\r\n\r\n\t_tablename = (injson->'inputs')->>'tablename';\r\n    _tablename = COALESCE(_tablename, (injson->'inputs')->>'maintablename');\r\n      \r\n    SELECT \r\n      array_to_json(array_agg(row_to_json(d)))\r\n    FROM (\r\n      SELECT \r\n      \tcolumn_name as label, column_name as value\r\n      FROM information_schema.columns\r\n      WHERE concat(table_schema,'.',table_name) = _tablename\r\n    ) as d\r\n    INTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\n\r\nEND;\r\n
227398	reports	fn_getreports_fn	reports.fn_getreports_fn(injson  json,outjson out json)	get report info	2020-05-21 11:31:02.195905	1	f	fn_getreports_fn(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nreports.fn_getreports_fn(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION reports.fn_getreports_fn(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE \r\n\t_substr varchar(130);\r\nBEGIN\r\n\r\n  _substr = injson->>'substr';\t\r\n\r\n  _substr = CONCAT('%',upper(coalesce(_substr,'%')),'%');\t\r\n\r\n  SELECT\r\n  \tarray_to_json(array_agg(row_to_json(p)))\r\n  FROM (\r\n\tSELECT \r\n\t  format('%I.%I', ns.nspname, p.proname) as label,\r\n\t  format('%I.%I', ns.nspname, p.proname) as value,\r\n\t  'user' as functype \r\n\tFROM pg_proc p \r\n\tINNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n\tWHERE ns.nspname in ('reports') and  \r\n\t  upper(format('%I.%I', ns.nspname, p.proname)) like _substr \r\n  ) as p\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'[]');\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE \r\n\t_substr varchar(130);\r\nBEGIN\r\n\r\n  _substr = injson->>'substr';\t\r\n\r\n  _substr = CONCAT('%',upper(coalesce(_substr,'%')),'%');\t\r\n\r\n  SELECT\r\n  \tarray_to_json(array_agg(row_to_json(p)))\r\n  FROM (\r\n\tSELECT \r\n\t  format('%I.%I', ns.nspname, p.proname) as label,\r\n\t  format('%I.%I', ns.nspname, p.proname) as value,\r\n\t  'user' as functype \r\n\tFROM pg_proc p \r\n\tINNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n\tWHERE ns.nspname in ('reports') and  \r\n\t  upper(format('%I.%I', ns.nspname, p.proname)) like _substr \r\n  ) as p\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'[]');\r\nEND;\r\n
227399	reports	fn_report_copy	reports.fn_report_copy(injson  json)	REPORT COPY (DUBLICATE)	2020-05-21 11:31:02.195905	1	f	fn_report_copy(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nreports.fn_report_copy(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION reports.fn_report_copy(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\n  _id int;\r\n  _newid int;\t\r\n  _nw json;\r\nBEGIN\r\n\t/* REPORT COPY (DUBLICATE) */\r\n\t_userid = injson->>'userid';\r\n    _id = injson->>'id';\r\n    \r\n    _newid = nextval('reports.reportlist_id_seq'::regclass);\r\n\t\r\n    \r\n    INSERT INTO reports.reportlist (\r\n      id, title, roles,\r\n      "path", "template",\r\n      template_path, functitle,\r\n      section, completed, filename\r\n    )\r\n    SELECT\r\n      _newid, r.title, r.roles,\r\n      concat(r."path",'_copy'), r."template",\r\n      r.template_path, r.functitle,\r\n      r.section, r.completed, r.filename\r\n    FROM reports.reportlist as r\r\n    WHERE r.id = _id;\r\n    \r\n    INSERT INTO reports.reportparams (\r\n      reportlistid, ptitle, func_paramtitle,\r\n      ptype, apimethod, completed, orderby \r\n    )\r\n    SELECT\r\n      _newid, rp.ptitle, rp.func_paramtitle,\r\n      rp.ptype, rp.apimethod, rp.completed, rp.orderby \r\n    FROM reports.reportparams as rp\r\n    WHERE rp.reportlistid = _id;\r\n    \r\n    SELECT\r\n    \trow_to_json(d)\r\n    FROM (\r\n      SELECT r.*\r\n      FROM reports.reportlist as r\r\n      WHERE r.id = _id\r\n    ) as d\r\n    INTO _nw;\r\n    \r\n    INSERT INTO framework.logtable (\r\n      tablename, tableid, opertype,\r\n      oldata, newdata, userid\r\n    ) VALUES (\r\n    \t'reports.reportlist', _newid, '1',\r\n        '{}'::json, _nw, _userid\r\n    );\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _userid int;\r\n  _id int;\r\n  _newid int;\t\r\n  _nw json;\r\nBEGIN\r\n\t/* REPORT COPY (DUBLICATE) */\r\n\t_userid = injson->>'userid';\r\n    _id = injson->>'id';\r\n    \r\n    _newid = nextval('reports.reportlist_id_seq'::regclass);\r\n\t\r\n    \r\n    INSERT INTO reports.reportlist (\r\n      id, title, roles,\r\n      "path", "template",\r\n      template_path, functitle,\r\n      section, completed, filename\r\n    )\r\n    SELECT\r\n      _newid, r.title, r.roles,\r\n      concat(r."path",'_copy'), r."template",\r\n      r.template_path, r.functitle,\r\n      r.section, r.completed, r.filename\r\n    FROM reports.reportlist as r\r\n    WHERE r.id = _id;\r\n    \r\n    INSERT INTO reports.reportparams (\r\n      reportlistid, ptitle, func_paramtitle,\r\n      ptype, apimethod, completed, orderby \r\n    )\r\n    SELECT\r\n      _newid, rp.ptitle, rp.func_paramtitle,\r\n      rp.ptype, rp.apimethod, rp.completed, rp.orderby \r\n    FROM reports.reportparams as rp\r\n    WHERE rp.reportlistid = _id;\r\n    \r\n    SELECT\r\n    \trow_to_json(d)\r\n    FROM (\r\n      SELECT r.*\r\n      FROM reports.reportlist as r\r\n      WHERE r.id = _id\r\n    ) as d\r\n    INTO _nw;\r\n    \r\n    INSERT INTO framework.logtable (\r\n      tablename, tableid, opertype,\r\n      oldata, newdata, userid\r\n    ) VALUES (\r\n    \t'reports.reportlist', _newid, '1',\r\n        '{}'::json, _nw, _userid\r\n    );\r\nEND;\r\n
227400	reports	fn_report_getone	reports.fn_report_getone(injson  json,outjson out json)	get report by id	2020-05-21 11:31:02.195905	1	f	fn_report_getone(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nreports.fn_report_getone(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION reports.fn_report_getone(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\n  _id int;\r\n  _userroles json;\r\n  _reportroles json;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n    _id = injson->>'id';\r\n    \r\n    SELECT\r\n    \tu.roles\r\n    FROM framework.users as u\r\n    WHERE u.id = _userid\r\n\tINTO _userroles;\r\n    \r\n\tSELECT \r\n    \trl.roles\r\n    FROM reports.reportlist as rl\r\n    WHERE rl.id = _id\r\n    INTO _reportroles;\r\n    \r\n    \r\n    IF _reportroles is not null AND\r\n    \t(SELECT count(*) \r\n         FROM json_array_elements_text(_reportroles)) <> 0\r\n\tTHEN\r\n    \tIF (SELECT count(*) \r\n             FROM json_array_elements_text(_reportroles) as r\r\n                JOIN json_array_elements_text(_userroles) as ur on \r\n                    ur.value::varchar = r.value::varchar) = 0\r\n\r\n    \tTHEN\r\n        \tPERFORM raiserror('access denied');\r\n        END IF;                     \r\n    END IF;\r\n    \r\n    SELECT \r\n   \t\trow_to_json(d)\r\n \tFROM (\r\n\t  SELECT \r\n\t\t  rl.id,\r\n\t\t  rl.filename,\r\n\t\t  rl.template_path,\r\n\t\t  rl.title,\r\n\t\t  rl.path,\r\n\t\t  COALESCE((\r\n\t\t\tSELECT \r\n\t\t\t\tarray_to_json(array_agg(row_to_json(p)))\r\n\t\t\tFROM (\r\n\t\t\t  SELECT\r\n\t\t\t\t  rp.id,\r\n\t\t\t\t  rp.apimethod,\r\n\t\t\t\t  rp.func_paramtitle,\r\n\t\t\t\t  rp.ptitle,\r\n\t\t\t\t  rp.ptype,\r\n\t\t\t\t  pt.typename\r\n\t\t\t  FROM reports.reportparams as rp\r\n\t\t\t\t  LEFT JOIN reports.paramtypes as pt on pt.id = rp.ptype\r\n\t\t\t  WHERE rp.reportlistid = rl.id\r\n\t\t\t\t  AND rp.completed\r\n\t\t\tORDER BY rp.orderby\r\n\t\t  ) as p\r\n\t  ),'[]') as params\t\r\n\t  FROM reports.reportlist as rl\r\n\t  WHERE rl.id = _id and rl.completed\r\n\t) as d\r\n    INTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'{}');\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n  _userid int;\r\n  _id int;\r\n  _userroles json;\r\n  _reportroles json;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n    _id = injson->>'id';\r\n    \r\n    SELECT\r\n    \tu.roles\r\n    FROM framework.users as u\r\n    WHERE u.id = _userid\r\n\tINTO _userroles;\r\n    \r\n\tSELECT \r\n    \trl.roles\r\n    FROM reports.reportlist as rl\r\n    WHERE rl.id = _id\r\n    INTO _reportroles;\r\n    \r\n    \r\n    IF _reportroles is not null AND\r\n    \t(SELECT count(*) \r\n         FROM json_array_elements_text(_reportroles)) <> 0\r\n\tTHEN\r\n    \tIF (SELECT count(*) \r\n             FROM json_array_elements_text(_reportroles) as r\r\n                JOIN json_array_elements_text(_userroles) as ur on \r\n                    ur.value::varchar = r.value::varchar) = 0\r\n\r\n    \tTHEN\r\n        \tPERFORM raiserror('access denied');\r\n        END IF;                     \r\n    END IF;\r\n    \r\n    SELECT \r\n   \t\trow_to_json(d)\r\n \tFROM (\r\n\t  SELECT \r\n\t\t  rl.id,\r\n\t\t  rl.filename,\r\n\t\t  rl.template_path,\r\n\t\t  rl.title,\r\n\t\t  rl.path,\r\n\t\t  COALESCE((\r\n\t\t\tSELECT \r\n\t\t\t\tarray_to_json(array_agg(row_to_json(p)))\r\n\t\t\tFROM (\r\n\t\t\t  SELECT\r\n\t\t\t\t  rp.id,\r\n\t\t\t\t  rp.apimethod,\r\n\t\t\t\t  rp.func_paramtitle,\r\n\t\t\t\t  rp.ptitle,\r\n\t\t\t\t  rp.ptype,\r\n\t\t\t\t  pt.typename\r\n\t\t\t  FROM reports.reportparams as rp\r\n\t\t\t\t  LEFT JOIN reports.paramtypes as pt on pt.id = rp.ptype\r\n\t\t\t  WHERE rp.reportlistid = rl.id\r\n\t\t\t\t  AND rp.completed\r\n\t\t\tORDER BY rp.orderby\r\n\t\t  ) as p\r\n\t  ),'[]') as params\t\r\n\t  FROM reports.reportlist as rl\r\n\t  WHERE rl.id = _id and rl.completed\r\n\t) as d\r\n    INTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'{}');\r\n\r\nEND;\r\n
227401	reports	tr_reportlist_tr	reports.tr_reportlist_tr()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_reportlist_tr()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nreports.tr_reportlist_tr() \r\n*/\r\nCREATE OR REPLACE FUNCTION reports.tr_reportlist_tr()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  IF NEW."template" is not null THEN\r\n    IF (\r\n\t  SELECT\r\n          count(*)\r\n      FROM json_array_elements_text(NEW."template")\r\n\t)>1 \r\n\tTHEN\r\n    \tPERFORM raiserror('more than 1 file');\r\n    END IF;  \r\n\t\r\n    IF NEW."template"->0 is not null THEN\r\n    \tNEW.template_path = (NEW."template"->0)::json->>'uri';\r\n        IF (NEW."template"->0)::json->>'filename' not like '%.xlsx' THEN\r\n\t    \tPERFORM raiserror('template must be xlsx');\t\r\n        END IF; \r\n    END IF; \r\n  END IF;\r\n  \r\n  IF NEW.functitle is not null THEN\r\n    IF (SELECT \r\n          count(*)\r\n        FROM pg_proc p \r\n        INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n        WHERE ns.nspname not in ('pg_catalog','information_schema') and \r\n        \t\tformat('%I.%I', ns.nspname, p.proname) = NEW.functitle) = 0 THEN\r\n\t    \tPERFORM raiserror('can not found function');\t\r\n    END IF;\r\n  END IF; \r\n  \r\n  \r\n  NEW.filename = (NEW."template"->0)::json->>'filename';\r\n  NEW.completed = false;\r\n  \r\n  IF \r\n  \tcoalesce(NEW.title,'') <>'' and\r\n \tCOALESCE(NEW."path",'')<>'' and\r\n  \tNEW.template is not null and\r\n  \tcoalesce(NEW.template_path,'')<>'' and\r\n  \tcoalesce(NEW.functitle,'')<>'' and\r\n  \r\n  \tcoalesce(NEW.section,'')<>'' \r\n    \r\n  THEN\r\n  \t NEW.completed = true;\r\n  END IF;   \r\n  \r\n  RETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN\r\n  IF NEW."template" is not null THEN\r\n    IF (\r\n\t  SELECT\r\n          count(*)\r\n      FROM json_array_elements_text(NEW."template")\r\n\t)>1 \r\n\tTHEN\r\n    \tPERFORM raiserror('more than 1 file');\r\n    END IF;  \r\n\t\r\n    IF NEW."template"->0 is not null THEN\r\n    \tNEW.template_path = (NEW."template"->0)::json->>'uri';\r\n        IF (NEW."template"->0)::json->>'filename' not like '%.xlsx' THEN\r\n\t    \tPERFORM raiserror('template must be xlsx');\t\r\n        END IF; \r\n    END IF; \r\n  END IF;\r\n  \r\n  IF NEW.functitle is not null THEN\r\n    IF (SELECT \r\n          count(*)\r\n        FROM pg_proc p \r\n        INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n        WHERE ns.nspname not in ('pg_catalog','information_schema') and \r\n        \t\tformat('%I.%I', ns.nspname, p.proname) = NEW.functitle) = 0 THEN\r\n\t    \tPERFORM raiserror('can not found function');\t\r\n    END IF;\r\n  END IF; \r\n  \r\n  \r\n  NEW.filename = (NEW."template"->0)::json->>'filename';\r\n  NEW.completed = false;\r\n  \r\n  IF \r\n  \tcoalesce(NEW.title,'') <>'' and\r\n \tCOALESCE(NEW."path",'')<>'' and\r\n  \tNEW.template is not null and\r\n  \tcoalesce(NEW.template_path,'')<>'' and\r\n  \tcoalesce(NEW.functitle,'')<>'' and\r\n  \r\n  \tcoalesce(NEW.section,'')<>'' \r\n    \r\n  THEN\r\n  \t NEW.completed = true;\r\n  END IF;   \r\n  \r\n  RETURN NEW;\r\nEND;\r\n
227402	reports	tr_reportlist_tr_ins	reports.tr_reportlist_tr_ins()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_reportlist_tr_ins()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nreports.tr_reportlist_tr_ins() \r\n*/\r\nCREATE OR REPLACE FUNCTION reports.tr_reportlist_tr_ins()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\r\n\tNEW.title = upper(trim(NEW.title));\r\n    NEW.path = trim(NEW.path);\r\n    \r\n    \r\n    RETURN NEW;\r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN\r\n\r\n\tNEW.title = upper(trim(NEW.title));\r\n    NEW.path = trim(NEW.path);\r\n    \r\n    \r\n    RETURN NEW;\r\n\r\nEND;\r\n
227403	reports	tr_reportlist_trigger	reports.tr_reportlist_trigger()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_reportlist_trigger()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nreports.tr_reportlist_trigger() \r\n*/\r\nCREATE OR REPLACE FUNCTION reports.tr_reportlist_trigger()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  IF NEW."template" is not null THEN\r\n    IF \r\n      (SELECT\r\n          count(*)\r\n      FROM json_array_elements_text(NEW."template"))>1 THEN\r\n    \tPERFORM raiserror('more than 1 file');\r\n    END IF;  \r\n    IF NEW."template"->0 is not null THEN\r\n    \tNEW.template_path = (NEW."template"->0)::json->>'uri';\r\n        IF (NEW."template"->0)::json->>'filename' not like '%.xlsx' THEN\r\n\t    \tPERFORM raiserror('Template must be xlsx');\t\r\n        END IF; \r\n    END IF; \r\n  END IF;\r\n  \r\n  IF NEW.functitle is not null THEN\r\n    IF (SELECT \r\n          count(*)\r\n        FROM pg_proc p \r\n        INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n        WHERE ns.nspname not in ('pg_catalog','information_schema') and \r\n        \t\tformat('%I.%I', ns.nspname, p.proname) = NEW.functitle) = 0 THEN\r\n\t    \tPERFORM raiserror('Can not found the function');\t\r\n    END IF;\r\n  END IF; \r\n  \r\n  \r\n  NEW.filename = (NEW."template"->0)::json->>'filename';\r\n  NEW.completed = false;\r\n  \r\n  IF \r\n  \tcoalesce(NEW.title,'') <>'' and\r\n \tCOALESCE(NEW."path",'')<>'' and\r\n  \tNEW.template is not null and\r\n  \tcoalesce(NEW.template_path,'')<>'' and\r\n  \tcoalesce(NEW.functitle,'')<>'' and\r\n  \r\n  \tcoalesce(NEW.section,'')<>'' \r\n    \r\n  THEN\r\n  \t NEW.completed = true;\r\n  END IF;   \r\n  \r\n  RETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN\r\n  IF NEW."template" is not null THEN\r\n    IF \r\n      (SELECT\r\n          count(*)\r\n      FROM json_array_elements_text(NEW."template"))>1 THEN\r\n    \tPERFORM raiserror('more than 1 file');\r\n    END IF;  \r\n    IF NEW."template"->0 is not null THEN\r\n    \tNEW.template_path = (NEW."template"->0)::json->>'uri';\r\n        IF (NEW."template"->0)::json->>'filename' not like '%.xlsx' THEN\r\n\t    \tPERFORM raiserror('Template must be xlsx');\t\r\n        END IF; \r\n    END IF; \r\n  END IF;\r\n  \r\n  IF NEW.functitle is not null THEN\r\n    IF (SELECT \r\n          count(*)\r\n        FROM pg_proc p \r\n        INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n        WHERE ns.nspname not in ('pg_catalog','information_schema') and \r\n        \t\tformat('%I.%I', ns.nspname, p.proname) = NEW.functitle) = 0 THEN\r\n\t    \tPERFORM raiserror('Can not found the function');\t\r\n    END IF;\r\n  END IF; \r\n  \r\n  \r\n  NEW.filename = (NEW."template"->0)::json->>'filename';\r\n  NEW.completed = false;\r\n  \r\n  IF \r\n  \tcoalesce(NEW.title,'') <>'' and\r\n \tCOALESCE(NEW."path",'')<>'' and\r\n  \tNEW.template is not null and\r\n  \tcoalesce(NEW.template_path,'')<>'' and\r\n  \tcoalesce(NEW.functitle,'')<>'' and\r\n  \r\n  \tcoalesce(NEW.section,'')<>'' \r\n    \r\n  THEN\r\n  \t NEW.completed = true;\r\n  END IF;   \r\n  \r\n  RETURN NEW;\r\nEND;\r\n
227404	reports	tr_reportparams_tr	reports.tr_reportparams_tr()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_reportparams_tr()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nreports.tr_reportparams_tr() \r\n*/\r\nCREATE OR REPLACE FUNCTION reports.tr_reportparams_tr()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\r\n\tNEW.completed = false;\r\n\r\n  IF NEW.reportlistid is not null and\r\n  \t coalesce(NEW.ptitle,'') <> '' and\r\n  \t coalesce(NEW.func_paramtitle,'')<>'' and\r\n  \t NEW.ptype is not null \r\n  THEN\r\n  \tNEW.completed = true;\r\n  \tIF NEW.ptype in (2,3,5) and NEW.apimethod is null THEN\r\n    \tNEW.completed = false;\r\n    END IF;\r\n  END IF; \r\n  \r\n  RETURN NEW;\r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN\r\n\r\n\tNEW.completed = false;\r\n\r\n  IF NEW.reportlistid is not null and\r\n  \t coalesce(NEW.ptitle,'') <> '' and\r\n  \t coalesce(NEW.func_paramtitle,'')<>'' and\r\n  \t NEW.ptype is not null \r\n  THEN\r\n  \tNEW.completed = true;\r\n  \tIF NEW.ptype in (2,3,5) and NEW.apimethod is null THEN\r\n    \tNEW.completed = false;\r\n    END IF;\r\n  END IF; \r\n  \r\n  RETURN NEW;\r\n\r\nEND;\r\n
227406	sqlmanager	fn_fk_parentcols_sel	sqlmanager.fn_fk_parentcols_sel(injson  json,outjson out json)	FK PARENT TABLE FIELDS	2020-05-21 11:31:02.195905	1	f	fn_fk_parentcols_sel(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.fn_fk_parentcols_sel(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.fn_fk_parentcols_sel(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n\t_parentablename varchar(200);\r\n\r\nBEGIN\r\n\r\n\t_parentablename = (injson->'data')->>\r\n    (\r\n      SELECT\r\n          value->>'key'\r\n      FROM json_array_elements(injson->'config') as c\r\n      WHERE (c.value->>'col') = 'parentablename'\r\n    );\r\n    \r\n    IF coalesce(_parentablename,'') = ''\r\n    THEN\r\n    \tPERFORM raiserror('pt is empty');\r\n    END IF;\r\n    \r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n\tSELECT column_name as label,\r\n\t  column_name as value\r\n\tFROM information_schema.columns\r\n\tWHERE concat(table_schema,'.',table_name) = _parentablename\r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'[]');\r\n\r\n\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n\t_parentablename varchar(200);\r\n\r\nBEGIN\r\n\r\n\t_parentablename = (injson->'data')->>\r\n    (\r\n      SELECT\r\n          value->>'key'\r\n      FROM json_array_elements(injson->'config') as c\r\n      WHERE (c.value->>'col') = 'parentablename'\r\n    );\r\n    \r\n    IF coalesce(_parentablename,'') = ''\r\n    THEN\r\n    \tPERFORM raiserror('pt is empty');\r\n    END IF;\r\n    \r\n  SELECT \r\n  \tarray_to_json(array_agg(row_to_json(d)))\r\n  FROM (\r\n\tSELECT column_name as label,\r\n\t  column_name as value\r\n\tFROM information_schema.columns\r\n\tWHERE concat(table_schema,'.',table_name) = _parentablename\r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'[]');\r\n\r\n\r\n\r\nEND;\r\n
227407	sqlmanager	fn_fk_tables_sel	sqlmanager.fn_fk_tables_sel(injson  json,outjson out json)	TABLES	2020-05-21 11:31:02.195905	1	f	fn_fk_tables_sel(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.fn_fk_tables_sel(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.fn_fk_tables_sel(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\nBEGIN\r\n\r\n\tSELECT\r\n    \tarray_to_json(array_agg(row_to_json(d)))\r\n    FROM (\r\n        SELECT \r\n            concat(TABLE_SCHEMA,'.',TABLE_NAME) as value,\r\n            concat(TABLE_SCHEMA,'.',TABLE_NAME) as label, *\r\n        FROM INFORMATION_SCHEMA.TABLES\r\n        ORDER BY TABLE_SCHEMA, TABLE_NAME \r\n        \r\n    ) as d\r\n    INTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\n\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\nBEGIN\r\n\r\n\tSELECT\r\n    \tarray_to_json(array_agg(row_to_json(d)))\r\n    FROM (\r\n        SELECT \r\n            concat(TABLE_SCHEMA,'.',TABLE_NAME) as value,\r\n            concat(TABLE_SCHEMA,'.',TABLE_NAME) as label, *\r\n        FROM INFORMATION_SCHEMA.TABLES\r\n        ORDER BY TABLE_SCHEMA, TABLE_NAME \r\n        \r\n    ) as d\r\n    INTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\n\r\n\r\nEND;\r\n
227408	sqlmanager	fn_foreignkeys_onload	sqlmanager.fn_foreignkeys_onload(injson  json)	FOREIGN KEYS	2020-05-21 11:31:02.195905	1	f	fn_foreignkeys_onload(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.fn_foreignkeys_onload(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.fn_foreignkeys_onload(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\nBEGIN\r\n\r\n\t_userid = injson->>'userid';\r\n    \r\n    UPDATE sqlmanager.foreignkeys as f\r\n    SET noscript = true;\r\n    \r\n    UPDATE sqlmanager.foreignkeys as f\r\n    SET \r\n      ftitle = con.conname,\r\n      maintablename = con.conrelid::regclass,\r\n      maintableid = con.conrelid,\r\n      parentablename = att.attrelid::regclass,\r\n      parenttableid = att.attrelid,\r\n      maincol = att2.attname,\r\n      parentcol = att.attname,\r\n      userid = _userid\r\n    FROM (\r\n      SELECT \r\n          unnest(con1.conkey) as "parent", \r\n          unnest(con1.confkey) as "child", \r\n          con1.confrelid, \r\n          con1.conrelid,\r\n          con1.conname,\r\n          con1.oid\r\n      FROM pg_class cl\r\n          join pg_namespace ns on cl.relnamespace = ns.oid\r\n          join pg_constraint con1 on con1.conrelid = cl.oid\r\n      WHERE\r\n          --cl.relname = 'child_table'\r\n          --and \r\n          ns.nspname not like  'pg_%'\r\n          and con1.contype = 'f'\r\n   ) con\r\n     JOIN pg_attribute att on att.attrelid = con.confrelid and \r\n         att.attnum = con.child\r\n     JOIN pg_class cl on cl.oid = con.confrelid\r\n     JOIN pg_attribute att2 on att2.attrelid = con.conrelid and \r\n         att2.attnum = con.parent\r\n   WHERE con.oid = f.id;\r\n   \r\n   INSERT INTO sqlmanager.foreignkeys (\r\n   \t\tid, ftitle, maintablename, maintableid,\r\n\t\tparentablename, parenttableid,\r\n \t\tmaincol, parentcol, userid\r\n   ) \r\n   SELECT       \r\n   \t  con.oid, con.conname, con.conrelid::regclass, con.conrelid,\r\n      att.attrelid::regclass, att.attrelid,\r\n      att2.attname, att.attname, _userid\r\n   FROM (\r\n      SELECT \r\n          unnest(con1.conkey) as "parent", \r\n          unnest(con1.confkey) as "child", \r\n          con1.confrelid, con1.conrelid,\r\n          con1.conname, con1.oid\r\n      FROM pg_class cl\r\n          JOIN pg_namespace ns on cl.relnamespace = ns.oid\r\n          JOIN pg_constraint con1 on con1.conrelid = cl.oid\r\n      WHERE ns.nspname not like  'pg_%' and con1.contype = 'f'\r\n   ) con\r\n     JOIN pg_attribute att on att.attrelid = con.confrelid and \r\n         att.attnum = con.child\r\n     JOIN pg_class cl on cl.oid = con.confrelid\r\n     JOIN pg_attribute att2 on att2.attrelid = con.conrelid and \r\n         att2.attnum = con.parent\r\n   WHERE con.oid not in (\r\n   \t\tSELECT id FROM sqlmanager.foreignkeys\r\n   );\r\n   \r\n   DELETE FROM sqlmanager.foreignkeys\r\n   WHERE id not in (\r\n     SELECT       \r\n        con.oid\r\n     FROM (\r\n        SELECT \r\n            unnest(con1.conkey) as "parent", \r\n            unnest(con1.confkey) as "child", \r\n            con1.confrelid, con1.conrelid,\r\n            con1.conname, con1.oid\r\n        FROM pg_class cl\r\n            JOIN pg_namespace ns on cl.relnamespace = ns.oid\r\n            JOIN pg_constraint con1 on con1.conrelid = cl.oid\r\n        WHERE ns.nspname not like  'pg_%' and con1.contype = 'f'\r\n     ) con\r\n       JOIN pg_attribute att on att.attrelid = con.confrelid and \r\n           att.attnum = con.child\r\n       JOIN pg_class cl on cl.oid = con.confrelid\r\n       JOIN pg_attribute att2 on att2.attrelid = con.conrelid and \r\n           att2.attnum = con.parent\r\n   );\r\n    \r\n   UPDATE sqlmanager.foreignkeys as f\r\n   SET noscript = false;\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _userid int;\r\nBEGIN\r\n\r\n\t_userid = injson->>'userid';\r\n    \r\n    UPDATE sqlmanager.foreignkeys as f\r\n    SET noscript = true;\r\n    \r\n    UPDATE sqlmanager.foreignkeys as f\r\n    SET \r\n      ftitle = con.conname,\r\n      maintablename = con.conrelid::regclass,\r\n      maintableid = con.conrelid,\r\n      parentablename = att.attrelid::regclass,\r\n      parenttableid = att.attrelid,\r\n      maincol = att2.attname,\r\n      parentcol = att.attname,\r\n      userid = _userid\r\n    FROM (\r\n      SELECT \r\n          unnest(con1.conkey) as "parent", \r\n          unnest(con1.confkey) as "child", \r\n          con1.confrelid, \r\n          con1.conrelid,\r\n          con1.conname,\r\n          con1.oid\r\n      FROM pg_class cl\r\n          join pg_namespace ns on cl.relnamespace = ns.oid\r\n          join pg_constraint con1 on con1.conrelid = cl.oid\r\n      WHERE\r\n          --cl.relname = 'child_table'\r\n          --and \r\n          ns.nspname not like  'pg_%'\r\n          and con1.contype = 'f'\r\n   ) con\r\n     JOIN pg_attribute att on att.attrelid = con.confrelid and \r\n         att.attnum = con.child\r\n     JOIN pg_class cl on cl.oid = con.confrelid\r\n     JOIN pg_attribute att2 on att2.attrelid = con.conrelid and \r\n         att2.attnum = con.parent\r\n   WHERE con.oid = f.id;\r\n   \r\n   INSERT INTO sqlmanager.foreignkeys (\r\n   \t\tid, ftitle, maintablename, maintableid,\r\n\t\tparentablename, parenttableid,\r\n \t\tmaincol, parentcol, userid\r\n   ) \r\n   SELECT       \r\n   \t  con.oid, con.conname, con.conrelid::regclass, con.conrelid,\r\n      att.attrelid::regclass, att.attrelid,\r\n      att2.attname, att.attname, _userid\r\n   FROM (\r\n      SELECT \r\n          unnest(con1.conkey) as "parent", \r\n          unnest(con1.confkey) as "child", \r\n          con1.confrelid, con1.conrelid,\r\n          con1.conname, con1.oid\r\n      FROM pg_class cl\r\n          JOIN pg_namespace ns on cl.relnamespace = ns.oid\r\n          JOIN pg_constraint con1 on con1.conrelid = cl.oid\r\n      WHERE ns.nspname not like  'pg_%' and con1.contype = 'f'\r\n   ) con\r\n     JOIN pg_attribute att on att.attrelid = con.confrelid and \r\n         att.attnum = con.child\r\n     JOIN pg_class cl on cl.oid = con.confrelid\r\n     JOIN pg_attribute att2 on att2.attrelid = con.conrelid and \r\n         att2.attnum = con.parent\r\n   WHERE con.oid not in (\r\n   \t\tSELECT id FROM sqlmanager.foreignkeys\r\n   );\r\n   \r\n   DELETE FROM sqlmanager.foreignkeys\r\n   WHERE id not in (\r\n     SELECT       \r\n        con.oid\r\n     FROM (\r\n        SELECT \r\n            unnest(con1.conkey) as "parent", \r\n            unnest(con1.confkey) as "child", \r\n            con1.confrelid, con1.conrelid,\r\n            con1.conname, con1.oid\r\n        FROM pg_class cl\r\n            JOIN pg_namespace ns on cl.relnamespace = ns.oid\r\n            JOIN pg_constraint con1 on con1.conrelid = cl.oid\r\n        WHERE ns.nspname not like  'pg_%' and con1.contype = 'f'\r\n     ) con\r\n       JOIN pg_attribute att on att.attrelid = con.confrelid and \r\n           att.attnum = con.child\r\n       JOIN pg_class cl on cl.oid = con.confrelid\r\n       JOIN pg_attribute att2 on att2.attrelid = con.conrelid and \r\n           att2.attnum = con.parent\r\n   );\r\n    \r\n   UPDATE sqlmanager.foreignkeys as f\r\n   SET noscript = false;\r\nEND;\r\n
227409	sqlmanager	fn_function_add	sqlmanager.fn_function_add(injson  json,_redirect out varchar)	add function	2020-05-21 11:31:02.195905	1	f	fn_function_add(injson  json,_redirect out varchar)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.fn_function_add(injson  json,_redirect out varchar) \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.fn_function_add(injson json, OUT _redirect character varying)\n RETURNS character varying\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE \r\n  schemaname varchar(350);\t\r\n  squery varchar;\r\n  fn_title varchar(150);\r\n  _userid int;\r\n  _id int;\r\n  _nw json;\r\nBEGIN\r\n\tschemaname = injson->>'schemaname';\r\n    _userid =injson->>'userid';\r\n    IF COALESCE(schemaname,'') = ''\r\n    THEN\r\n    \tPERFORM raiserror('schema name is empty');\r\n    END IF;\r\n    \r\n    fn_title = CONCAT('"',schemaname ,'"."fn_untitle_', (\r\n      SELECT \r\n          COUNT(p.oid)::varchar\r\n      FROM pg_proc as p\r\n          JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n      WHERE ns.nspname = fn_title\r\n    ), '"');\r\n    \r\n    squery = CONCAT('\r\n      CREATE FUNCTION ',fn_title,' ()\r\n      RETURNS void AS\r\n      $body$\r\n      DECLARE BEGIN END;\r\n      $body$\r\n      LANGUAGE ''plpgsql'' VOLATILE CALLED ON NULL INPUT SECURITY INVOKER;\r\n    ');\r\n    \r\n    \r\n    EXECUTE squery;\r\n    SELECT \r\n        p.oid\r\n    FROM pg_proc as p\r\n        JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n    WHERE concat('"',ns.nspname,'"."',p.proname,'"') = fn_title\r\n    \tand p.oid not in (\r\n        \tSELECT id FROM sqlmanager.functionslist \r\n        )\r\n    INTO _id;\r\n    \r\n    INSERT INTO sqlmanager.functionslist(\r\n      id, functionschema,\r\n      functiontitle,\r\n      fullname, descr,\r\n      userid, functionfulltitle, \r\n      dll\r\n    )\r\n    SELECT \r\n        p.oid, ns.nspname, p.proname, \r\n        concat(ns.nspname,'.', p.proname,'(', (\r\n          \tSELECT \r\n            \tstring_agg(\r\n                \tCONCAT(\r\n                    \tan.arg,' ', (\r\n                        \tCASE WHEN \r\n                            am.mode = 'o'\r\n                            THEN 'out'\r\n                            ELSE ''\r\n                            END\r\n                        ),' ',p.typname\r\n                    ),','\r\n                ) \r\n           \tFROM (\r\n              SELECT \r\n                  row_number() over (order by 0) as rownum, c.typname\r\n              FROM json_array_elements_text(\r\n                  ARRAY_TO_JSON(p.proallargtypes)\r\n              ) as a\r\n                  JOIN pg_type  as c on c.oid = a.value::varchar::int\r\n            \r\n            ) as p\r\n            JOIN (\r\n            \tSELECT \r\n                  row_number() over (order by 0) as rownum, vv.value as arg \r\n                FROM json_array_elements_text(\r\n                  ARRAY_TO_JSON(p.proargnames)\r\n              ) as vv\r\n            ) as an on an.rownum = p.rownum\r\n            JOIN (\r\n            \tSELECT \r\n                  row_number() over (order by 0) as rownum, vv.value as mode \r\n                FROM json_array_elements_text(\r\n                  ARRAY_TO_JSON(p.proargmodes)\r\n              ) as vv\r\n            ) as am on am.rownum = p.rownum\r\n          ),')'),\r\n        COALESCE(pg_catalog.obj_description(p.oid),'<NO TITLE>'),\r\n        _userid, concat( p.proname,'(', (\r\n          \tSELECT \r\n            \tstring_agg(\r\n                \tCONCAT(\r\n                    \tan.arg,' ', (\r\n                        \tCASE WHEN \r\n                            am.mode = 'o'\r\n                            THEN 'out'\r\n                            ELSE ''\r\n                            END\r\n                        ),' ',p.typname\r\n                    ),','\r\n                ) \r\n           \tFROM (\r\n              SELECT \r\n                  row_number() over (order by 0) as rownum, c.typname\r\n              FROM json_array_elements_text(\r\n                  ARRAY_TO_JSON(p.proallargtypes)\r\n              ) as a\r\n                  JOIN pg_type  as c on c.oid = a.value::varchar::int\r\n            \r\n            ) as p\r\n            JOIN (\r\n            \tSELECT \r\n                  row_number() over (order by 0) as rownum, vv.value as arg \r\n                FROM json_array_elements_text(\r\n                  ARRAY_TO_JSON(p.proargnames)\r\n              ) as vv\r\n            ) as an on an.rownum = p.rownum\r\n            JOIN (\r\n            \tSELECT \r\n                  row_number() over (order by 0) as rownum, vv.value as mode \r\n                FROM json_array_elements_text(\r\n                  ARRAY_TO_JSON(p.proargmodes)\r\n              ) as vv\r\n            ) as am on am.rownum = p.rownum\r\n          ),')'), \r\n          pg_get_functiondef(p.oid)\r\n    FROM pg_proc as p\r\n        JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n    WHERE p.oid = _id\r\n    ;\r\n    \r\n    SELECT\r\n    \trow_to_json(d)\r\n    FROM (\r\n    \tSELECT *\r\n        FROM sqlmanager.functionslist\r\n        WHERE id = _id\r\n    ) as d\r\n    INTO _nw;\r\n    \r\n    _redirect = CONCAT('/trees/function?id=', _id::varchar);\r\n    \r\n    INSERT INTO framework.logtable (\r\n      tablename, tableid, opertype,\r\n      oldata, newdata, userid\r\n    ) VALUES (\r\n      'sqlmanager.functionslist', _id::varchar, '1',\r\n      '{}'::json, _nw, _userid\r\n    );\r\n    \r\n    \r\n    \r\n\t\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"_redirect","argmode":"output","argtype":"varchar"}]	varchar	\r\nDECLARE \r\n  schemaname varchar(350);\t\r\n  squery varchar;\r\n  fn_title varchar(150);\r\n  _userid int;\r\n  _id int;\r\n  _nw json;\r\nBEGIN\r\n\tschemaname = injson->>'schemaname';\r\n    _userid =injson->>'userid';\r\n    IF COALESCE(schemaname,'') = ''\r\n    THEN\r\n    \tPERFORM raiserror('schema name is empty');\r\n    END IF;\r\n    \r\n    fn_title = CONCAT('"',schemaname ,'"."fn_untitle_', (\r\n      SELECT \r\n          COUNT(p.oid)::varchar\r\n      FROM pg_proc as p\r\n          JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n      WHERE ns.nspname = fn_title\r\n    ), '"');\r\n    \r\n    squery = CONCAT('\r\n      CREATE FUNCTION ',fn_title,' ()\r\n      RETURNS void AS\r\n      $body$\r\n      DECLARE BEGIN END;\r\n      $body$\r\n      LANGUAGE ''plpgsql'' VOLATILE CALLED ON NULL INPUT SECURITY INVOKER;\r\n    ');\r\n    \r\n    \r\n    EXECUTE squery;\r\n    SELECT \r\n        p.oid\r\n    FROM pg_proc as p\r\n        JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n    WHERE concat('"',ns.nspname,'"."',p.proname,'"') = fn_title\r\n    \tand p.oid not in (\r\n        \tSELECT id FROM sqlmanager.functionslist \r\n        )\r\n    INTO _id;\r\n    \r\n    INSERT INTO sqlmanager.functionslist(\r\n      id, functionschema,\r\n      functiontitle,\r\n      fullname, descr,\r\n      userid, functionfulltitle, \r\n      dll\r\n    )\r\n    SELECT \r\n        p.oid, ns.nspname, p.proname, \r\n        concat(ns.nspname,'.', p.proname,'(', (\r\n          \tSELECT \r\n            \tstring_agg(\r\n                \tCONCAT(\r\n                    \tan.arg,' ', (\r\n                        \tCASE WHEN \r\n                            am.mode = 'o'\r\n                            THEN 'out'\r\n                            ELSE ''\r\n                            END\r\n                        ),' ',p.typname\r\n                    ),','\r\n                ) \r\n           \tFROM (\r\n              SELECT \r\n                  row_number() over (order by 0) as rownum, c.typname\r\n              FROM json_array_elements_text(\r\n                  ARRAY_TO_JSON(p.proallargtypes)\r\n              ) as a\r\n                  JOIN pg_type  as c on c.oid = a.value::varchar::int\r\n            \r\n            ) as p\r\n            JOIN (\r\n            \tSELECT \r\n                  row_number() over (order by 0) as rownum, vv.value as arg \r\n                FROM json_array_elements_text(\r\n                  ARRAY_TO_JSON(p.proargnames)\r\n              ) as vv\r\n            ) as an on an.rownum = p.rownum\r\n            JOIN (\r\n            \tSELECT \r\n                  row_number() over (order by 0) as rownum, vv.value as mode \r\n                FROM json_array_elements_text(\r\n                  ARRAY_TO_JSON(p.proargmodes)\r\n              ) as vv\r\n            ) as am on am.rownum = p.rownum\r\n          ),')'),\r\n        COALESCE(pg_catalog.obj_description(p.oid),'<NO TITLE>'),\r\n        _userid, concat( p.proname,'(', (\r\n          \tSELECT \r\n            \tstring_agg(\r\n                \tCONCAT(\r\n                    \tan.arg,' ', (\r\n                        \tCASE WHEN \r\n                            am.mode = 'o'\r\n                            THEN 'out'\r\n                            ELSE ''\r\n                            END\r\n                        ),' ',p.typname\r\n                    ),','\r\n                ) \r\n           \tFROM (\r\n              SELECT \r\n                  row_number() over (order by 0) as rownum, c.typname\r\n              FROM json_array_elements_text(\r\n                  ARRAY_TO_JSON(p.proallargtypes)\r\n              ) as a\r\n                  JOIN pg_type  as c on c.oid = a.value::varchar::int\r\n            \r\n            ) as p\r\n            JOIN (\r\n            \tSELECT \r\n                  row_number() over (order by 0) as rownum, vv.value as arg \r\n                FROM json_array_elements_text(\r\n                  ARRAY_TO_JSON(p.proargnames)\r\n              ) as vv\r\n            ) as an on an.rownum = p.rownum\r\n            JOIN (\r\n            \tSELECT \r\n                  row_number() over (order by 0) as rownum, vv.value as mode \r\n                FROM json_array_elements_text(\r\n                  ARRAY_TO_JSON(p.proargmodes)\r\n              ) as vv\r\n            ) as am on am.rownum = p.rownum\r\n          ),')'), \r\n          pg_get_functiondef(p.oid)\r\n    FROM pg_proc as p\r\n        JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n    WHERE p.oid = _id\r\n    ;\r\n    \r\n    SELECT\r\n    \trow_to_json(d)\r\n    FROM (\r\n    \tSELECT *\r\n        FROM sqlmanager.functionslist\r\n        WHERE id = _id\r\n    ) as d\r\n    INTO _nw;\r\n    \r\n    _redirect = CONCAT('/trees/function?id=', _id::varchar);\r\n    \r\n    INSERT INTO framework.logtable (\r\n      tablename, tableid, opertype,\r\n      oldata, newdata, userid\r\n    ) VALUES (\r\n      'sqlmanager.functionslist', _id::varchar, '1',\r\n      '{}'::json, _nw, _userid\r\n    );\r\n    \r\n    \r\n    \r\n\t\r\n\r\nEND;\r\n
227410	sqlmanager	fn_function_argadd	sqlmanager.fn_function_argadd(injson  json)	ADD ARGUMENT FOR FUNCTION	2020-05-21 11:31:02.195905	1	f	fn_function_argadd(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.fn_function_argadd(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.fn_function_argadd(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\n  _nw json;\r\n  _id int;\r\n  _oid int;\r\nBEGIN\r\n\r\n\t_oid = injson->>'oid';\r\n    _userid = injson->>'userid';\r\n    \r\n    IF _oid is null\r\n    THEN\r\n    \tPERFORM raiserror('function oid is empty');\r\n    END IF;\r\n    \r\n    _id = nextval('sqlmanager.functionargs_id_seq'::regclass);\r\n    \r\n    INSERT INTO sqlmanager.functionargs(\r\n      id, oid, argname, \r\n      argtype, argmode, userid \r\n    ) VALUES (\r\n      _id, _oid, CONCAT('untitle_', _id::varchar),\r\n      'int', 'input', _userid\r\n    );\r\n    \r\n    INSERT INTO framework.logtable (\r\n      tablename, tableid, opertype,\r\n      oldata, newdata, userid\r\n    ) VALUES (\r\n      'sqlmanager.functionargs', _id::varchar, '1',\r\n      '{}', _nw, _userid\r\n    );\r\n\r\n\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _userid int;\r\n  _nw json;\r\n  _id int;\r\n  _oid int;\r\nBEGIN\r\n\r\n\t_oid = injson->>'oid';\r\n    _userid = injson->>'userid';\r\n    \r\n    IF _oid is null\r\n    THEN\r\n    \tPERFORM raiserror('function oid is empty');\r\n    END IF;\r\n    \r\n    _id = nextval('sqlmanager.functionargs_id_seq'::regclass);\r\n    \r\n    INSERT INTO sqlmanager.functionargs(\r\n      id, oid, argname, \r\n      argtype, argmode, userid \r\n    ) VALUES (\r\n      _id, _oid, CONCAT('untitle_', _id::varchar),\r\n      'int', 'input', _userid\r\n    );\r\n    \r\n    INSERT INTO framework.logtable (\r\n      tablename, tableid, opertype,\r\n      oldata, newdata, userid\r\n    ) VALUES (\r\n      'sqlmanager.functionargs', _id::varchar, '1',\r\n      '{}', _nw, _userid\r\n    );\r\n\r\n\r\n\r\nEND;\r\n
227411	sqlmanager	fn_function_args_json	sqlmanager.fn_function_args_json(_names  json,_types  json,_modesc  json,outjson out json)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_function_args_json(_names  json,_types  json,_modesc  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.fn_function_args_json(_names  json,_types  json,_modesc  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.fn_function_args_json(_names json, _types json, _modesc json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\nBEGIN\r\n\tSELECT \r\n    \tarray_to_json(array_agg(row_to_json(f)))\r\n    FROM (\r\n    SELECT \r\n        \r\n        n.arg as argname, (\r\n        \tCASE WHEN  tt.mode = 'o'\r\n            THEN 'output'\r\n            WHEN tt.mode = 'b'\r\n            THEN 'input/output'\r\n            ELSE 'input'\r\n            END\r\n        ) as argmode, t.typname as argtype\r\n\r\n    FROM (\r\n    \tSELECT\r\n    \t\trow_number() over (order by 1) as rownum,\r\n    \t\tnm.value as arg\r\n    \tFROM json_array_elements_text(_names) as nm\r\n    ) as n\r\n    LEFT JOIN (\r\n    \t  SELECT\r\n          \tf.rownum,\r\n            c.typname\r\n          FROM(\r\n            SELECT\r\n                row_number() over (order by 1) as rownum,\r\n                cc.value \r\n            FROM json_array_elements_text(_types) as cc\r\n          ) as f\r\n          JOIN pg_type  as c on c.oid = f.value::varchar::int\r\n    \t) as t on t.rownum = n.rownum\r\n    LEFT JOIN (\r\n          SELECT\r\n              row_number() over (order by 1) as rownum, \r\n              vv.value as mode\r\n          FROM json_array_elements_text(_modesc) as vv\r\n    \t) as tt on tt.rownum = n.rownum\r\n    ORDER BY n.rownum\r\n    ) as f\r\n    INTO outjson;\r\n\r\nEND;\r\n$function$\n	[{"argname":"_names","argmode":"input","argtype":"json"},{"argname":"_types","argmode":"input","argtype":"json"},{"argname":"_modesc","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\nBEGIN\r\n\tSELECT \r\n    \tarray_to_json(array_agg(row_to_json(f)))\r\n    FROM (\r\n    SELECT \r\n        \r\n        n.arg as argname, (\r\n        \tCASE WHEN  tt.mode = 'o'\r\n            THEN 'output'\r\n            WHEN tt.mode = 'b'\r\n            THEN 'input/output'\r\n            ELSE 'input'\r\n            END\r\n        ) as argmode, t.typname as argtype\r\n\r\n    FROM (\r\n    \tSELECT\r\n    \t\trow_number() over (order by 1) as rownum,\r\n    \t\tnm.value as arg\r\n    \tFROM json_array_elements_text(_names) as nm\r\n    ) as n\r\n    LEFT JOIN (\r\n    \t  SELECT\r\n          \tf.rownum,\r\n            c.typname\r\n          FROM(\r\n            SELECT\r\n                row_number() over (order by 1) as rownum,\r\n                cc.value \r\n            FROM json_array_elements_text(_types) as cc\r\n          ) as f\r\n          JOIN pg_type  as c on c.oid = f.value::varchar::int\r\n    \t) as t on t.rownum = n.rownum\r\n    LEFT JOIN (\r\n          SELECT\r\n              row_number() over (order by 1) as rownum, \r\n              vv.value as mode\r\n          FROM json_array_elements_text(_modesc) as vv\r\n    \t) as tt on tt.rownum = n.rownum\r\n    ORDER BY n.rownum\r\n    ) as f\r\n    INTO outjson;\r\n\r\nEND;\r\n
227428	sqlmanager	tr_functionslist_tr_del	sqlmanager.tr_functionslist_tr_del()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_functionslist_tr_del()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_functionslist_tr_del() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_functionslist_tr_del()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    squery varchar;\r\nBEGIN\r\n\r\n  IF not OLD.noscript \r\n  THEN\r\n    squery = concat('\t\r\n        DROP FUNCTION ',OLD.fullname,' ;\r\n    ');\r\n    \r\n     EXECUTE format(squery) ;\r\n    \r\n  END IF;\r\n  \r\n  IF OLD.noscript\r\n  THEN\r\n  \tDELETE FROM sqlmanager.functionargs\r\n    WHERE oid = OLD.id;\r\n  END IF; \r\n  \r\n  RETURN OLD;\r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n    squery varchar;\r\nBEGIN\r\n\r\n  IF not OLD.noscript \r\n  THEN\r\n    squery = concat('\t\r\n        DROP FUNCTION ',OLD.fullname,' ;\r\n    ');\r\n    \r\n     EXECUTE format(squery) ;\r\n    \r\n  END IF;\r\n  \r\n  IF OLD.noscript\r\n  THEN\r\n  \tDELETE FROM sqlmanager.functionargs\r\n    WHERE oid = OLD.id;\r\n  END IF; \r\n  \r\n  RETURN OLD;\r\n\r\nEND;\r\n
227429	sqlmanager	tr_functionslist_tr_desc	sqlmanager.tr_functionslist_tr_desc()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_functionslist_tr_desc()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_functionslist_tr_desc() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_functionslist_tr_desc()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    squery varchar;\r\nBEGIN\r\n\t\r\n  IF not NEW.noscript and COALESCE(NEW.descr,'') <> ''\r\n  THEN\r\n    squery = concat('\t\r\n        COMMENT ON FUNCTION ', NEW.fullname ,'\r\n        IS ''', NEW.descr ,''';\r\n    ');\r\n    \r\n     EXECUTE format(squery) ;\r\n    \r\n  END IF;\r\n  RETURN NEW;\r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n    squery varchar;\r\nBEGIN\r\n\t\r\n  IF not NEW.noscript and COALESCE(NEW.descr,'') <> ''\r\n  THEN\r\n    squery = concat('\t\r\n        COMMENT ON FUNCTION ', NEW.fullname ,'\r\n        IS ''', NEW.descr ,''';\r\n    ');\r\n    \r\n     EXECUTE format(squery) ;\r\n    \r\n  END IF;\r\n  RETURN NEW;\r\n\r\nEND;\r\n
227430	sqlmanager	tr_functionslist_tr_dll	sqlmanager.tr_functionslist_tr_dll()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_functionslist_tr_dll()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_functionslist_tr_dll() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_functionslist_tr_dll()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  IF not NEW.noscript and OLD.dll <> NEW.dll\r\n  THEN    \r\n     EXECUTE format(NEW.dll) ;\r\n  END IF;\r\n  RETURN OLD;\r\n  \r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN\r\n  IF not NEW.noscript and OLD.dll <> NEW.dll\r\n  THEN    \r\n     EXECUTE format(NEW.dll) ;\r\n  END IF;\r\n  RETURN OLD;\r\n  \r\n\r\nEND;\r\n
227412	sqlmanager	fn_function_args_text	sqlmanager.fn_function_args_text(_names  json,_types  json,_modesc  json,_str out varchar)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_function_args_text(_names  json,_types  json,_modesc  json,_str out varchar)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.fn_function_args_text(_names  json,_types  json,_modesc  json,_str out varchar) \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.fn_function_args_text(_names json, _types json, _modesc json, OUT _str character varying)\n RETURNS character varying\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\nBEGIN\r\n\tSELECT \r\n    \tstring_agg(\r\n            CONCAT(\r\n             \tf.arg,' ', (\r\n                 \tCASE WHEN\r\n                    f.mode = 'o'\r\n                    THEN 'out'\r\n                    WHEN\r\n                    f.mode = 'b'\r\n                    THEN 'inout'\r\n                    ELSE ''\r\n                    END\r\n                 ),' ', f.typname\r\n            ),','\r\n        ) as str \r\n    FROM (\r\n    SELECT \r\n    \tn.rownum, tt.mode, n.arg, t.typname\r\n\r\n    FROM (\r\n    \tSELECT\r\n    \t\trow_number() over (order by 1) as rownum,\r\n    \t\tnm.value as arg\r\n    \tFROM json_array_elements_text(_names) as nm\r\n    ) as n\r\n    LEFT JOIN (\r\n    \t  SELECT\r\n          \tf.rownum,\r\n            c.typname\r\n          FROM(\r\n            SELECT\r\n                row_number() over (order by 1) as rownum,\r\n                cc.value \r\n            FROM json_array_elements_text(_types) as cc\r\n          ) as f\r\n          JOIN pg_type  as c on c.oid = f.value::varchar::int\r\n    \t) as t on t.rownum = n.rownum\r\n    LEFT JOIN (\r\n          SELECT\r\n              row_number() over (order by 1) as rownum, \r\n              vv.value as mode\r\n          FROM json_array_elements_text(_modesc) as vv\r\n    \t) as tt on tt.rownum = n.rownum\r\n    ORDER BY n.rownum\r\n    ) as f\r\n    INTO _str;\r\n\r\nEND;\r\n$function$\n	[{"argname":"_names","argmode":"input","argtype":"json"},{"argname":"_types","argmode":"input","argtype":"json"},{"argname":"_modesc","argmode":"input","argtype":"json"},{"argname":"_str","argmode":"output","argtype":"varchar"}]	varchar	\r\nDECLARE\r\nBEGIN\r\n\tSELECT \r\n    \tstring_agg(\r\n            CONCAT(\r\n             \tf.arg,' ', (\r\n                 \tCASE WHEN\r\n                    f.mode = 'o'\r\n                    THEN 'out'\r\n                    WHEN\r\n                    f.mode = 'b'\r\n                    THEN 'inout'\r\n                    ELSE ''\r\n                    END\r\n                 ),' ', f.typname\r\n            ),','\r\n        ) as str \r\n    FROM (\r\n    SELECT \r\n    \tn.rownum, tt.mode, n.arg, t.typname\r\n\r\n    FROM (\r\n    \tSELECT\r\n    \t\trow_number() over (order by 1) as rownum,\r\n    \t\tnm.value as arg\r\n    \tFROM json_array_elements_text(_names) as nm\r\n    ) as n\r\n    LEFT JOIN (\r\n    \t  SELECT\r\n          \tf.rownum,\r\n            c.typname\r\n          FROM(\r\n            SELECT\r\n                row_number() over (order by 1) as rownum,\r\n                cc.value \r\n            FROM json_array_elements_text(_types) as cc\r\n          ) as f\r\n          JOIN pg_type  as c on c.oid = f.value::varchar::int\r\n    \t) as t on t.rownum = n.rownum\r\n    LEFT JOIN (\r\n          SELECT\r\n              row_number() over (order by 1) as rownum, \r\n              vv.value as mode\r\n          FROM json_array_elements_text(_modesc) as vv\r\n    \t) as tt on tt.rownum = n.rownum\r\n    ORDER BY n.rownum\r\n    ) as f\r\n    INTO _str;\r\n\r\nEND;\r\n
227419	sqlmanager	fn_tablelist_onload	sqlmanager.fn_tablelist_onload(injson  json)	table list	2020-05-21 11:31:02.195905	1	f	fn_tablelist_onload(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.fn_tablelist_onload(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.fn_tablelist_onload(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n   UPDATE sqlmanager.tablelist\r\n   SET noscript = true; \r\n   \r\n    UPDATE sqlmanager.tablelist as tb\r\n    SET\r\n    \ttableschemaname = t.schemaname,\r\n        tablename = t.relname,\r\n        descr =  COALESCE(pg_catalog.obj_description(t.relid),'<NO TITLE>'),\r\n        userid = _userid\r\n    FROM pg_catalog.pg_statio_all_tables as t\r\n    WHERE t.relid = tb.id and t.schemaname not like 'pg_%' and t.schemaname<>'information_schema';\r\n\r\n    \r\n    \r\n    INSERT INTO sqlmanager.tablelist (\r\n      id, tableschemaname, tablename, fullname,\r\n      descr, userid \r\n    )\r\n    SELECT \r\n        t.relid, t.schemaname, t.relname, concat(t.schemaname,'.', t.relname),\r\n        COALESCE(pg_catalog.obj_description(t.relid),'<NO TITLE>'),\r\n        _userid\r\n    FROM pg_catalog.pg_statio_all_tables as t\r\n    WHERE t.schemaname not like 'pg_%' and t.schemaname<>'information_schema'\r\n\t\t\tand t.relid not in (\r\n            \tSELECT id\r\n                FROM sqlmanager.tablelist\r\n            );\r\n\tDELETE FROM sqlmanager.tablelist\r\n    WHERE id not in (\r\n    \tSELECT\r\n        \tt.relid\r\n\t\tFROM pg_catalog.pg_statio_all_tables as t\r\n    \tWHERE t.schemaname not like 'pg_%' and t.schemaname<>'information_schema'\r\n    );\r\n    \r\n   UPDATE sqlmanager.tablelist\r\n   SET noscript = false; \r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _userid int;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n   UPDATE sqlmanager.tablelist\r\n   SET noscript = true; \r\n   \r\n    UPDATE sqlmanager.tablelist as tb\r\n    SET\r\n    \ttableschemaname = t.schemaname,\r\n        tablename = t.relname,\r\n        descr =  COALESCE(pg_catalog.obj_description(t.relid),'<NO TITLE>'),\r\n        userid = _userid\r\n    FROM pg_catalog.pg_statio_all_tables as t\r\n    WHERE t.relid = tb.id and t.schemaname not like 'pg_%' and t.schemaname<>'information_schema';\r\n\r\n    \r\n    \r\n    INSERT INTO sqlmanager.tablelist (\r\n      id, tableschemaname, tablename, fullname,\r\n      descr, userid \r\n    )\r\n    SELECT \r\n        t.relid, t.schemaname, t.relname, concat(t.schemaname,'.', t.relname),\r\n        COALESCE(pg_catalog.obj_description(t.relid),'<NO TITLE>'),\r\n        _userid\r\n    FROM pg_catalog.pg_statio_all_tables as t\r\n    WHERE t.schemaname not like 'pg_%' and t.schemaname<>'information_schema'\r\n\t\t\tand t.relid not in (\r\n            \tSELECT id\r\n                FROM sqlmanager.tablelist\r\n            );\r\n\tDELETE FROM sqlmanager.tablelist\r\n    WHERE id not in (\r\n    \tSELECT\r\n        \tt.relid\r\n\t\tFROM pg_catalog.pg_statio_all_tables as t\r\n    \tWHERE t.schemaname not like 'pg_%' and t.schemaname<>'information_schema'\r\n    );\r\n    \r\n   UPDATE sqlmanager.tablelist\r\n   SET noscript = false; \r\n\r\nEND;\r\n
227413	sqlmanager	fn_function_onload	sqlmanager.fn_function_onload(injson  json)	Function onload	2020-05-21 11:31:02.195905	1	f	fn_function_onload(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.fn_function_onload(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.fn_function_onload(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n\t_id int;\r\n    _userid int;\r\n\t\r\nBEGIN\r\n\t_id = injson->>'id';\r\n    _userid = injson->>'userid';\r\n    \r\n    \r\n    UPDATE sqlmanager.functionslist\r\n    SET noscript = true\r\n    WHERE id = _id; \r\n    \r\n    UPDATE sqlmanager.functionslist as f\r\n    SET\r\n\t\tfunctiontitle = p.proname,\r\n        functionschema = ns.nspname, \r\n        fullname = concat(\r\n        \tns.nspname,'.', p.proname,'(', \r\n        \tsqlmanager.fn_function_args_text(\r\n            \tARRAY_TO_JSON(p.proargnames),\r\n                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),\r\n                ARRAY_TO_JSON(p.proargmodes)\r\n            ) ,')'\r\n        ),\r\n        descr = COALESCE(pg_catalog.obj_description(p.oid),'<NO TITLE>'),\r\n        userid = _userid,\r\n        functionfulltitle = concat( p.proname,'(',\r\n        \tsqlmanager.fn_function_args_text(\r\n            \tARRAY_TO_JSON(p.proargnames),\r\n                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),\r\n                ARRAY_TO_JSON(p.proargmodes)\r\n            ),')'),\r\n          dll = pg_get_functiondef(p.oid),\r\n          args = sqlmanager.fn_function_args_json(\r\n            \tARRAY_TO_JSON(p.proargnames),\r\n                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),\r\n                ARRAY_TO_JSON(p.proargmodes)\r\n          ),\r\n          returntype = t.typname\r\n    FROM pg_proc as p\r\n    \tJOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n    \tLEFT JOIN pg_type as t on t.oid = p.prorettype\r\n\r\n    WHERE p.oid = f.id and f.id= _id;\r\n    \r\n    DELETE FROM sqlmanager.functionslist \r\n    WHERE id = _id and id not in (\r\n    \tSELECT p.oid\r\n        FROM pg_proc as p\r\n         INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n    \tWHERE ns.nspname not in ('pg_catalog','information_schema')\r\n    );\r\n    \r\n    UPDATE sqlmanager.functionslist\r\n    SET noscript = false\r\n    WHERE id = _id; \r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n\t_id int;\r\n    _userid int;\r\n\t\r\nBEGIN\r\n\t_id = injson->>'id';\r\n    _userid = injson->>'userid';\r\n    \r\n    \r\n    UPDATE sqlmanager.functionslist\r\n    SET noscript = true\r\n    WHERE id = _id; \r\n    \r\n    UPDATE sqlmanager.functionslist as f\r\n    SET\r\n\t\tfunctiontitle = p.proname,\r\n        functionschema = ns.nspname, \r\n        fullname = concat(\r\n        \tns.nspname,'.', p.proname,'(', \r\n        \tsqlmanager.fn_function_args_text(\r\n            \tARRAY_TO_JSON(p.proargnames),\r\n                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),\r\n                ARRAY_TO_JSON(p.proargmodes)\r\n            ) ,')'\r\n        ),\r\n        descr = COALESCE(pg_catalog.obj_description(p.oid),'<NO TITLE>'),\r\n        userid = _userid,\r\n        functionfulltitle = concat( p.proname,'(',\r\n        \tsqlmanager.fn_function_args_text(\r\n            \tARRAY_TO_JSON(p.proargnames),\r\n                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),\r\n                ARRAY_TO_JSON(p.proargmodes)\r\n            ),')'),\r\n          dll = pg_get_functiondef(p.oid),\r\n          args = sqlmanager.fn_function_args_json(\r\n            \tARRAY_TO_JSON(p.proargnames),\r\n                ARRAY_TO_JSON(COALESCE(p.proallargtypes,p.proargtypes)),\r\n                ARRAY_TO_JSON(p.proargmodes)\r\n          ),\r\n          returntype = t.typname\r\n    FROM pg_proc as p\r\n    \tJOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n    \tLEFT JOIN pg_type as t on t.oid = p.prorettype\r\n\r\n    WHERE p.oid = f.id and f.id= _id;\r\n    \r\n    DELETE FROM sqlmanager.functionslist \r\n    WHERE id = _id and id not in (\r\n    \tSELECT p.oid\r\n        FROM pg_proc as p\r\n         INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n    \tWHERE ns.nspname not in ('pg_catalog','information_schema')\r\n    );\r\n    \r\n    UPDATE sqlmanager.functionslist\r\n    SET noscript = false\r\n    WHERE id = _id; \r\nEND;\r\n
227415	sqlmanager	fn_modes_sel	sqlmanager.fn_modes_sel(injson  json,outjson out json)	functions arguments types	2020-05-21 11:31:02.195905	1	f	fn_modes_sel(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.fn_modes_sel(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.fn_modes_sel(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n\r\nBEGIN\r\n\r\n\tSELECT\r\n    \tarray_to_json(array_agg(row_to_json(d)))\r\n    FROM (\r\n    \tSELECT\r\n        \tvalue as value,\r\n            value as label\r\n        FROM json_array_elements_text('["input","output","input/output"]')\r\n    \t\r\n    ) as d\r\n    INTO outjson;\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n\r\nBEGIN\r\n\r\n\tSELECT\r\n    \tarray_to_json(array_agg(row_to_json(d)))\r\n    FROM (\r\n    \tSELECT\r\n        \tvalue as value,\r\n            value as label\r\n        FROM json_array_elements_text('["input","output","input/output"]')\r\n    \t\r\n    ) as d\r\n    INTO outjson;\r\n\r\nEND;\r\n
227416	sqlmanager	fn_schemalist_onload	sqlmanager.fn_schemalist_onload(injson  json)	load schemas	2020-05-21 11:31:02.195905	1	f	fn_schemalist_onload(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.fn_schemalist_onload(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.fn_schemalist_onload(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n    \r\n   UPDATE sqlmanager.schemalist\r\n   SET noscript = true; \r\n    \r\n   UPDATE sqlmanager.schemalist as s\r\n   SET \r\n   \tschemaname = n.nspname,\r\n   \tschemadescr = COALESCE( pg_catalog.obj_description(n.oid, 'pg_namespace'),'<NO DESCR>'),\r\n    userid = _userid\r\n   FROM pg_catalog.pg_namespace as n\r\n   WHERE\r\n    n.oid = s.id AND\r\n    n.nspname !~ '^pg_' AND \r\n   \tn.nspname <> 'information_schema';\r\n\r\n    \r\n   INSERT INTO sqlmanager.schemalist (\r\n    id, schemaname,\r\n    schemadescr,\r\n    userid\r\n   ) \r\n   SELECT \r\n      n.oid, n.nspname,                                                     \r\n      COALESCE( pg_catalog.obj_description(n.oid, 'pg_namespace'),'<NO DESCR>') AS descr,\r\n      _userid\r\n   FROM pg_catalog.pg_namespace n                                       \r\n   WHERE n.nspname !~ '^pg_' AND n.nspname <> 'information_schema'\r\n   \t\t\tand n.oid not in (\r\n            \tSELECT id\r\n                FROM sqlmanager.schemalist\r\n            );\r\n            \r\n\tDELETE FROM sqlmanager.schemalist\r\n    WHERE id not in (\r\n       SELECT \r\n          n.oid\r\n       FROM pg_catalog.pg_namespace n                                       \r\n       WHERE n.nspname !~ '^pg_' AND n.nspname <> 'information_schema'\r\n    );  \t\r\n\t\r\n\tINSERT INTO sqlmanager.schemaobjects (\r\n\t  oname, schemaname, linkurl\r\n\t) \r\n\tSELECT\r\n\t  'tables', s.schemaname, 'tables'\r\n\tFROM sqlmanager.schemalist as s\r\n\tWHERE (\r\n\t    SELECT\r\n\t\t  count(c.id)\r\n\t\tFROM sqlmanager.schemaobjects as c\r\n\t\tWHERE c.schemaname = s.schemaname and c.oname = 'tables'\r\n\t) = 0 \r\n\tUNION ALL\r\n\tSELECT\r\n\t  'functions', s.schemaname, 'functions'\r\n\tFROM sqlmanager.schemalist as s\r\n\tWHERE (\r\n\t    SELECT\r\n\t\t  count(c.id)\r\n\t\tFROM sqlmanager.schemaobjects as c\r\n\t\tWHERE c.schemaname = s.schemaname and c.oname = 'functions'\r\n\t) = 0 ;\r\n    \r\n    UPDATE sqlmanager.schemalist\r\n    SET noscript = false; \r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _userid int;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n    \r\n   UPDATE sqlmanager.schemalist\r\n   SET noscript = true; \r\n    \r\n   UPDATE sqlmanager.schemalist as s\r\n   SET \r\n   \tschemaname = n.nspname,\r\n   \tschemadescr = COALESCE( pg_catalog.obj_description(n.oid, 'pg_namespace'),'<NO DESCR>'),\r\n    userid = _userid\r\n   FROM pg_catalog.pg_namespace as n\r\n   WHERE\r\n    n.oid = s.id AND\r\n    n.nspname !~ '^pg_' AND \r\n   \tn.nspname <> 'information_schema';\r\n\r\n    \r\n   INSERT INTO sqlmanager.schemalist (\r\n    id, schemaname,\r\n    schemadescr,\r\n    userid\r\n   ) \r\n   SELECT \r\n      n.oid, n.nspname,                                                     \r\n      COALESCE( pg_catalog.obj_description(n.oid, 'pg_namespace'),'<NO DESCR>') AS descr,\r\n      _userid\r\n   FROM pg_catalog.pg_namespace n                                       \r\n   WHERE n.nspname !~ '^pg_' AND n.nspname <> 'information_schema'\r\n   \t\t\tand n.oid not in (\r\n            \tSELECT id\r\n                FROM sqlmanager.schemalist\r\n            );\r\n            \r\n\tDELETE FROM sqlmanager.schemalist\r\n    WHERE id not in (\r\n       SELECT \r\n          n.oid\r\n       FROM pg_catalog.pg_namespace n                                       \r\n       WHERE n.nspname !~ '^pg_' AND n.nspname <> 'information_schema'\r\n    );  \t\r\n\t\r\n\tINSERT INTO sqlmanager.schemaobjects (\r\n\t  oname, schemaname, linkurl\r\n\t) \r\n\tSELECT\r\n\t  'tables', s.schemaname, 'tables'\r\n\tFROM sqlmanager.schemalist as s\r\n\tWHERE (\r\n\t    SELECT\r\n\t\t  count(c.id)\r\n\t\tFROM sqlmanager.schemaobjects as c\r\n\t\tWHERE c.schemaname = s.schemaname and c.oname = 'tables'\r\n\t) = 0 \r\n\tUNION ALL\r\n\tSELECT\r\n\t  'functions', s.schemaname, 'functions'\r\n\tFROM sqlmanager.schemalist as s\r\n\tWHERE (\r\n\t    SELECT\r\n\t\t  count(c.id)\r\n\t\tFROM sqlmanager.schemaobjects as c\r\n\t\tWHERE c.schemaname = s.schemaname and c.oname = 'functions'\r\n\t) = 0 ;\r\n    \r\n    UPDATE sqlmanager.schemalist\r\n    SET noscript = false; \r\nEND;\r\n
227417	sqlmanager	fn_schemas_sel	sqlmanager.fn_schemas_sel(injson  json,outjson out json)	select api for schemas	2020-05-21 11:31:02.195905	1	f	fn_schemas_sel(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.fn_schemas_sel(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.fn_schemas_sel(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n \r\nBEGIN\r\n\r\n\tSELECT \r\n    \tarray_to_json(array_agg(row_to_json(d)))\r\n    FROM (\r\n      SELECT \r\n          n.nspname as value,\r\n          n.nspname as label\r\n      FROM pg_catalog.pg_namespace as n\r\n      WHERE\r\n          n.nspname !~ '^pg_' AND \r\n          n.nspname <> 'information_schema'\r\n    ) as d\r\n    INTO outjson;\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n \r\nBEGIN\r\n\r\n\tSELECT \r\n    \tarray_to_json(array_agg(row_to_json(d)))\r\n    FROM (\r\n      SELECT \r\n          n.nspname as value,\r\n          n.nspname as label\r\n      FROM pg_catalog.pg_namespace as n\r\n      WHERE\r\n          n.nspname !~ '^pg_' AND \r\n          n.nspname <> 'information_schema'\r\n    ) as d\r\n    INTO outjson;\r\n\r\nEND;\r\n
227418	sqlmanager	fn_tablecols_onload	sqlmanager.fn_tablecols_onload(injson  json)	table columns onload	2020-05-21 11:31:02.195905	1	f	fn_tablecols_onload(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.fn_tablecols_onload(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.fn_tablecols_onload(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\n  _tablename varchar(350);\r\nBEGIN\r\n  _userid = injson->>'userid';\r\n  \r\n  _tablename = injson->>'tablename';\r\n  \r\n  UPDATE sqlmanager.tablecolumns as tb\r\n  SET \r\n  \tnoscript = true\r\n  WHERE tb.tablename = _tablename;\r\n  \r\n  UPDATE sqlmanager.tablecolumns as tb\r\n  SET \r\n    coldesc = COALESCE(pgd.description, '<NO TITLE>'),\r\n    coltype = t.udt_name,\r\n    size = COALESCE(\r\n        t.character_maximum_length, \r\n        t.numeric_precision\r\n    ),\r\n    accur = t.numeric_scale,\r\n    defval = t.column_default,\r\n    "notnull" = (CASE WHEN t.is_nullable = 'YES'\r\n    THEN false\r\n    ELSE true\r\n    END) ,\r\n    uniq = (CASE WHEN (\r\n      SELECT count(i.indrelid)\r\n      FROM pg_index as i\r\n           JOIN pg_class as c on c.oid = i.indexrelid\r\n           JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace\r\n           JOIN pg_class as tt on tt.oid = i.indrelid\r\n           JOIN pg_attribute a on a.attrelid = tt.oid and a.attnum = ANY(i.indkey)\r\n      WHERE concat(n.nspname,'.', tt.relname) = concat(t.table_schema, '.', t.table_name)\r\n            and i.indisunique and a.attname = t.column_name\r\n      ) > 0\r\n    THEN true\r\n    ELSE false \r\n    END), userid = _userid  \r\n  \r\n  FROM information_schema.columns as t\r\n      LEFT JOIN pg_catalog.pg_statio_all_tables as st on \r\n           st.schemaname = t.table_schema and \r\n           st.relname = t.table_name\r\n      LEFT JOIN pg_catalog.pg_description pgd on \r\n           pgd.objoid = st.relid and \r\n           pgd.objsubid = t.ordinal_position\r\n  WHERE concat(t.table_schema, '.', t.table_name) = _tablename and \r\n        tb.tablename = _tablename and \r\n        t.column_name = tb.colname;  \r\n  \r\n  INSERT INTO sqlmanager.tablecolumns (\r\n      tablename, colname, coldesc,\r\n      coltype, size, accur, defval,\r\n      "notnull", uniq, userid\r\n  )\r\n  SELECT\r\n    concat(t.table_schema, '.', t.table_name) as tablename,\r\n    t.column_name as colname,\r\n    COALESCE(pgd.description, '<NO TITLE>') as coldesc,\r\n    t.udt_name as coltype,\r\n    COALESCE(\r\n        t.character_maximum_length, \r\n        t.numeric_precision\r\n    ) as size,\r\n    t.numeric_scale as accur,\r\n    t.column_default as defval,\r\n    CASE WHEN t.is_nullable = 'YES'\r\n    THEN false\r\n    ELSE true\r\n    END as notnull,\r\n    CASE WHEN (\r\n      SELECT count(i.indrelid)\r\n      FROM pg_index as i\r\n           JOIN pg_class as c on c.oid = i.indexrelid\r\n           JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace\r\n           JOIN pg_class as tt on tt.oid = i.indrelid\r\n           JOIN pg_attribute a on a.attrelid = tt.oid and a.attnum = ANY(i.indkey)\r\n      WHERE concat(n.nspname,'.', tt.relname) = concat(t.table_schema, '.', t.table_name)\r\n            and i.indisunique and a.attname = t.column_name\r\n      ) > 0\r\n    THEN true\r\n    ELSE false \r\n    END as uniq, _userid\r\n  FROM information_schema.columns as t\r\n\t  LEFT JOIN pg_catalog.pg_statio_all_tables as st on \r\n\t\t   st.schemaname = t.table_schema and \r\n\t\t   st.relname = t.table_name\r\n\t  LEFT JOIN pg_catalog.pg_description pgd on \r\n\t\t   pgd.objoid = st.relid and \r\n\t\t   pgd.objsubid = t.ordinal_position\r\n  WHERE concat(t.table_schema, '.', t.table_name) = _tablename and (\r\n      SELECT count(tb.id)\r\n\t  FROM sqlmanager.tablecolumns as tb\r\n\t  WHERE tb.tablename = _tablename and tb.colname = t.column_name\r\n  ) = 0;\r\n  \r\n  DELETE FROM sqlmanager.tablecolumns \r\n  WHERE tablename = _tablename and \r\n        colname not in (\r\n\t\t    SELECT t.column_name\r\n\t\t\tFROM information_schema.columns as t\r\n            WHERE concat(t.table_schema, '.', t.table_name) = _tablename\r\n\t\t);\r\n        \r\n  UPDATE sqlmanager.tablecolumns as tb\r\n  SET \r\n  \tnoscript = false\r\n  WHERE tb.tablename = _tablename;\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _userid int;\r\n  _tablename varchar(350);\r\nBEGIN\r\n  _userid = injson->>'userid';\r\n  \r\n  _tablename = injson->>'tablename';\r\n  \r\n  UPDATE sqlmanager.tablecolumns as tb\r\n  SET \r\n  \tnoscript = true\r\n  WHERE tb.tablename = _tablename;\r\n  \r\n  UPDATE sqlmanager.tablecolumns as tb\r\n  SET \r\n    coldesc = COALESCE(pgd.description, '<NO TITLE>'),\r\n    coltype = t.udt_name,\r\n    size = COALESCE(\r\n        t.character_maximum_length, \r\n        t.numeric_precision\r\n    ),\r\n    accur = t.numeric_scale,\r\n    defval = t.column_default,\r\n    "notnull" = (CASE WHEN t.is_nullable = 'YES'\r\n    THEN false\r\n    ELSE true\r\n    END) ,\r\n    uniq = (CASE WHEN (\r\n      SELECT count(i.indrelid)\r\n      FROM pg_index as i\r\n           JOIN pg_class as c on c.oid = i.indexrelid\r\n           JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace\r\n           JOIN pg_class as tt on tt.oid = i.indrelid\r\n           JOIN pg_attribute a on a.attrelid = tt.oid and a.attnum = ANY(i.indkey)\r\n      WHERE concat(n.nspname,'.', tt.relname) = concat(t.table_schema, '.', t.table_name)\r\n            and i.indisunique and a.attname = t.column_name\r\n      ) > 0\r\n    THEN true\r\n    ELSE false \r\n    END), userid = _userid  \r\n  \r\n  FROM information_schema.columns as t\r\n      LEFT JOIN pg_catalog.pg_statio_all_tables as st on \r\n           st.schemaname = t.table_schema and \r\n           st.relname = t.table_name\r\n      LEFT JOIN pg_catalog.pg_description pgd on \r\n           pgd.objoid = st.relid and \r\n           pgd.objsubid = t.ordinal_position\r\n  WHERE concat(t.table_schema, '.', t.table_name) = _tablename and \r\n        tb.tablename = _tablename and \r\n        t.column_name = tb.colname;  \r\n  \r\n  INSERT INTO sqlmanager.tablecolumns (\r\n      tablename, colname, coldesc,\r\n      coltype, size, accur, defval,\r\n      "notnull", uniq, userid\r\n  )\r\n  SELECT\r\n    concat(t.table_schema, '.', t.table_name) as tablename,\r\n    t.column_name as colname,\r\n    COALESCE(pgd.description, '<NO TITLE>') as coldesc,\r\n    t.udt_name as coltype,\r\n    COALESCE(\r\n        t.character_maximum_length, \r\n        t.numeric_precision\r\n    ) as size,\r\n    t.numeric_scale as accur,\r\n    t.column_default as defval,\r\n    CASE WHEN t.is_nullable = 'YES'\r\n    THEN false\r\n    ELSE true\r\n    END as notnull,\r\n    CASE WHEN (\r\n      SELECT count(i.indrelid)\r\n      FROM pg_index as i\r\n           JOIN pg_class as c on c.oid = i.indexrelid\r\n           JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace\r\n           JOIN pg_class as tt on tt.oid = i.indrelid\r\n           JOIN pg_attribute a on a.attrelid = tt.oid and a.attnum = ANY(i.indkey)\r\n      WHERE concat(n.nspname,'.', tt.relname) = concat(t.table_schema, '.', t.table_name)\r\n            and i.indisunique and a.attname = t.column_name\r\n      ) > 0\r\n    THEN true\r\n    ELSE false \r\n    END as uniq, _userid\r\n  FROM information_schema.columns as t\r\n\t  LEFT JOIN pg_catalog.pg_statio_all_tables as st on \r\n\t\t   st.schemaname = t.table_schema and \r\n\t\t   st.relname = t.table_name\r\n\t  LEFT JOIN pg_catalog.pg_description pgd on \r\n\t\t   pgd.objoid = st.relid and \r\n\t\t   pgd.objsubid = t.ordinal_position\r\n  WHERE concat(t.table_schema, '.', t.table_name) = _tablename and (\r\n      SELECT count(tb.id)\r\n\t  FROM sqlmanager.tablecolumns as tb\r\n\t  WHERE tb.tablename = _tablename and tb.colname = t.column_name\r\n  ) = 0;\r\n  \r\n  DELETE FROM sqlmanager.tablecolumns \r\n  WHERE tablename = _tablename and \r\n        colname not in (\r\n\t\t    SELECT t.column_name\r\n\t\t\tFROM information_schema.columns as t\r\n            WHERE concat(t.table_schema, '.', t.table_name) = _tablename\r\n\t\t);\r\n        \r\n  UPDATE sqlmanager.tablecolumns as tb\r\n  SET \r\n  \tnoscript = false\r\n  WHERE tb.tablename = _tablename;\r\n\r\nEND;\r\n
227420	sqlmanager	fn_triggeractions_str	sqlmanager.fn_triggeractions_str(_ins  bool,_upd  bool,_del  bool,_trun  bool,_str out varchar)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_triggeractions_str(_ins  bool,_upd  bool,_del  bool,_trun  bool,_str out varchar)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.fn_triggeractions_str(_ins  bool,_upd  bool,_del  bool,_trun  bool,_str out varchar) \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.fn_triggeractions_str(_ins boolean, _upd boolean, _del boolean, _trun boolean, OUT _str character varying)\n RETURNS character varying\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  \r\nBEGIN\r\n\r\n\tIF _ins THEN\r\n    \t_str = 'INSERT ';\r\n    END IF;\r\n\t\r\n\tIF _upd \r\n    THEN\r\n    \t_str = CONCAT(_str, 'OR UPDATE ');\r\n    END IF;\r\n    \r\n\tIF _del \r\n    THEN\r\n    \t_str = CONCAT(_str, 'OR DELETE ');\r\n    END IF;\r\n    \r\n\tIF _trun \r\n    THEN\r\n    \t_str = CONCAT(_str, 'OR TRUNCATE ');\r\n    END IF;\r\n    \r\n    IF substring(_str,1,2) = 'OR'\r\n    THEN\r\n    \t_str = substring(_str,3,length(_str));\r\n    END IF;\r\n\r\nEND;\r\n$function$\n	[{"argname":"_ins","argmode":"input","argtype":"bool"},{"argname":"_upd","argmode":"input","argtype":"bool"},{"argname":"_del","argmode":"input","argtype":"bool"},{"argname":"_trun","argmode":"input","argtype":"bool"},{"argname":"_str","argmode":"output","argtype":"varchar"}]	varchar	\r\nDECLARE\r\n  \r\nBEGIN\r\n\r\n\tIF _ins THEN\r\n    \t_str = 'INSERT ';\r\n    END IF;\r\n\t\r\n\tIF _upd \r\n    THEN\r\n    \t_str = CONCAT(_str, 'OR UPDATE ');\r\n    END IF;\r\n    \r\n\tIF _del \r\n    THEN\r\n    \t_str = CONCAT(_str, 'OR DELETE ');\r\n    END IF;\r\n    \r\n\tIF _trun \r\n    THEN\r\n    \t_str = CONCAT(_str, 'OR TRUNCATE ');\r\n    END IF;\r\n    \r\n    IF substring(_str,1,2) = 'OR'\r\n    THEN\r\n    \t_str = substring(_str,3,length(_str));\r\n    END IF;\r\n\r\nEND;\r\n
227422	sqlmanager	fn_types_sel	sqlmanager.fn_types_sel(injson  json,outjson out json)	ALL TYPES	2020-05-21 11:31:02.195905	1	f	fn_types_sel(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.fn_types_sel(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.fn_types_sel(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n\r\nBEGIN\r\n  SELECT\r\n      array_to_json(array_agg(row_to_json(d)))\r\n  FROM (\t\r\n    SELECT \r\n        t.typname as value,\r\n        t.typname as label\r\n    FROM pg_type t\r\n        LEFT JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace\r\n    WHERE (\r\n      t.typrelid = 0 OR (\r\n          SELECT c.relkind = 'c'\r\n          FROM pg_catalog.pg_class c\r\n          WHERE c.oid = t.typrelid\r\n      )\r\n    ) AND NOT EXISTS (\r\n        SELECT 1\r\n        FROM pg_catalog.pg_type el\r\n        WHERE el.oid = t.typelem AND\r\n              el.typarray = t.oid\r\n    ) \r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'[]');\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\nDECLARE\r\n\r\nBEGIN\r\n  SELECT\r\n      array_to_json(array_agg(row_to_json(d)))\r\n  FROM (\t\r\n    SELECT \r\n        t.typname as value,\r\n        t.typname as label\r\n    FROM pg_type t\r\n        LEFT JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace\r\n    WHERE (\r\n      t.typrelid = 0 OR (\r\n          SELECT c.relkind = 'c'\r\n          FROM pg_catalog.pg_class c\r\n          WHERE c.oid = t.typrelid\r\n      )\r\n    ) AND NOT EXISTS (\r\n        SELECT 1\r\n        FROM pg_catalog.pg_type el\r\n        WHERE el.oid = t.typelem AND\r\n              el.typarray = t.oid\r\n    ) \r\n  ) as d\r\n  INTO outjson;\r\n  \r\n  outjson = coalesce(outjson,'[]');\r\n\r\nEND;\r\n
227423	sqlmanager	tr_foreignkeys_tr_del	sqlmanager.tr_foreignkeys_tr_del()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_foreignkeys_tr_del()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_foreignkeys_tr_del() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_foreignkeys_tr_del()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n\r\n\tIF NOT OLD.noscript\r\n    THEN\r\n    \tsquery = CONCAT('             \r\n          ALTER TABLE ', OLD.maintablename ,'\r\n  \t\t    DROP CONSTRAINT "', OLD.ftitle ,'" RESTRICT;\r\n        ');\r\n        \r\n        EXECUTE squery;\r\n    END IF;\r\n\tRETURN OLD;\r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n\r\n\tIF NOT OLD.noscript\r\n    THEN\r\n    \tsquery = CONCAT('             \r\n          ALTER TABLE ', OLD.maintablename ,'\r\n  \t\t    DROP CONSTRAINT "', OLD.ftitle ,'" RESTRICT;\r\n        ');\r\n        \r\n        EXECUTE squery;\r\n    END IF;\r\n\tRETURN OLD;\r\n\r\nEND;\r\n
227424	sqlmanager	tr_foreignkeys_tr_ins	sqlmanager.tr_foreignkeys_tr_ins()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_foreignkeys_tr_ins()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_foreignkeys_tr_ins() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_foreignkeys_tr_ins()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n\r\n\tIF NOT NEW.noscript\r\n    THEN\r\n    \tsquery = CONCAT('\r\n          ALTER TABLE ', NEW.maintablename ,'\r\n            ADD CONSTRAINT "', NEW.ftitle, '" \r\n            FOREIGN KEY ("' , NEW.maincol , '")\r\n              REFERENCES ', NEW.parentablename,'("', NEW.parentcol ,'")\r\n              ON DELETE NO ACTION\r\n              ON UPDATE NO ACTION\r\n              NOT DEFERRABLE;\r\n        ');\r\n        \r\n        EXECUTE squery;\r\n    END IF;\r\n\r\n\tRETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n\r\n\tIF NOT NEW.noscript\r\n    THEN\r\n    \tsquery = CONCAT('\r\n          ALTER TABLE ', NEW.maintablename ,'\r\n            ADD CONSTRAINT "', NEW.ftitle, '" \r\n            FOREIGN KEY ("' , NEW.maincol , '")\r\n              REFERENCES ', NEW.parentablename,'("', NEW.parentcol ,'")\r\n              ON DELETE NO ACTION\r\n              ON UPDATE NO ACTION\r\n              NOT DEFERRABLE;\r\n        ');\r\n        \r\n        EXECUTE squery;\r\n    END IF;\r\n\r\n\tRETURN NEW;\r\nEND;\r\n
227425	sqlmanager	tr_foreignkeys_tr_maincol	sqlmanager.tr_foreignkeys_tr_maincol()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_foreignkeys_tr_maincol()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_foreignkeys_tr_maincol() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_foreignkeys_tr_maincol()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n\tIF NOT NEW.noscript AND (\r\n    \tOLD.maincol <> NEW.maincol OR \r\n        OLD.parentablename <> NEW.parentablename OR\r\n        OLD.parentcol <> NEW.parentcol\r\n    )\r\n    THEN\r\n    \tsquery = concat('\r\n          -- object recreation\r\n          ALTER TABLE ', NEW.maintablename ,'\r\n            DROP CONSTRAINT "', NEW.ftitle , '" RESTRICT;\r\n\r\n          ALTER TABLE ', NEW.maintablename ,'\r\n            ADD CONSTRAINT "', NEW.ftitle, '" \r\n            FOREIGN KEY ("' , NEW.maincol , '")\r\n              REFERENCES ', NEW.parentablename,'("', NEW.parentcol ,'")\r\n              ON DELETE NO ACTION\r\n              ON UPDATE NO ACTION\r\n              NOT DEFERRABLE;\r\n          ');\r\n        \r\n        EXECUTE squery;\r\n    END IF;\r\n\t\r\n    RETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n\tIF NOT NEW.noscript AND (\r\n    \tOLD.maincol <> NEW.maincol OR \r\n        OLD.parentablename <> NEW.parentablename OR\r\n        OLD.parentcol <> NEW.parentcol\r\n    )\r\n    THEN\r\n    \tsquery = concat('\r\n          -- object recreation\r\n          ALTER TABLE ', NEW.maintablename ,'\r\n            DROP CONSTRAINT "', NEW.ftitle , '" RESTRICT;\r\n\r\n          ALTER TABLE ', NEW.maintablename ,'\r\n            ADD CONSTRAINT "', NEW.ftitle, '" \r\n            FOREIGN KEY ("' , NEW.maincol , '")\r\n              REFERENCES ', NEW.parentablename,'("', NEW.parentcol ,'")\r\n              ON DELETE NO ACTION\r\n              ON UPDATE NO ACTION\r\n              NOT DEFERRABLE;\r\n          ');\r\n        \r\n        EXECUTE squery;\r\n    END IF;\r\n\t\r\n    RETURN NEW;\r\nEND;\r\n
227427	sqlmanager	tr_functionslist_tr_args	sqlmanager.tr_functionslist_tr_args()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_functionslist_tr_args()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_functionslist_tr_args() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_functionslist_tr_args()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  \r\nBEGIN\r\n\tIF NEW.noscript\r\n    THEN\r\n      NEW.args =  COALESCE(NEW.args,'[]');\r\n      IF NEW.args::varchar <> '[]'\r\n      THEN\r\n          INSERT INTO sqlmanager.functionargs (\r\n            argname, argtype, argmode,\r\n            oid, userid\r\n          )\r\n          SELECT\r\n              value->>'argname', value->>'argtype', value->>'argmode',\r\n              NEW.id, NEW.userid\r\n          FROM json_array_elements(NEW.args) as a\r\n          WHERE  (\r\n              SELECT count(f.id)\r\n              FROM sqlmanager.functionargs as f\r\n              WHERE f.argname = value->>'argname' and\r\n                    f.argtype = value->>'argtype' and\r\n                    f.argmode = value->>'argmode' and\r\n                    f.oid = NEW.id\r\n          ) = 0;\r\n      END IF;\r\n    END IF;\r\n    \r\n    RETURN NEW;\r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n  \r\nBEGIN\r\n\tIF NEW.noscript\r\n    THEN\r\n      NEW.args =  COALESCE(NEW.args,'[]');\r\n      IF NEW.args::varchar <> '[]'\r\n      THEN\r\n          INSERT INTO sqlmanager.functionargs (\r\n            argname, argtype, argmode,\r\n            oid, userid\r\n          )\r\n          SELECT\r\n              value->>'argname', value->>'argtype', value->>'argmode',\r\n              NEW.id, NEW.userid\r\n          FROM json_array_elements(NEW.args) as a\r\n          WHERE  (\r\n              SELECT count(f.id)\r\n              FROM sqlmanager.functionargs as f\r\n              WHERE f.argname = value->>'argname' and\r\n                    f.argtype = value->>'argtype' and\r\n                    f.argmode = value->>'argmode' and\r\n                    f.oid = NEW.id\r\n          ) = 0;\r\n      END IF;\r\n    END IF;\r\n    \r\n    RETURN NEW;\r\n\r\nEND;\r\n
227431	sqlmanager	tr_functionslist_tr_ins	sqlmanager.tr_functionslist_tr_ins()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_functionslist_tr_ins()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_functionslist_tr_ins() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_functionslist_tr_ins()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $functionx$\r\nDECLARE\r\n    squery varchar;\r\nBEGIN\r\n\t\r\n  IF not NEW.noscript\r\n  THEN\r\n  \tIF COALESCE(NEW.functionschema, '') = ''\r\n    THEN\r\n    \tPERFORM raiserror('function schema is empty');\r\n    END IF;\r\n    \r\n  \tIF COALESCE(NEW.functiontitle, '') = ''\r\n    THEN\r\n    \tPERFORM raiserror('title is empty');\r\n    END IF;\r\n    NEW.fullname = CONCAT(NEW.functionschema,'.',NEW.functiontitle,'()');\r\n    NEW.functionfulltitle = CONCAT(NEW.functiontitle,'()');\r\n    squery = CONCAT('\r\n      CREATE FUNCTION "', NEW.functionschema, '"."',\r\n      \tNEW.functiontitle, '"()\r\n      RETURNS void AS\r\n      $body$\r\n      DECLARE BEGIN END;\r\n      $body$\r\n      LANGUAGE ''plpgsql'' VOLATILE CALLED ON NULL INPUT SECURITY INVOKER;\r\n    ');\r\n    \r\n    NEW.dll = squery;\r\n    \r\n    EXECUTE format(squery) ;\r\n    \r\n  END IF;\r\n  \r\n  NEW.dll = CONCAT(\r\n  \t'/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\n', NEW.fullname ,' \r\n*/\r\n', \r\nNEW.dll\r\n  );\r\n  \r\n  NEW.definition = SUBSTRING(NEW.dll,\r\n\tPOSITION('$function$' IN NEW.dll) + 10,\r\n    length(NEW.dll)\r\n  );\r\n  \r\n  NEW.definition =  SUBSTRING(NEW.definition,\r\n    0, POSITION('$function$' IN NEW.definition)\r\n  );\r\n  \r\n\r\n  RETURN NEW;\r\n\r\nEND;\r\n$functionx$\n	[]	trigger	' IN NEW.dll) + 10,\r\n    length(NEW.dll)\r\n  );\r\n  \r\n  NEW.definition =  SUBSTRING(NEW.definition,\r\n    0, POSITION('
227432	sqlmanager	tr_functionslist_tr_upd	sqlmanager.tr_functionslist_tr_upd()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_functionslist_tr_upd()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_functionslist_tr_upd() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_functionslist_tr_upd()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $functionx$\r\nDECLARE\r\n    squery varchar;\r\nBEGIN\r\n\r\n   IF NEW.noscript and NEW.dll like '%LANGUAGE plpgsql%'\r\n   THEN\r\n       NEW.definition = SUBSTRING(NEW.dll,\r\n        POSITION('$function$' IN NEW.dll) + 10,\r\n        length(NEW.dll)\r\n       );\r\n      \r\n      NEW.definition =  SUBSTRING(NEW.definition,\r\n        0, POSITION('$function$' IN NEW.definition)\r\n      );\r\n      \r\n   END IF;\r\n   \r\n   IF NOT NEW.noscript\r\n   THEN\r\n       squery = '\r\n       ';\t\r\n       \r\n       IF (\r\n           SELECT\r\n              count(a.value)\r\n           FROM json_array_elements(NEW.args) as a\r\n       ) <> (\r\n           SELECT\r\n              count(fa.id)\r\n           FROM sqlmanager.functionargs as fa\r\n           JOIN json_array_elements(NEW.args) as a \r\n           \tON a.value->>'argname' = fa.argname AND \r\n            \ta.value->>'argtype' = fa.argtype AND\r\n                a.value->>'argmode' = fa.argmode\r\n                \r\n           WHERE fa.oid = NEW.id\r\n       ) OR  (\r\n           SELECT\r\n              count(a.value)\r\n           FROM json_array_elements(NEW.args) as a\r\n       ) <> (\r\n           SELECT\r\n              count(fa.id)\r\n           FROM sqlmanager.functionargs as fa                \r\n           WHERE fa.oid = NEW.id\r\n       ) OR NEW.returntype <> OLD.returntype\r\n       THEN\r\n           squery = CONCAT(squery,\r\n               'DROP FUNCTION ',NEW.fullname,'; \r\n               '\r\n           );\r\n       ELSE\r\n         IF OLD.functionschema <> NEW.functionschema\r\n         THEN\r\n             squery = CONCAT(\r\n                 squery,'\r\n                    ALTER FUNCTION ',OLD.functionschema,'.',OLD.functionfulltitle,'\r\n                      SET SCHEMA ', NEW.functionschema ,';\r\n                 '\r\n             );\r\n         END IF;\r\n         \r\n         IF OLD.functiontitle <> NEW.functiontitle\r\n         THEN\r\n             squery = CONCAT(\r\n                 squery,'\r\n                 ALTER FUNCTION ',NEW.functionschema,'.',OLD.functionfulltitle,'\r\n                \tRENAME TO "', NEW.functiontitle, '";\r\n                 '\r\n             );\r\n         END IF;\r\n         \r\n         \r\n       END IF;\r\n       \r\n       squery = CONCAT(squery,'\r\n           CREATE OR REPLACE FUNCTION "', NEW.functionschema, '"."', NEW.functiontitle, '"(\r\n       ');\r\n       \r\n       squery = CONCAT(squery,( \r\n         SELECT \r\n             string_agg( \r\n             \tCONCAT((\r\n                      CASE WHEN f.argmode = 'output'\r\n                      THEN 'out'\r\n                      WHEN f.argmode = 'input/output'\r\n                      THEN 'inout'\r\n                      END\r\n                    ), ' ',\r\n                \tf.argname,' ',f.argtype,' '\r\n                ),','\r\n             )\r\n         FROM sqlmanager.functionargs as f\r\n         WHERE f.oid = NEW.id\r\n       ));\r\n       \r\n       --squery = SUBSTRING(squery,0,length(squery));\r\n       \r\n       squery = CONCAT(\r\n           squery,') RETURNS ', \r\n           NEW.returntype, \r\n           ' AS $function$ ',\r\n           NEW.definition, '$function$ LANGUAGE ''plpgsql'';' \r\n       );\r\n\r\n       \r\n       EXECUTE squery;\r\n       \r\n       /*PERFORM sqlmanager.fn_functions_onload ((\r\n           SELECT row_to_json(d)\r\n           FROM (\r\n               SELECT NEW.userid as userid\r\n           ) as d\r\n       \r\n       ));*/\r\n       \r\n   END IF;\r\n   \r\n  \r\n   RETURN NEW;\r\nEND;\r\n$functionx$\n	[]	trigger	' IN NEW.dll) + 10,\r\n        length(NEW.dll)\r\n       );\r\n      \r\n      NEW.definition =  SUBSTRING(NEW.definition,\r\n        0, POSITION('
227433	sqlmanager	tr_schemalist_tr_del	sqlmanager.tr_schemalist_tr_del()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_schemalist_tr_del()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_schemalist_tr_del() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_schemalist_tr_del()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    squery varchar;\r\nBEGIN\r\n\r\n  IF not OLD.noscript \r\n  THEN\r\n    squery = concat('\t\r\n        DROP SCHEMA ',OLD.schemaname,';\r\n    ');\r\n    \r\n     EXECUTE format(squery) ;\r\n    \r\n  END IF;\r\n  RETURN OLD;\r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n    squery varchar;\r\nBEGIN\r\n\r\n  IF not OLD.noscript \r\n  THEN\r\n    squery = concat('\t\r\n        DROP SCHEMA ',OLD.schemaname,';\r\n    ');\r\n    \r\n     EXECUTE format(squery) ;\r\n    \r\n  END IF;\r\n  RETURN OLD;\r\n\r\nEND;\r\n
227434	sqlmanager	tr_schemalist_tr_descr	sqlmanager.tr_schemalist_tr_descr()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_schemalist_tr_descr()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_schemalist_tr_descr() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_schemalist_tr_descr()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript\r\n  THEN\r\n    squery = concat('\t\r\n      COMMENT ON SCHEMA "', \r\n      replace(NEW.schemaname, '"', ''), '" \r\n      IS ''', NEW.schemadescr, '''\r\n    ');\r\n    \r\n     EXECUTE format(squery) ;\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript\r\n  THEN\r\n    squery = concat('\t\r\n      COMMENT ON SCHEMA "', \r\n      replace(NEW.schemaname, '"', ''), '" \r\n      IS ''', NEW.schemadescr, '''\r\n    ');\r\n    \r\n     EXECUTE format(squery) ;\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n
227442	sqlmanager	tr_tablecolumns_tr_ins	sqlmanager.tr_tablecolumns_tr_ins()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_tablecolumns_tr_ins()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_tablecolumns_tr_ins() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_tablecolumns_tr_ins()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n squery varchar;\r\nBEGIN\r\n\tIF not NEW.noscript\r\n    THEN\r\n      IF COALESCE(NEW.colname,'') = ''\r\n      THEN \r\n          PERFORM raiserror('Name is empty');\r\n      END IF;\r\n      \r\n      IF COALESCE(NEW.tablename,'') = ''\r\n      THEN \r\n          PERFORM raiserror('tablename is empty');\r\n      END IF;\r\n      \r\n      NEW.coltype = COALESCE(NEW.coltype,'int');\r\n      squery = concat('\r\n        ALTER TABLE ',NEW.tablename,'\r\n          ADD COLUMN "',NEW.colname,'" ',NEW.coltype\r\n      );\r\n      \r\n      -- Type size\r\n      IF NEW.size is not null\r\n      THEN\r\n        squery = concat( squery, '(', NEW.size::varchar);\r\n        IF NEW.accur is not null\r\n        THEN\r\n          squery = concat( squery, ',', NEW.accur::varchar);\r\n        END IF;\r\n        squery = concat(squery, ')');\r\n      END IF;\r\n      \r\n      IF COALESCE(NEW.defval,'') <> ''\r\n      THEN\r\n        squery = concat(squery, ' DEFAULT ''', NEW.defval,'''');\r\n      END IF;\r\n      \r\n      IF NEW."notnull"\r\n      THEN\r\n        squery = concat( squery, ' NOT NULL ');\r\n      END IF;\r\n      \r\n\r\n      \r\n      squery = concat(squery,';');\r\n      \r\n      IF COALESCE(NEW.coldesc,'') <> ''\r\n      THEN\r\n      \tsquery = concat(squery ,'\r\n        \tCOMMENT ON COLUMN ', NEW.tablename, '."', NEW.colname,'"\r\n        \tIS ''', NEW.coldesc, ''';'\r\n        );\r\n      END IF;\r\n      \r\n      EXECUTE squery;\r\n      \r\n    END IF;\r\n\r\n\r\n\tRETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n squery varchar;\r\nBEGIN\r\n\tIF not NEW.noscript\r\n    THEN\r\n      IF COALESCE(NEW.colname,'') = ''\r\n      THEN \r\n          PERFORM raiserror('Name is empty');\r\n      END IF;\r\n      \r\n      IF COALESCE(NEW.tablename,'') = ''\r\n      THEN \r\n          PERFORM raiserror('tablename is empty');\r\n      END IF;\r\n      \r\n      NEW.coltype = COALESCE(NEW.coltype,'int');\r\n      squery = concat('\r\n        ALTER TABLE ',NEW.tablename,'\r\n          ADD COLUMN "',NEW.colname,'" ',NEW.coltype\r\n      );\r\n      \r\n      -- Type size\r\n      IF NEW.size is not null\r\n      THEN\r\n        squery = concat( squery, '(', NEW.size::varchar);\r\n        IF NEW.accur is not null\r\n        THEN\r\n          squery = concat( squery, ',', NEW.accur::varchar);\r\n        END IF;\r\n        squery = concat(squery, ')');\r\n      END IF;\r\n      \r\n      IF COALESCE(NEW.defval,'') <> ''\r\n      THEN\r\n        squery = concat(squery, ' DEFAULT ''', NEW.defval,'''');\r\n      END IF;\r\n      \r\n      IF NEW."notnull"\r\n      THEN\r\n        squery = concat( squery, ' NOT NULL ');\r\n      END IF;\r\n      \r\n\r\n      \r\n      squery = concat(squery,';');\r\n      \r\n      IF COALESCE(NEW.coldesc,'') <> ''\r\n      THEN\r\n      \tsquery = concat(squery ,'\r\n        \tCOMMENT ON COLUMN ', NEW.tablename, '."', NEW.colname,'"\r\n        \tIS ''', NEW.coldesc, ''';'\r\n        );\r\n      END IF;\r\n      \r\n      EXECUTE squery;\r\n      \r\n    END IF;\r\n\r\n\r\n\tRETURN NEW;\r\nEND;\r\n
227435	sqlmanager	tr_schemalist_tr_ins	sqlmanager.tr_schemalist_tr_ins()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_schemalist_tr_ins()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_schemalist_tr_ins() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_schemalist_tr_ins()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n\tsquery varchar;\r\nBEGIN\r\n\r\n\tIF not NEW.noscript\r\n    THEN \r\n        IF COALESCE(NEW.schemaname,'') = ''\r\n        THEN\r\n        \tPERFORM raiserror('Name is empty');\r\n        END IF;\r\n    \t\r\n    \tsquery = concat(\r\n    \t\t'CREATE SCHEMA "',NEW.schemaname,'" \r\n            AUTHORIZATION postgres;'\r\n        );\r\n         IF COALESCE(NEW.schemadescr,'') <> ''\r\n         THEN\r\n            squery = concat(squery,\r\n                'COMMENT ON SCHEMA "',NEW.schemaname,'" \r\n                IS ''',NEW.schemadescr,''';'\r\n            );\r\n         END IF;   \r\n         \r\n         EXECUTE squery;             \r\n        \r\n    END IF;\r\n    \r\n    RETURN NEW;\r\n\t\r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n\tsquery varchar;\r\nBEGIN\r\n\r\n\tIF not NEW.noscript\r\n    THEN \r\n        IF COALESCE(NEW.schemaname,'') = ''\r\n        THEN\r\n        \tPERFORM raiserror('Name is empty');\r\n        END IF;\r\n    \t\r\n    \tsquery = concat(\r\n    \t\t'CREATE SCHEMA "',NEW.schemaname,'" \r\n            AUTHORIZATION postgres;'\r\n        );\r\n         IF COALESCE(NEW.schemadescr,'') <> ''\r\n         THEN\r\n            squery = concat(squery,\r\n                'COMMENT ON SCHEMA "',NEW.schemaname,'" \r\n                IS ''',NEW.schemadescr,''';'\r\n            );\r\n         END IF;   \r\n         \r\n         EXECUTE squery;             \r\n        \r\n    END IF;\r\n    \r\n    RETURN NEW;\r\n\t\r\n\r\nEND;\r\n
227436	sqlmanager	tr_schemalist_tr_name	sqlmanager.tr_schemalist_tr_name()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_schemalist_tr_name()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_schemalist_tr_name() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_schemalist_tr_name()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript and \r\n  \t NEW.schemaname <> OLD.schemaname\r\n  THEN\r\n    squery = concat('\t\r\n        ALTER SCHEMA ',OLD.schemaname,'\r\n        RENAME TO ',NEW.schemaname,';\r\n    ');\r\n    \r\n     EXECUTE format(squery) ;\r\n    \r\n  END IF;\r\n  \r\n  RETURN NEW;\r\n  \r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript and \r\n  \t NEW.schemaname <> OLD.schemaname\r\n  THEN\r\n    squery = concat('\t\r\n        ALTER SCHEMA ',OLD.schemaname,'\r\n        RENAME TO ',NEW.schemaname,';\r\n    ');\r\n    \r\n     EXECUTE format(squery) ;\r\n    \r\n  END IF;\r\n  \r\n  RETURN NEW;\r\n  \r\nEND;\r\n
227437	sqlmanager	tr_tablecolumns_tr_accur	sqlmanager.tr_tablecolumns_tr_accur()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_tablecolumns_tr_accur()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_tablecolumns_tr_accur() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_tablecolumns_tr_accur()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript and NEW.size is not null and\r\n  \t NEW.accur is not null\r\n  THEN\r\n    squery = concat('\t\r\n\t\tALTER TABLE ',NEW.tablename,'\r\n  \t\t\tALTER COLUMN "',NEW.colname,'" \r\n            TYPE ',NEW.coltype,'(',NEW.size::varchar,',',\r\n            NEW.accur::varchar,');\r\n    ');\r\n    \r\n     EXECUTE format(squery);\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript and NEW.size is not null and\r\n  \t NEW.accur is not null\r\n  THEN\r\n    squery = concat('\t\r\n\t\tALTER TABLE ',NEW.tablename,'\r\n  \t\t\tALTER COLUMN "',NEW.colname,'" \r\n            TYPE ',NEW.coltype,'(',NEW.size::varchar,',',\r\n            NEW.accur::varchar,');\r\n    ');\r\n    \r\n     EXECUTE format(squery);\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n
227438	sqlmanager	tr_tablecolumns_tr_coldesc	sqlmanager.tr_tablecolumns_tr_coldesc()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_tablecolumns_tr_coldesc()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_tablecolumns_tr_coldesc() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_tablecolumns_tr_coldesc()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript\r\n  THEN\r\n    squery = concat('\t\r\n      COMMENT ON COLUMN ',NEW.tablename,'.',NEW.colname,'\r\n      IS ''', NEW.coldesc ,''';\r\n    ');\r\n    \r\n     EXECUTE format(squery);\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript\r\n  THEN\r\n    squery = concat('\t\r\n      COMMENT ON COLUMN ',NEW.tablename,'.',NEW.colname,'\r\n      IS ''', NEW.coldesc ,''';\r\n    ');\r\n    \r\n     EXECUTE format(squery);\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n
227439	sqlmanager	tr_tablecolumns_tr_colname	sqlmanager.tr_tablecolumns_tr_colname()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_tablecolumns_tr_colname()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_tablecolumns_tr_colname() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_tablecolumns_tr_colname()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript\r\n  THEN\r\n    squery = concat('\t\r\n      ALTER TABLE ',NEW.tablename,'\r\n        RENAME COLUMN ',OLD.colname,' TO ',NEW.colname,';\r\n    ');\r\n    \r\n     EXECUTE format(squery);\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript\r\n  THEN\r\n    squery = concat('\t\r\n      ALTER TABLE ',NEW.tablename,'\r\n        RENAME COLUMN ',OLD.colname,' TO ',NEW.colname,';\r\n    ');\r\n    \r\n     EXECUTE format(squery);\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n
227440	sqlmanager	tr_tablecolumns_tr_defval	sqlmanager.tr_tablecolumns_tr_defval()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_tablecolumns_tr_defval()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_tablecolumns_tr_defval() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_tablecolumns_tr_defval()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n squery varchar;\r\n _nn varchar(150);\r\nBEGIN\r\n  IF not NEW.noscript  \r\n  THEN\r\n  \tIF COALESCE(NEW.defval,'') <> ''\r\n    THEN\r\n    \t_nn = CONCAT(\r\n        \t'ALTER COLUMN "', \r\n            NEW.colname, \r\n            '" SET DEFAULT ',\r\n            NEW.defval, ';'\r\n        );\r\n    ELSE\r\n    \t_nn = CONCAT(\r\n        \t'ALTER COLUMN "', \r\n            NEW.colname, \r\n            '" DROP DEFAULT;'\r\n        );\r\n    END IF;\r\n  \r\n -- ALTER COLUMN col5 ;\r\n    squery = concat('\t\r\n      ALTER TABLE ', NEW.tablename, ' ', _nn, '\r\n        \r\n    ');\r\n    \r\n     EXECUTE format(squery);\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n squery varchar;\r\n _nn varchar(150);\r\nBEGIN\r\n  IF not NEW.noscript  \r\n  THEN\r\n  \tIF COALESCE(NEW.defval,'') <> ''\r\n    THEN\r\n    \t_nn = CONCAT(\r\n        \t'ALTER COLUMN "', \r\n            NEW.colname, \r\n            '" SET DEFAULT ',\r\n            NEW.defval, ';'\r\n        );\r\n    ELSE\r\n    \t_nn = CONCAT(\r\n        \t'ALTER COLUMN "', \r\n            NEW.colname, \r\n            '" DROP DEFAULT;'\r\n        );\r\n    END IF;\r\n  \r\n -- ALTER COLUMN col5 ;\r\n    squery = concat('\t\r\n      ALTER TABLE ', NEW.tablename, ' ', _nn, '\r\n        \r\n    ');\r\n    \r\n     EXECUTE format(squery);\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n
227443	sqlmanager	tr_tablecolumns_tr_notnull	sqlmanager.tr_tablecolumns_tr_notnull()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_tablecolumns_tr_notnull()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_tablecolumns_tr_notnull() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_tablecolumns_tr_notnull()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n squery varchar;\r\n _nn varchar(150);\r\nBEGIN\r\n  IF not NEW.noscript \r\n  THEN\r\n  \tIF NEW.notnull \r\n    THEN\r\n    \t_nn = 'SET NOT NULL';\r\n    ELSE\r\n\t\t_nn = 'DROP NOT NULL';\t\t\r\n    END IF;\r\n    \r\n    squery = concat('\t\r\n      ALTER TABLE ',NEW.tablename,'\r\n        ALTER COLUMN "',NEW.colname,'" ', _nn, ';\r\n    ');\r\n    \r\n     EXECUTE format(squery);\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n squery varchar;\r\n _nn varchar(150);\r\nBEGIN\r\n  IF not NEW.noscript \r\n  THEN\r\n  \tIF NEW.notnull \r\n    THEN\r\n    \t_nn = 'SET NOT NULL';\r\n    ELSE\r\n\t\t_nn = 'DROP NOT NULL';\t\t\r\n    END IF;\r\n    \r\n    squery = concat('\t\r\n      ALTER TABLE ',NEW.tablename,'\r\n        ALTER COLUMN "',NEW.colname,'" ', _nn, ';\r\n    ');\r\n    \r\n     EXECUTE format(squery);\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n
227444	sqlmanager	tr_tablecolumns_tr_size	sqlmanager.tr_tablecolumns_tr_size()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_tablecolumns_tr_size()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_tablecolumns_tr_size() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_tablecolumns_tr_size()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript and \r\n  \t NEW.size is not null\r\n  THEN\r\n    squery = concat('\t\r\n\t\tALTER TABLE ',NEW.tablename,'\r\n  \t\t\tALTER COLUMN "',NEW.colname,'" \r\n            TYPE ',NEW.coltype,'(',NEW.size::varchar,');\r\n    ');\r\n    \r\n     EXECUTE format(squery);\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript and \r\n  \t NEW.size is not null\r\n  THEN\r\n    squery = concat('\t\r\n\t\tALTER TABLE ',NEW.tablename,'\r\n  \t\t\tALTER COLUMN "',NEW.colname,'" \r\n            TYPE ',NEW.coltype,'(',NEW.size::varchar,');\r\n    ');\r\n    \r\n     EXECUTE format(squery);\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n
227445	sqlmanager	tr_tablecolumns_tr_type	sqlmanager.tr_tablecolumns_tr_type()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_tablecolumns_tr_type()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_tablecolumns_tr_type() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_tablecolumns_tr_type()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript\r\n  THEN\r\n    squery = concat('\t\r\n\t\tALTER TABLE ',NEW.tablename,'\r\n  \t\t\tALTER COLUMN "',NEW.colname,'" \r\n            TYPE ',NEW.coltype,';\r\n    ');\r\n    \r\n     EXECUTE format(squery);\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript\r\n  THEN\r\n    squery = concat('\t\r\n\t\tALTER TABLE ',NEW.tablename,'\r\n  \t\t\tALTER COLUMN "',NEW.colname,'" \r\n            TYPE ',NEW.coltype,';\r\n    ');\r\n    \r\n     EXECUTE format(squery);\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n
227446	sqlmanager	tr_tablecolumns_tr_uniq	sqlmanager.tr_tablecolumns_tr_uniq()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_tablecolumns_tr_uniq()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_tablecolumns_tr_uniq() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_tablecolumns_tr_uniq()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\n/*\r\n\r\n*/\r\n\r\nDECLARE\r\n squery varchar;\r\n _nn varchar(150);\r\nBEGIN\r\n  IF not NEW.noscript \r\n  THEN\r\n  \tIF NEW.uniq \r\n    THEN\r\n    \t_nn = concat('ADD UNIQUE ("',NEW.colname,'")');\r\n    ELSE\r\n\t\t_nn = CONCAT('DROP CONSTRAINT ',(\r\n            SELECT c.relname\r\n            FROM pg_index as i\r\n                 JOIN pg_class as c on c.oid = i.indexrelid\r\n                 JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace\r\n                 JOIN pg_class as tt on tt.oid = i.indrelid\r\n                 JOIN pg_attribute a on a.attrelid = tt.oid and a.attnum = ANY(i.indkey)\r\n            WHERE concat(n.nspname,'.', tt.relname) = NEW.tablename\r\n                  and i.indisunique and a.attname = NEW.colname\r\n\r\n        ),' RESTRICT;');\t\t\r\n    END IF;\r\n    \r\n    squery = concat('\t\r\n      ALTER TABLE ',NEW.tablename,' ', _nn);\r\n    \r\n     EXECUTE format(squery);\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\n/*\r\n\r\n*/\r\n\r\nDECLARE\r\n squery varchar;\r\n _nn varchar(150);\r\nBEGIN\r\n  IF not NEW.noscript \r\n  THEN\r\n  \tIF NEW.uniq \r\n    THEN\r\n    \t_nn = concat('ADD UNIQUE ("',NEW.colname,'")');\r\n    ELSE\r\n\t\t_nn = CONCAT('DROP CONSTRAINT ',(\r\n            SELECT c.relname\r\n            FROM pg_index as i\r\n                 JOIN pg_class as c on c.oid = i.indexrelid\r\n                 JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace\r\n                 JOIN pg_class as tt on tt.oid = i.indrelid\r\n                 JOIN pg_attribute a on a.attrelid = tt.oid and a.attnum = ANY(i.indkey)\r\n            WHERE concat(n.nspname,'.', tt.relname) = NEW.tablename\r\n                  and i.indisunique and a.attname = NEW.colname\r\n\r\n        ),' RESTRICT;');\t\t\r\n    END IF;\r\n    \r\n    squery = concat('\t\r\n      ALTER TABLE ',NEW.tablename,' ', _nn);\r\n    \r\n     EXECUTE format(squery);\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n
227447	sqlmanager	tr_tablelist_tr_del	sqlmanager.tr_tablelist_tr_del()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_tablelist_tr_del()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_tablelist_tr_del() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_tablelist_tr_del()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    squery varchar;\r\nBEGIN\r\n\r\n  IF not OLD.noscript \r\n  THEN\r\n    squery = concat('\t\r\n        DROP TABLE ',OLD.fullname,';\r\n    ');\r\n    \r\n     EXECUTE format(squery) ;\r\n    \r\n  END IF;\r\n  RETURN OLD;\r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n    squery varchar;\r\nBEGIN\r\n\r\n  IF not OLD.noscript \r\n  THEN\r\n    squery = concat('\t\r\n        DROP TABLE ',OLD.fullname,';\r\n    ');\r\n    \r\n     EXECUTE format(squery) ;\r\n    \r\n  END IF;\r\n  RETURN OLD;\r\n\r\nEND;\r\n
227448	sqlmanager	tr_tablelist_tr_descr	sqlmanager.tr_tablelist_tr_descr()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_tablelist_tr_descr()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_tablelist_tr_descr() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_tablelist_tr_descr()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript and \r\n  \t NEW.descr <> OLD.descr\r\n  THEN\r\n    squery = concat('\t\r\n      COMMENT ON TABLE ', concat(\r\n      \t\t'"',NEW.tableschemaname,'"."',\r\n            NEW.tablename,'"'\r\n        ) ,'\r\n      IS ''', NEW.descr ,''';\r\n    ');\r\n    \r\n     EXECUTE format(squery) ;\r\n    \r\n  END IF;\r\n\r\n  RETURN NEW;\r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript and \r\n  \t NEW.descr <> OLD.descr\r\n  THEN\r\n    squery = concat('\t\r\n      COMMENT ON TABLE ', concat(\r\n      \t\t'"',NEW.tableschemaname,'"."',\r\n            NEW.tablename,'"'\r\n        ) ,'\r\n      IS ''', NEW.descr ,''';\r\n    ');\r\n    \r\n     EXECUTE format(squery) ;\r\n    \r\n  END IF;\r\n\r\n  RETURN NEW;\r\n\r\nEND;\r\n
227449	sqlmanager	tr_tablelist_tr_ins	sqlmanager.tr_tablelist_tr_ins()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_tablelist_tr_ins()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_tablelist_tr_ins() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_tablelist_tr_ins()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript \r\n  THEN\r\n  \r\n  \tIF COALESCE(NEW.tableschemaname, '') = ''\r\n    THEN\r\n    \tPERFORM raiserror('Schema name is empty');\r\n    END IF;\r\n    \r\n  \tIF COALESCE(NEW.tablename, '') = ''\r\n    THEN\r\n    \tPERFORM raiserror('Table name is empty');\r\n    END IF;\r\n    \r\n    NEW.fullname = concat('"', NEW.tableschemaname, '"."', NEW.tablename,'"');\r\n    \r\n    squery = concat('\t\r\n        CREATE TABLE "', NEW.tableschemaname, '"."', NEW.tablename, '" (\r\n          id SERIAL NOT NULL,\r\n          PRIMARY KEY(id)\r\n        ) \r\n        WITH (oids = false);\r\n    ');\r\n    \r\n    IF COALESCE(NEW.descr,'') <> ''\r\n    THEN\r\n    \tsquery = concat(squery,'\r\n          COMMENT ON TABLE "', NEW.tableschemaname, '"."', NEW.tablename, '"\r\n          IS ''', NEW.descr, ''';'\r\n        );\r\n    END IF;  \r\n    \r\n    EXECUTE format(squery) ;\r\n    \r\n  END IF;\r\n  \r\n  RETURN NEW;\r\n  \r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript \r\n  THEN\r\n  \r\n  \tIF COALESCE(NEW.tableschemaname, '') = ''\r\n    THEN\r\n    \tPERFORM raiserror('Schema name is empty');\r\n    END IF;\r\n    \r\n  \tIF COALESCE(NEW.tablename, '') = ''\r\n    THEN\r\n    \tPERFORM raiserror('Table name is empty');\r\n    END IF;\r\n    \r\n    NEW.fullname = concat('"', NEW.tableschemaname, '"."', NEW.tablename,'"');\r\n    \r\n    squery = concat('\t\r\n        CREATE TABLE "', NEW.tableschemaname, '"."', NEW.tablename, '" (\r\n          id SERIAL NOT NULL,\r\n          PRIMARY KEY(id)\r\n        ) \r\n        WITH (oids = false);\r\n    ');\r\n    \r\n    IF COALESCE(NEW.descr,'') <> ''\r\n    THEN\r\n    \tsquery = concat(squery,'\r\n          COMMENT ON TABLE "', NEW.tableschemaname, '"."', NEW.tablename, '"\r\n          IS ''', NEW.descr, ''';'\r\n        );\r\n    END IF;  \r\n    \r\n    EXECUTE format(squery) ;\r\n    \r\n  END IF;\r\n  \r\n  RETURN NEW;\r\n  \r\nEND;\r\n
227450	sqlmanager	tr_tablelist_tr_name	sqlmanager.tr_tablelist_tr_name()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_tablelist_tr_name()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_tablelist_tr_name() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_tablelist_tr_name()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript and \r\n  \t NEW.tablename <> OLD.tablename\r\n  THEN\r\n    squery = concat('\t\r\n      \tALTER TABLE ', \r\n        concat(\r\n        \t'"', NEW.tableschemaname, '"."', \r\n            OLD.tablename, '"'\r\n        ), '\r\n        RENAME TO ', \r\n        concat(\r\n        \t'"', \r\n            NEW.tablename, '"'\r\n        ), ';\r\n    ');\r\n    \r\n     EXECUTE format(squery) ;\r\n    \r\n  END IF;\r\n  \r\n  RETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript and \r\n  \t NEW.tablename <> OLD.tablename\r\n  THEN\r\n    squery = concat('\t\r\n      \tALTER TABLE ', \r\n        concat(\r\n        \t'"', NEW.tableschemaname, '"."', \r\n            OLD.tablename, '"'\r\n        ), '\r\n        RENAME TO ', \r\n        concat(\r\n        \t'"', \r\n            NEW.tablename, '"'\r\n        ), ';\r\n    ');\r\n    \r\n     EXECUTE format(squery) ;\r\n    \r\n  END IF;\r\n  \r\n  RETURN NEW;\r\nEND;\r\n
227451	sqlmanager	tr_trigger_del	sqlmanager.tr_trigger_del()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_trigger_del()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_trigger_del() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_trigger_del()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n\tIF NOT OLD.noscript\r\n    THEN\r\n      squery = CONCAT('\r\n          DROP TRIGGER "', OLD.triggername , '" ON ', OLD.tablename, ';\r\n      ');\r\n      EXECUTE squery;\r\n    END IF;\r\n    \r\n    RETURN OLD;\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n\tIF NOT OLD.noscript\r\n    THEN\r\n      squery = CONCAT('\r\n          DROP TRIGGER "', OLD.triggername , '" ON ', OLD.tablename, ';\r\n      ');\r\n      EXECUTE squery;\r\n    END IF;\r\n    \r\n    RETURN OLD;\r\nEND;\r\n
227452	sqlmanager	tr_triggers_tr_beforafter	sqlmanager.tr_triggers_tr_beforafter()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_triggers_tr_beforafter()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_triggers_tr_beforafter() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_triggers_tr_beforafter()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    squery varchar;\r\n    splus varchar;\r\n    \r\nBEGIN\r\n\r\n\tIF NOT NEW.noscript  \r\n    THEN\r\n    \tIF OLD.onbefore <> NEW.onbefore\r\n        THEN\r\n        \tsplus = (\r\n              \tCASE WHEN NEW.onbefore\r\n              \tTHEN 'BEFORE'\r\n                ELSE 'AFTER'\r\n                END\r\n            );\r\n        \t\r\n            IF NEW.onbefore THEN\r\n              \tNEW.onafter = false;\r\n            ELSE\r\n            \tNEW.onafter = true;\r\n            END IF;\r\n        \r\n    \tELSE \r\n          IF OLD.onafter <> NEW.onafter\r\n          THEN\r\n              splus = (\r\n                  CASE WHEN NEW.onafter\r\n                  THEN 'AFTER'\r\n                  ELSE 'BEFORE'\r\n                  END\r\n              );\r\n              \r\n              IF NEW.onafter THEN\r\n              \tNEW.onbefore = false;\r\n              ELSE\r\n              \tNEW.onbefore = true;\r\n              END IF;\r\n          END IF;\r\n        END IF;\r\n        \r\n    \tsquery = CONCAT('\r\n            -- object recreation\r\n            DROP TRIGGER ', NEW.triggername, ' \r\n            ON ', NEW.tablename , ';\r\n\r\n            CREATE TRIGGER ', NEW.triggername, '\r\n              ', splus, ' ', sqlmanager.fn_triggeractions_str(\r\n              \tNEW.oninsert,\r\n              \tNEW.onupdate,\r\n                NEW.ondelete,\r\n                NEW.ontruncate\r\n              ), ' \r\n              ON ', NEW.tablename , '\r\n              \r\n            FOR EACH ROW \r\n              EXECUTE PROCEDURE ', NEW.functionname , '();\r\n        ');\r\n        \r\n        EXECUTE squery;\r\n    \t\r\n    END IF;\r\n\t\r\n\tRETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n    squery varchar;\r\n    splus varchar;\r\n    \r\nBEGIN\r\n\r\n\tIF NOT NEW.noscript  \r\n    THEN\r\n    \tIF OLD.onbefore <> NEW.onbefore\r\n        THEN\r\n        \tsplus = (\r\n              \tCASE WHEN NEW.onbefore\r\n              \tTHEN 'BEFORE'\r\n                ELSE 'AFTER'\r\n                END\r\n            );\r\n        \t\r\n            IF NEW.onbefore THEN\r\n              \tNEW.onafter = false;\r\n            ELSE\r\n            \tNEW.onafter = true;\r\n            END IF;\r\n        \r\n    \tELSE \r\n          IF OLD.onafter <> NEW.onafter\r\n          THEN\r\n              splus = (\r\n                  CASE WHEN NEW.onafter\r\n                  THEN 'AFTER'\r\n                  ELSE 'BEFORE'\r\n                  END\r\n              );\r\n              \r\n              IF NEW.onafter THEN\r\n              \tNEW.onbefore = false;\r\n              ELSE\r\n              \tNEW.onbefore = true;\r\n              END IF;\r\n          END IF;\r\n        END IF;\r\n        \r\n    \tsquery = CONCAT('\r\n            -- object recreation\r\n            DROP TRIGGER ', NEW.triggername, ' \r\n            ON ', NEW.tablename , ';\r\n\r\n            CREATE TRIGGER ', NEW.triggername, '\r\n              ', splus, ' ', sqlmanager.fn_triggeractions_str(\r\n              \tNEW.oninsert,\r\n              \tNEW.onupdate,\r\n                NEW.ondelete,\r\n                NEW.ontruncate\r\n              ), ' \r\n              ON ', NEW.tablename , '\r\n              \r\n            FOR EACH ROW \r\n              EXECUTE PROCEDURE ', NEW.functionname , '();\r\n        ');\r\n        \r\n        EXECUTE squery;\r\n    \t\r\n    END IF;\r\n\t\r\n\tRETURN NEW;\r\nEND;\r\n
227453	sqlmanager	tr_triggers_tr_def	sqlmanager.tr_triggers_tr_def()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_triggers_tr_def()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_triggers_tr_def() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_triggers_tr_def()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $functionx$\r\nDECLARE\r\n  --variable_name datatype;\r\nBEGIN\r\n   IF NEW.noscript and NEW.functiondef like '%LANGUAGE plpgsql%'\r\n   THEN\r\n       NEW.functiondef = SUBSTRING(NEW.functiondef,\r\n        POSITION('$function$' IN NEW.functiondef) + 10,\r\n        length(NEW.functiondef)\r\n       );\r\n      \r\n      NEW.functiondef =  SUBSTRING(NEW.functiondef,\r\n        0, POSITION('$function$' IN NEW.functiondef)\r\n      );\r\n      \r\n   END IF;\r\n   RETURN NEW;\r\n\r\nEND;\r\n$functionx$\n	[]	trigger	' IN NEW.functiondef) + 10,\r\n        length(NEW.functiondef)\r\n       );\r\n      \r\n      NEW.functiondef =  SUBSTRING(NEW.functiondef,\r\n        0, POSITION('
227454	sqlmanager	tr_triggers_tr_def_upd	sqlmanager.tr_triggers_tr_def_upd()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_triggers_tr_def_upd()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_triggers_tr_def_upd() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_triggers_tr_def_upd()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n\tIF NOT NEW.noscript\r\n    THEN\r\n        squery = concat('\r\n            CREATE OR REPLACE FUNCTION ',\r\n              NEW.functionname\r\n            ,' ()\r\n            RETURNS trigger AS\r\n            $body$',\r\n              NEW.functiondef\r\n            , '\r\n            $body$\r\n            LANGUAGE ''plpgsql''\r\n            VOLATILE\r\n            CALLED ON NULL INPUT\r\n            SECURITY INVOKER\r\n            COST 100;\r\n        ');\r\n        EXECUTE squery;\r\n\tEND IF;\r\n    \r\n    RETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n\tIF NOT NEW.noscript\r\n    THEN\r\n        squery = concat('\r\n            CREATE OR REPLACE FUNCTION ',\r\n              NEW.functionname\r\n            ,' ()\r\n            RETURNS trigger AS\r\n            $body$',\r\n              NEW.functiondef\r\n            , '\r\n            $body$\r\n            LANGUAGE ''plpgsql''\r\n            VOLATILE\r\n            CALLED ON NULL INPUT\r\n            SECURITY INVOKER\r\n            COST 100;\r\n        ');\r\n        EXECUTE squery;\r\n\tEND IF;\r\n    \r\n    RETURN NEW;\r\nEND;\r\n
227455	sqlmanager	tr_triggers_tr_enabled	sqlmanager.tr_triggers_tr_enabled()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_triggers_tr_enabled()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_triggers_tr_enabled() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_triggers_tr_enabled()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n\t\r\n\tIF not NEW.noscript and NEW.enables <> OLD.enables\r\n    THEN\r\n\t  squery = concat('\r\n        ALTER TABLE ', NEW.tablename ,'\r\n        \t', (\r\n            \tCASE WHEN NEW.enables\r\n                THEN 'ENABLE'\r\n                ELSE 'DISABLE'\r\n                END\r\n            ) , ' TRIGGER "', NEW.triggername, '";\r\n        '\r\n      );\r\n      \r\n      EXECUTE squery;\r\n\tEND IF;\r\n\t\r\n\tRETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n\t\r\n\tIF not NEW.noscript and NEW.enables <> OLD.enables\r\n    THEN\r\n\t  squery = concat('\r\n        ALTER TABLE ', NEW.tablename ,'\r\n        \t', (\r\n            \tCASE WHEN NEW.enables\r\n                THEN 'ENABLE'\r\n                ELSE 'DISABLE'\r\n                END\r\n            ) , ' TRIGGER "', NEW.triggername, '";\r\n        '\r\n      );\r\n      \r\n      EXECUTE squery;\r\n\tEND IF;\r\n\t\r\n\tRETURN NEW;\r\nEND;\r\n
227456	sqlmanager	tr_triggers_tr_ins	sqlmanager.tr_triggers_tr_ins()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_triggers_tr_ins()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_triggers_tr_ins() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_triggers_tr_ins()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n\tsquery varchar;\r\nBEGIN\r\n\r\n\r\n\tIF not NEW.noscript \r\n    THEN\r\n      IF COALESCE(NEW.tablename,'') = ''\r\n      THEN \r\n      \tPERFORM raiserror('table name is null');\r\n      END IF;\r\n       \t\r\n    \t\r\n      squery = concat('\r\n          CREATE FUNCTION ',(\r\n            SELECT t.schemaname\r\n            FROM pg_catalog.pg_statio_all_tables as t\r\n            WHERE CONCAT(t.schemaname,'.',t.relname) = NEW.tablename\r\n          ),'."tr_', NEW.triggername, '" (\r\n          )\r\n          RETURNS trigger AS\r\n          $body$ DECLARE BEGIN RETURN NEW; END;\r\n          $body$\r\n          LANGUAGE ''plpgsql''\r\n          VOLATILE\r\n          CALLED ON NULL INPUT\r\n          SECURITY INVOKER;\r\n\r\n          CREATE TRIGGER ', NEW.triggername , '\r\n            ',(\r\n            \tCASE WHEN NEW.onbefore\r\n                THEN 'BEFORE'\r\n                ELSE 'AFTER'\r\n                END\r\n            \r\n            ),' ',sqlmanager.fn_triggeractions_str(\r\n              \tNEW.oninsert,\r\n              \tNEW.onupdate,\r\n                NEW.ondelete,\r\n                NEW.ontruncate\r\n            ),' \r\n            ON ', NEW.tablename , '\r\n            \r\n          FOR EACH ROW \r\n            EXECUTE PROCEDURE ',(\r\n              SELECT t.schemaname\r\n              FROM pg_catalog.pg_statio_all_tables as t\r\n              WHERE CONCAT(t.schemaname,'.',t.relname) = NEW.tablename\r\n          ),'."tr_', NEW.triggername, '"();\r\n      \r\n      ');\r\n      \r\n      EXECUTE squery;\r\n\tEND IF;\r\n\tRETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n\tsquery varchar;\r\nBEGIN\r\n\r\n\r\n\tIF not NEW.noscript \r\n    THEN\r\n      IF COALESCE(NEW.tablename,'') = ''\r\n      THEN \r\n      \tPERFORM raiserror('table name is null');\r\n      END IF;\r\n       \t\r\n    \t\r\n      squery = concat('\r\n          CREATE FUNCTION ',(\r\n            SELECT t.schemaname\r\n            FROM pg_catalog.pg_statio_all_tables as t\r\n            WHERE CONCAT(t.schemaname,'.',t.relname) = NEW.tablename\r\n          ),'."tr_', NEW.triggername, '" (\r\n          )\r\n          RETURNS trigger AS\r\n          $body$ DECLARE BEGIN RETURN NEW; END;\r\n          $body$\r\n          LANGUAGE ''plpgsql''\r\n          VOLATILE\r\n          CALLED ON NULL INPUT\r\n          SECURITY INVOKER;\r\n\r\n          CREATE TRIGGER ', NEW.triggername , '\r\n            ',(\r\n            \tCASE WHEN NEW.onbefore\r\n                THEN 'BEFORE'\r\n                ELSE 'AFTER'\r\n                END\r\n            \r\n            ),' ',sqlmanager.fn_triggeractions_str(\r\n              \tNEW.oninsert,\r\n              \tNEW.onupdate,\r\n                NEW.ondelete,\r\n                NEW.ontruncate\r\n            ),' \r\n            ON ', NEW.tablename , '\r\n            \r\n          FOR EACH ROW \r\n            EXECUTE PROCEDURE ',(\r\n              SELECT t.schemaname\r\n              FROM pg_catalog.pg_statio_all_tables as t\r\n              WHERE CONCAT(t.schemaname,'.',t.relname) = NEW.tablename\r\n          ),'."tr_', NEW.triggername, '"();\r\n      \r\n      ');\r\n      \r\n      EXECUTE squery;\r\n\tEND IF;\r\n\tRETURN NEW;\r\nEND;\r\n
227457	sqlmanager	tr_triggers_tr_iudt	sqlmanager.tr_triggers_tr_iudt()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_triggers_tr_iudt()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_triggers_tr_iudt() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_triggers_tr_iudt()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    squery varchar;\r\nBEGIN\r\n\tIF NOT NEW.noscript AND (\r\n    \tOLD.oninsert <> NEW.oninsert OR\r\n        OLD.onupdate <> NEW.onupdate OR\r\n        OLD.ondelete <> NEW.ondelete OR\r\n        OLD.ontruncate <> NEW.ontruncate\r\n    ) \r\n    THEN\r\n    \tsquery = CONCAT('\r\n            -- object recreation\r\n            DROP TRIGGER ', NEW.triggername, ' \r\n            ON ', NEW.tablename , ';\r\n\r\n            CREATE TRIGGER ', NEW.triggername, '\r\n              ', (\r\n              \tCASE WHEN NEW.onbefore\r\n              \tTHEN 'BEFORE'\r\n                ELSE 'AFTER'\r\n                END\r\n              ), ' ', sqlmanager.fn_triggeractions_str(\r\n              \tNEW.oninsert,\r\n              \tNEW.onupdate,\r\n                NEW.ondelete,\r\n                NEW.ontruncate\r\n              ), ' \r\n              ON ', NEW.tablename , '\r\n              \r\n            FOR EACH ROW \r\n              EXECUTE PROCEDURE ', NEW.functionname , '();\r\n        ');\r\n        \r\n        EXECUTE squery;\r\n    END IF;\r\n    \r\n    RETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n    squery varchar;\r\nBEGIN\r\n\tIF NOT NEW.noscript AND (\r\n    \tOLD.oninsert <> NEW.oninsert OR\r\n        OLD.onupdate <> NEW.onupdate OR\r\n        OLD.ondelete <> NEW.ondelete OR\r\n        OLD.ontruncate <> NEW.ontruncate\r\n    ) \r\n    THEN\r\n    \tsquery = CONCAT('\r\n            -- object recreation\r\n            DROP TRIGGER ', NEW.triggername, ' \r\n            ON ', NEW.tablename , ';\r\n\r\n            CREATE TRIGGER ', NEW.triggername, '\r\n              ', (\r\n              \tCASE WHEN NEW.onbefore\r\n              \tTHEN 'BEFORE'\r\n                ELSE 'AFTER'\r\n                END\r\n              ), ' ', sqlmanager.fn_triggeractions_str(\r\n              \tNEW.oninsert,\r\n              \tNEW.onupdate,\r\n                NEW.ondelete,\r\n                NEW.ontruncate\r\n              ), ' \r\n              ON ', NEW.tablename , '\r\n              \r\n            FOR EACH ROW \r\n              EXECUTE PROCEDURE ', NEW.functionname , '();\r\n        ');\r\n        \r\n        EXECUTE squery;\r\n    END IF;\r\n    \r\n    RETURN NEW;\r\nEND;\r\n
227458	sqlmanager	tr_triggers_tr_title	sqlmanager.tr_triggers_tr_title()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_triggers_tr_title()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.tr_triggers_tr_title() \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.tr_triggers_tr_title()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n\tsquery varchar;\r\n\r\nBEGIN\r\n\t\r\n\tIF not NEW.noscript\r\n    THEN\r\n    \tsquery = CONCAT('\r\n          ALTER TRIGGER ', OLD.triggername ,' ON ', NEW.tablename ,'\r\n            RENAME TO "', NEW.triggername , '";\r\n        ');\r\n        \r\n        EXECUTE squery;\r\n    END IF; \r\n\r\n\r\n\tRETURN NEW;\r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nDECLARE\r\n\tsquery varchar;\r\n\r\nBEGIN\r\n\t\r\n\tIF not NEW.noscript\r\n    THEN\r\n    \tsquery = CONCAT('\r\n          ALTER TRIGGER ', OLD.triggername ,' ON ', NEW.tablename ,'\r\n            RENAME TO "', NEW.triggername , '";\r\n        ');\r\n        \r\n        EXECUTE squery;\r\n    END IF; \r\n\r\n\r\n\tRETURN NEW;\r\n\r\nEND;\r\n
227459	test	fn_act_visible_conditions_intable	test.fn_act_visible_conditions_intable(_vs  json,act_id  int4,_vid inout int4)	ins act vis conditions from json (table views) into table	2020-05-21 11:31:02.195905	1	f	fn_act_visible_conditions_intable(_vs  json,act_id  int4,_vid inout int4)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\ntest.fn_act_visible_conditions_intable(_vs  json,act_id  int4,_vid inout int4) \r\n*/\r\nCREATE OR REPLACE FUNCTION test.fn_act_visible_conditions_intable(_vs json, act_id integer, INOUT _vid integer)\n RETURNS integer\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n\t\n  INSERT INTO framework.act_visible_condions (\n    actionid, val_desc,\n    col, title,\n    operation, value\n  )\n  SELECT\n  \tact_id, (\n  \t SELECT\n       \tc.id\n     FROM framework.config as c\n     WHERE c.viewid = _vid and c.title = (value->'col')->>'value'\n    ) as val_desc, (v.value->'col')->>'col' as col,\n    (v.value->'col')->>'title' as title,\n    (v.value->'operation')->>'value' as operation,\n    v.value->>'value'\n  FROM json_array_elements(_vs) as v;\n\nEND;\n$function$\n	[{"argname":"_vs","argmode":"input","argtype":"json"},{"argname":"act_id","argmode":"input","argtype":"int4"},{"argname":"_vid","argmode":"input/output","argtype":"int4"}]	int4	\nBEGIN\n\t\n  INSERT INTO framework.act_visible_condions (\n    actionid, val_desc,\n    col, title,\n    operation, value\n  )\n  SELECT\n  \tact_id, (\n  \t SELECT\n       \tc.id\n     FROM framework.config as c\n     WHERE c.viewid = _vid and c.title = (value->'col')->>'value'\n    ) as val_desc, (v.value->'col')->>'col' as col,\n    (v.value->'col')->>'title' as title,\n    (v.value->'operation')->>'value' as operation,\n    v.value->>'value'\n  FROM json_array_elements(_vs) as v;\n\nEND;\n
227460	test	fn_actions_in_table	test.fn_actions_in_table(_actions  json,_vid inout int4)	ins actions from json (table views) into table	2020-05-21 11:31:02.195905	1	f	fn_actions_in_table(_actions  json,_vid inout int4)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\ntest.fn_actions_in_table(_actions  json,_vid inout int4) \r\n*/\r\nCREATE OR REPLACE FUNCTION test.fn_actions_in_table(_actions json, INOUT _vid integer)\n RETURNS integer\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE \r\n\t_kl json;\r\nBEGIN\r\n\r\n\tINSERT INTO framework.actions (\r\n      column_order,\r\n      viewid, classname, title,\r\n      icon, act_url ,\r\n      api_method ,\r\n      api_type ,\r\n      refresh_data ,\r\n      ask_confirm ,\r\n      roles ,\r\n      forevery ,\r\n      main_action ,\r\n      act_type \r\n    )\r\n\tSELECT\r\n      row_number() over (PARTITION BY 0) as column_order,\r\n      _vid, value->>'classname' as classname, value->>'title' as title,\r\n\t  value->>'icon' as icon, value->>'act' as act,\r\n      value->>'actapimethod' as api_method,\r\n      lower(value->>'actapitype') as api_type,\r\n      COALESCE((value->>'actapirefresh')::boolean,FALSE) as refresh_data,\r\n      COALESCE((value->>'actapiconfirm')::boolean,FALSE) as ask_confirm,\r\n      \r\n      json_build_array(array(SELECT\r\n             value->'value'\r\n      \tFROM json_array_elements((value->'roles')::json)\r\n      ))->0 as roles,\r\n      \r\n      COALESCE((value->>'isforevery')::boolean,FALSE) as forevery,\r\n      COALESCE((value->>'ismain')::boolean,FALSE) as main_action,\r\n\t  value->>'type' as type\r\n    FROM json_array_elements(_actions);\r\n    \r\n    SELECT\r\n    \tarray_to_json(array_agg(row_to_json(d)))\r\n    FROM\r\n    (SELECT\r\n    \ttest.fn_parametrs_intotables(  \r\n       \t  value->'parametrs',\r\n          _vid,\r\n           c.id\r\n        ),\r\n        test.fn_act_visible_conditions_intable(\r\n       \t  value->'act_visible_condition',\r\n          c.id,\r\n          _vid  \r\n        )\r\n    FROM json_array_elements(_actions) as a\r\n    \tJOIN framework.actions as c on c.viewid = _vid and \r\n        \tc.title = value->>'title') as d\r\n    INTO _kl;\r\n    \r\n    \r\n    \r\n\t/*\r\n\t[\r\n       {\r\n          "act": "/", \r\n          "icon": "fa fa-check", \r\n          "type": "Save", \r\n          "title": "save", \r\n          "classname": "p-button-success", \r\n          "parametrs": [], \r\n          "isforevery": false, \r\n          "act_visible_condition": [{\r\n              "col": {\r\n                  "t": 1, \r\n                  "key": "id_99ad9", \r\n                  "label": "id", \r\n                  "value": "vs_id"\r\n              },\r\n              "value": "-1", \r\n              "operation": {\r\n                  "js": ">", \r\n                  "label": ">", \r\n                  "value": ">", \r\n                  "python": ">"\r\n              }}\r\n          ]\r\n       }, \r\n       {\r\n         "act": "/composition/act_visible_conditions", \r\n         "icon": "fa fa-cros",\r\n         "type": "Link", \r\n         "title": "close", \r\n         "parametrs": [{\r\n              "paramt": null, \r\n              "paramconst": "", \r\n              "paraminput": "actionid", \r\n              "paramtitle": "actionid", \r\n              "paramcolumn": null\r\n           }, \r\n           {\r\n              "paramt": null, \r\n              "paramconst": "actionid", \r\n              "paraminput": "", \r\n              "paramtitle": "relation", \r\n              "paramcolumn": null\r\n           }, \r\n           {\r\n              "paramt": null, \r\n              "paramconst": "-1", \r\n              "paraminput": "", \r\n              "paramtitle": "vs_id", \r\n              "paramcolumn": null\r\n           }, \r\n           {\r\n              "paramt": null, \r\n              "paramconst": "", \r\n              "paraminput": "act_id", \r\n              "paramtitle": "act_id", \r\n              "paramcolumn": null\r\n           }\r\n         ], \r\n         "isforevery": false, \r\n         "act_visible_condition": [\r\n         \t{\r\n            \t"col": {\r\n            \t\t"t": 1, \r\n                    "key": "id_99ad9", \r\n                \t"label": "id", \r\n                \t"value": "vs_id"\r\n            \t}, \r\n         \t\t"const": null, \r\n            \t"value": "-1", \r\n            \t"operation": {\r\n            \t\t"js": ">", \r\n                \t"label": ">", \r\n                \t"value": ">", \r\n                \t"python": ">"\r\n            \t}\r\n            }\r\n         ]\r\n   \t   }\r\n     ]    \r\n     \r\n\t[\r\n        {\r\n        \t"act": "/api/postmethodtest_setselectedcolor_black", \r\n            "type": "API", \r\n            "title": "set checke black (POST TEST CHECKED)", \r\n            "parametrs": [\r\n            \t{\r\n                \t"paramt": null, \r\n                    "paramconst": "_checked_", \r\n                    "paraminput": "", \r\n                    "paramtitle": "checked", \r\n                    "paramcolumn": null\r\n                }\r\n            ], \r\n            "actapitype": "POST", \r\n            "isforevery": false, \r\n            "actapiconfirm": true, \r\n            "actapirefresh": true\r\n        }\r\n    ]\r\n    \r\n    */\r\n\r\nEND;\r\n$function$\n	[{"argname":"_actions","argmode":"input","argtype":"json"},{"argname":"_vid","argmode":"input/output","argtype":"int4"}]	int4	\r\nDECLARE \r\n\t_kl json;\r\nBEGIN\r\n\r\n\tINSERT INTO framework.actions (\r\n      column_order,\r\n      viewid, classname, title,\r\n      icon, act_url ,\r\n      api_method ,\r\n      api_type ,\r\n      refresh_data ,\r\n      ask_confirm ,\r\n      roles ,\r\n      forevery ,\r\n      main_action ,\r\n      act_type \r\n    )\r\n\tSELECT\r\n      row_number() over (PARTITION BY 0) as column_order,\r\n      _vid, value->>'classname' as classname, value->>'title' as title,\r\n\t  value->>'icon' as icon, value->>'act' as act,\r\n      value->>'actapimethod' as api_method,\r\n      lower(value->>'actapitype') as api_type,\r\n      COALESCE((value->>'actapirefresh')::boolean,FALSE) as refresh_data,\r\n      COALESCE((value->>'actapiconfirm')::boolean,FALSE) as ask_confirm,\r\n      \r\n      json_build_array(array(SELECT\r\n             value->'value'\r\n      \tFROM json_array_elements((value->'roles')::json)\r\n      ))->0 as roles,\r\n      \r\n      COALESCE((value->>'isforevery')::boolean,FALSE) as forevery,\r\n      COALESCE((value->>'ismain')::boolean,FALSE) as main_action,\r\n\t  value->>'type' as type\r\n    FROM json_array_elements(_actions);\r\n    \r\n    SELECT\r\n    \tarray_to_json(array_agg(row_to_json(d)))\r\n    FROM\r\n    (SELECT\r\n    \ttest.fn_parametrs_intotables(  \r\n       \t  value->'parametrs',\r\n          _vid,\r\n           c.id\r\n        ),\r\n        test.fn_act_visible_conditions_intable(\r\n       \t  value->'act_visible_condition',\r\n          c.id,\r\n          _vid  \r\n        )\r\n    FROM json_array_elements(_actions) as a\r\n    \tJOIN framework.actions as c on c.viewid = _vid and \r\n        \tc.title = value->>'title') as d\r\n    INTO _kl;\r\n    \r\n    \r\n    \r\n\t/*\r\n\t[\r\n       {\r\n          "act": "/", \r\n          "icon": "fa fa-check", \r\n          "type": "Save", \r\n          "title": "save", \r\n          "classname": "p-button-success", \r\n          "parametrs": [], \r\n          "isforevery": false, \r\n          "act_visible_condition": [{\r\n              "col": {\r\n                  "t": 1, \r\n                  "key": "id_99ad9", \r\n                  "label": "id", \r\n                  "value": "vs_id"\r\n              },\r\n              "value": "-1", \r\n              "operation": {\r\n                  "js": ">", \r\n                  "label": ">", \r\n                  "value": ">", \r\n                  "python": ">"\r\n              }}\r\n          ]\r\n       }, \r\n       {\r\n         "act": "/composition/act_visible_conditions", \r\n         "icon": "fa fa-cros",\r\n         "type": "Link", \r\n         "title": "close", \r\n         "parametrs": [{\r\n              "paramt": null, \r\n              "paramconst": "", \r\n              "paraminput": "actionid", \r\n              "paramtitle": "actionid", \r\n              "paramcolumn": null\r\n           }, \r\n           {\r\n              "paramt": null, \r\n              "paramconst": "actionid", \r\n              "paraminput": "", \r\n              "paramtitle": "relation", \r\n              "paramcolumn": null\r\n           }, \r\n           {\r\n              "paramt": null, \r\n              "paramconst": "-1", \r\n              "paraminput": "", \r\n              "paramtitle": "vs_id", \r\n              "paramcolumn": null\r\n           }, \r\n           {\r\n              "paramt": null, \r\n              "paramconst": "", \r\n              "paraminput": "act_id", \r\n              "paramtitle": "act_id", \r\n              "paramcolumn": null\r\n           }\r\n         ], \r\n         "isforevery": false, \r\n         "act_visible_condition": [\r\n         \t{\r\n            \t"col": {\r\n            \t\t"t": 1, \r\n                    "key": "id_99ad9", \r\n                \t"label": "id", \r\n                \t"value": "vs_id"\r\n            \t}, \r\n         \t\t"const": null, \r\n            \t"value": "-1", \r\n            \t"operation": {\r\n            \t\t"js": ">", \r\n                \t"label": ">", \r\n                \t"value": ">", \r\n                \t"python": ">"\r\n            \t}\r\n            }\r\n         ]\r\n   \t   }\r\n     ]    \r\n     \r\n\t[\r\n        {\r\n        \t"act": "/api/postmethodtest_setselectedcolor_black", \r\n            "type": "API", \r\n            "title": "set checke black (POST TEST CHECKED)", \r\n            "parametrs": [\r\n            \t{\r\n                \t"paramt": null, \r\n                    "paramconst": "_checked_", \r\n                    "paraminput": "", \r\n                    "paramtitle": "checked", \r\n                    "paramcolumn": null\r\n                }\r\n            ], \r\n            "actapitype": "POST", \r\n            "isforevery": false, \r\n            "actapiconfirm": true, \r\n            "actapirefresh": true\r\n        }\r\n    ]\r\n    \r\n    */\r\n\r\nEND;\r\n
227461	test	fn_config_in_table	test.fn_config_in_table(_config  json,_viewid inout int4)	ins config from json (table views) into table	2020-05-21 11:31:02.195905	1	f	fn_config_in_table(_config  json,_viewid inout int4)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\ntest.fn_config_in_table(_config  json,_viewid inout int4) \r\n*/\r\nCREATE OR REPLACE FUNCTION test.fn_config_in_table(_config json, INOUT _viewid integer)\n RETURNS integer\n LANGUAGE plpgsql\nAS $function$\r\n--insert all configs in tables\r\nDECLARE \r\n\tmock_json json;\r\nBEGIN\r\n  INSERT INTO framework.config (\r\n    viewid, t, col ,\r\n    column_id ,\r\n    title , type ,\r\n    roles ,\r\n    visible ,\r\n    required ,\r\n    width ,\r\n    "join" ,\r\n    classname ,\r\n    updatable ,\r\n    relation ,\r\n    select_api ,\r\n    multiselecttable ,\r\n    orderby ,\r\n    orderbydesc ,\r\n    relcol ,\r\n    depency ,\r\n    depencycol ,\r\n    relationcolums ,\r\n    multicolums ,\r\n    column_order ,\r\n    fn ,\r\n    fncolumns,\r\n    relatecolumn,\r\n    "table",\r\n    related\r\n  )\r\n\r\n  SELECT \r\n\t_viewid, c.value->>'t' as t, c.value->>'col' as col,\r\n    (c.value->>'column_id')::INTEGER as column_id,\r\n    c.value->>'title' as title, c.value->>'type' as type,\r\n    \r\n    (CASE WHEN (c.value->>'roles')::varchar like '[%'\r\n    THEN\r\n    json_build_array(array(SELECT\r\n    \t\tvalue->'value'\r\n       FROM json_array_elements((c.value->>'roles')::json)\r\n    ))->0\r\n    ELSE\r\n    \t'[]'::json\r\n    END)\r\n     as roles,\r\n    \r\n    coalesce((c.value->>'visible' )::BOOLEAN,false) as visible,\r\n    COALESCE((c.value->>'required')::BOOLEAN,false) as required,\r\n    c.value->>'width' as width,\r\n    COALESCE((c.value->>'join')::BOOLEAN,false) as join,\r\n    c.value->>'classname' as classname,\r\n    COALESCE((c.value->>'updatable')::BOOLEAN,false) as updatable,\r\n    c.value->>'relation' as relation,\r\n    c.value->>'select_api' as select_api,   \r\n\tc.value->>'multiselecttable' as multiselecttable,\r\n    COALESCE((c.value->>'orderby')::BOOLEAN,false) as orderby,\r\n    COALESCE((c.value->>'orderbydesc')::BOOLEAN,false) as orderbydesc,\r\n    c.value->>'relcol' as relcol,\r\n    COALESCE((c.value->>'depency')::BOOLEAN,false) as depency,\r\n    c.value->>'depencycol' as depencycol,\r\n    \r\n    (CASE WHEN (c.value->>'relationcolums')::varchar like '[%'\r\n    THEN\r\n    json_build_array(array(SELECT\r\n    \t\tvalue->'value'\r\n       FROM json_array_elements((c.value->>'relationcolums')::json)\r\n    ))->0\r\n    ELSE\r\n   \t '[]'::json\r\n    END)\r\n     as relationcolums,\r\n     \r\n    (CASE WHEN (c.value->>'multicolums')::varchar like '[%'\r\n    THEN\r\n    \tjson_build_array(array(SELECT\r\n    \t\tvalue->'value'\r\n       FROM json_array_elements((c.value->>'multicolums')::json)\r\n   \t\t))->0\r\n    ELSE\r\n    \t'[]'::json\r\n    END\r\n    ) as multicolums,\r\n    \r\n    row_number() over (PARTITION BY 0) as column_order,\r\n    (c.value->'fn')->>'value' as fn,\r\n    \r\n    (CASE WHEN (c.value->>'fncolumns')::varchar like '[%'\r\n    THEN\r\n    json_build_array(array(SELECT\r\n    \t\tvalue->'value'\r\n       FROM json_array_elements((c.value->'fncolumns')::json)\r\n    ))->0 \r\n    ELSE\r\n   \t null\r\n    END ) as fncolumns,\r\n    c.value->>'relatecolumn',\r\n    c.value->>'table',\r\n    coalesce((c.value->>'related')::boolean,false)\r\n FROM json_array_elements(_config) as c;\r\n\r\n\r\n  SELECT\r\n  \tarray_to_json(array_agg(row_to_json(d))) \r\n  FROM\r\n  (SELECT \r\n    c.value->>'title' as title,\r\n    test.fn_visible_condition_intable(cn.id, (c.value->'visible_condition')) as vc,\r\n    test.fn_select_condition_intable(cn.id,(c.value->'select_condition')) as sc,\r\n    test.fn_defaultval_intable(cn.id,(c.value->'defaultval')) as dv\r\n FROM json_array_elements(_config) as c\r\n \tJOIN framework.config as cn on cn.title = c.value->>'title'\r\n WHERE cn.viewid = _viewid) as d\r\n \r\n INTO mock_json\r\n ;  \t\r\nEND;\r\n$function$\n	[{"argname":"_config","argmode":"input","argtype":"json"},{"argname":"_viewid","argmode":"input/output","argtype":"int4"}]	int4	\r\n--insert all configs in tables\r\nDECLARE \r\n\tmock_json json;\r\nBEGIN\r\n  INSERT INTO framework.config (\r\n    viewid, t, col ,\r\n    column_id ,\r\n    title , type ,\r\n    roles ,\r\n    visible ,\r\n    required ,\r\n    width ,\r\n    "join" ,\r\n    classname ,\r\n    updatable ,\r\n    relation ,\r\n    select_api ,\r\n    multiselecttable ,\r\n    orderby ,\r\n    orderbydesc ,\r\n    relcol ,\r\n    depency ,\r\n    depencycol ,\r\n    relationcolums ,\r\n    multicolums ,\r\n    column_order ,\r\n    fn ,\r\n    fncolumns,\r\n    relatecolumn,\r\n    "table",\r\n    related\r\n  )\r\n\r\n  SELECT \r\n\t_viewid, c.value->>'t' as t, c.value->>'col' as col,\r\n    (c.value->>'column_id')::INTEGER as column_id,\r\n    c.value->>'title' as title, c.value->>'type' as type,\r\n    \r\n    (CASE WHEN (c.value->>'roles')::varchar like '[%'\r\n    THEN\r\n    json_build_array(array(SELECT\r\n    \t\tvalue->'value'\r\n       FROM json_array_elements((c.value->>'roles')::json)\r\n    ))->0\r\n    ELSE\r\n    \t'[]'::json\r\n    END)\r\n     as roles,\r\n    \r\n    coalesce((c.value->>'visible' )::BOOLEAN,false) as visible,\r\n    COALESCE((c.value->>'required')::BOOLEAN,false) as required,\r\n    c.value->>'width' as width,\r\n    COALESCE((c.value->>'join')::BOOLEAN,false) as join,\r\n    c.value->>'classname' as classname,\r\n    COALESCE((c.value->>'updatable')::BOOLEAN,false) as updatable,\r\n    c.value->>'relation' as relation,\r\n    c.value->>'select_api' as select_api,   \r\n\tc.value->>'multiselecttable' as multiselecttable,\r\n    COALESCE((c.value->>'orderby')::BOOLEAN,false) as orderby,\r\n    COALESCE((c.value->>'orderbydesc')::BOOLEAN,false) as orderbydesc,\r\n    c.value->>'relcol' as relcol,\r\n    COALESCE((c.value->>'depency')::BOOLEAN,false) as depency,\r\n    c.value->>'depencycol' as depencycol,\r\n    \r\n    (CASE WHEN (c.value->>'relationcolums')::varchar like '[%'\r\n    THEN\r\n    json_build_array(array(SELECT\r\n    \t\tvalue->'value'\r\n       FROM json_array_elements((c.value->>'relationcolums')::json)\r\n    ))->0\r\n    ELSE\r\n   \t '[]'::json\r\n    END)\r\n     as relationcolums,\r\n     \r\n    (CASE WHEN (c.value->>'multicolums')::varchar like '[%'\r\n    THEN\r\n    \tjson_build_array(array(SELECT\r\n    \t\tvalue->'value'\r\n       FROM json_array_elements((c.value->>'multicolums')::json)\r\n   \t\t))->0\r\n    ELSE\r\n    \t'[]'::json\r\n    END\r\n    ) as multicolums,\r\n    \r\n    row_number() over (PARTITION BY 0) as column_order,\r\n    (c.value->'fn')->>'value' as fn,\r\n    \r\n    (CASE WHEN (c.value->>'fncolumns')::varchar like '[%'\r\n    THEN\r\n    json_build_array(array(SELECT\r\n    \t\tvalue->'value'\r\n       FROM json_array_elements((c.value->'fncolumns')::json)\r\n    ))->0 \r\n    ELSE\r\n   \t null\r\n    END ) as fncolumns,\r\n    c.value->>'relatecolumn',\r\n    c.value->>'table',\r\n    coalesce((c.value->>'related')::boolean,false)\r\n FROM json_array_elements(_config) as c;\r\n\r\n\r\n  SELECT\r\n  \tarray_to_json(array_agg(row_to_json(d))) \r\n  FROM\r\n  (SELECT \r\n    c.value->>'title' as title,\r\n    test.fn_visible_condition_intable(cn.id, (c.value->'visible_condition')) as vc,\r\n    test.fn_select_condition_intable(cn.id,(c.value->'select_condition')) as sc,\r\n    test.fn_defaultval_intable(cn.id,(c.value->'defaultval')) as dv\r\n FROM json_array_elements(_config) as c\r\n \tJOIN framework.config as cn on cn.title = c.value->>'title'\r\n WHERE cn.viewid = _viewid) as d\r\n \r\n INTO mock_json\r\n ;  \t\r\nEND;\r\n
227462	test	fn_config_in_table_fncolumns_fix	test.fn_config_in_table_fncolumns_fix(_config  json,_viewid inout int4)	ins config fn cols from json (table views) into table	2020-05-21 11:31:02.195905	1	f	fn_config_in_table_fncolumns_fix(_config  json,_viewid inout int4)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\ntest.fn_config_in_table_fncolumns_fix(_config  json,_viewid inout int4) \r\n*/\r\nCREATE OR REPLACE FUNCTION test.fn_config_in_table_fncolumns_fix(_config json, INOUT _viewid integer)\n RETURNS integer\n LANGUAGE plpgsql\nAS $function$\r\n-- update all configs , fix fncolumns\r\nDECLARE \r\n\tmock_json json;\r\nBEGIN\r\n\r\n  UPDATE framework.config as cc\r\n  SET fncolumns =   \r\n    (CASE WHEN (c.value->>'fncolumns')::varchar like '[%'\r\n    THEN\r\n    \tjson_build_array(array(SELECT\r\n    \t\tccc.id\r\n       FROM json_array_elements((c.value->'fncolumns')::json) as n\r\n         JOIN framework.config as ccc on (ccc.title = (value->>'value')) and ccc.viewid = _viewid\r\n    ))->0 \r\n    ELSE\r\n   \t null\r\n    END ) \r\n FROM json_array_elements(_config) as c\r\n WHERE c.value->>'title' = cc.title and cc.viewid = _viewid and \r\n  ((c.value->'fn')->>'value') is not null ;\r\n \t\r\nEND;\r\n$function$\n	[{"argname":"_config","argmode":"input","argtype":"json"},{"argname":"_viewid","argmode":"input/output","argtype":"int4"}]	int4	\r\n-- update all configs , fix fncolumns\r\nDECLARE \r\n\tmock_json json;\r\nBEGIN\r\n\r\n  UPDATE framework.config as cc\r\n  SET fncolumns =   \r\n    (CASE WHEN (c.value->>'fncolumns')::varchar like '[%'\r\n    THEN\r\n    \tjson_build_array(array(SELECT\r\n    \t\tccc.id\r\n       FROM json_array_elements((c.value->'fncolumns')::json) as n\r\n         JOIN framework.config as ccc on (ccc.title = (value->>'value')) and ccc.viewid = _viewid\r\n    ))->0 \r\n    ELSE\r\n   \t null\r\n    END ) \r\n FROM json_array_elements(_config) as c\r\n WHERE c.value->>'title' = cc.title and cc.viewid = _viewid and \r\n  ((c.value->'fn')->>'value') is not null ;\r\n \t\r\nEND;\r\n
227463	test	fn_config_in_table_tpath_fix	test.fn_config_in_table_tpath_fix(_config  json,_viewid inout int4)	ins config tpath from json (table views) into table	2020-05-21 11:31:02.195905	1	f	fn_config_in_table_tpath_fix(_config  json,_viewid inout int4)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\ntest.fn_config_in_table_tpath_fix(_config  json,_viewid inout int4) \r\n*/\r\nCREATE OR REPLACE FUNCTION test.fn_config_in_table_tpath_fix(_config json, INOUT _viewid integer)\n RETURNS integer\n LANGUAGE plpgsql\nAS $function$\r\n-- update all configs , fix fncolumns\r\nDECLARE \r\n\tmock_json json;\r\nBEGIN\r\n\r\n UPDATE framework.config as cc\r\n  SET tpath = coalesce(c.value->'tpath','[]')\r\n FROM json_array_elements(_config) as c\r\n WHERE c.value->>'title' = cc.title and cc.viewid = _viewid;\r\n \t\r\nEND;\r\n$function$\n	[{"argname":"_config","argmode":"input","argtype":"json"},{"argname":"_viewid","argmode":"input/output","argtype":"int4"}]	int4	\r\n-- update all configs , fix fncolumns\r\nDECLARE \r\n\tmock_json json;\r\nBEGIN\r\n\r\n UPDATE framework.config as cc\r\n  SET tpath = coalesce(c.value->'tpath','[]')\r\n FROM json_array_elements(_config) as c\r\n WHERE c.value->>'title' = cc.title and cc.viewid = _viewid;\r\n \t\r\nEND;\r\n
227469	test	fn_postmethodtest_setcolorblue	test.fn_postmethodtest_setcolorblue(injson  json)	TEST POST API METHOD \r\nCHANGE test.major_table\r\ncolorpicker COLOR    	2020-05-21 11:31:02.195905	1	f	fn_postmethodtest_setcolorblue(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\ntest.fn_postmethodtest_setcolorblue(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION test.fn_postmethodtest_setcolorblue(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n\t_id int;\r\nBEGIN\r\n\t/*\r\n      TEST POST API METHOD \r\n      CHANGE test.major_table\r\n      colorpicker COLOR    \r\n    */\r\n\t\r\n\t_id = injson->>'id';\r\n    \r\n    IF _id is null THEN\r\n    \tPERFORM raiserror('id is null');\r\n    END IF;\r\n    \r\n    UPDATE test.major_table\r\n    SET colorpicker = '2f00ff'\r\n    WHERE id = _id;\r\n\r\n\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n\t_id int;\r\nBEGIN\r\n\t/*\r\n      TEST POST API METHOD \r\n      CHANGE test.major_table\r\n      colorpicker COLOR    \r\n    */\r\n\t\r\n\t_id = injson->>'id';\r\n    \r\n    IF _id is null THEN\r\n    \tPERFORM raiserror('id is null');\r\n    END IF;\r\n    \r\n    UPDATE test.major_table\r\n    SET colorpicker = '2f00ff'\r\n    WHERE id = _id;\r\n\r\n\r\n\r\nEND;\r\n
227464	test	fn_defaultval_intable	test.fn_defaultval_intable(_colid inout int4,_dv  json)	put defaultval from json to table 	2020-05-21 11:31:02.195905	1	f	fn_defaultval_intable(_colid inout int4,_dv  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\ntest.fn_defaultval_intable(_colid inout int4,_dv  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION test.fn_defaultval_intable(INOUT _colid integer, _dv json)\n RETURNS integer\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  -- put defaultval from json to table \r\n\r\n  /*[{"act": {"label": "=", "value": "="}, \r\n  "bool": {"label": "and", "value": "and"}, \r\n  "value": "_orgid_"}]*/\r\n  IF _colid is not null and _dv::varchar like '[%' THEN\r\n    INSERT INTO framework.defaultval(\r\n      configid,\r\n      act,\r\n      bool,\r\n      value \r\n    )\r\n    SELECT \r\n    \t_colid,\r\n        (v.value->'act')->>'label',\r\n        (v.value->'bool')->>'label',\r\n        v.value ->> 'value'\r\n    FROM json_array_elements(_dv) as v;\r\n  END IF;\r\n\r\nEND;\r\n$function$\n	[{"argname":"_colid","argmode":"input/output","argtype":"int4"},{"argname":"_dv","argmode":"input","argtype":"json"}]	int4	\r\nBEGIN\r\n  -- put defaultval from json to table \r\n\r\n  /*[{"act": {"label": "=", "value": "="}, \r\n  "bool": {"label": "and", "value": "and"}, \r\n  "value": "_orgid_"}]*/\r\n  IF _colid is not null and _dv::varchar like '[%' THEN\r\n    INSERT INTO framework.defaultval(\r\n      configid,\r\n      act,\r\n      bool,\r\n      value \r\n    )\r\n    SELECT \r\n    \t_colid,\r\n        (v.value->'act')->>'label',\r\n        (v.value->'bool')->>'label',\r\n        v.value ->> 'value'\r\n    FROM json_array_elements(_dv) as v;\r\n  END IF;\r\n\r\nEND;\r\n
227465	test	fn_filters_in_table	test.fn_filters_in_table(filtrs  json,_vid inout int4)	ins filters from json (table views) into table	2020-05-21 11:31:02.195905	1	f	fn_filters_in_table(filtrs  json,_vid inout int4)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\ntest.fn_filters_in_table(filtrs  json,_vid inout int4) \r\n*/\r\nCREATE OR REPLACE FUNCTION test.fn_filters_in_table(filtrs json, INOUT _vid integer)\n RETURNS integer\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\r\n\tINSERT INTO framework.filters (\r\n      column_order, \r\n      viewid, classname, title,\r\n      "column",\r\n      columns,\r\n      t, roles, "type", "table" \r\n    )\r\n\tSELECT\r\n    \t row_number() over (PARTITION BY 0) as column_order,\r\n    \t_vid, value->>'classname' as classname, value->>'title' as title,\r\n        (CASE WHEN (value->>'column')::varchar not like '[%'\r\n          THEN \r\n          (value->>'column')::varchar\r\n          ELSE \r\n          null\r\n        END) as column,\r\n        (CASE WHEN (value->>'column')::varchar like '[%'\r\n          THEN \r\n            json_build_array(array(SELECT\r\n                value->'value'\r\n            FROM json_array_elements((value->>'column')::json)\r\n            ))->0\r\n\t\t  ELSE \r\n          '[]'::json\r\n        END) as columns,\r\n        value->>'t', \r\n        json_build_array(array(SELECT\r\n            value->'value'\r\n        FROM json_array_elements(value->'roles')\r\n        ))->0, value->>'type', coalesce(value->'table','{}')\r\n   FROM json_array_elements(filtrs);\r\n\r\n\t\r\n\r\nEND;\r\n$function$\n	[{"argname":"filtrs","argmode":"input","argtype":"json"},{"argname":"_vid","argmode":"input/output","argtype":"int4"}]	int4	\r\nBEGIN\r\n\r\n\tINSERT INTO framework.filters (\r\n      column_order, \r\n      viewid, classname, title,\r\n      "column",\r\n      columns,\r\n      t, roles, "type", "table" \r\n    )\r\n\tSELECT\r\n    \t row_number() over (PARTITION BY 0) as column_order,\r\n    \t_vid, value->>'classname' as classname, value->>'title' as title,\r\n        (CASE WHEN (value->>'column')::varchar not like '[%'\r\n          THEN \r\n          (value->>'column')::varchar\r\n          ELSE \r\n          null\r\n        END) as column,\r\n        (CASE WHEN (value->>'column')::varchar like '[%'\r\n          THEN \r\n            json_build_array(array(SELECT\r\n                value->'value'\r\n            FROM json_array_elements((value->>'column')::json)\r\n            ))->0\r\n\t\t  ELSE \r\n          '[]'::json\r\n        END) as columns,\r\n        value->>'t', \r\n        json_build_array(array(SELECT\r\n            value->'value'\r\n        FROM json_array_elements(value->'roles')\r\n        ))->0, value->>'type', coalesce(value->'table','{}')\r\n   FROM json_array_elements(filtrs);\r\n\r\n\t\r\n\r\nEND;\r\n
227466	test	fn_getmethodtest_setcolorblack	test.fn_getmethodtest_setcolorblack(injson  json)	TEST GET API METHOD \r\nCHANGE test.major_table\r\ncolorpicker COLOR	2020-05-21 11:31:02.195905	1	f	fn_getmethodtest_setcolorblack(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\ntest.fn_getmethodtest_setcolorblack(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION test.fn_getmethodtest_setcolorblack(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n\t_id int;\r\nBEGIN\r\n\t/*\r\n      TEST GET API METHOD \r\n      CHANGE test.major_table\r\n      colorpicker COLOR    \r\n    */\r\n\t\r\n\t_id = injson->>'id';\r\n    \r\n    IF _id is null THEN\r\n    \tPERFORM raiserror('id is null');\r\n    END IF;\r\n    \r\n    UPDATE test.major_table\r\n    SET colorpicker = 'ff0000'\r\n    WHERE id = _id;\r\n\r\n\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n\t_id int;\r\nBEGIN\r\n\t/*\r\n      TEST GET API METHOD \r\n      CHANGE test.major_table\r\n      colorpicker COLOR    \r\n    */\r\n\t\r\n\t_id = injson->>'id';\r\n    \r\n    IF _id is null THEN\r\n    \tPERFORM raiserror('id is null');\r\n    END IF;\r\n    \r\n    UPDATE test.major_table\r\n    SET colorpicker = 'ff0000'\r\n    WHERE id = _id;\r\n\r\n\r\n\r\nEND;\r\n
227467	test	fn_gettest_setallcolor_red	test.fn_gettest_setallcolor_red(injson  json)	set color red for test action in view	2020-05-21 11:31:02.195905	1	f	fn_gettest_setallcolor_red(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\ntest.fn_gettest_setallcolor_red(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION test.fn_gettest_setallcolor_red(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _id int;\r\nBEGIN\r\n\r\n\t_id = injson->>'id';\r\n    \r\n    UPDATE test.major_table\r\n    SET color = 'red';\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _id int;\r\nBEGIN\r\n\r\n\t_id = injson->>'id';\r\n    \r\n    UPDATE test.major_table\r\n    SET color = 'red';\r\n\r\nEND;\r\n
227468	test	fn_parametrs_intotables	test.fn_parametrs_intotables(_params  json,vi_id  int4,act_id inout int4)	ins acts params from json (table views) into table	2020-05-21 11:31:02.195905	1	f	fn_parametrs_intotables(_params  json,vi_id  int4,act_id inout int4)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\ntest.fn_parametrs_intotables(_params  json,vi_id  int4,act_id inout int4) \r\n*/\r\nCREATE OR REPLACE FUNCTION test.fn_parametrs_intotables(_params json, vi_id integer, INOUT act_id integer)\n RETURNS integer\n LANGUAGE plpgsql\nAS $function$\r\n/*DECLARE\r\n  variable_name datatype;*/\r\nBEGIN\r\n    INSERT INTO framework.act_parametrs (\r\n      actionid,\r\n      paramtitle,\r\n      paramt,\r\n      paramconst,\r\n      paraminput,\r\n      paramcolumn,\r\n      val_desc\r\n    ) \r\n    SELECT \r\n    \tact_id,\r\n        value->>'paramtitle' as paramtitle,\r\n        value->>'paramt' as paramt,\r\n        value->>'paramconst' as paramconst,\r\n        value->>'paraminput' as paraminput,\r\n        (value->'paramcolumn')->>'value' as paramcolumn,\r\n        (\r\n        SELECT\r\n        \tc.id\r\n        FROM framework.config as c\r\n        WHERE c.viewid = vi_id and c.title = (value->'paramcolumn')->>'value'\r\n        ) as val_desc\r\n    FROM json_array_elements(_params) as p;\r\n    \r\n    /*\r\n\t\t"paramt": null, \r\n        "paramconst": "", \r\n        "paraminput": "actionid", \r\n        "paramtitle": "actionid", \r\n        "paramcolumn": null\r\n    */\r\nEND;\r\n$function$\n	[{"argname":"_params","argmode":"input","argtype":"json"},{"argname":"vi_id","argmode":"input","argtype":"int4"},{"argname":"act_id","argmode":"input/output","argtype":"int4"}]	int4	\r\n/*DECLARE\r\n  variable_name datatype;*/\r\nBEGIN\r\n    INSERT INTO framework.act_parametrs (\r\n      actionid,\r\n      paramtitle,\r\n      paramt,\r\n      paramconst,\r\n      paraminput,\r\n      paramcolumn,\r\n      val_desc\r\n    ) \r\n    SELECT \r\n    \tact_id,\r\n        value->>'paramtitle' as paramtitle,\r\n        value->>'paramt' as paramt,\r\n        value->>'paramconst' as paramconst,\r\n        value->>'paraminput' as paraminput,\r\n        (value->'paramcolumn')->>'value' as paramcolumn,\r\n        (\r\n        SELECT\r\n        \tc.id\r\n        FROM framework.config as c\r\n        WHERE c.viewid = vi_id and c.title = (value->'paramcolumn')->>'value'\r\n        ) as val_desc\r\n    FROM json_array_elements(_params) as p;\r\n    \r\n    /*\r\n\t\t"paramt": null, \r\n        "paramconst": "", \r\n        "paraminput": "actionid", \r\n        "paramtitle": "actionid", \r\n        "paramcolumn": null\r\n    */\r\nEND;\r\n
227476	test	fn_test3_t	test.fn_test3_t()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_test3_t()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\ntest.fn_test3_t() \r\n*/\r\nCREATE OR REPLACE FUNCTION test.fn_test3_t()\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\n      DECLARE BEGIN END;\r\n      $function$\n	[]	void	\r\n      DECLARE BEGIN END;\r\n      
227470	test	fn_postmethodtest_setselectedcolor_black	test.fn_postmethodtest_setselectedcolor_black(injson  json)	TEST POST API METHOD \r\nCHANGE test.major_table\r\ncolorpicker COLOR by selected rows  	2020-05-21 11:31:02.195905	1	f	fn_postmethodtest_setselectedcolor_black(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\ntest.fn_postmethodtest_setselectedcolor_black(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION test.fn_postmethodtest_setselectedcolor_black(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n\t_id int;\r\n    checked json;\r\nBEGIN\r\n\t/*\r\n      TEST POST API METHOD \r\n      CHANGE test.major_table\r\n      colorpicker COLOR by selected rows  \r\n    */\r\n\t\r\n\tchecked = injson->>'checked';\r\n    \r\n    IF checked is null THEN\r\n    \tPERFORM raiserror('checked is null');\r\n    END IF;\r\n    \r\n    \r\n    \r\n    UPDATE test.major_table as m\r\n    SET colorpicker = '000000'\r\n    FROM json_array_elements(checked) as c\r\n    WHERE (c.value->>'id_3a31e')::int = m.id;\r\n\r\n\r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n\t_id int;\r\n    checked json;\r\nBEGIN\r\n\t/*\r\n      TEST POST API METHOD \r\n      CHANGE test.major_table\r\n      colorpicker COLOR by selected rows  \r\n    */\r\n\t\r\n\tchecked = injson->>'checked';\r\n    \r\n    IF checked is null THEN\r\n    \tPERFORM raiserror('checked is null');\r\n    END IF;\r\n    \r\n    \r\n    \r\n    UPDATE test.major_table as m\r\n    SET colorpicker = '000000'\r\n    FROM json_array_elements(checked) as c\r\n    WHERE (c.value->>'id_3a31e')::int = m.id;\r\n\r\n\r\n\r\nEND;\r\n
227471	test	fn_select_api	test.fn_select_api(injson  json,outjson out json)	test select_api type	2020-05-21 11:31:02.195905	1	f	fn_select_api(injson  json,outjson out json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\ntest.fn_select_api(injson  json,outjson out json) \r\n*/\r\nCREATE OR REPLACE FUNCTION test.fn_select_api(injson json, OUT outjson json)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\r\n/*\r\n\tfunction must have input variable "injson" type of JSON\r\n    and out variable "outjson" type of JSON,\r\n    objects array with label,value keys\r\n*/\r\nDECLARE \r\n\t_substr varchar(150);\r\n    _data json; -- from data  \r\n    _inputs json; -- query params\r\n\r\nBEGIN\r\n\t_substr = injson->>'substr';\r\n    _data = injson->'data';\r\n    _inputs = injson->'inputs';\r\n    \r\n    \r\n    _substr = concat('%',lower(_substr),'%');\r\n\r\n\tSElECT\r\n    \tarray_to_json(array_agg(row_to_json(f))) \r\n    FROM\r\n    (SELECT \r\n    \td.id as value,\r\n        d.dname as label\r\n    FROM test.dictionary_for_select as d\r\n    WHERE lower(d.dname) like _substr OR \r\n    \t  d.id::varchar like _substr -- there must be "id" too\r\n    ) as f\r\n\tINTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"},{"argname":"outjson","argmode":"output","argtype":"json"}]	json	\r\n/*\r\n\tfunction must have input variable "injson" type of JSON\r\n    and out variable "outjson" type of JSON,\r\n    objects array with label,value keys\r\n*/\r\nDECLARE \r\n\t_substr varchar(150);\r\n    _data json; -- from data  \r\n    _inputs json; -- query params\r\n\r\nBEGIN\r\n\t_substr = injson->>'substr';\r\n    _data = injson->'data';\r\n    _inputs = injson->'inputs';\r\n    \r\n    \r\n    _substr = concat('%',lower(_substr),'%');\r\n\r\n\tSElECT\r\n    \tarray_to_json(array_agg(row_to_json(f))) \r\n    FROM\r\n    (SELECT \r\n    \td.id as value,\r\n        d.dname as label\r\n    FROM test.dictionary_for_select as d\r\n    WHERE lower(d.dname) like _substr OR \r\n    \t  d.id::varchar like _substr -- there must be "id" too\r\n    ) as f\r\n\tINTO outjson;\r\n    \r\n    outjson = coalesce(outjson,'[]');\r\nEND;\r\n
227472	test	fn_select_condition_intable	test.fn_select_condition_intable(_colid inout int4,_sc  json)	put visible_condition from json to table 	2020-05-21 11:31:02.195905	1	f	fn_select_condition_intable(_colid inout int4,_sc  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\ntest.fn_select_condition_intable(_colid inout int4,_sc  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION test.fn_select_condition_intable(INOUT _colid integer, _sc json)\n RETURNS integer\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  -- put visible_condition from json to table \r\n\r\n  /*[{"col": {"label": "treesid", "value": "treesid"}, "value": {"t": 1, "key":\r\n  "treesid_9766c", "label": "treesid", "value": "treesid"}, "operation": {"js":\r\n  "===", "label": "=", "value": "=", "python": "=="}}, {"col": {"label": "id",\r\n  "value": "id"}, "value": {"t": 1, "key": "id_512cb", "label": "id", "value":\r\n  "bid"}, "operation": {"js": "!==", "label": "!=", "value": "<>", "python":\r\n  "!="}}]\r\n  */\r\n   IF _colid is not null and _sc::varchar like '[%' THEN\r\n     INSERT INTO framework.select_condition (\r\n        configid,\r\n        col ,\r\n        operation ,\r\n        const,\r\n        value,\r\n        val_desc \r\n      )\r\n      SELECT\r\n          _colid,\r\n          (v.value->'col')->>'label',\r\n          (v.value->'operation')->>'value',\r\n          v.value->>'const',\r\n          v.value->>'value',\r\n          (SELECT\r\n              c.id\r\n           FROM framework.config as c\r\n           WHERE c.title = ((v.value->'value')->>'value')\r\n           and c.col = ((v.value->'value')->>'label')\r\n           LIMIT 1)\r\n          \r\n          \r\n      FROM json_array_elements(_sc) as v;\r\n    END IF;\r\n    \r\nEND;\r\n$function$\n	[{"argname":"_colid","argmode":"input/output","argtype":"int4"},{"argname":"_sc","argmode":"input","argtype":"json"}]	int4	\r\nBEGIN\r\n  -- put visible_condition from json to table \r\n\r\n  /*[{"col": {"label": "treesid", "value": "treesid"}, "value": {"t": 1, "key":\r\n  "treesid_9766c", "label": "treesid", "value": "treesid"}, "operation": {"js":\r\n  "===", "label": "=", "value": "=", "python": "=="}}, {"col": {"label": "id",\r\n  "value": "id"}, "value": {"t": 1, "key": "id_512cb", "label": "id", "value":\r\n  "bid"}, "operation": {"js": "!==", "label": "!=", "value": "<>", "python":\r\n  "!="}}]\r\n  */\r\n   IF _colid is not null and _sc::varchar like '[%' THEN\r\n     INSERT INTO framework.select_condition (\r\n        configid,\r\n        col ,\r\n        operation ,\r\n        const,\r\n        value,\r\n        val_desc \r\n      )\r\n      SELECT\r\n          _colid,\r\n          (v.value->'col')->>'label',\r\n          (v.value->'operation')->>'value',\r\n          v.value->>'const',\r\n          v.value->>'value',\r\n          (SELECT\r\n              c.id\r\n           FROM framework.config as c\r\n           WHERE c.title = ((v.value->'value')->>'value')\r\n           and c.col = ((v.value->'value')->>'label')\r\n           LIMIT 1)\r\n          \r\n          \r\n      FROM json_array_elements(_sc) as v;\r\n    END IF;\r\n    \r\nEND;\r\n
227473	test	fn_setParamsKey	test.fn_setParamsKey(conf  json,paramcol inout jsonb)	set keys in params into json	2020-05-21 11:31:02.195905	1	f	fn_setParamsKey(conf  json,paramcol inout jsonb)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\ntest.fn_setParamsKey(conf  json,paramcol inout jsonb) \r\n*/\r\nCREATE OR REPLACE FUNCTION test."fn_setParamsKey"(conf json, INOUT paramcol jsonb)\n RETURNS jsonb\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\r\n   \r\n\r\n   \tIF paramcol is not null THEN\r\n     SELECT\t\r\n       paramcol::jsonb\r\n            || \r\n       coalesce(jsonb_build_object('key', (\r\n          SELECT\r\n            c.value->>'key'\r\n          FROM json_array_elements(conf) as c\r\n          WHERE c.value->>'title' = (paramcol)->>'value'\r\n        )),'{}')\r\n     INTO paramcol;\r\n    END IF;\r\n\r\nEND;\r\n$function$\n	[{"argname":"conf","argmode":"input","argtype":"json"},{"argname":"paramcol","argmode":"input/output","argtype":"jsonb"}]	jsonb	\r\nBEGIN\r\n\r\n   \r\n\r\n   \tIF paramcol is not null THEN\r\n     SELECT\t\r\n       paramcol::jsonb\r\n            || \r\n       coalesce(jsonb_build_object('key', (\r\n          SELECT\r\n            c.value->>'key'\r\n          FROM json_array_elements(conf) as c\r\n          WHERE c.value->>'title' = (paramcol)->>'value'\r\n        )),'{}')\r\n     INTO paramcol;\r\n    END IF;\r\n\r\nEND;\r\n
227474	test	fn_tel_save	test.fn_tel_save(injson  json)	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	fn_tel_save(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\ntest.fn_tel_save(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION test.fn_tel_save(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _log_data json;\r\nBEGIN\r\n\t_log_data = injson->>'logdata';\r\n    \r\n    IF _log_data is null\r\n    THEN\r\n    \tPERFORM raiserror('logdata is null');\r\n    END IF;\r\n    \r\n    INSERT INTO test.fel (\r\n    \tlogdata\r\n    ) VALUES (\r\n    \t_log_data\r\n    );\r\n    \r\n    \r\n\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _log_data json;\r\nBEGIN\r\n\t_log_data = injson->>'logdata';\r\n    \r\n    IF _log_data is null\r\n    THEN\r\n    \tPERFORM raiserror('logdata is null');\r\n    END IF;\r\n    \r\n    INSERT INTO test.fel (\r\n    \tlogdata\r\n    ) VALUES (\r\n    \t_log_data\r\n    );\r\n    \r\n    \r\n\r\nEND;\r\n
227475	test	fn_test	test.fn_test()	test22	2020-05-21 11:31:02.195905	1	f	fn_test()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\ntest.fn_test() \r\n*/\r\nCREATE OR REPLACE FUNCTION test.fn_test()\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\nBEGIN\r\n\r\nEND;\r\n$function$\n	[]	void	\r\nDECLARE\r\nBEGIN\r\n\r\nEND;\r\n
227477	test	fn_views_in_table	test.fn_views_in_table()	put views data in tables	2020-05-21 11:31:02.195905	1	f	fn_views_in_table()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\ntest.fn_views_in_table() \r\n*/\r\nCREATE OR REPLACE FUNCTION test.fn_views_in_table()\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\t\r\n\tx json;\r\nBEGIN\r\n\t-- put views data in tables\r\n\tSELECT \r\n    \tarray_to_json(array_agg(row_to_json(d)))\r\n    FROM\r\n    (\r\n    SELECT\r\n    \ttest.fn_config_in_table(v.config, v.id) as f,\r\n        test.fn_filters_in_table(v.filters, v.id) as k,\r\n        test.fn_actions_in_table(v.acts, v.id) as a\r\n    FROM framework.views as v\r\n    WHERE v.id in (118,119,120,121)\r\n    ) as d\r\n    INTO x;\r\n    \r\n    \r\n    \r\n   -- INTO x;\r\n\r\n\r\nEND;\r\n$function$\n	[]	void	\r\nDECLARE\t\r\n\tx json;\r\nBEGIN\r\n\t-- put views data in tables\r\n\tSELECT \r\n    \tarray_to_json(array_agg(row_to_json(d)))\r\n    FROM\r\n    (\r\n    SELECT\r\n    \ttest.fn_config_in_table(v.config, v.id) as f,\r\n        test.fn_filters_in_table(v.filters, v.id) as k,\r\n        test.fn_actions_in_table(v.acts, v.id) as a\r\n    FROM framework.views as v\r\n    WHERE v.id in (118,119,120,121)\r\n    ) as d\r\n    INTO x;\r\n    \r\n    \r\n    \r\n   -- INTO x;\r\n\r\n\r\nEND;\r\n
227478	test	fn_visible_condition_intable	test.fn_visible_condition_intable(_colid inout int4,_vs  json)	put visible_condition from json to table 	2020-05-21 11:31:02.195905	1	f	fn_visible_condition_intable(_colid inout int4,_vs  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\ntest.fn_visible_condition_intable(_colid inout int4,_vs  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION test.fn_visible_condition_intable(INOUT _colid integer, _vs json)\n RETURNS integer\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE \r\n\t_viewid int;\r\nBEGIN\r\n  -- put visible_condition from json to table \r\n\r\n  /*[{"col": {"t": 1, "label": "id", "value": "bid"}, \r\n  \t\t"value": "-1",\r\n  \t "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]*/\r\n   IF _colid is not null and _vs::varchar like '[%' \r\n   THEN\r\n   \t SELECT\r\n     \tc.viewid\r\n     FROM framework.config as c\r\n     WHERE c.id = _colid\r\n     INTO _viewid;\t\r\n \r\n     INSERT INTO framework.visible_condition (\r\n        configid, col,\r\n        operation, value,\r\n        val_desc\r\n      )\r\n      SELECT\r\n          _colid, (v.value->'col')->>'label',\r\n          (v.value->'operation')->>'value', v.value->>'value',\r\n          (SELECT\r\n              c.id\r\n           FROM framework.config as c\r\n           WHERE c.title = ((v.value->'col')->>'value')\r\n           and c.col = ((v.value->'col')->>'label')\r\n           LIMIT 1)\r\n      FROM json_array_elements(_vs) as v;\r\n   END IF;\r\n    \r\nEND;\r\n$function$\n	[{"argname":"_colid","argmode":"input/output","argtype":"int4"},{"argname":"_vs","argmode":"input","argtype":"json"}]	int4	\r\nDECLARE \r\n\t_viewid int;\r\nBEGIN\r\n  -- put visible_condition from json to table \r\n\r\n  /*[{"col": {"t": 1, "label": "id", "value": "bid"}, \r\n  \t\t"value": "-1",\r\n  \t "operation": {"js": ">", "label": ">", "value": ">", "python": ">"}}]*/\r\n   IF _colid is not null and _vs::varchar like '[%' \r\n   THEN\r\n   \t SELECT\r\n     \tc.viewid\r\n     FROM framework.config as c\r\n     WHERE c.id = _colid\r\n     INTO _viewid;\t\r\n \r\n     INSERT INTO framework.visible_condition (\r\n        configid, col,\r\n        operation, value,\r\n        val_desc\r\n      )\r\n      SELECT\r\n          _colid, (v.value->'col')->>'label',\r\n          (v.value->'operation')->>'value', v.value->>'value',\r\n          (SELECT\r\n              c.id\r\n           FROM framework.config as c\r\n           WHERE c.title = ((v.value->'col')->>'value')\r\n           and c.col = ((v.value->'col')->>'label')\r\n           LIMIT 1)\r\n      FROM json_array_elements(_vs) as v;\r\n   END IF;\r\n    \r\nEND;\r\n
227479	test	tr_dfs4	test.tr_dfs4()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_dfs4()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\ntest.tr_dfs4() \r\n*/\r\nCREATE OR REPLACE FUNCTION test.tr_dfs4()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$BEGIN \r\n  \r\n  RETURN NEW; \r\nEND;\r\n          \r\n            \r\n            \r\n            $function$\n	[]	trigger	BEGIN \r\n  \r\n  RETURN NEW; \r\nEND;\r\n          \r\n            \r\n            \r\n            
227480	test	tr_major_table_tr	test.tr_major_table_tr()	test major table trigger	2020-05-21 11:31:02.195905	1	f	tr_major_table_tr()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\ntest.tr_major_table_tr() \r\n*/\r\nCREATE OR REPLACE FUNCTION test.tr_major_table_tr()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\r\n\tNEW.gallery = NEW.images;\r\n    NEW.color = NEW.colorpicker;\r\n    NEW.colorrow = NEW.colorpicker;\r\n    IF NEW.colorpicker is not null and NEW.colorpicker not like '#%'\r\n    THEN\r\n    \tNEW.color = concat('#',NEW.color);\r\n    \tNEW.colorrow = concat('#',NEW.colorrow);\r\n    END IF;\r\n    NEW.link = json_build_object('title', NEW.text, 'link', concat('/view/',NEW.number));\r\n    NEW.label = NEW.text;\r\n    NEW.html = NEW.texteditor;\r\n    RETURN NEW;\r\n\r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN\r\n\r\n\tNEW.gallery = NEW.images;\r\n    NEW.color = NEW.colorpicker;\r\n    NEW.colorrow = NEW.colorpicker;\r\n    IF NEW.colorpicker is not null and NEW.colorpicker not like '#%'\r\n    THEN\r\n    \tNEW.color = concat('#',NEW.color);\r\n    \tNEW.colorrow = concat('#',NEW.colorrow);\r\n    END IF;\r\n    NEW.link = json_build_object('title', NEW.text, 'link', concat('/view/',NEW.number));\r\n    NEW.label = NEW.text;\r\n    NEW.html = NEW.texteditor;\r\n    RETURN NEW;\r\n\r\nEND;\r\n
227481	test	tr_major_table_tr1	test.tr_major_table_tr1()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_major_table_tr1()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\ntest.tr_major_table_tr1() \r\n*/\r\nCREATE OR REPLACE FUNCTION test.tr_major_table_tr1()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n\t--PERFORM raiserror(TG_TAG::varchar);\r\n\tRETURN NEW;\r\nEND;\r\n$function$\n	[]	trigger	\r\nBEGIN\r\n\t--PERFORM raiserror(TG_TAG::varchar);\r\n\tRETURN NEW;\r\nEND;\r\n
227482	test	tr_trtr	test.tr_trtr()	<NO TITLE>	2020-05-21 11:31:02.195905	1	f	tr_trtr()	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\ntest.tr_trtr() \r\n*/\r\nCREATE OR REPLACE FUNCTION test.tr_trtr()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\n          DECLARE\r\n\r\n          BEGIN\r\n\r\n\r\n              RETURN NEW;\r\n          END;\r\n          $function$\n	[]	trigger	\r\n          DECLARE\r\n\r\n          BEGIN\r\n\r\n\r\n              RETURN NEW;\r\n          END;\r\n          
227421	sqlmanager	fn_triggers_onload	sqlmanager.fn_triggers_onload(injson  json)	triggers onload	2020-05-21 11:31:02.195905	1	f	fn_triggers_onload(injson  json)	/*\r\n    //PLEASE DROP FUNCTION IF YOU CHANGE ARGUMENTS\r\n    DROP FUNCTION \r\nsqlmanager.fn_triggers_onload(injson  json) \r\n*/\r\nCREATE OR REPLACE FUNCTION sqlmanager.fn_triggers_onload(injson json)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  _userid int;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n    \r\n    UPDATE sqlmanager.triggers\r\n    SET noscript = TRUE;\r\n\r\n\tUPDATE sqlmanager.triggers as tg \r\n    SET \r\n\t  triggername = t.tgname, \r\n      tablename = t.tgrelid::regclass::varchar, \r\n      userid = _userid, \r\n      functionname = CONCAT(fn.nspname,'.',p.proname), \r\n      functionoid = t.tgfoid, \r\n      enables = (\r\n        CASE WHEN t.tgenabled = 'D'\r\n        THEN false\r\n        ELSE true\r\n        END\r\n      ), \r\n      onbefore = (\r\n        CASE WHEN (t.tgtype::int::bit(7) & b'0000010')::int = 0 \r\n        THEN false ELSE true END\r\n      ), \r\n      onafter = (\r\n        CASE WHEN (t.tgtype::int::bit(7) & b'0000010')::int = 0 \r\n        THEN true ELSE false END\r\n      ),\r\n      oninstead = (\r\n         CASE WHEN (t.tgtype::int::bit(7) & b'1000000')::int = 0 \r\n         THEN false ELSE true END\r\n      ), \r\n      oninsert = (\r\n        CASE WHEN (t.tgtype::int::bit(7) & b'0000100')::int = 0 \r\n        THEN false ELSE true END\r\n      ), \r\n      ondelete = (\r\n        CASE WHEN (t.tgtype::int::bit(7) & b'0001000')::int = 0 \r\n        THEN false ELSE true END\r\n      ), \r\n      onupdate = (\r\n        CASE WHEN (t.tgtype::int::bit(7) & b'0010000')::int = 0 \r\n        THEN false ELSE true END\r\n      ), \r\n      ontruncate = (\r\n        CASE WHEN (t.tgtype::int::bit(7) & b'0100000')::int = 0 \r\n        THEN false ELSE true END\r\n      ), \r\n      functiondef = pg_get_functiondef(t.tgfoid),\r\n      fields = array_to_json( t.tgattr )\r\n    FROM pg_trigger as t\r\n     LEFT JOIN pg_proc as p on p.oid = t.tgfoid\r\n     LEFT JOIN pg_namespace as fn on fn.oid = p.pronamespace\r\n    WHERE not t.tgisinternal and t.oid = tg.id;\r\n\r\n    INSERT INTO sqlmanager.triggers (\r\n      id, triggername, tablename,\r\n      userid,\r\n      functionname, functionoid,\r\n      enables,\r\n      onbefore,\r\n      onafter,\r\n      oninstead,\r\n      oninsert,\r\n      ondelete,\r\n      onupdate,\r\n      ontruncate,\r\n      functiondef ,\r\n      fields \r\n    )    \r\n    SELECT \r\n      t.oid, t.tgname, t.tgrelid::regclass::varchar as tr_table, \r\n      _userid, \r\n      CONCAT(fn.nspname,'.',p.proname) as tr_function, t.tgfoid, \r\n      CASE WHEN t.tgenabled = 'D'\r\n      THEN false\r\n      ELSE true\r\n      END as enabled, (\r\n        CASE WHEN (t.tgtype::int::bit(7) & b'0000010')::int = 0 \r\n        THEN false ELSE true END\r\n      ) onbefore, (\r\n        CASE WHEN (t.tgtype::int::bit(7) & b'0000010')::int = 0 \r\n        THEN true ELSE false END\r\n      ) as onafter,(\r\n         CASE WHEN (t.tgtype::int::bit(7) & b'1000000')::int = 0 \r\n         THEN false ELSE true END\r\n      ) as oninstead, (\r\n        CASE WHEN (t.tgtype::int::bit(7) & b'0000100')::int = 0 \r\n        THEN false ELSE true END\r\n      ) as oninsert, (\r\n        CASE WHEN (t.tgtype::int::bit(7) & b'0001000')::int = 0 \r\n        THEN false ELSE true END\r\n      ) as ondelete, (\r\n        CASE WHEN (t.tgtype::int::bit(7) & b'0010000')::int = 0 \r\n        THEN false ELSE true END\r\n      ) as onupdate, (\r\n        CASE WHEN (t.tgtype::int::bit(7) & b'0100000')::int = 0 \r\n        THEN false ELSE true END\r\n      ) as ontruncate,\r\n      pg_get_functiondef(t.tgfoid),\r\n      array_to_json( t.tgattr )\r\n    FROM pg_trigger as t\r\n     LEFT JOIN pg_proc as p on p.oid = t.tgfoid\r\n     LEFT JOIN pg_namespace as fn on fn.oid = p.pronamespace\r\n    WHERE not t.tgisinternal AND (\r\n    \tSELECT \r\n        \tcount(tg.id)\r\n        FROM sqlmanager.triggers as tg\r\n        WHERE tg.id = t.oid\r\n    ) = 0;\r\n    \r\n    DELETE FROM sqlmanager.triggers \r\n    WHERE id not in (\r\n    \tSELECT t.oid\r\n        FROM  pg_trigger as t\r\n        WHERE not t.tgisinternal\r\n    );\r\n\r\n\r\n    UPDATE sqlmanager.triggers\r\n    SET noscript = FALSE;\r\n    \t\r\nEND;\r\n$function$\n	[{"argname":"injson","argmode":"input","argtype":"json"}]	void	\r\nDECLARE\r\n  _userid int;\r\nBEGIN\r\n\t_userid = injson->>'userid';\r\n    \r\n    UPDATE sqlmanager.triggers\r\n    SET noscript = TRUE;\r\n\r\n\tUPDATE sqlmanager.triggers as tg \r\n    SET \r\n\t  triggername = t.tgname, \r\n      tablename = t.tgrelid::regclass::varchar, \r\n      userid = _userid, \r\n      functionname = CONCAT(fn.nspname,'.',p.proname), \r\n      functionoid = t.tgfoid, \r\n      enables = (\r\n        CASE WHEN t.tgenabled = 'D'\r\n        THEN false\r\n        ELSE true\r\n        END\r\n      ), \r\n      onbefore = (\r\n        CASE WHEN (t.tgtype::int::bit(7) & b'0000010')::int = 0 \r\n        THEN false ELSE true END\r\n      ), \r\n      onafter = (\r\n        CASE WHEN (t.tgtype::int::bit(7) & b'0000010')::int = 0 \r\n        THEN true ELSE false END\r\n      ),\r\n      oninstead = (\r\n         CASE WHEN (t.tgtype::int::bit(7) & b'1000000')::int = 0 \r\n         THEN false ELSE true END\r\n      ), \r\n      oninsert = (\r\n        CASE WHEN (t.tgtype::int::bit(7) & b'0000100')::int = 0 \r\n        THEN false ELSE true END\r\n      ), \r\n      ondelete = (\r\n        CASE WHEN (t.tgtype::int::bit(7) & b'0001000')::int = 0 \r\n        THEN false ELSE true END\r\n      ), \r\n      onupdate = (\r\n        CASE WHEN (t.tgtype::int::bit(7) & b'0010000')::int = 0 \r\n        THEN false ELSE true END\r\n      ), \r\n      ontruncate = (\r\n        CASE WHEN (t.tgtype::int::bit(7) & b'0100000')::int = 0 \r\n        THEN false ELSE true END\r\n      ), \r\n      functiondef = pg_get_functiondef(t.tgfoid),\r\n      fields = array_to_json( t.tgattr )\r\n    FROM pg_trigger as t\r\n     LEFT JOIN pg_proc as p on p.oid = t.tgfoid\r\n     LEFT JOIN pg_namespace as fn on fn.oid = p.pronamespace\r\n    WHERE not t.tgisinternal and t.oid = tg.id;\r\n\r\n    INSERT INTO sqlmanager.triggers (\r\n      id, triggername, tablename,\r\n      userid,\r\n      functionname, functionoid,\r\n      enables,\r\n      onbefore,\r\n      onafter,\r\n      oninstead,\r\n      oninsert,\r\n      ondelete,\r\n      onupdate,\r\n      ontruncate,\r\n      functiondef ,\r\n      fields \r\n    )    \r\n    SELECT \r\n      t.oid, t.tgname, t.tgrelid::regclass::varchar as tr_table, \r\n      _userid, \r\n      CONCAT(fn.nspname,'.',p.proname) as tr_function, t.tgfoid, \r\n      CASE WHEN t.tgenabled = 'D'\r\n      THEN false\r\n      ELSE true\r\n      END as enabled, (\r\n        CASE WHEN (t.tgtype::int::bit(7) & b'0000010')::int = 0 \r\n        THEN false ELSE true END\r\n      ) onbefore, (\r\n        CASE WHEN (t.tgtype::int::bit(7) & b'0000010')::int = 0 \r\n        THEN true ELSE false END\r\n      ) as onafter,(\r\n         CASE WHEN (t.tgtype::int::bit(7) & b'1000000')::int = 0 \r\n         THEN false ELSE true END\r\n      ) as oninstead, (\r\n        CASE WHEN (t.tgtype::int::bit(7) & b'0000100')::int = 0 \r\n        THEN false ELSE true END\r\n      ) as oninsert, (\r\n        CASE WHEN (t.tgtype::int::bit(7) & b'0001000')::int = 0 \r\n        THEN false ELSE true END\r\n      ) as ondelete, (\r\n        CASE WHEN (t.tgtype::int::bit(7) & b'0010000')::int = 0 \r\n        THEN false ELSE true END\r\n      ) as onupdate, (\r\n        CASE WHEN (t.tgtype::int::bit(7) & b'0100000')::int = 0 \r\n        THEN false ELSE true END\r\n      ) as ontruncate,\r\n      pg_get_functiondef(t.tgfoid),\r\n      array_to_json( t.tgattr )\r\n    FROM pg_trigger as t\r\n     LEFT JOIN pg_proc as p on p.oid = t.tgfoid\r\n     LEFT JOIN pg_namespace as fn on fn.oid = p.pronamespace\r\n    WHERE not t.tgisinternal AND (\r\n    \tSELECT \r\n        \tcount(tg.id)\r\n        FROM sqlmanager.triggers as tg\r\n        WHERE tg.id = t.oid\r\n    ) = 0;\r\n    \r\n    DELETE FROM sqlmanager.triggers \r\n    WHERE id not in (\r\n    \tSELECT t.oid\r\n        FROM  pg_trigger as t\r\n        WHERE not t.tgisinternal\r\n    );\r\n\r\n\r\n    UPDATE sqlmanager.triggers\r\n    SET noscript = FALSE;\r\n    \t\r\nEND;\r\n
\.


--
-- TOC entry 3746 (class 0 OID 0)
-- Dependencies: 281
-- Name: functionslist_id_seq; Type: SEQUENCE SET; Schema: sqlmanager; Owner: postgres
--

SELECT pg_catalog.setval('functionslist_id_seq', 6, true);


--
-- TOC entry 3293 (class 0 OID 227967)
-- Dependencies: 282
-- Data for Name: schemalist; Type: TABLE DATA; Schema: sqlmanager; Owner: postgres
--

COPY schemalist (id, schemaname, schemadescr, created, userid, noscript) FROM stdin;
2200	public	standard public schema	2020-05-10 18:00:09.710227	1	f
227204	framework	framework major tables and functions	2020-05-21 11:30:40.925542	1	f
227205	reports	reports	2020-05-21 11:30:40.925542	1	f
227206	sqlmanager	sql manager	2020-05-21 11:30:40.925542	1	f
227207	test	for tests	2020-05-21 11:30:40.925542	1	f
\.


--
-- TOC entry 3747 (class 0 OID 0)
-- Dependencies: 283
-- Name: schemalist_id_seq; Type: SEQUENCE SET; Schema: sqlmanager; Owner: postgres
--

SELECT pg_catalog.setval('schemalist_id_seq', 6, true);


--
-- TOC entry 3295 (class 0 OID 227978)
-- Dependencies: 284
-- Data for Name: schemaobjects; Type: TABLE DATA; Schema: sqlmanager; Owner: postgres
--

COPY schemaobjects (id, oname, schemaname, linkurl) FROM stdin;
23	tables	public	tables
24	tables	framework	tables
25	tables	reports	tables
26	tables	sqlmanager	tables
27	tables	test	tables
28	functions	public	functions
29	functions	framework	functions
30	functions	reports	functions
31	functions	sqlmanager	functions
32	functions	test	functions
33	tables	testt	tables
34	functions	testt	functions
35	tables	Test2	tables
36	functions	Test2	functions
37	tables	test2	tables
38	functions	test2	functions
39	tables	еуу	tables
40	tables	ке	tables
41	functions	еуу	functions
42	functions	ке	functions
\.


--
-- TOC entry 3748 (class 0 OID 0)
-- Dependencies: 285
-- Name: schemaobjects_id_seq; Type: SEQUENCE SET; Schema: sqlmanager; Owner: postgres
--

SELECT pg_catalog.setval('schemaobjects_id_seq', 42, true);


--
-- TOC entry 3297 (class 0 OID 227987)
-- Dependencies: 286
-- Data for Name: tablecolumns; Type: TABLE DATA; Schema: sqlmanager; Owner: postgres
--

COPY tablecolumns (id, tablename, colname, coldesc, coltype, size, accur, "notnull", uniq, defval, userid, created, noscript) FROM stdin;
58	test2.scripts	squery	<NO TITLE>	varchar	\N	\N	f	f	\N	1	2020-05-15 17:04:21.215294	f
57	test.test3	id	<NO TITLE>	int4	32	0	t	t	nextval('test.test3_id_seq'::regclass)	1	2020-05-14 10:22:12.599537	f
72	test.dictionary_for_select	id	<NO TITLE>	int4	32	0	t	t	nextval('test.dictionary_for_select_id_seq'::regclass)	1	2020-05-18 08:30:24.008355	f
73	test.dictionary_for_select	dname	<NO TITLE>	varchar	150	\N	f	f	\N	1	2020-05-18 08:30:24.008355	f
74	test.dictionary_for_select	onemoreraltionid	<NO TITLE>	int4	32	0	f	f	\N	1	2020-05-18 08:30:24.008355	f
75	test.onemorerelation	id	<NO TITLE>	int4	32	0	t	t	nextval('test.onemorerelation_id_seq'::regclass)	1	2020-05-18 08:31:42.111034	f
59	sqlmanager.functionslist	id	<NO TITLE>	int4	32	0	t	t	nextval('sqlmanager.functionslist_id_seq'::regclass)	1	2020-05-15 17:08:13.71693	f
60	sqlmanager.functionslist	functionschema	<NO TITLE>	varchar	150	\N	t	f	\N	1	2020-05-15 17:08:13.71693	f
68	sqlmanager.functionslist	dll	<NO TITLE>	text	\N	\N	t	f	\N	1	2020-05-15 17:08:13.71693	f
61	sqlmanager.functionslist	functiontitle	<NO TITLE>	varchar	150	\N	t	f	\N	1	2020-05-15 17:08:13.71693	f
62	sqlmanager.functionslist	fullname	<NO TITLE>	varchar	350	\N	t	f	\N	1	2020-05-15 17:08:13.71693	f
63	sqlmanager.functionslist	descr	<NO TITLE>	varchar	350	\N	t	f	'<NO TITLE>'::character varying	1	2020-05-15 17:08:13.71693	f
64	sqlmanager.functionslist	created	<NO TITLE>	timestamp	\N	\N	t	f	now()	1	2020-05-15 17:08:13.71693	f
65	sqlmanager.functionslist	userid	<NO TITLE>	int4	32	0	t	f	\N	1	2020-05-15 17:08:13.71693	f
66	sqlmanager.functionslist	noscript	<NO TITLE>	bool	\N	\N	t	f	true	1	2020-05-15 17:08:13.71693	f
67	sqlmanager.functionslist	functionfulltitle	<NO TITLE>	varchar	150	\N	t	f	\N	1	2020-05-15 17:08:13.71693	f
69	sqlmanager.functionslist	args	<NO TITLE>	json	\N	\N	t	f	'[]'::json	1	2020-05-15 17:08:13.71693	f
70	sqlmanager.functionslist	returntype	<NO TITLE>	varchar	150	\N	f	f	\N	1	2020-05-15 17:08:13.71693	f
71	sqlmanager.functionslist	definition	<NO TITLE>	text	\N	\N	f	f	\N	1	2020-05-15 17:08:13.71693	f
76	test.onemorerelation	oname	<NO TITLE>	varchar	35	\N	t	f	\N	1	2020-05-18 08:31:42.111034	f
81	framework.views	viewtype	<NO TITLE>	varchar	200	\N	t	f	\N	1	2020-05-18 08:44:01.784131	f
82	framework.views	pagination	<NO TITLE>	bool	\N	\N	t	f	false	1	2020-05-18 08:44:01.784131	f
83	framework.views	config	<NO TITLE>	json	\N	\N	t	f	'[]'::json	1	2020-05-18 08:44:01.784131	f
85	framework.views	created	<NO TITLE>	timestamp	\N	\N	t	f	now()	1	2020-05-18 08:44:01.784131	f
84	framework.views	path	<NO TITLE>	varchar	150	\N	t	t	''::character varying	1	2020-05-18 08:44:01.784131	f
86	framework.views	groupby	<NO TITLE>	json	\N	\N	t	f	'[]'::json	1	2020-05-18 08:44:01.784131	f
87	framework.views	filters	<NO TITLE>	json	\N	\N	t	f	'[]'::json	1	2020-05-18 08:44:01.784131	f
88	framework.views	acts	<NO TITLE>	json	\N	\N	t	f	'[]'::json	1	2020-05-18 08:44:01.784131	f
89	framework.views	roles	<NO TITLE>	json	\N	\N	t	f	'[]'::json	1	2020-05-18 08:44:01.784131	f
90	framework.views	classname	<NO TITLE>	varchar	400	\N	f	f	\N	1	2020-05-18 08:44:01.784131	f
91	framework.views	orderby	<NO TITLE>	bool	\N	\N	t	f	false	1	2020-05-18 08:44:01.784131	f
92	framework.views	ispagesize	<NO TITLE>	bool	\N	\N	t	f	true	1	2020-05-18 08:44:01.784131	f
93	framework.views	pagecount	<NO TITLE>	bool	\N	\N	t	f	true	1	2020-05-18 08:44:01.784131	f
94	framework.views	foundcount	<NO TITLE>	bool	\N	\N	t	f	true	1	2020-05-18 08:44:01.784131	f
95	framework.views	subscrible	<NO TITLE>	bool	\N	\N	t	f	false	1	2020-05-18 08:44:01.784131	f
96	framework.views	checker	<NO TITLE>	bool	\N	\N	t	f	false	1	2020-05-18 08:44:01.784131	f
97	framework.views	api	<NO TITLE>	json	\N	\N	t	f	'{}'::json	1	2020-05-18 08:44:01.784131	f
98	framework.views	copy	<NO TITLE>	bool	\N	\N	t	f	false	1	2020-05-18 08:44:01.784131	f
77	framework.views	id	<NO TITLE>	int4	32	0	t	t	nextval('framework.views_id_seq'::regclass)	1	2020-05-18 08:44:01.784131	f
78	framework.views	title	<NO TITLE>	varchar	150	\N	t	f	\N	1	2020-05-18 08:44:01.784131	f
79	framework.views	descr	<NO TITLE>	varchar	1500	\N	f	f	\N	1	2020-05-18 08:44:01.784131	f
80	framework.views	tablename	<NO TITLE>	varchar	350	\N	t	f	\N	1	2020-05-18 08:44:01.784131	f
99	framework.orgs	id	<NO TITLE>	int4	32	0	t	t	nextval(('framework.orgs_id_seq'::text)::regclass)	1	2020-05-21 11:30:53.898149	f
100	framework.orgs	orgname	org title	varchar	350	\N	t	f	\N	1	2020-05-21 11:30:53.898149	f
101	framework.orgs	orgtype	<NO TITLE>	int2	16	0	t	f	'1'::smallint	1	2020-05-21 11:30:53.898149	f
102	framework.orgs	parentid	major org	int4	32	0	f	f	\N	1	2020-05-21 11:30:53.898149	f
103	framework.orgs	shortname	organizations shortname	varchar	150	\N	f	f	\N	1	2020-05-21 11:30:53.898149	f
104	framework.orgs	created	<NO TITLE>	timestamp	\N	\N	t	f	now()	1	2020-05-21 11:30:53.898149	f
105	framework.orgs	userid	<NO TITLE>	int4	32	0	t	f	\N	1	2020-05-21 11:30:53.898149	f
106	framework.orgs	photo	<NO TITLE>	json	\N	\N	t	f	'[]'::json	1	2020-05-21 11:30:53.898149	f
54	test.testmanager	boolField	bool	bool	\N	\N	t	f	false	1	2020-05-13 18:29:00.499867	f
35	test.testmanager	id	<NO TITLE>	int4	32	0	f	f	123	1	2020-05-13 14:12:31.465604	f
36	test.testmanager	col5	column	varchar	100	\N	t	f	\N	1	2020-05-13 14:12:31.465604	f
39	test.testmanager	textfield1	<NO TITLE>	varchar	200	\N	f	f	\N	1	2020-05-13 18:21:56.410868	f
42	test.testmanager	intfield	intfield	int4	32	0	f	f	\N	1	2020-05-13 18:22:40.652645	f
30	test.major_table	select_api	<NO TITLE>	int4	32	0	f	f	\N	1	2020-05-11 15:19:46.422713	f
31	test.major_table	multitypehead	<NO TITLE>	json	\N	\N	f	f	\N	1	2020-05-11 15:19:46.422713	f
8	test.major_table	time	<NO TITLE>	time	\N	\N	f	f	\N	1	2020-05-11 15:19:46.422713	f
9	test.major_table	password	<NO TITLE>	varchar	\N	\N	f	f	\N	1	2020-05-11 15:19:46.422713	f
10	test.major_table	color	<NO TITLE>	varchar	15	\N	f	f	\N	1	2020-05-11 15:19:46.422713	f
11	test.major_table	multiselect	<NO TITLE>	json	\N	\N	f	f	\N	1	2020-05-11 15:19:46.422713	f
32	test.major_table	datetime	<NO TITLE>	timestamp	\N	\N	f	f	\N	1	2020-05-11 15:19:46.422713	f
34	test.major_table	rate	<NO TITLE>	numeric	2	1	f	f	\N	1	2020-05-11 15:19:46.422713	f
33	test.major_table	html	<NO TITLE>	varchar	\N	\N	f	f	\N	1	2020-05-11 15:19:46.422713	f
18	test.major_table	number	<NO TITLE>	int4	32	0	f	f	\N	1	2020-05-11 15:19:46.422713	f
20	test.major_table	texteditor	<NO TITLE>	varchar	\N	\N	f	f	\N	1	2020-05-11 15:19:46.422713	f
21	test.major_table	colorrow	<NO TITLE>	varchar	15	\N	f	f	\N	1	2020-05-11 15:19:46.422713	f
22	test.major_table	multitypehead_api	<NO TITLE>	json	\N	\N	f	f	\N	1	2020-05-11 15:19:46.422713	f
23	test.major_table	multi_select_api	<NO TITLE>	json	\N	\N	f	f	\N	1	2020-05-11 15:19:46.422713	f
24	test.major_table	colorpicker	<NO TITLE>	varchar	15	\N	f	f	\N	1	2020-05-11 15:19:46.422713	f
4	test.major_table	id	iddd	int4	32	0	t	t	nextval('test.major_table_id_seq'::regclass)	1	2020-05-11 15:19:46.422713	f
5	test.major_table	text	texttt	text	\N	\N	f	f	\N	1	2020-05-11 15:19:46.422713	f
6	test.major_table	data	<NO TITLE>	date	\N	\N	f	f	\N	1	2020-05-11 15:19:46.422713	f
7	test.major_table	check	<NO TITLE>	bool	\N	\N	f	f	\N	1	2020-05-11 15:19:46.422713	f
12	test.major_table	file	<NO TITLE>	json	\N	\N	f	f	\N	1	2020-05-11 15:19:46.422713	f
13	test.major_table	typehead	<NO TITLE>	int4	32	0	f	f	\N	1	2020-05-11 15:19:46.422713	f
14	test.major_table	image	<NO TITLE>	json	\N	\N	f	f	\N	1	2020-05-11 15:19:46.422713	f
15	test.major_table	images	<NO TITLE>	json	\N	\N	f	f	\N	1	2020-05-11 15:19:46.422713	f
16	test.major_table	gallery	<NO TITLE>	json	\N	\N	f	f	\N	1	2020-05-11 15:19:46.422713	f
17	test.major_table	label	<NO TITLE>	varchar	350	\N	f	f	\N	1	2020-05-11 15:19:46.422713	f
19	test.major_table	link	<NO TITLE>	json	\N	\N	f	f	\N	1	2020-05-11 15:19:46.422713	f
25	test.major_table	select	<NO TITLE>	int4	32	0	f	f	\N	1	2020-05-11 15:19:46.422713	f
26	test.major_table	autocomplete	<NO TITLE>	varchar	100	\N	f	f	\N	1	2020-05-11 15:19:46.422713	f
27	test.major_table	textarea	<NO TITLE>	text	\N	\N	f	f	\N	1	2020-05-11 15:19:46.422713	f
28	test.major_table	files	<NO TITLE>	json	\N	\N	f	f	\N	1	2020-05-11 15:19:46.422713	f
29	test.major_table	typehead_api	<NO TITLE>	int4	32	0	f	f	\N	1	2020-05-11 15:19:46.422713	f
\.


--
-- TOC entry 3749 (class 0 OID 0)
-- Dependencies: 287
-- Name: tablecolumns_id_seq; Type: SEQUENCE SET; Schema: sqlmanager; Owner: postgres
--

SELECT pg_catalog.setval('tablecolumns_id_seq', 106, true);


--
-- TOC entry 3299 (class 0 OID 228000)
-- Dependencies: 288
-- Data for Name: tableindexes; Type: TABLE DATA; Schema: sqlmanager; Owner: postgres
--

COPY tableindexes (id, tablename, index_name, columns, typename, userid, created, noscript) FROM stdin;
\.


--
-- TOC entry 3750 (class 0 OID 0)
-- Dependencies: 289
-- Name: tableindexes_id_seq; Type: SEQUENCE SET; Schema: sqlmanager; Owner: postgres
--

SELECT pg_catalog.setval('tableindexes_id_seq', 1, false);


--
-- TOC entry 3301 (class 0 OID 228011)
-- Dependencies: 290
-- Data for Name: tablelist; Type: TABLE DATA; Schema: sqlmanager; Owner: postgres
--

COPY tablelist (id, tableschemaname, tablename, fullname, descr, userid, created, noscript) FROM stdin;
227494	framework	act_visible_condions	framework.act_visible_condions	action visible condition	1	2020-05-21 11:30:44.605517	f
227768	framework	opertypes	framework.opertypes	operations types for logtable	1	2020-05-21 11:30:44.605517	f
227827	framework	treesacts	framework.treesacts	trees actions	1	2020-05-21 11:30:44.605517	f
227620	framework	dialog_messages	framework.dialog_messages	<NO TITLE>	1	2020-05-21 11:30:44.605517	f
228000	sqlmanager	tableindexes	sqlmanager.tableindexes	<NO TITLE>	1	2020-05-21 11:30:44.605517	f
227535	framework	apimethods	framework.apimethods	Different implementations of API calls\r\nAlong with the type, a method must be added on the interface (front-end)	1	2020-05-21 11:30:44.605517	f
227889	framework	viewsnotification	framework.viewsnotification	notifications for views on ws \r\nyou can add here notification for different views on triggers	1	2020-05-21 11:30:44.605517	f
227701	framework	mainmenu	framework.mainmenu	<NO TITLE>	1	2020-05-21 11:30:44.605517	f
228075	test	testmanager	test.testmanager	<NO TITLE>	1	2020-05-21 11:30:44.605517	f
227523	framework	acttypes	framework.acttypes	actions types dictionary	1	2020-05-21 11:30:44.605517	f
227793	framework	select_condition	framework.select_condition	select form method conditions settings	1	2020-05-21 11:30:44.605517	f
227955	sqlmanager	functionslist	sqlmanager.functionslist	FUNCTIONS LIST	1	2020-05-21 11:30:44.605517	f
227645	framework	dialog_statuses	framework.dialog_statuses	DIALOG STATUSES	1	2020-05-21 11:30:44.605517	f
228041	test	dictionary_for_select	test.dictionary_for_select	dictionary for relation 	1	2020-05-21 11:30:44.605517	f
227931	reports	reportparams	reports.reportparams	<NO TITLE>	1	2020-05-21 11:30:44.605517	f
227716	framework	mainsettings	framework.mainsettings	Projects main settings\r\nMust be the same as settings.json file	1	2020-05-21 11:30:44.605517	f
227916	reports	paramtypes	reports.paramtypes	<NO TITLE>	1	2020-05-21 11:30:44.605517	f
227583	framework	config	framework.config	view columns config	1	2020-05-21 11:30:44.605517	f
227987	sqlmanager	tablecolumns	sqlmanager.tablecolumns	tables columns	1	2020-05-21 11:30:44.605517	f
227816	framework	trees	framework.trees	Trees menus	1	2020-05-21 11:30:44.605517	f
227907	framework	visible_condition	framework.visible_condition	form type components columns visible types	1	2020-05-21 11:30:44.605517	f
227518	framework	actparam_querytypes	framework.actparam_querytypes	action's parametrs query types	1	2020-05-21 11:30:44.605517	f
227609	framework	configsettings	framework.configsettings	config settings list	1	2020-05-21 11:30:44.605517	f
227685	framework	filtertypes	framework.filtertypes	filters types	1	2020-05-21 11:30:44.605517	f
227691	framework	logtable	framework.logtable	<NO TITLE>	1	2020-05-21 11:30:44.605517	f
228046	test	fel	test.fel	Fron-ent errors log	1	2020-05-21 11:30:44.605517	f
227849	framework	users	framework.users	USER	1	2020-05-21 11:30:44.605517	f
227836	framework	treesbranches	framework.treesbranches	trees branches	1	2020-05-21 11:30:44.605517	f
228069	test	relate_with_major	test.relate_with_major	relate table with major_table	1	2020-05-21 11:30:44.605517	f
228056	test	major_table	test.major_table	table for testing framework interface	1	2020-05-21 11:30:44.605517	f
227650	framework	dialog_types	framework.dialog_types	DIALOG TYPES	1	2020-05-21 11:30:44.605517	f
227748	framework	methodtypes	framework.methodtypes	API methods types	1	2020-05-21 11:30:44.605517	f
228064	test	onemorerelation	test.onemorerelation	one more dictionary for tests	1	2020-05-21 11:30:44.605517	f
227763	framework	operations	framework.operations	boolean operations for condinions settings	1	2020-05-21 11:30:44.605517	f
227554	framework	calendar_test	framework.calendar_test	calendar types view test table\r\nnot use\r\ndelete	1	2020-05-21 11:30:44.605517	f
227967	sqlmanager	schemalist	sqlmanager.schemalist	db schemas	1	2020-05-21 11:30:44.605517	f
227802	framework	sess	framework.sess	Sessions table\r\nPlease kill in shedules sessions if you need	1	2020-05-21 11:30:44.605517	f
227751	framework	notifications	framework.notifications	Global notifications for dashboard menu type	1	2020-05-21 11:30:44.605517	f
227978	sqlmanager	schemaobjects	sqlmanager.schemaobjects	Objects of schema	1	2020-05-21 11:30:44.605517	f
227688	framework	functions	framework.functions	<NO TITLE>	1	2020-05-21 11:30:44.605517	f
227783	framework	orgtypes	framework.orgtypes	organizations types	1	2020-05-21 11:30:44.605517	f
227740	framework	menutypes	framework.menutypes	menu types dictionary	1	2020-05-21 11:30:44.605517	f
227786	framework	paramtypes	framework.paramtypes	actions parametrs types	1	2020-05-21 11:30:44.605517	f
227560	framework	columntypes	framework.columntypes	configs columns types	1	2020-05-21 11:30:44.605517	f
227571	framework	compos	framework.compos	compositions	1	2020-05-21 11:30:44.605517	f
227790	framework	roles	framework.roles	project roles	1	2020-05-21 11:30:44.605517	f
227806	framework	spapi	framework.spapi	Rest Api methods\r\ncall plpg function \r\nalways pass in function injson JSON parametr	1	2020-05-21 11:30:44.605517	f
227939	sqlmanager	foreignkeys	sqlmanager.foreignkeys	FOREIGN KEYS	1	2020-05-21 11:30:44.605517	f
227846	framework	treeviewtypes	framework.treeviewtypes	treesbranches views types\r\nview or composition	1	2020-05-21 11:30:44.605517	f
227503	framework	actions	framework.actions	VIEWS ACTIONS	1	2020-05-21 11:30:44.605517	f
227734	framework	menus	framework.menus	Projects Menus	1	2020-05-21 11:30:44.605517	f
227634	framework	dialog_notifications	framework.dialog_notifications	ws notifications for dialogs	1	2020-05-21 11:30:44.605517	f
227771	framework	orgs	framework.orgs	ORGS	1	2020-05-21 11:30:44.605517	f
227530	framework	apicallingmethods	framework.apicallingmethods	API calling methods\r\nfor user methods	1	2020-05-21 11:30:44.605517	f
227949	sqlmanager	functionargs	sqlmanager.functionargs	FUNCTION ARGUMENTS	1	2020-05-21 11:30:44.605517	f
227614	framework	defaultval	framework.defaultval	defaultval configs property	1	2020-05-21 11:30:44.605517	f
227653	framework	dialogs	framework.dialogs	USERS CHAT DIALOGS	1	2020-05-21 11:30:44.605517	f
227671	framework	filters	framework.filters	view's filters	1	2020-05-21 11:30:44.605517	f
228022	sqlmanager	triggers	sqlmanager.triggers	TRIGGERS	1	2020-05-21 11:30:44.605517	f
227483	framework	act_parametrs	framework.act_parametrs	ACTIONS PARAMETERS	1	2020-05-21 11:30:44.605517	f
227544	framework	calendar_actions	framework.calendar_actions	calendars actions test table\r\nnot use\r\ndelete	1	2020-05-21 11:30:44.605517	f
228011	sqlmanager	tablelist	sqlmanager.tablelist	tables	1	2020-05-21 11:30:44.605517	f
227919	reports	reportlist	reports.reportlist	reportslist	1	2020-05-21 11:30:44.605517	f
227865	framework	views	framework.views	views	1	2020-05-21 11:30:44.605517	f
227539	framework	booloper	framework.booloper	boolean operations	1	2020-05-21 11:30:44.605517	f
227901	framework	viewtypes	framework.viewtypes	views types dictionaries	1	2020-05-21 11:30:44.605517	f
\.


--
-- TOC entry 3751 (class 0 OID 0)
-- Dependencies: 291
-- Name: tablelist_id_seq; Type: SEQUENCE SET; Schema: sqlmanager; Owner: postgres
--

SELECT pg_catalog.setval('tablelist_id_seq', 10, true);


--
-- TOC entry 3303 (class 0 OID 228022)
-- Dependencies: 292
-- Data for Name: triggers; Type: TABLE DATA; Schema: sqlmanager; Owner: postgres
--

COPY triggers (id, triggername, tablename, created, userid, functionname, functionoid, enables, onbefore, onafter, oninstead, oninsert, onupdate, ondelete, ontruncate, noscript, functiondef, fields) FROM stdin;
228337	tablecolumns_tr_type	sqlmanager.tablecolumns	2020-05-21 11:30:56.404815	1	sqlmanager.tr_tablecolumns_tr_type	227445	t	t	f	f	f	t	f	f	f	\r\nDECLARE\r\n squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript\r\n  THEN\r\n    squery = concat('\t\r\n\t\tALTER TABLE ',NEW.tablename,'\r\n  \t\t\tALTER COLUMN "',NEW.colname,'" \r\n            TYPE ',NEW.coltype,';\r\n    ');\r\n    \r\n     EXECUTE format(squery);\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n	["coltype"]
228339	tablelist_tr_del	sqlmanager.tablelist	2020-05-21 11:30:56.404815	1	sqlmanager.tr_tablelist_tr_del	227447	t	t	f	f	f	f	t	f	f	\r\nDECLARE\r\n    squery varchar;\r\nBEGIN\r\n\r\n  IF not OLD.noscript \r\n  THEN\r\n    squery = concat('\t\r\n        DROP TABLE ',OLD.fullname,';\r\n    ');\r\n    \r\n     EXECUTE format(squery) ;\r\n    \r\n  END IF;\r\n  RETURN OLD;\r\n\r\nEND;\r\n	[]
228292	config_tr	framework.config	2020-05-21 11:30:56.404815	1	framework.tr_config_tr	227358	t	t	f	f	f	t	f	f	f	\r\nDECLARE\r\n\t_col varchar(150);\r\n\t_title varchar(150);\r\n    _tablename varchar(350); -- view major table name\r\n    _tpath json;\r\n    _tt varchar(150);\r\nBEGIN\r\n\r\n\tSELECT\r\n    \tv.tablename\r\n    FROM framework.views as v\r\n    WHERE v.id = NEW.viewid\r\n    INTO _tablename;\r\n    \r\n    -- if related column from other table\r\n    IF NEW.table is not null \r\n    THEN\r\n    \t_tablename = NEW.table;\r\n    END IF;\r\n    \r\n    -- check multi type columns data_type in table\r\n    IF NEW.type like 'multi%' \r\n    THEN\r\n        -- data_type must be JSON\r\n        IF (\r\n          SELECT \r\n              data_type\r\n          FROM information_schema.columns\r\n          WHERE concat(table_schema,'.',table_name) = _tablename AND\r\n                column_name = NEW.col\r\n        ) <> 'json'\r\n        THEN\r\n        \tPERFORM raiserror('for type multi(select, typehead), column type must be JSON');\r\n        END IF;    \t\r\n    END IF;\r\n    \r\n    -- check relaition and type\r\n    IF NEW.relation is not null THEN\r\n      -- for multiselect, mu;titypehead types\t\r\n      -- only not api types\r\n      IF NEW.type like 'multi%' AND \r\n      \t NEW.type not like '%_api'\r\n      THEN\r\n      \tIF (\r\n        \tSELECT \r\n              count(table_name)\r\n            FROM information_schema.columns\r\n            WHERE concat(table_schema,'.',table_name) = NEW.relation\r\n        ) = 0 THEN\r\n        \tPERFORM raiserror(concat('table ',NEW.relation,' is not found'));\r\n        END IF;\r\n        \r\n        NEW.multiselecttable = NEW.relation;      \r\n        NEW.multicolums = NEW.relationcolums;\r\n        NEW.relationcolums = '[]';\r\n      END IF;\r\n      \r\n      -- if type _api\r\n      IF NEW.type like '%_api' AND \r\n      \t COALESCE(OLD.select_api,'') <> NEW.relation \r\n         and COALESCE(OLD.relation,'')<>NEW.relation\r\n      THEN    \r\n        NEW.select_api = NEW.relation;      \r\n      END IF;\r\n      \r\n      -- do not change relation\r\n      IF OLD.relation is null OR OLD.relation <> NEW.relation \r\n      THEN\r\n          NEW.relation = OLD.relation;\r\n      END IF;\r\n    END IF;\r\n    \r\n    \r\n\t-- add relation columns to config \r\n    -- only if not "array" type \r\n\tIF NEW.relationcolums is not null AND \r\n    \r\n       NOT NEW.copy AND\r\n       \r\n       NEW.type<>'array' AND\r\n       NOT NEW.depency AND\r\n       NEW.relation is not null AND\r\n       \r\n      (SELECT count(*) FROM json_array_elements(NEW.relationcolums)) > 0 AND \r\n      \r\n      (SELECT count(r.value) \r\n       FROM json_array_elements_text(NEW.relationcolums) as r\r\n       WHERE r.value::varchar not in (\r\n\t\t\tSELECT r2.value::varchar \t\r\n       \t\tFROM json_array_elements_text(coalesce(OLD.relationcolums,'[]'::json)) as r2\r\n       )) > 0\r\n       \r\n    THEN\r\n    \t_tt = NEW.t;\r\n    \tIF NEW.related = true \r\n        THEN\r\n            /*[\r\n            \t{"t": "t2", "col": "region_id", "table": "nsi.ros_j5phs5f9ra"}, \r\n                {"t": "t7", "col": "addressTypeId", "table": "nsi.ros_n4rellrh3d"}\r\n            ]*/\r\n            --IF (SELECT FROM ) \r\n            SELECT\r\n            \tarray_to_json(array_agg(row_to_json(d)))\r\n            FROM (\r\n              SELECT\r\n                   concat('t',NEW.t) as t, \r\n                   NEW.relatecolumn as col, \r\n                   NEW.table as table\r\n              UNION \r\n              SELECT\t\r\n                  concat(NEW.col,'_', NEW.t) as t, \r\n                  NEW.col, \r\n                  NEW.relation as table\r\n            ) as d\r\n            INTO _tpath;\r\n            \r\n            _tt = concat(NEW.col,'_', NEW.t);\r\n        \t--PERFORM raiserror('There is not realized yet!');\r\n        END IF;\r\n        _tpath = coalesce(_tpath,'[]');\r\n        \r\n    \tFOR _col in (\r\n        \tSELECT \r\n            \tVALUE::varchar \r\n            FROM json_array_elements_text(NEW.relationcolums)\r\n            WHERE value::varchar not in (\r\n              SELECT value::varchar\r\n              FROM json_array_elements_text(OLD.relationcolums)\r\n          )\r\n        )\r\n        LOOP\r\n        \t_title = _col;\r\n            \r\n        \tIF \r\n             (SELECT \r\n            \tcount(c.id)\r\n              FROM framework.config as c\r\n              WHERE c.viewid = NEW.viewid and c.col = _col) >0\r\n            THEN\r\n            \t_title = concat(_col,'_',NEW.id);\r\n            END IF;\r\n        \t\r\n            \r\n        \tINSERT INTO framework.config (\r\n               col, title, type, visible,\r\n               related, roles, relatecolumn,\r\n               relation,\r\n               relcol,\r\n               classname, "join", t,\r\n               "table", viewid,\r\n               column_order, tpath\r\n            )\r\n        \tSELECT\r\n              _col as col, _title as title, 'label' as type, true as visible,\r\n              true as related, '[]'::json as roles, NEW.col as relatecolumn,\r\n              (\r\n                SELECT \r\n                  \tconcat(y.table_schema, '.', y.table_name)\r\n                FROM information_schema.table_constraints as c\r\n                   \tJOIN information_schema.key_column_usage AS x ON\r\n                       \tc.constraint_name = x.constraint_name and\r\n                        x.column_name = _col\r\n                    JOIN information_schema.constraint_column_usage AS y ON \r\n                       \ty.constraint_name = c.constraint_name and\r\n                        y.constraint_schema = c.constraint_schema\r\n                WHERE concat(c.table_schema ,'.',c.table_name) = NEW.relation \r\n                    \tand\r\n                      c.constraint_type = 'FOREIGN KEY'\r\n                LIMIT 1                \r\n                \r\n              ) as relation,\r\n              COALESCE((\r\n                SELECT \r\n                  \tconcat(y.column_name)\r\n                FROM information_schema.table_constraints as c\r\n                  \tJOIN information_schema.key_column_usage AS x ON\r\n                         c.constraint_name = x.constraint_name and\r\n                         x.column_name = _col\r\n                    JOIN information_schema.constraint_column_usage AS y ON \r\n                      \ty.constraint_name = c.constraint_name and\r\n                        y.constraint_schema = c.constraint_schema\r\n                WHERE concat(c.table_schema ,'.',c.table_name) = NEW.relation \r\n                   \t  and\r\n                     c.constraint_type = 'FOREIGN KEY'\r\n                LIMIT 1\r\n              ),NEW.relcol) as relcol,\r\n              '' as classname, false as "join", _tt as t,\r\n              NEW.relation as "table", NEW.viewid,\r\n              coalesce((\r\n              \tSELECT \r\n                 max(c.column_order) \r\n            \tFROM framework.config as c\r\n            \tWHERE c.viewid = NEW.viewid),0\r\n              ) + 1, _tpath;\r\n        END LOOP;\r\n    END IF;\r\n    \r\n    -- check function changing \r\n    IF (OLD.fn is null and NEW.fn is not null) OR\r\n       (OLD.fn is not null and NEW.fn is null)\r\n    THEN\r\n    \tPERFORM raiserror('You can not change simple column to function column');\r\n    END IF;\r\n\t\r\n    IF NEW.depency and NEW.depencycol is null \r\n    THEN\r\n    \tPERFORM raiserror('depencycol can not be empty (null) when depency=TRUE!');\r\n    END IF;\r\n    \r\n\t-- change column order in all config\r\n\t/*IF OLD.column_order<>NEW.column_order and \r\n\t  (SELECT\r\n\t     count(id)\r\n\t   FROM framework.config\r\n\t   WHERE viewid = NEW.viewid and column_order = NEW.column_order) > 0 \r\n\tTHEN\r\n\t   UPDATE framework.config\r\n\t   SET\r\n\t      column_order = column_order + 1\r\n\t   WHERE viewid = NEW.viewid AND column_order >= NEW.column_order;\r\n\tEND IF;*/\r\n\r\n\tRETURN NEW;\r\nEND;\r\n	[]
228300	menus_tr	framework.menus	2020-05-21 11:30:56.404815	1	framework.tr_menu_tr	227368	t	t	f	f	t	t	f	f	f	\r\nBEGIN\r\n\r\n\tIF NEW.ismainmenu and NEW.menutype in ('1','2')\r\n    THEN\r\n    \tUPDATE framework.menus\r\n        SET ismainmenu = false\r\n        WHERE id <> NEW.id;\r\n    END IF;\r\n    IF NEW.menutype not in ('1','2') THEN\r\n    \tNEW.ismainmenu = false; \r\n    END IF;\r\n    \r\n   \r\n    \r\n    RETURN NEW;\r\nEND;\r\n	["menutype","ismainmenu"]
228320	functionslist_tr_del	sqlmanager.functionslist	2020-05-21 11:30:56.404815	1	sqlmanager.tr_functionslist_tr_del	227428	t	t	f	f	f	f	t	f	f	\r\nDECLARE\r\n    squery varchar;\r\nBEGIN\r\n\r\n  IF not OLD.noscript \r\n  THEN\r\n    squery = concat('\t\r\n        DROP FUNCTION ',OLD.fullname,' ;\r\n    ');\r\n    \r\n     EXECUTE format(squery) ;\r\n    \r\n  END IF;\r\n  \r\n  IF OLD.noscript\r\n  THEN\r\n  \tDELETE FROM sqlmanager.functionargs\r\n    WHERE oid = OLD.id;\r\n  END IF; \r\n  \r\n  RETURN OLD;\r\n\r\nEND;\r\n	[]
228316	foreignkeys_tr_ins	sqlmanager.foreignkeys	2020-05-21 11:30:56.404815	1	sqlmanager.tr_foreignkeys_tr_ins	227424	t	t	f	f	t	f	f	f	f	\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n\r\n\tIF NOT NEW.noscript\r\n    THEN\r\n    \tsquery = CONCAT('\r\n          ALTER TABLE ', NEW.maintablename ,'\r\n            ADD CONSTRAINT "', NEW.ftitle, '" \r\n            FOREIGN KEY ("' , NEW.maincol , '")\r\n              REFERENCES ', NEW.parentablename,'("', NEW.parentcol ,'")\r\n              ON DELETE NO ACTION\r\n              ON UPDATE NO ACTION\r\n              NOT DEFERRABLE;\r\n        ');\r\n        \r\n        EXECUTE squery;\r\n    END IF;\r\n\r\n\tRETURN NEW;\r\nEND;\r\n	[]
228344	triggers_tr_def	sqlmanager.triggers	2020-05-21 11:30:56.404815	1	sqlmanager.tr_triggers_tr_def	227453	t	t	f	f	t	t	f	f	f	' IN NEW.functiondef) + 10,\r\n        length(NEW.functiondef)\r\n       );\r\n      \r\n      NEW.functiondef =  SUBSTRING(NEW.functiondef,\r\n        0, POSITION('	["functiondef"]
228304	trees_add_org	framework.trees	2020-05-21 11:30:56.404815	1	framework.tr_trees_add_org	227374	t	f	t	f	t	t	f	f	f	\r\nDECLARE\r\n  _orgid int;\r\nBEGIN\r\n\tSELECT \r\n    \torgid\r\n    FROM framework.users\r\n    WHERE id = NEW.userid\r\n    INTO _orgid;\r\n    \r\n    UPDATE framework.trees\r\n    SET orgid = _orgid\r\n    WHERE id = NEW.id;\r\n    \r\n    return null;\r\nEND;\r\n	["userid"]
228594	triggers_tr_iudt	sqlmanager.triggers	2020-05-21 13:38:28.217021	1	sqlmanager.tr_triggers_tr_iudt	227457	t	t	f	f	f	t	f	f	f	\r\nDECLARE\r\n    squery varchar;\r\nBEGIN\r\n\tIF NOT NEW.noscript AND (\r\n    \tOLD.oninsert <> NEW.oninsert OR\r\n        OLD.onupdate <> NEW.onupdate OR\r\n        OLD.ondelete <> NEW.ondelete OR\r\n        OLD.ontruncate <> NEW.ontruncate\r\n     \tOR OLD.fields::varchar <> NEW.fields::varchar \r\n    ) \r\n    THEN\r\n    \tsquery = CONCAT('\r\n            -- object recreation\r\n            DROP TRIGGER ', NEW.triggername, ' \r\n            ON ', NEW.tablename , ';\r\n\r\n            CREATE TRIGGER ', NEW.triggername, '\r\n              ', (\r\n              \tCASE WHEN NEW.onbefore\r\n              \tTHEN 'BEFORE'\r\n                ELSE 'AFTER'\r\n                END\r\n              ), ' ', sqlmanager.fn_triggeractions_str(\r\n              \tNEW.oninsert,\r\n              \tNEW.onupdate,\r\n                NEW.ondelete,\r\n                NEW.ontruncate\r\n              ), (\r\n                  CASE WHEN (\r\n                      SELECT count(value)\r\n                      FROM json_array_elements_text(NEW.fields)\r\n                  ) > 0\r\n                  THEN concat(' OF ',(\r\n                      SELECT \r\n                          string_agg(concat('"',value::varchar,'"'),',')\r\n                      FROM json_array_elements_text(NEW.fields) \r\n                  ))\r\n                  ELSE ''\r\n                  END\r\n               )\r\n              , ' \r\n              ON ', NEW.tablename , ' \r\n              \r\n            FOR EACH ROW \r\n              EXECUTE PROCEDURE ', NEW.functionname , '();\r\n        ');\r\n        \r\n        EXECUTE squery;\r\n    END IF;\r\n    \r\n    \r\n    \r\n    RETURN NEW;\r\nEND;\r\n	["oninsert","onupdate","ondelete","ontruncate","fields"]
228314	reportparams_tr	reports.reportparams	2020-05-21 11:30:56.404815	1	reports.tr_reportparams_tr	227404	t	t	f	f	t	t	f	f	f	\r\nBEGIN\r\n\r\n\tNEW.completed = false;\r\n\r\n  IF NEW.reportlistid is not null and\r\n  \t coalesce(NEW.ptitle,'') <> '' and\r\n  \t coalesce(NEW.func_paramtitle,'')<>'' and\r\n  \t NEW.ptype is not null \r\n  THEN\r\n  \tNEW.completed = true;\r\n  \tIF NEW.ptype in (2,3,5) and NEW.apimethod is null THEN\r\n    \tNEW.completed = false;\r\n    END IF;\r\n  END IF; \r\n  \r\n  RETURN NEW;\r\n\r\nEND;\r\n	[]
228350	triggers_tr_title	sqlmanager.triggers	2020-05-21 11:30:56.404815	1	sqlmanager.tr_triggers_tr_title	227458	t	t	f	f	f	t	f	f	f	\r\nDECLARE\r\n\tsquery varchar;\r\n\r\nBEGIN\r\n\t\r\n\tIF not NEW.noscript\r\n    THEN\r\n    \tsquery = CONCAT('\r\n          ALTER TRIGGER ', OLD.triggername ,' ON ', NEW.tablename ,'\r\n            RENAME TO "', NEW.triggername , '";\r\n        ');\r\n        \r\n        EXECUTE squery;\r\n    END IF; \r\n\r\n\r\n\tRETURN NEW;\r\n\r\nEND;\r\n	["triggername"]
228326	schemalist_tr_descr	sqlmanager.schemalist	2020-05-21 11:30:56.404815	1	sqlmanager.tr_schemalist_tr_descr	227434	t	t	f	f	f	t	f	f	f	\r\nDECLARE\r\n squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript\r\n  THEN\r\n    squery = concat('\t\r\n      COMMENT ON SCHEMA "', \r\n      replace(NEW.schemaname, '"', ''), '" \r\n      IS ''', NEW.schemadescr, '''\r\n    ');\r\n    \r\n     EXECUTE format(squery) ;\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n	["schemadescr"]
228291	actions_tr_del	framework.actions	2020-05-21 11:30:56.404815	1	framework.tr_actions_tr_del	227356	t	t	f	f	f	f	t	f	f	\r\nBEGIN\r\n\r\n\tDELETE FROM framework.act_parametrs WHERE actionid = OLD.id;\r\n    DELETE FROM framework.act_visible_condions WHERE actionid = OLD.id;\r\n    \r\n    RETURN OLD;\r\nEND;\r\n	[]
228293	config_tr_del	framework.config	2020-05-21 11:30:56.404815	1	framework.tr_config_tr_del	227360	t	t	f	f	f	f	t	f	f	\r\nBEGIN\r\n\r\n\t-- column use in fncols \r\n    IF OLD.fncolumns::varchar like '[%]' and (\r\n    \tSELECT \r\n        \tcount(id)\r\n        FROM framework.config\r\n        WHERE (\r\n        \tSELECT \r\n            \tcount(*)\r\n            FROM json_array_elements_text(OLD.fncolumns)\r\n            WHERE value::varchar = OLD.id::varchar \r\n        ) > 0\r\n    ) > 0 THEN\r\n    \tPERFORM raiserror('column use in fn columns');\r\n    END IF;\r\n    \r\n\tDELETE FROM framework.visible_condition WHERE configid = OLD.id;\r\n\tDELETE FROM framework.select_condition WHERE configid = OLD.id;\r\n\t\r\n\tDELETE FROM framework.defaultval WHERE configid = OLD.id;\r\n    \r\n    RETURN OLD;\r\n\r\nEND;\r\n	[]
228345	triggers_tr_def_upd	sqlmanager.triggers	2020-05-21 11:30:56.404815	1	sqlmanager.tr_triggers_tr_def_upd	227454	t	t	f	f	f	t	f	f	f	\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n\tIF NOT NEW.noscript\r\n    THEN\r\n        squery = concat('\r\n            CREATE OR REPLACE FUNCTION ',\r\n              NEW.functionname\r\n            ,' ()\r\n            RETURNS trigger AS\r\n            $body$',\r\n              NEW.functiondef\r\n            , '\r\n            $body$\r\n            LANGUAGE ''plpgsql''\r\n            VOLATILE\r\n            CALLED ON NULL INPUT\r\n            SECURITY INVOKER\r\n            COST 100;\r\n        ');\r\n        EXECUTE squery;\r\n\tEND IF;\r\n    \r\n    RETURN NEW;\r\nEND;\r\n	["functiondef"]
228335	tablecolumns_tr_notnull	sqlmanager.tablecolumns	2020-05-21 11:30:56.404815	1	sqlmanager.tr_tablecolumns_tr_notnull	227443	t	t	f	f	f	t	f	f	f	\r\nDECLARE\r\n squery varchar;\r\n _nn varchar(150);\r\nBEGIN\r\n  IF not NEW.noscript \r\n  THEN\r\n  \tIF NEW.notnull \r\n    THEN\r\n    \t_nn = 'SET NOT NULL';\r\n    ELSE\r\n\t\t_nn = 'DROP NOT NULL';\t\t\r\n    END IF;\r\n    \r\n    squery = concat('\t\r\n      ALTER TABLE ',NEW.tablename,'\r\n        ALTER COLUMN "',NEW.colname,'" ', _nn, ';\r\n    ');\r\n    \r\n     EXECUTE format(squery);\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n	["notnull"]
228327	schemalist_tr_ins	sqlmanager.schemalist	2020-05-21 11:30:56.404815	1	sqlmanager.tr_schemalist_tr_ins	227435	t	t	f	f	t	f	f	f	f	\r\nDECLARE\r\n\tsquery varchar;\r\nBEGIN\r\n\r\n\tIF not NEW.noscript\r\n    THEN \r\n        IF COALESCE(NEW.schemaname,'') = ''\r\n        THEN\r\n        \tPERFORM raiserror('Name is empty');\r\n        END IF;\r\n    \t\r\n    \tsquery = concat(\r\n    \t\t'CREATE SCHEMA "',NEW.schemaname,'" \r\n            AUTHORIZATION postgres;'\r\n        );\r\n         IF COALESCE(NEW.schemadescr,'') <> ''\r\n         THEN\r\n            squery = concat(squery,\r\n                'COMMENT ON SCHEMA "',NEW.schemaname,'" \r\n                IS ''',NEW.schemadescr,''';'\r\n            );\r\n         END IF;   \r\n         \r\n         EXECUTE squery;             \r\n        \r\n    END IF;\r\n    \r\n    RETURN NEW;\r\n\t\r\n\r\nEND;\r\n	[]
228524	functionslist_tr_upd	sqlmanager.functionslist	2020-05-21 11:30:56.404815	1	sqlmanager.tr_functionslist_tr_upd	227432	t	t	f	f	f	t	f	f	f	' IN NEW.dll) + 10,\r\n        length(NEW.dll)\r\n       );\r\n      \r\n      NEW.definition =  SUBSTRING(NEW.definition,\r\n        0, POSITION('	["functionschema","functiontitle","fullname","descr","dll","returntype","definition"]
228315	foreignkeys_tr_del	sqlmanager.foreignkeys	2020-05-21 11:30:56.404815	1	sqlmanager.tr_foreignkeys_tr_del	227423	t	t	f	f	f	f	t	f	f	\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n\r\n\tIF NOT OLD.noscript\r\n    THEN\r\n    \tsquery = CONCAT('             \r\n          ALTER TABLE ', OLD.maintablename ,'\r\n  \t\t    DROP CONSTRAINT "', OLD.ftitle ,'" RESTRICT;\r\n        ');\r\n        \r\n        EXECUTE squery;\r\n    END IF;\r\n\tRETURN OLD;\r\n\r\nEND;\r\n	[]
228298	dialogs_tr_ins_after	framework.dialogs	2020-05-21 11:30:56.404815	1	framework.tr_dialogs_tr_ins_after	227365	t	f	t	f	t	f	f	f	f	\r\nDECLARE \r\n\t_id int;\r\n    _users json;\r\nBEGIN\r\n    -- SEND FIRST MESSAGE\r\n    IF NEW.dtype = '1' AND NEW.first_message::varchar <> '{}'\r\n    THEN\r\n      PERFORM framework.fn_dialog_message_send(\r\n         NEW.first_message\r\n      );\r\n    END IF;\r\n\r\n    RETURN NEW;\r\nEND;\r\n	[]
228330	tablecolumns_tr_coldesc	sqlmanager.tablecolumns	2020-05-21 11:30:56.404815	1	sqlmanager.tr_tablecolumns_tr_coldesc	227438	t	t	f	f	f	t	f	f	f	\r\nDECLARE\r\n squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript\r\n  THEN\r\n    squery = concat('\t\r\n      COMMENT ON COLUMN ',NEW.tablename,'.',NEW.colname,'\r\n      IS ''', NEW.coldesc ,''';\r\n    ');\r\n    \r\n     EXECUTE format(squery);\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n	["coldesc"]
228336	tablecolumns_tr_size	sqlmanager.tablecolumns	2020-05-21 11:30:56.404815	1	sqlmanager.tr_tablecolumns_tr_size	227444	t	t	f	f	f	t	f	f	f	\r\nDECLARE\r\n squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript and \r\n  \t NEW.size is not null\r\n  THEN\r\n    squery = concat('\t\r\n\t\tALTER TABLE ',NEW.tablename,'\r\n  \t\t\tALTER COLUMN "',NEW.colname,'" \r\n            TYPE ',NEW.coltype,'(',NEW.size::varchar,');\r\n    ');\r\n    \r\n     EXECUTE format(squery);\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n	["size"]
228338	tablecolumns_tr_uniq	sqlmanager.tablecolumns	2020-05-21 11:30:56.404815	1	sqlmanager.tr_tablecolumns_tr_uniq	227446	t	t	f	f	f	t	f	f	f	\r\n/*\r\n\r\n*/\r\n\r\nDECLARE\r\n squery varchar;\r\n _nn varchar(150);\r\nBEGIN\r\n  IF not NEW.noscript \r\n  THEN\r\n  \tIF NEW.uniq \r\n    THEN\r\n    \t_nn = concat('ADD UNIQUE ("',NEW.colname,'")');\r\n    ELSE\r\n\t\t_nn = CONCAT('DROP CONSTRAINT ',(\r\n            SELECT c.relname\r\n            FROM pg_index as i\r\n                 JOIN pg_class as c on c.oid = i.indexrelid\r\n                 JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace\r\n                 JOIN pg_class as tt on tt.oid = i.indrelid\r\n                 JOIN pg_attribute a on a.attrelid = tt.oid and a.attnum = ANY(i.indkey)\r\n            WHERE concat(n.nspname,'.', tt.relname) = NEW.tablename\r\n                  and i.indisunique and a.attname = NEW.colname\r\n\r\n        ),' RESTRICT;');\t\t\r\n    END IF;\r\n    \r\n    squery = concat('\t\r\n      ALTER TABLE ',NEW.tablename,' ', _nn);\r\n    \r\n     EXECUTE format(squery);\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n	["uniq"]
228347	triggers_tr_enabled	sqlmanager.triggers	2020-05-21 11:30:56.404815	1	sqlmanager.tr_triggers_tr_enabled	227455	t	t	f	f	f	t	f	f	f	\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n\t\r\n\tIF not NEW.noscript and NEW.enables <> OLD.enables\r\n    THEN\r\n\t  squery = concat('\r\n        ALTER TABLE ', NEW.tablename ,'\r\n        \t', (\r\n            \tCASE WHEN NEW.enables\r\n                THEN 'ENABLE'\r\n                ELSE 'DISABLE'\r\n                END\r\n            ) , ' TRIGGER "', NEW.triggername, '";\r\n        '\r\n      );\r\n      \r\n      EXECUTE squery;\r\n\tEND IF;\r\n\t\r\n\tRETURN NEW;\r\nEND;\r\n	["enables"]
228302	select_condition_tr	framework.select_condition	2020-05-21 11:30:56.404815	1	framework.tr_select_condition_tr	227372	f	t	f	f	t	t	f	f	f	\r\nBEGIN\r\n    \r\n\tIF NEW.const is null and NEW.val_desc is null and NEW.operation not like '%null%'\r\n    THEN\r\n    \tPERFORM raiserror('const or value is null');\r\n    END IF;\r\n    \r\n    IF NEW.const is not null and NEW.value is not null\r\n    THEN\r\n    \tNEW.value = null;\r\n    END IF;\r\n    SELECT\r\n    \trow_to_json(d)\r\n    FROM\r\n    (SELECT\r\n    \tc.t,\r\n        c.id as key,\r\n        c.col as label,\r\n        c.title as value\r\n    FROM framework.config as c\r\n    WHERE c.id = NEW.val_desc) as d\r\n    INTO NEW.value;\r\n    \r\n    RETURN NEW;\r\n\r\nEND;\r\n	[]
228289	act_parametrs_tr	framework.act_parametrs	2020-05-21 11:30:56.404815	1	framework.tr_act_parametrs_tr	227354	t	t	f	f	t	t	f	f	f	\r\nBEGIN\r\n\r\n\tIF (\r\n    \tSELECT act_type\r\n        FROM framework.actions\r\n        WHERE id = NEW.actionid\r\n      ) = 'onLoad' and (NEW.paramconst is not null OR \r\n      NEW.val_desc is not null )\r\n    THEN\r\n    \tPERFORM raiserror('onLoad type parametr can be only from url');\r\n    END IF;\r\n    \r\n    RETURN NEW;\r\n\r\nEND;\r\n	[]
228348	triggers_tr_ins	sqlmanager.triggers	2020-05-21 11:30:56.404815	1	sqlmanager.tr_triggers_tr_ins	227456	t	t	f	f	t	f	f	f	f	\r\nDECLARE\r\n\tsquery varchar;\r\nBEGIN\r\n\r\n\r\n\tIF not NEW.noscript \r\n    THEN\r\n      IF COALESCE(NEW.tablename,'') = ''\r\n      THEN \r\n      \tPERFORM raiserror('table name is null');\r\n      END IF;\r\n       \t\r\n    \t\r\n      squery = concat('\r\n          CREATE FUNCTION ',(\r\n            SELECT t.schemaname\r\n            FROM pg_catalog.pg_statio_all_tables as t\r\n            WHERE CONCAT(t.schemaname,'.',t.relname) = NEW.tablename\r\n          ),'."tr_', NEW.triggername, '" (\r\n          )\r\n          RETURNS trigger AS\r\n          $body$ DECLARE BEGIN RETURN NEW; END;\r\n          $body$\r\n          LANGUAGE ''plpgsql''\r\n          VOLATILE\r\n          CALLED ON NULL INPUT\r\n          SECURITY INVOKER;\r\n\r\n          CREATE TRIGGER ', NEW.triggername , '\r\n            ',(\r\n            \tCASE WHEN NEW.onbefore\r\n                THEN 'BEFORE'\r\n                ELSE 'AFTER'\r\n                END\r\n            \r\n            ),' ',sqlmanager.fn_triggeractions_str(\r\n              \tNEW.oninsert,\r\n              \tNEW.onupdate,\r\n                NEW.ondelete,\r\n                NEW.ontruncate\r\n            ),' \r\n            ON ', NEW.tablename , '\r\n            \r\n          FOR EACH ROW \r\n            EXECUTE PROCEDURE ',(\r\n              SELECT t.schemaname\r\n              FROM pg_catalog.pg_statio_all_tables as t\r\n              WHERE CONCAT(t.schemaname,'.',t.relname) = NEW.tablename\r\n          ),'."tr_', NEW.triggername, '"();\r\n      \r\n      ');\r\n      \r\n      EXECUTE squery;\r\n\tEND IF;\r\n\tRETURN NEW;\r\nEND;\r\n	[]
228295	dialog_messages_tr_ins	framework.dialog_messages	2020-05-21 11:30:56.404815	1	framework.tr_dialog_messages_tr_ins	227362	t	t	f	f	t	f	f	f	f	\r\nDECLARE \r\n\t_dialog_users json;\r\n    _status smallint;\r\nBEGIN\r\n\t\r\n\t-- CHECK USER ACCESS IN DIALOG\r\n\tSELECT\r\n    \td.users,\r\n        d.status\r\n    FROM framework.dialogs as d\r\n    WHERE d.id = NEW.dialog_id\r\n    INTO \r\n    \t_dialog_users,\r\n        _status\r\n        ;\r\n    \r\n    IF NEW.userid not in (\r\n    \t\tSELECT value::varchar::int \r\n        \tFROM json_array_elements(_dialog_users)\r\n    \t) \r\n    THEN\r\n    \tPERFORM raiserror('Access denied. User not in dialog');\r\n    END IF;\r\n    \r\n    -- CHECK DIALOG STATUS\r\n    IF _status in ('2')\r\n    THEN\r\n    \tPERFORM raiserror('Dialog is closed');\r\n    END IF;\r\n    \r\n    \r\n    -- CHECK USER ACTIVATION\r\n    IF (\r\n    \tSELECT \r\n        \tcount(u.id)\r\n        FROM framework.users as u\r\n        WHERE u.id = NEW.userid and u.isactive\r\n     ) = 0 \r\n    THEN\r\n    \tPERFORM raiserror('User not found or not active');\r\n    END IF;\r\n     \r\n    -- COPY MESSAGE IF FORWARDED\r\n    IF NEW.forwarded_from IS NOT NULL \r\n    THEN\r\n    \tSELECT\r\n        \td.message_text,\r\n            d.files,\r\n            d.images\r\n        FROM framework.dialog_messages as d\r\n        WHERE d.id = NEW.forwarded_from\r\n        INTO \r\n        \tNEW.message_text,\r\n            NEW.files,\r\n            NEW.images;\r\n    END IF;\r\n    \r\n    -- CHECK MESSAGE TEXT\r\n    NEW.message_text = COALESCE(NEW.message_text,'');\r\n    IF NEW.message_text = '' AND (\r\n      SELECT\r\n          count(*)\r\n      FROM json_array_elements(NEW.files)\r\n \t) = 0 AND (\r\n      SELECT\r\n          count(*)\r\n      FROM json_array_elements(NEW.images)\r\n    ) = 0\r\n    THEN\r\n\t\tPERFORM raiserror('Message is empty');\r\n    END IF;\r\n\r\n    -- DEFAULTS\r\n    NEW.files = COALESCE(NEW.files,'[]');    \r\n    NEW.images = COALESCE(NEW.images,'[]');\r\n    NEW.user_reads = array_to_json(ARRAY(\r\n    \tSELECT\r\n        \tNEW.userid\r\n    ));\r\n    \r\n    \r\n\tRETURN NEW;\r\n\r\nEND;\r\n	[]
228294	config_tr_ins	framework.config	2020-05-21 11:30:56.404815	1	framework.tr_config_tr_ins	227361	t	t	f	f	t	f	f	f	f	\r\nBEGIN\r\n\r\n\tIF (\r\n    \tSELECT \r\n        \tcount(c.id)\r\n        FROM framework.config as c\r\n        WHERE c.title = NEW.title and c.viewid = NEW.viewid\r\n    ) > 0\r\n    THEN\r\n    \tNEW.title = CONCAT(NEW.title,'_',NEW.id::varchar);\r\n    END IF;\r\n\r\n\t-- IF FN PARAMETR IS FN\r\n\tIF NEW.fn is not null\r\n    THEN\r\n    \tIF NEW.fncolumns is not null and (\r\n        \tSELECT\r\n            \tcount(c.id)\r\n            FROM framework.config as c \r\n            \tJOIN json_array_elements_text(NEW.fncolumns) as fc on c.id::varchar = fc.value::varchar\r\n            WHERE c.fn is not null\r\n        ) > 0\r\n        THEN\r\n        \tPERFORM raiserror('fn columns can not be fn');\r\n        END IF;\r\n    END IF;\r\n    \r\n    -- CHECK T NUMBER\r\n    IF NEW.table is NULL AND (\r\n    \tSELECT\r\n        \tcount(c.id)\r\n        FROM framework.config as c\r\n        WHERE c.viewid = NEW.viewid and c.t = NEW.t\r\n       ) > 0\r\n    THEN\r\n    \tSELECT\r\n        \tmax(c.t::int) + 1\r\n        FROM framework.config as c\r\n        WHERE c.viewid = NEW.viewid and isnumeric(c.t)\r\n        INTO NEW.t;     \r\n    END IF;\r\n    \r\n\tRETURN NEW;\r\nEND;\r\n	[]
228329	tablecolumns_tr_accur	sqlmanager.tablecolumns	2020-05-21 11:30:56.404815	1	sqlmanager.tr_tablecolumns_tr_accur	227437	t	t	f	f	f	t	f	f	f	\r\nDECLARE\r\n squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript and NEW.size is not null and\r\n  \t NEW.accur is not null\r\n  THEN\r\n    squery = concat('\t\r\n\t\tALTER TABLE ',NEW.tablename,'\r\n  \t\t\tALTER COLUMN "',NEW.colname,'" \r\n            TYPE ',NEW.coltype,'(',NEW.size::varchar,',',\r\n            NEW.accur::varchar,');\r\n    ');\r\n    \r\n     EXECUTE format(squery);\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n	["accur"]
228342	tablelist_tr_name	sqlmanager.tablelist	2020-05-21 11:30:56.404815	1	sqlmanager.tr_tablelist_tr_name	227450	t	t	f	f	f	t	f	f	f	\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript and \r\n  \t NEW.tablename <> OLD.tablename\r\n  THEN\r\n    squery = concat('\t\r\n      \tALTER TABLE ', \r\n        concat(\r\n        \t'"', NEW.tableschemaname, '"."', \r\n            OLD.tablename, '"'\r\n        ), '\r\n        RENAME TO ', \r\n        concat(\r\n        \t'"', \r\n            NEW.tablename, '"'\r\n        ), ';\r\n    ');\r\n    \r\n     EXECUTE format(squery) ;\r\n    \r\n  END IF;\r\n  \r\n  RETURN NEW;\r\nEND;\r\n	["tablename"]
228308	views_tr_check	framework.views	2020-05-21 11:30:56.404815	1	framework.tr_view_tr_check	227378	t	t	f	f	t	t	f	f	f	\r\nBEGIN\r\n\tIF NEW.viewtype like '%api' and NEW.tablename is NULL THEN\r\n    -- if data-binding from API method - view type is api, tablename is not neccesary\r\n    \tNEW.tablename = '';\r\n    END IF;\r\n    \r\n    SELECT\t\t\r\n    \tCOALESCE(NEW.descr,p.description)\r\n    FROM pg_catalog.pg_statio_all_tables as t\r\n    \tLEFT JOIN pg_catalog.pg_description as p on p.objoid = t.relid\r\n    WHERE concat(t.schemaname::varchar,'.',t.relname::varchar) = NEW.tablename \r\n    INTO NEW.descr;\r\n    \r\n    IF coalesce((\r\n      SELECT\t\t\r\n          p.description\r\n      FROM pg_catalog.pg_statio_all_tables as t\r\n          LEFT JOIN pg_catalog.pg_description as p on p.objoid = t.relid\r\n      WHERE concat(t.schemaname::varchar,'.',t.relname::varchar) = NEW.tablename \r\n      LIMIT 1\r\n    ),'') = '' THEN\r\n       PERFORM raiserror('Table has no description');\r\n    END IF;\r\n\r\n    RETURN NEW;\r\n\r\nEND;\r\n	[]
228341	tablelist_tr_ins	sqlmanager.tablelist	2020-05-21 11:30:56.404815	1	sqlmanager.tr_tablelist_tr_ins	227449	t	t	f	f	t	f	f	f	f	\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript \r\n  THEN\r\n  \r\n  \tIF COALESCE(NEW.tableschemaname, '') = ''\r\n    THEN\r\n    \tPERFORM raiserror('Schema name is empty');\r\n    END IF;\r\n    \r\n  \tIF COALESCE(NEW.tablename, '') = ''\r\n    THEN\r\n    \tPERFORM raiserror('Table name is empty');\r\n    END IF;\r\n    \r\n    NEW.fullname = concat('"', NEW.tableschemaname, '"."', NEW.tablename,'"');\r\n    \r\n    squery = concat('\t\r\n        CREATE TABLE "', NEW.tableschemaname, '"."', NEW.tablename, '" (\r\n          id SERIAL NOT NULL,\r\n          PRIMARY KEY(id)\r\n        ) \r\n        WITH (oids = false);\r\n    ');\r\n    \r\n    IF COALESCE(NEW.descr,'') <> ''\r\n    THEN\r\n    \tsquery = concat(squery,'\r\n          COMMENT ON TABLE "', NEW.tableschemaname, '"."', NEW.tablename, '"\r\n          IS ''', NEW.descr, ''';'\r\n        );\r\n    END IF;  \r\n    \r\n    EXECUTE format(squery) ;\r\n    \r\n  END IF;\r\n  \r\n  RETURN NEW;\r\n  \r\nEND;\r\n	[]
228307	users_tr	framework.users	2020-05-21 11:30:56.404815	1	framework.tr_user_check	227377	t	t	f	f	t	t	f	f	f	\r\nDECLARE \r\n\tuseroles json;\r\n    \r\nBEGIN\r\n\r\n    IF NEW.fam is not null and NEW.fam = '' THEN\r\n    \tperform raiserror('fam is null');\r\n    END IF;\r\n    IF NEW.im is not null and NEW.im = '' THEN\r\n    \tperform raiserror('im is null');\r\n    END IF;\r\n\r\n    IF NEW.login is not null and NEW.login = '' THEN\r\n    \tperform raiserror('login is null');\r\n    END IF;\r\n    IF TG_OP = 'INSERT' and NEW.password is null THEN\r\n    \tperform raiserror('password is null');\r\n    END IF;\r\n    IF TG_OP = 'UPDATE' and NEW.password is not null and NEW.password = 'd14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f' THEN\r\n    \tNEW.password = OLD.password;\r\n    END IF;\r\n\r\n\r\n\tIF NEW.roles is not null and  NEW.roles::varchar not like '[%]' THEN\r\n    \tperform raiserror('roles format error');\r\n    END IF;\r\n\tIF NEW.orgs is not null and  NEW.orgs::varchar not like '[%]' THEN\r\n    \tperform raiserror('orgs format error');\r\n    END IF;\r\n\t\r\n\tIF NEW.orgid is null and NEW.orgs is not null\r\n\tTHEN\r\n\t   SELECT\r\n\t      value::varchar::int\r\n\t   FROM json_array_elements_text(NEW.orgs)\r\n\t   LIMIT 1\r\n\t   INTO NEW.orgid;\r\n\tEND IF;\r\n\t\r\n\tIF NEW.roles is not null and (SELECT count(*) FROM json_array_elements_text(NEW.roles)) = 0 THEN\r\n    \tperform raiserror('no roles');\r\n    END IF;\r\n    \r\n    SELECT\r\n    \t roles\r\n    FROM framework.users\r\n    WHERE id = NEW.userid\r\n    INTO useroles;\r\n    \r\n\r\n    IF TG_OP = 'UPDATE' and NEW.roles::VARCHAR<>OLD.roles::varchar THEN\r\n      \t\r\n       IF (SELECT \r\n          coalesce( min(r.hierarchy),100000)\r\n        FROM  json_array_elements_text(Old.roles) as o\r\n          JOIN framework.roles as r on r.id = o.value::varchar::smallint) <\r\n        (SELECT \r\n              coalesce( min(r.hierarchy),100000)\r\n        FROM  json_array_elements_text(useroles) as o\r\n          JOIN framework.roles as r on r.id = o.value::varchar::smallint) THEN\r\n         perform raiserror('u can not change the roles');\r\n         \r\n       END IF;   \r\n  \r\n          \r\n    END IF;\r\n\r\n    return NEW;\r\nEND;\r\n	["password","roles","orgs","userid"]
228309	views_tr_del	framework.views	2020-05-21 11:30:56.404815	1	framework.tr_views_tr_del	227379	t	t	f	f	f	f	t	f	f	\r\nDECLARE \r\n\tolddata json;\r\nBEGIN\r\n/*\r\n    SELECT row_to_json(d)\r\n    FROM\r\n    (SELECT \r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.actions\r\n          WHERE viewid = OLD.id \r\n      ) as d) as actions,\r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.visible_condition\r\n          WHERE configid in (\r\n              SELECT id FROM framework.config WHERE viewid = OLD.id\r\n            )\r\n      ) as d) as visible_condition,\r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.select_condition\r\n          WHERE configid in (\r\n              SELECT id FROM framework.config WHERE viewid = OLD.id\r\n            )\r\n      ) as d) as select_condition,\r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.defaultval\r\n          WHERE configid in (\r\n             SELECT id FROM framework.config WHERE viewid = OLD.id\r\n          )\r\n      ) as d) as defaultval,\r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.config\r\n          WHERE viewid = OLD.id \r\n      ) as d) as config,\r\n      (\r\n        SELECT \r\n            array_to_json(array_agg(row_to_json(d)))\r\n        FROM ( \r\n          SELECT *\r\n          FROM framework.filters\r\n          WHERE viewid = OLD.id \r\n      ) as d) as filters\r\n    ) as d\r\n    INTO olddata;\r\n*/    \r\n    \r\n    \r\n   -- UPDATE framework.views SET config = olddata WHERE id = OLD.id;\r\n    DELETE FROM framework.act_parametrs WHERE val_desc in (\r\n      SELECT id FROM framework.config WHERE viewid = OLD.id\r\n    ); \r\n    \r\n   DELETE FROM framework.act_visible_condions WHERE val_desc in (\r\n      SELECT id FROM framework.config WHERE viewid = OLD.id\r\n    ); \r\n    DELETE FROM framework.actions WHERE viewid = OLD.id;    \r\n        \r\n\tDELETE FROM framework.visible_condition WHERE configid in (\r\n      SELECT id FROM framework.config WHERE viewid = OLD.id\r\n    );\r\n    \r\n\tDELETE FROM framework.visible_condition WHERE val_desc in (\r\n      SELECT id FROM framework.config WHERE viewid = OLD.id\r\n    );\r\n    \r\n\tDELETE FROM framework.select_condition WHERE configid in (\r\n      SELECT id FROM framework.config WHERE viewid = OLD.id\r\n    );\r\n    \r\n\tDELETE FROM framework.select_condition WHERE val_desc in (\r\n      SELECT id FROM framework.config WHERE viewid = OLD.id\r\n    ); \r\n    \r\n\tDELETE FROM framework.defaultval WHERE configid in (\r\n      SELECT id FROM framework.config WHERE viewid = OLD.id\r\n    );\r\n    DELETE FROM framework.filters WHERE val_desc in (\r\n      SELECT id FROM framework.config WHERE viewid = OLD.id\r\n    );\r\n    DELETE FROM framework.filters WHERE viewid = OLD.id;\r\n\r\n\tDELETE FROM framework.config WHERE viewid = OLD.id and fn is not null;\r\n\tDELETE FROM framework.config WHERE viewid = OLD.id and fn is null;\t\r\n\t\r\n    \r\n/*    \r\n    INSERT INTO framework.logtable(\r\n      tablename, tableid, \r\n      opertype, oldata, newdata,\r\n      userid\r\n    ) VALUES (\r\n    \t'framework.views', OLD.id::varchar,\r\n        '3', olddata, '[]'::json,\r\n        1\r\n    );\r\n*/    \r\n    RETURN OLD;  \r\n\r\nEND;\r\n	[]
228332	tablecolumns_tr_defval	sqlmanager.tablecolumns	2020-05-21 11:30:56.404815	1	sqlmanager.tr_tablecolumns_tr_defval	227440	t	t	f	f	f	t	f	f	f	\r\nDECLARE\r\n squery varchar;\r\n _nn varchar(150);\r\nBEGIN\r\n  IF not NEW.noscript  \r\n  THEN\r\n  \tIF COALESCE(NEW.defval,'') <> ''\r\n    THEN\r\n    \t_nn = CONCAT(\r\n        \t'ALTER COLUMN "', \r\n            NEW.colname, \r\n            '" SET DEFAULT ',\r\n            NEW.defval, ';'\r\n        );\r\n    ELSE\r\n    \t_nn = CONCAT(\r\n        \t'ALTER COLUMN "', \r\n            NEW.colname, \r\n            '" DROP DEFAULT;'\r\n        );\r\n    END IF;\r\n  \r\n -- ALTER COLUMN col5 ;\r\n    squery = concat('\t\r\n      ALTER TABLE ', NEW.tablename, ' ', _nn, '\r\n        \r\n    ');\r\n    \r\n     EXECUTE format(squery);\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n	["defval"]
228317	foreignkeys_tr_maincol	sqlmanager.foreignkeys	2020-05-21 11:30:56.404815	1	sqlmanager.tr_foreignkeys_tr_maincol	227425	t	t	f	f	f	t	f	f	f	\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n\tIF NOT NEW.noscript AND (\r\n    \tOLD.maincol <> NEW.maincol OR \r\n        OLD.parentablename <> NEW.parentablename OR\r\n        OLD.parentcol <> NEW.parentcol\r\n    )\r\n    THEN\r\n    \tsquery = concat('\r\n          -- object recreation\r\n          ALTER TABLE ', NEW.maintablename ,'\r\n            DROP CONSTRAINT "', NEW.ftitle , '" RESTRICT;\r\n\r\n          ALTER TABLE ', NEW.maintablename ,'\r\n            ADD CONSTRAINT "', NEW.ftitle, '" \r\n            FOREIGN KEY ("' , NEW.maincol , '")\r\n              REFERENCES ', NEW.parentablename,'("', NEW.parentcol ,'")\r\n              ON DELETE NO ACTION\r\n              ON UPDATE NO ACTION\r\n              NOT DEFERRABLE;\r\n          ');\r\n        \r\n        EXECUTE squery;\r\n    END IF;\r\n\t\r\n    RETURN NEW;\r\nEND;\r\n	["parentablename","maincol","parentcol"]
228303	spapi_tr	framework.spapi	2020-05-21 11:30:56.404815	1	framework.tr_spapi_tr	227373	t	t	f	f	t	t	f	f	f	\r\nBEGIN\r\n\t\r\n\t-- existing in db\r\n\tIF (\r\n      SELECT \r\n        count(p.proname)\r\n      FROM pg_proc p \r\n      INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n      WHERE format('%I.%I', ns.nspname, p.proname) = NEW.procedurename \r\n    ) = 0 THEN\r\n    \tPERFORM raiserror('Can not found selected function');\r\n    END IF;\r\n    \r\n    -- Check function description\r\n    IF COALESCE((\r\n      SELECT \r\n          pd.description\r\n      FROM pg_proc p \r\n          INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n          LEFT JOIN pg_catalog.pg_description as pd on p.oid = pd.objoid\r\n      WHERE format('%I.%I', ns.nspname, p.proname) = NEW.procedurename \r\n    ),'') = '' THEN\r\n    \tPERFORM raiserror('Function without description');\r\n    END IF;\r\n    \r\n    -- IN parametr check\r\n    IF (\r\n      SELECT count(p.proname)\t\r\n      FROM pg_proc p \r\n          INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n          LEFT JOIN pg_catalog.pg_description as pd on p.oid = pd.objoid\r\n          LEFT JOIN pg_type as pt on pt.oid = p.proargtypes[0]::int\r\n      WHERE format('%I.%I', ns.nspname, p.proname) = NEW.procedurename \r\n      and p.proargnames[1] = 'injson' and upper(pt.typname) like '%JSON' \r\n      --and p.proargmodes[1] = 'i'\r\n    ) = 0 THEN\r\n    \tPERFORM raiserror('Check injson parametr');\r\n    END IF;\r\n    \r\n\t-- title\r\n\tIF (\r\n      SELECT \r\n        p.proname\r\n      FROM pg_proc p \r\n      INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n      WHERE format('%I.%I', ns.nspname, p.proname) = NEW.procedurename \r\n    ) not like 'fn_%' THEN\r\n    \tPERFORM raiserror('Function title must begun with fn_');\r\n    END IF;\r\n    \r\n    -- check api method path\r\n    new.methodname = regexp_replace(new.methodname, '[^a-z0-9_]-', '', 'g');\r\n    \r\n    RETURN NEW;\r\n\r\nEND;\r\n	[]
228343	triggers_tr_beforafter	sqlmanager.triggers	2020-05-21 11:30:56.404815	1	sqlmanager.tr_triggers_tr_beforafter	227452	t	t	f	f	f	t	f	f	f	\r\nDECLARE\r\n    squery varchar;\r\n    splus varchar;\r\n    \r\nBEGIN\r\n\r\n\tIF NOT NEW.noscript  \r\n    THEN\r\n    \tIF OLD.onbefore <> NEW.onbefore\r\n        THEN\r\n        \tsplus = (\r\n              \tCASE WHEN NEW.onbefore\r\n              \tTHEN 'BEFORE'\r\n                ELSE 'AFTER'\r\n                END\r\n            );\r\n        \t\r\n            IF NEW.onbefore THEN\r\n              \tNEW.onafter = false;\r\n            ELSE\r\n            \tNEW.onafter = true;\r\n            END IF;\r\n        \r\n    \tELSE \r\n          IF OLD.onafter <> NEW.onafter\r\n          THEN\r\n              splus = (\r\n                  CASE WHEN NEW.onafter\r\n                  THEN 'AFTER'\r\n                  ELSE 'BEFORE'\r\n                  END\r\n              );\r\n              \r\n              IF NEW.onafter THEN\r\n              \tNEW.onbefore = false;\r\n              ELSE\r\n              \tNEW.onbefore = true;\r\n              END IF;\r\n          END IF;\r\n        END IF;\r\n        \r\n    \tsquery = CONCAT('\r\n            -- object recreation\r\n            DROP TRIGGER ', NEW.triggername, ' \r\n            ON ', NEW.tablename , ';\r\n\r\n            CREATE TRIGGER ', NEW.triggername, '\r\n              ', splus, ' ', sqlmanager.fn_triggeractions_str(\r\n              \tNEW.oninsert,\r\n              \tNEW.onupdate,\r\n                NEW.ondelete,\r\n                NEW.ontruncate\r\n              ), ' \r\n              ON ', NEW.tablename , '\r\n              \r\n            FOR EACH ROW \r\n              EXECUTE PROCEDURE ', NEW.functionname , '();\r\n        ');\r\n        \r\n        EXECUTE squery;\r\n    \t\r\n    END IF;\r\n\t\r\n\tRETURN NEW;\r\nEND;\r\n	["onbefore","onafter"]
228297	dialogs_tr_ins	framework.dialogs	2020-05-21 11:30:56.404815	1	framework.tr_dialogs_tr_ins	227364	t	t	f	f	t	f	f	f	f	\r\nBEGIN\r\n\t\r\n\t-- IF PERSONAL DIALOG\r\n\tIF NEW.dtype = '1' \r\n    THEN\r\n    \tIF (\r\n        \tSELECT count(*) \r\n        \tFROM json_array_elements(NEW.users)\r\n        ) <> 2\r\n        THEN\r\n        \tPERFORM raiserror('For pesonal dialog must be 2 users');\r\n        END IF;\r\n        \r\n        \r\n    \tNEW.title = COALESCE(NEW.title,\r\n        \t(\r\n              SELECT\r\n                  string_agg(us.login,',') \r\n              FROM json_array_elements(NEW.users) as u\r\n                  JOIN framework.users as us on us.id = u.value::varchar::int\r\n            )\r\n        );\r\n        \r\n        -- CHECK DUBLICATES\r\n        IF (\r\n        \tSELECT \t\r\n            \tcount(d.id)\r\n        \tFROM framework.dialogs as d\r\n            WHERE  d.dtype = NEW.dtype and (\r\n            \tSELECT count(*) \r\n                FROM json_array_elements(NEW.users) as u1\r\n                \tJOIN json_array_elements(d.users) as u2 on u1.value::varchar::int = u2.value::varchar::int\r\n            ) = 2\r\n        ) > 0\r\n        THEN\r\n        \tPERFORM raiserror('Dialog already exist');\r\n        END IF;\r\n        \r\n        \r\n    END IF; \r\n    \r\n    -- CHECK USERS\r\n    IF (\r\n    \tSELECT count(*) \r\n    \tFROM json_array_elements(NEW.users)\r\n    ) <> (\r\n      SELECT\r\n     \t count(*)\r\n      FROM json_array_elements(NEW.users) as u\r\n      \tJOIN framework.users as us on us.id = u.value::varchar::int\r\n      WHERE us.isactive\r\n    )\r\n    THEN\r\n    \tPERFORM raiserror('One of dialogs user are not found or not active');\r\n    END IF;\r\n    \r\n    NEW.creator = NEW.userid;\r\n    \r\n    -- SET ADMINS BY DEFAULT\r\n\tNEW.dialog_admins = array_to_json(\r\n    \tARRAY(\r\n        \tSELECT NEW.userid\r\n        )\r\n    );\r\n    \r\n\tRETURN NEW;\r\nEND;\r\n	[]
228312	reportlist_tr	reports.reportlist	2020-05-21 11:30:56.404815	1	reports.tr_reportlist_tr	227401	t	t	f	f	f	t	f	f	f	\r\nBEGIN\r\n  IF NEW."template" is not null THEN\r\n    IF (\r\n\t  SELECT\r\n          count(*)\r\n      FROM json_array_elements_text(NEW."template")\r\n\t)>1 \r\n\tTHEN\r\n    \tPERFORM raiserror('more than 1 file');\r\n    END IF;  \r\n\t\r\n    IF NEW."template"->0 is not null THEN\r\n    \tNEW.template_path = (NEW."template"->0)::json->>'uri';\r\n        IF (NEW."template"->0)::json->>'filename' not like '%.xlsx' THEN\r\n\t    \tPERFORM raiserror('template must be xlsx');\t\r\n        END IF; \r\n    END IF; \r\n  END IF;\r\n  \r\n  IF NEW.functitle is not null THEN\r\n    IF (SELECT \r\n          count(*)\r\n        FROM pg_proc p \r\n        INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\r\n        WHERE ns.nspname not in ('pg_catalog','information_schema') and \r\n        \t\tformat('%I.%I', ns.nspname, p.proname) = NEW.functitle) = 0 THEN\r\n\t    \tPERFORM raiserror('can not found function');\t\r\n    END IF;\r\n  END IF; \r\n  \r\n  \r\n  NEW.filename = (NEW."template"->0)::json->>'filename';\r\n  NEW.completed = false;\r\n  \r\n  IF \r\n  \tcoalesce(NEW.title,'') <>'' and\r\n \tCOALESCE(NEW."path",'')<>'' and\r\n  \tNEW.template is not null and\r\n  \tcoalesce(NEW.template_path,'')<>'' and\r\n  \tcoalesce(NEW.functitle,'')<>'' and\r\n  \r\n  \tcoalesce(NEW.section,'')<>'' \r\n    \r\n  THEN\r\n  \t NEW.completed = true;\r\n  END IF;   \r\n  \r\n  RETURN NEW;\r\nEND;\r\n	["title","path","template","functitle","section"]
228305	trees_tr_del	framework.trees	2020-05-21 11:30:56.404815	1	framework.tr_trees_tr_del	227375	t	t	f	f	f	f	t	f	f	\r\nBEGIN\r\n\r\n\tDELETE FROM framework.treesbranches WHERE treesid = OLD.id;\r\n    DELETE FROM framework.treesacts WHERE treesid = OLD.id;\r\n    \r\n    RETURN OLD; \r\n\r\nEND;\r\n	[]
228310	views_tr_ins_after	framework.views	2020-05-21 11:30:56.404815	1	framework.tr_views_tr_ins_after	227380	t	f	t	f	t	f	f	f	f	\r\nBEGIN\r\n\tIF not NEW.copy THEN\r\n      INSERT INTO framework.config (\r\n        viewid, t, col, column_id, title, type,\r\n        roles, visible, required, width,\r\n        "join", classname, updatable,\r\n        relation, select_api, multiselecttable,\r\n        orderby, orderbydesc, relcol,\r\n        depency, depencycol, relationcolums,\r\n        multicolums, column_order, fn,\r\n        fncolumns, relatecolumn, "table",\r\n        related\r\n      )\r\n      SELECT \r\n        NEW.id, c.value->>'t' as t, c.value->>'col' as col, \r\n        (c.value->>'column_id')::INTEGER as column_id,\r\n        c.value->>'title' as title, c.value->>'type' as type,\r\n        \r\n        (CASE WHEN (c.value->>'roles')::varchar like '[%'\r\n        THEN\r\n        json_build_array(array(SELECT\r\n                value->'value'\r\n           FROM json_array_elements((c.value->>'roles')::json)\r\n        ))->0\r\n        ELSE\r\n            '[]'::json\r\n        END) as roles,\r\n         \r\n        coalesce((c.value->>'visible' )::BOOLEAN,false) as visible,\r\n        COALESCE((c.value->>'required')::BOOLEAN,false) as required,\r\n        c.value->>'width' as width,\r\n        COALESCE((c.value->>'join')::BOOLEAN,false) as join,\r\n        c.value->>'classname' as classname,\r\n        COALESCE((c.value->>'updatable')::BOOLEAN,false) as updatable,\r\n        c.value->>'relation' as relation,\r\n        c.value->>'select_api' as select_api,   \r\n        c.value->>'multiselecttable' as multiselecttable,\r\n        COALESCE((c.value->>'orderby')::BOOLEAN,false) as orderby,\r\n        COALESCE((c.value->>'orderbydesc')::BOOLEAN,false) as orderbydesc,\r\n        c.value->>'relcol' as relcol,\r\n        COALESCE((c.value->>'depency')::BOOLEAN,false) as depency,\r\n        c.value->>'depencycol' as depencycol,\r\n        \r\n        (CASE WHEN (c.value->>'relationcolums')::varchar like '[%'\r\n        THEN\r\n        json_build_array(array(SELECT\r\n                value->'value'\r\n           FROM json_array_elements((c.value->>'relationcolums')::json)\r\n        ))->0\r\n        ELSE\r\n         '[]'::json\r\n        END) as relationcolums,\r\n         \r\n        (CASE WHEN (c.value->>'multicolums')::varchar like '[%'\r\n        THEN\r\n            json_build_array(array(SELECT\r\n                value->'value'\r\n           FROM json_array_elements((c.value->>'multicolums')::json)\r\n            ))->0\r\n        ELSE\r\n            '[]'::json\r\n        END\r\n        ) as multicolums,\r\n        \r\n        (row_number() over (PARTITION BY 0))*10 as column_order,\r\n        (c.value->'fn')->>'value' as fn,\r\n        \r\n        (CASE WHEN (c.value->>'fncolumns')::varchar like '[%'\r\n        THEN\r\n           json_build_array(array(SELECT\r\n                value->'value'\r\n           FROM json_array_elements((c.value->'fncolumns')::json)\r\n        ))->0 \r\n        ELSE\r\n         null\r\n        END ) as fncolumns,\r\n        \r\n        c.value->>'relatecolumn',\r\n        c.value->>'table',\r\n        coalesce((c.value->>'related')::boolean,false)\r\n     FROM json_array_elements(framework.fn_createconfig(json_build_object('tabname',NEW.tablename ))) as c;\t\r\n\tEND IF;\r\n\tRETURN NEW;\r\nEND;\r\n	[]
228333	tablecolumns_tr_del	sqlmanager.tablecolumns	2020-05-21 11:30:56.404815	1	sqlmanager.tr_tablecolumns_tr_del	227441	t	t	f	f	f	f	t	f	f	\r\nDECLARE\r\n   squery varchar;\r\n\r\nBEGIN\r\n\r\n\tIF not OLD.noscript\r\n    THEN\r\n      squery = concat('\r\n          ALTER TABLE ',OLD.tablename,'\r\n            DROP COLUMN "',OLD.colname,'";'\r\n      );\r\n      \r\n      EXECUTE squery;    \r\n    END IF;\r\n    \r\n    RETURN OLD;\r\n\r\nEND;\r\n	[]
228299	filters_tr	framework.filters	2020-05-21 11:30:56.404815	1	framework.tr_filters_tr	227366	t	t	f	f	t	t	f	f	f	\r\nBEGIN\r\n\t\r\n\t-- get column title\r\n\tIF NEW.val_desc is not NULL\r\n    THEN \r\n    \tSELECT\r\n        \tcol, t\r\n        FROM framework.config\r\n        WHERE id = NEW.val_desc\r\n        INTO NEW."column", NEW.t;\r\n        IF /*(\r\n          SELECT\r\n              relation\r\n          FROM framework.config\r\n          WHERE id = NEW.val_desc\r\n        ) is null AND*/ (\r\n          SELECT\r\n              "table"\r\n          FROM framework.config\r\n          WHERE id = NEW.val_desc\r\n        ) is null \r\n        THEN\r\n        \tNEW.t = '1';\r\n        END IF;\r\n\t\t\r\n        \r\n\tEND IF;\r\n    \r\n    -- columns only for typehead type\r\n    IF NEW.type<>'typehead' THEN\r\n    \tNEW.columns = '[]'::json;\r\n    ELSE\r\n    \tNEW."column" = null;\r\n    END IF;\r\n    \r\n    RETURN NEW;\r\nEND;\r\n	[]
228346	triggers_tr_del	sqlmanager.triggers	2020-05-21 11:30:56.404815	1	sqlmanager.tr_trigger_del	227451	t	t	f	f	f	f	t	f	f	\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n\tIF NOT OLD.noscript\r\n    THEN\r\n      squery = CONCAT('\r\n          DROP TRIGGER "', OLD.triggername , '" ON ', OLD.tablename, ';\r\n      ');\r\n      EXECUTE squery;\r\n    END IF;\r\n    \r\n    RETURN OLD;\r\nEND;\r\n	[]
228318	foreignkeys_tr_title	sqlmanager.foreignkeys	2020-05-21 11:30:56.404815	1	sqlmanager.tr_foreignkeys_tr_title	227426	t	t	f	f	f	t	f	f	f	\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n\r\n\tIF NOT NEW.noscript and OLD.ftitle <> NEW.ftitle\r\n    THEN\r\n      squery = concat('\r\n        ALTER TABLE ', NEW.maintablename ,'\r\n          RENAME CONSTRAINT "',OLD.ftitle,'" TO "', NEW.ftitle  , '";\r\n      ');\r\n      \r\n      EXECUTE squery;\r\n          \r\n    END IF;\r\n    RETURN NEW;\r\nEND;\r\n	["ftitle"]
228618	major_table_tr	test.major_table	2020-05-21 14:12:37.377736	1	test.tr_major_table_tr	227480	t	t	f	f	t	t	f	f	f	\r\nBEGIN\r\n\r\n\tNEW.gallery = NEW.images;\r\n    NEW.color = NEW.colorpicker;\r\n    NEW.colorrow = NEW.colorpicker;\r\n    IF NEW.colorpicker is not null and NEW.colorpicker not like '#%'\r\n    THEN\r\n    \tNEW.color = concat('#',NEW.color);\r\n    \tNEW.colorrow = concat('#',NEW.colorrow);\r\n    END IF;\r\n    NEW.link = json_build_object('title', NEW.text, 'link', concat('/view/',NEW.number));\r\n    NEW.label = NEW.text;\r\n    NEW.html = NEW.texteditor;\r\n    \r\n    RETURN NEW;\r\n\r\nEND;\r\n\r\n            \r\n            \r\n            \r\n            	["text"]
228521	functionslist_tr_desc	sqlmanager.functionslist	2020-05-21 11:30:56.404815	1	sqlmanager.tr_functionslist_tr_desc	227429	t	t	f	f	f	t	f	f	f	\r\nDECLARE\r\n    squery varchar;\r\nBEGIN\r\n\t\r\n  IF not NEW.noscript and COALESCE(NEW.descr,'') <> ''\r\n  THEN\r\n    squery = concat('\t\r\n        COMMENT ON FUNCTION ', NEW.fullname ,'\r\n        IS ''', NEW.descr ,''';\r\n    ');\r\n    \r\n     EXECUTE format(squery) ;\r\n    \r\n  END IF;\r\n  RETURN NEW;\r\n\r\nEND;\r\n	["descr"]
228322	functionslist_tr_dll	sqlmanager.functionslist	2020-05-21 11:30:56.404815	1	sqlmanager.tr_functionslist_tr_dll	227430	f	t	f	f	f	t	f	f	f	\r\nBEGIN\r\n  IF not NEW.noscript and OLD.dll <> NEW.dll\r\n  THEN    \r\n     EXECUTE format(NEW.dll) ;\r\n  END IF;\r\n  RETURN OLD;\r\n  \r\n\r\nEND;\r\n	["dll"]
228319	functionslist_tr_args	sqlmanager.functionslist	2020-05-21 11:30:56.404815	1	sqlmanager.tr_functionslist_tr_args	227427	t	t	f	f	t	t	f	f	f	\r\nDECLARE\r\n  \r\nBEGIN\r\n\tIF NEW.noscript\r\n    THEN\r\n      NEW.args =  COALESCE(NEW.args,'[]');\r\n      IF NEW.args::varchar <> '[]'\r\n      THEN\r\n          INSERT INTO sqlmanager.functionargs (\r\n            argname, argtype, argmode,\r\n            oid, userid\r\n          )\r\n          SELECT\r\n              value->>'argname', value->>'argtype', value->>'argmode',\r\n              NEW.id, NEW.userid\r\n          FROM json_array_elements(NEW.args) as a\r\n          WHERE  (\r\n              SELECT count(f.id)\r\n              FROM sqlmanager.functionargs as f\r\n              WHERE f.argname = value->>'argname' and\r\n                    f.argtype = value->>'argtype' and\r\n                    f.argmode = value->>'argmode' and\r\n                    f.oid = NEW.id\r\n          ) = 0;\r\n      END IF;\r\n    END IF;\r\n    \r\n    RETURN NEW;\r\n\r\nEND;\r\n	["args"]
228334	tablecolumns_tr_ins	sqlmanager.tablecolumns	2020-05-21 11:30:56.404815	1	sqlmanager.tr_tablecolumns_tr_ins	227442	t	t	f	f	t	f	f	f	f	\r\nDECLARE\r\n squery varchar;\r\nBEGIN\r\n\tIF not NEW.noscript\r\n    THEN\r\n      IF COALESCE(NEW.colname,'') = ''\r\n      THEN \r\n          PERFORM raiserror('Name is empty');\r\n      END IF;\r\n      \r\n      IF COALESCE(NEW.tablename,'') = ''\r\n      THEN \r\n          PERFORM raiserror('tablename is empty');\r\n      END IF;\r\n      \r\n      NEW.coltype = COALESCE(NEW.coltype,'int');\r\n      squery = concat('\r\n        ALTER TABLE ',NEW.tablename,'\r\n          ADD COLUMN "',NEW.colname,'" ',NEW.coltype\r\n      );\r\n      \r\n      -- Type size\r\n      IF NEW.size is not null\r\n      THEN\r\n        squery = concat( squery, '(', NEW.size::varchar);\r\n        IF NEW.accur is not null\r\n        THEN\r\n          squery = concat( squery, ',', NEW.accur::varchar);\r\n        END IF;\r\n        squery = concat(squery, ')');\r\n      END IF;\r\n      \r\n      IF COALESCE(NEW.defval,'') <> ''\r\n      THEN\r\n        squery = concat(squery, ' DEFAULT ''', NEW.defval,'''');\r\n      END IF;\r\n      \r\n      IF NEW."notnull"\r\n      THEN\r\n        squery = concat( squery, ' NOT NULL ');\r\n      END IF;\r\n      \r\n\r\n      \r\n      squery = concat(squery,';');\r\n      \r\n      IF COALESCE(NEW.coldesc,'') <> ''\r\n      THEN\r\n      \tsquery = concat(squery ,'\r\n        \tCOMMENT ON COLUMN ', NEW.tablename, '."', NEW.colname,'"\r\n        \tIS ''', NEW.coldesc, ''';'\r\n        );\r\n      END IF;\r\n      \r\n      EXECUTE squery;\r\n      \r\n    END IF;\r\n\r\n\r\n\tRETURN NEW;\r\nEND;\r\n	[]
228352	major_table_tr_2	test.major_table	2020-05-21 11:30:56.404815	1	test.tr_major_table_tr1	227481	t	t	f	f	f	t	f	f	f	\r\nBEGIN\r\n\t--PERFORM raiserror(TG_TAG::varchar);\r\n\tRETURN NEW;\r\nEND;\r\n	[]
228328	schemalist_tr_name	sqlmanager.schemalist	2020-05-21 11:30:56.404815	1	sqlmanager.tr_schemalist_tr_name	227436	t	t	f	f	f	t	f	f	f	\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript and \r\n  \t NEW.schemaname <> OLD.schemaname\r\n  THEN\r\n    squery = concat('\t\r\n        ALTER SCHEMA ',OLD.schemaname,'\r\n        RENAME TO ',NEW.schemaname,';\r\n    ');\r\n    \r\n     EXECUTE format(squery) ;\r\n    \r\n  END IF;\r\n  \r\n  RETURN NEW;\r\n  \r\nEND;\r\n	["schemaname"]
228301	menus_tr_del	framework.menus	2020-05-21 11:30:56.404815	1	framework.tr_menus_tr_del	227369	t	t	f	f	f	f	t	f	f	\r\nBEGIN\r\n\r\n\tIF OLD.ismainmenu = true THEN\r\n    \tPERFORM raiserror('Access denied. It is main menu');\r\n    END IF;\r\n    \r\n    DELETE FROM framework.mainmenu WHERE menuid = OLD.id;\r\n    \r\n    RETURN OLD;\r\nEND;\r\n	[]
228313	reportlist_tr_ins	reports.reportlist	2020-05-21 11:30:56.404815	1	reports.tr_reportlist_tr_ins	227402	t	t	f	f	t	f	f	f	f	\r\nBEGIN\r\n\r\n\tNEW.title = upper(trim(NEW.title));\r\n    NEW.path = trim(NEW.path);\r\n    \r\n    \r\n    RETURN NEW;\r\n\r\nEND;\r\n	[]
228306	treesbranches_tr	framework.treesbranches	2020-05-21 11:30:56.404815	1	framework.tr_treesbranch_check	227376	t	t	f	f	t	t	f	f	f	\r\nBEGIN\r\n\tIF TG_OP = 'UPDATE' and  NEW.compoid is not null and OLD.compoid is null  THEN\r\n    \tNEW.viewid = null;\r\n    END IF;\r\n    \r\n\tIF TG_OP = 'UPDATE' and NEW.viewid is not null and OLD.viewid is null  THEN\r\n    \tNEW.compoid = null;\r\n    END IF;    \r\n    \r\n\tIF NEW.ismain THEN\r\n    \tUPDATE framework.treesbranches\r\n        SET ismain = false\r\n        WHERE treesid = NEW.treesid and id<>NEW.id;\r\n    END IF;\r\n    \r\n    return \tNEW;\r\nEND;\r\n	["viewid","compoid","ismain"]
228323	functionslist_tr_ins	sqlmanager.functionslist	2020-05-21 11:30:56.404815	1	sqlmanager.tr_functionslist_tr_ins	227431	t	t	f	f	t	f	f	f	f	' IN NEW.dll) + 10,\r\n    length(NEW.dll)\r\n  );\r\n  \r\n  NEW.definition =  SUBSTRING(NEW.definition,\r\n    0, POSITION('	[]
228296	dialogs_tr_edit	framework.dialogs	2020-05-21 11:30:56.404815	1	framework.tr_dialogs_tr_edit	227363	t	t	f	f	f	t	f	f	f	\r\nBEGIN\r\n\r\n   IF NEW.dtype = '1' THEN\r\n      NEW.title = OLD.title;\r\n   END IF;\r\n   \r\n   RETURN NEW;\r\n  \r\nEND;\r\n	[]
228331	tablecolumns_tr_colname	sqlmanager.tablecolumns	2020-05-21 11:30:56.404815	1	sqlmanager.tr_tablecolumns_tr_colname	227439	t	t	f	f	f	t	f	f	f	\r\nDECLARE\r\n squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript\r\n  THEN\r\n    squery = concat('\t\r\n      ALTER TABLE ',NEW.tablename,'\r\n        RENAME COLUMN ',OLD.colname,' TO ',NEW.colname,';\r\n    ');\r\n    \r\n     EXECUTE format(squery);\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n	["colname"]
228325	schemalist_tr_del	sqlmanager.schemalist	2020-05-21 11:30:56.404815	1	sqlmanager.tr_schemalist_tr_del	227433	t	t	f	f	f	f	t	f	f	\r\nDECLARE\r\n    squery varchar;\r\nBEGIN\r\n\r\n  IF not OLD.noscript \r\n  THEN\r\n    squery = concat('\t\r\n        DROP SCHEMA ',OLD.schemaname,';\r\n    ');\r\n    \r\n     EXECUTE format(squery) ;\r\n    \r\n  END IF;\r\n  RETURN OLD;\r\n\r\nEND;\r\n	[]
228527	tablelist_tr_descr	sqlmanager.tablelist	2020-05-21 11:30:56.404815	1	sqlmanager.tr_tablelist_tr_descr	227448	t	t	f	f	f	t	f	f	f	\r\nDECLARE\r\n  squery varchar;\r\nBEGIN\r\n  IF not NEW.noscript and \r\n  \t NEW.descr <> OLD.descr\r\n  THEN\r\n    squery = concat('\t\r\n      COMMENT ON TABLE ', concat(\r\n      \t\t'"',NEW.tableschemaname,'"."',\r\n            NEW.tablename,'"'\r\n        ) ,'\r\n      IS ''', NEW.descr ,''';\r\n    ');\r\n    \r\n     EXECUTE format(squery) ;\r\n    \r\n  END IF;\r\n\r\n  RETURN NEW;\r\n\r\nEND;\r\n	["descr"]
228311	visible_condition_tr	framework.visible_condition	2020-05-21 11:30:56.404815	1	framework.tr_visible_condition_tr	227382	f	t	f	f	t	t	f	f	f	\r\nBEGIN\r\n\r\n\tIF NEW.value is null and NEW.operation not like '%null%'\r\n    THEN\r\n    \tPERFORM raiserror('value is null');\r\n    END IF; \r\n    \r\n\tIF NEW.val_desc is null\r\n    THEN\r\n    \tPERFORM raiserror('val_desc is null');\r\n    END IF;     \r\n    \r\n    RETURN NEW;\r\n\r\nEND;\r\n	[]
228290	actions_tr	framework.actions	2020-05-21 11:30:56.404815	1	framework.tr_actions_tr	227355	t	t	f	f	t	t	f	f	f	\r\nBEGIN\r\n\tIF NEW.act_type in ('API', 'onLoad') and \r\n       NEW.api_type is NULL \r\n    THEN\r\n    \tNEW.api_type = 'get';\t\r\n        NEW.classname = coalesce(NEW.classname,'success');\r\n    END IF;\r\n    \r\n    IF NEW.act_type = 'Save' THEN\r\n    \tNEW.forevery = false;\r\n        NEW.classname = coalesce(NEW.classname,'success');\r\n    END IF; \r\n\t\r\n    IF NEW.act_type in ('Delete', 'Expand') THEN\r\n    \tNEW.forevery = true;\r\n        NEW.classname = coalesce(NEW.classname,'danger');\r\n    END IF; \r\n\r\n    \r\n    IF NEW.act_type = 'Expand' and not (\r\n    \tNEW.act_url like '/list/%' OR \r\n\t\tNEW.act_url like '/getone/%'\r\n      )    \r\n    THEN\r\n    \tPERFORM raiserror('Expand act must have list or getone url');\r\n    END IF;\r\n\tRETURN NEW;\r\nEND;\r\n	[]
\.


--
-- TOC entry 3752 (class 0 OID 0)
-- Dependencies: 293
-- Name: triggers_id_seq; Type: SEQUENCE SET; Schema: sqlmanager; Owner: postgres
--

SELECT pg_catalog.setval('triggers_id_seq', 7, true);


SET search_path = test, pg_catalog;

--
-- TOC entry 3305 (class 0 OID 228041)
-- Dependencies: 294
-- Data for Name: dictionary_for_select; Type: TABLE DATA; Schema: test; Owner: postgres
--

COPY dictionary_for_select (id, dname, onemoreraltionid) FROM stdin;
1	FIrst	\N
2	Second	\N
3	Third	\N
4	Fourth	\N
5	Fifth	\N
\.


--
-- TOC entry 3753 (class 0 OID 0)
-- Dependencies: 295
-- Name: dictionary_for_select_id_seq; Type: SEQUENCE SET; Schema: test; Owner: postgres
--

SELECT pg_catalog.setval('dictionary_for_select_id_seq', 5, true);


--
-- TOC entry 3307 (class 0 OID 228046)
-- Dependencies: 296
-- Data for Name: fel; Type: TABLE DATA; Schema: test; Owner: postgres
--

COPY fel (id, logdata, created) FROM stdin;
\.


--
-- TOC entry 3754 (class 0 OID 0)
-- Dependencies: 297
-- Name: fel_id_seq; Type: SEQUENCE SET; Schema: test; Owner: postgres
--

SELECT pg_catalog.setval('fel_id_seq', 1, false);


--
-- TOC entry 3309 (class 0 OID 228056)
-- Dependencies: 298
-- Data for Name: major_table; Type: TABLE DATA; Schema: test; Owner: postgres
--

COPY major_table (id, text, data, "check", "time", password, color, multiselect, file, typehead, image, images, gallery, label, number, link, texteditor, colorrow, multitypehead_api, multi_select_api, colorpicker, "select", autocomplete, textarea, files, typehead_api, select_api, multitypehead, datetime, html, rate) FROM stdin;
30	\N	\N	\N	\N	d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f	\N	\N	\N	\N	\N	\N	\N	\N	1	{"title" : null, "link" : "/view/1"}	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	0.5
\.


--
-- TOC entry 3755 (class 0 OID 0)
-- Dependencies: 299
-- Name: major_table_id_seq; Type: SEQUENCE SET; Schema: test; Owner: postgres
--

SELECT pg_catalog.setval('major_table_id_seq', 31, true);


--
-- TOC entry 3311 (class 0 OID 228064)
-- Dependencies: 300
-- Data for Name: onemorerelation; Type: TABLE DATA; Schema: test; Owner: postgres
--

COPY onemorerelation (id, oname) FROM stdin;
1	one
2	two
\.


--
-- TOC entry 3756 (class 0 OID 0)
-- Dependencies: 301
-- Name: onemorerelation_id_seq; Type: SEQUENCE SET; Schema: test; Owner: postgres
--

SELECT pg_catalog.setval('onemorerelation_id_seq', 2, true);


--
-- TOC entry 3313 (class 0 OID 228069)
-- Dependencies: 302
-- Data for Name: relate_with_major; Type: TABLE DATA; Schema: test; Owner: postgres
--

COPY relate_with_major (id, somecolumn, major_table_id, created) FROM stdin;
\.


--
-- TOC entry 3757 (class 0 OID 0)
-- Dependencies: 303
-- Name: relate_with_major_id_seq; Type: SEQUENCE SET; Schema: test; Owner: postgres
--

SELECT pg_catalog.setval('relate_with_major_id_seq', 2, true);


--
-- TOC entry 3315 (class 0 OID 228075)
-- Dependencies: 304
-- Data for Name: testmanager; Type: TABLE DATA; Schema: test; Owner: postgres
--

COPY testmanager (id, col5, textfield1, intfield, "boolField") FROM stdin;
\.


SET search_path = framework, pg_catalog;

--
-- TOC entry 2884 (class 2606 OID 228176)
-- Name: act_parametrs_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY act_parametrs
    ADD CONSTRAINT act_parametrs_pkey PRIMARY KEY (id);


--
-- TOC entry 2887 (class 2606 OID 228178)
-- Name: act_visible_condions_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY act_visible_condions
    ADD CONSTRAINT act_visible_condions_pkey PRIMARY KEY (id);


--
-- TOC entry 2890 (class 2606 OID 228180)
-- Name: actions_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY actions
    ADD CONSTRAINT actions_pkey PRIMARY KEY (id);


--
-- TOC entry 2893 (class 2606 OID 228182)
-- Name: actparam_querytypes_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY actparam_querytypes
    ADD CONSTRAINT actparam_querytypes_pkey PRIMARY KEY (id);


--
-- TOC entry 2896 (class 2606 OID 228184)
-- Name: acttypes_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY acttypes
    ADD CONSTRAINT acttypes_pkey PRIMARY KEY (id);


--
-- TOC entry 2899 (class 2606 OID 228186)
-- Name: apicallingmethods_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY apicallingmethods
    ADD CONSTRAINT apicallingmethods_pkey PRIMARY KEY (id);


--
-- TOC entry 2901 (class 2606 OID 228188)
-- Name: apimethods_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY apimethods
    ADD CONSTRAINT apimethods_pkey PRIMARY KEY (id);


--
-- TOC entry 2905 (class 2606 OID 228190)
-- Name: booloper_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY booloper
    ADD CONSTRAINT booloper_pkey PRIMARY KEY (id);


--
-- TOC entry 2907 (class 2606 OID 228192)
-- Name: columntypes_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY columntypes
    ADD CONSTRAINT columntypes_pkey PRIMARY KEY (id);


--
-- TOC entry 2910 (class 2606 OID 228194)
-- Name: compos_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY compos
    ADD CONSTRAINT compos_pkey PRIMARY KEY (id);


--
-- TOC entry 2914 (class 2606 OID 228196)
-- Name: config_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY config
    ADD CONSTRAINT config_pkey PRIMARY KEY (id);


--
-- TOC entry 2916 (class 2606 OID 228198)
-- Name: configsettings_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY configsettings
    ADD CONSTRAINT configsettings_pkey PRIMARY KEY (id);


--
-- TOC entry 2919 (class 2606 OID 228200)
-- Name: defaultval_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY defaultval
    ADD CONSTRAINT defaultval_pkey PRIMARY KEY (id);


--
-- TOC entry 2923 (class 2606 OID 228202)
-- Name: filters_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY filters
    ADD CONSTRAINT filters_pkey PRIMARY KEY (id);


--
-- TOC entry 2926 (class 2606 OID 228204)
-- Name: filtertypes_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY filtertypes
    ADD CONSTRAINT filtertypes_pkey PRIMARY KEY (id);


--
-- TOC entry 2928 (class 2606 OID 228206)
-- Name: functions_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY functions
    ADD CONSTRAINT functions_pkey PRIMARY KEY (id);


--
-- TOC entry 2930 (class 2606 OID 228208)
-- Name: menus_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY menus
    ADD CONSTRAINT menus_pkey PRIMARY KEY (id);


--
-- TOC entry 2933 (class 2606 OID 228210)
-- Name: methodtypes_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY methodtypes
    ADD CONSTRAINT methodtypes_pkey PRIMARY KEY (id);


--
-- TOC entry 2935 (class 2606 OID 228212)
-- Name: notifications_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY notifications
    ADD CONSTRAINT notifications_pkey PRIMARY KEY (id);


--
-- TOC entry 2937 (class 2606 OID 228214)
-- Name: operations_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY operations
    ADD CONSTRAINT operations_pkey PRIMARY KEY (id);


--
-- TOC entry 2940 (class 2606 OID 228216)
-- Name: opertypes_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY opertypes
    ADD CONSTRAINT opertypes_pkey PRIMARY KEY (id);


--
-- TOC entry 2944 (class 2606 OID 228218)
-- Name: paramtypes_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY paramtypes
    ADD CONSTRAINT paramtypes_pkey PRIMARY KEY (id);


--
-- TOC entry 2947 (class 2606 OID 228220)
-- Name: select_condition_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY select_condition
    ADD CONSTRAINT select_condition_pkey PRIMARY KEY (id);


--
-- TOC entry 2949 (class 2606 OID 228222)
-- Name: treeviewtypes_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY treeviewtypes
    ADD CONSTRAINT treeviewtypes_pkey PRIMARY KEY (id);


--
-- TOC entry 2952 (class 2606 OID 228224)
-- Name: views_path_key; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY views
    ADD CONSTRAINT views_path_key UNIQUE (path);


--
-- TOC entry 2954 (class 2606 OID 228226)
-- Name: views_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY views
    ADD CONSTRAINT views_pkey PRIMARY KEY (id);


--
-- TOC entry 2956 (class 2606 OID 228228)
-- Name: viewtypes_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY viewtypes
    ADD CONSTRAINT viewtypes_pkey PRIMARY KEY (id);


--
-- TOC entry 2958 (class 2606 OID 228230)
-- Name: visible_condition_pkey; Type: CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY visible_condition
    ADD CONSTRAINT visible_condition_pkey PRIMARY KEY (id);


SET search_path = sqlmanager, pg_catalog;

--
-- TOC entry 2960 (class 2606 OID 228232)
-- Name: foreignkeys_pkey; Type: CONSTRAINT; Schema: sqlmanager; Owner: postgres
--

ALTER TABLE ONLY foreignkeys
    ADD CONSTRAINT foreignkeys_pkey PRIMARY KEY (id);


--
-- TOC entry 2962 (class 2606 OID 228234)
-- Name: functionargs_pkey; Type: CONSTRAINT; Schema: sqlmanager; Owner: postgres
--

ALTER TABLE ONLY functionargs
    ADD CONSTRAINT functionargs_pkey PRIMARY KEY (id);


--
-- TOC entry 2964 (class 2606 OID 228237)
-- Name: functionslist_pkey; Type: CONSTRAINT; Schema: sqlmanager; Owner: postgres
--

ALTER TABLE ONLY functionslist
    ADD CONSTRAINT functionslist_pkey PRIMARY KEY (id);


--
-- TOC entry 2966 (class 2606 OID 228239)
-- Name: schemalist_id_key; Type: CONSTRAINT; Schema: sqlmanager; Owner: postgres
--

ALTER TABLE ONLY schemalist
    ADD CONSTRAINT schemalist_id_key UNIQUE (id);


--
-- TOC entry 2968 (class 2606 OID 228242)
-- Name: schemaobjects_pkey; Type: CONSTRAINT; Schema: sqlmanager; Owner: postgres
--

ALTER TABLE ONLY schemaobjects
    ADD CONSTRAINT schemaobjects_pkey PRIMARY KEY (id);


--
-- TOC entry 2970 (class 2606 OID 228244)
-- Name: tablecolumns_pkey; Type: CONSTRAINT; Schema: sqlmanager; Owner: postgres
--

ALTER TABLE ONLY tablecolumns
    ADD CONSTRAINT tablecolumns_pkey PRIMARY KEY (id);


--
-- TOC entry 2972 (class 2606 OID 228246)
-- Name: tableindexes_pkey; Type: CONSTRAINT; Schema: sqlmanager; Owner: postgres
--

ALTER TABLE ONLY tableindexes
    ADD CONSTRAINT tableindexes_pkey PRIMARY KEY (id);


--
-- TOC entry 2974 (class 2606 OID 228248)
-- Name: tablelist_pkey; Type: CONSTRAINT; Schema: sqlmanager; Owner: postgres
--

ALTER TABLE ONLY tablelist
    ADD CONSTRAINT tablelist_pkey PRIMARY KEY (id);


--
-- TOC entry 2976 (class 2606 OID 228250)
-- Name: triggers_pkey; Type: CONSTRAINT; Schema: sqlmanager; Owner: postgres
--

ALTER TABLE ONLY triggers
    ADD CONSTRAINT triggers_pkey PRIMARY KEY (id);


SET search_path = test, pg_catalog;

--
-- TOC entry 2978 (class 2606 OID 228252)
-- Name: dictionary_for_select_pkey; Type: CONSTRAINT; Schema: test; Owner: postgres
--

ALTER TABLE ONLY dictionary_for_select
    ADD CONSTRAINT dictionary_for_select_pkey PRIMARY KEY (id);


--
-- TOC entry 2980 (class 2606 OID 228254)
-- Name: fel_pkey; Type: CONSTRAINT; Schema: test; Owner: postgres
--

ALTER TABLE ONLY fel
    ADD CONSTRAINT fel_pkey PRIMARY KEY (id);


--
-- TOC entry 2983 (class 2606 OID 228261)
-- Name: major_table_pkey; Type: CONSTRAINT; Schema: test; Owner: postgres
--

ALTER TABLE ONLY major_table
    ADD CONSTRAINT major_table_pkey PRIMARY KEY (id);


--
-- TOC entry 2985 (class 2606 OID 228263)
-- Name: onemorerelation_pkey; Type: CONSTRAINT; Schema: test; Owner: postgres
--

ALTER TABLE ONLY onemorerelation
    ADD CONSTRAINT onemorerelation_pkey PRIMARY KEY (id);


--
-- TOC entry 2987 (class 2606 OID 228265)
-- Name: relate_with_major_pkey; Type: CONSTRAINT; Schema: test; Owner: postgres
--

ALTER TABLE ONLY relate_with_major
    ADD CONSTRAINT relate_with_major_pkey PRIMARY KEY (id);


SET search_path = framework, pg_catalog;

--
-- TOC entry 2882 (class 1259 OID 228267)
-- Name: act_parametrs_idx; Type: INDEX; Schema: framework; Owner: postgres
--

CREATE INDEX act_parametrs_idx ON act_parametrs USING btree (actionid);


--
-- TOC entry 2885 (class 1259 OID 228268)
-- Name: act_visible_condions_idx; Type: INDEX; Schema: framework; Owner: postgres
--

CREATE INDEX act_visible_condions_idx ON act_visible_condions USING btree (actionid);


--
-- TOC entry 2888 (class 1259 OID 228269)
-- Name: actions_idx; Type: INDEX; Schema: framework; Owner: postgres
--

CREATE INDEX actions_idx ON actions USING btree (viewid);


--
-- TOC entry 2891 (class 1259 OID 228270)
-- Name: actparam_querytypes_aqname_key; Type: INDEX; Schema: framework; Owner: postgres
--

CREATE UNIQUE INDEX actparam_querytypes_aqname_key ON actparam_querytypes USING btree (aqname);


--
-- TOC entry 2894 (class 1259 OID 228271)
-- Name: acttypes_actname_key; Type: INDEX; Schema: framework; Owner: postgres
--

CREATE UNIQUE INDEX acttypes_actname_key ON acttypes USING btree (actname);


--
-- TOC entry 2897 (class 1259 OID 228272)
-- Name: apicallingmethods_aname_key; Type: INDEX; Schema: framework; Owner: postgres
--

CREATE UNIQUE INDEX apicallingmethods_aname_key ON apicallingmethods USING btree (aname);


--
-- TOC entry 2902 (class 1259 OID 228273)
-- Name: apimethods_val_key; Type: INDEX; Schema: framework; Owner: postgres
--

CREATE UNIQUE INDEX apimethods_val_key ON apimethods USING btree (val);


--
-- TOC entry 2903 (class 1259 OID 228274)
-- Name: booloper_bname_key; Type: INDEX; Schema: framework; Owner: postgres
--

CREATE UNIQUE INDEX booloper_bname_key ON booloper USING btree (bname);


--
-- TOC entry 2908 (class 1259 OID 228275)
-- Name: columntypes_typename_key; Type: INDEX; Schema: framework; Owner: postgres
--

CREATE UNIQUE INDEX columntypes_typename_key ON columntypes USING btree (typename);


--
-- TOC entry 2911 (class 1259 OID 228276)
-- Name: config_idx_uniq_title; Type: INDEX; Schema: framework; Owner: postgres
--

CREATE UNIQUE INDEX config_idx_uniq_title ON config USING btree (viewid, title);


--
-- TOC entry 2912 (class 1259 OID 228277)
-- Name: config_idx_view; Type: INDEX; Schema: framework; Owner: postgres
--

CREATE INDEX config_idx_view ON config USING btree (viewid);


--
-- TOC entry 2917 (class 1259 OID 228278)
-- Name: defaultval_idxconfd; Type: INDEX; Schema: framework; Owner: postgres
--

CREATE INDEX defaultval_idxconfd ON defaultval USING btree (configid);


--
-- TOC entry 2920 (class 1259 OID 228279)
-- Name: filters_idx; Type: INDEX; Schema: framework; Owner: postgres
--

CREATE UNIQUE INDEX filters_idx ON filters USING btree (title, viewid);


--
-- TOC entry 2921 (class 1259 OID 228280)
-- Name: filters_idx1; Type: INDEX; Schema: framework; Owner: postgres
--

CREATE INDEX filters_idx1 ON filters USING btree (viewid);


--
-- TOC entry 2924 (class 1259 OID 228281)
-- Name: filtertypes_ftname_key; Type: INDEX; Schema: framework; Owner: postgres
--

CREATE UNIQUE INDEX filtertypes_ftname_key ON filtertypes USING btree (ftname);


--
-- TOC entry 2931 (class 1259 OID 228282)
-- Name: methodtypes_methotypename_key; Type: INDEX; Schema: framework; Owner: postgres
--

CREATE UNIQUE INDEX methodtypes_methotypename_key ON methodtypes USING btree (methotypename);


--
-- TOC entry 2938 (class 1259 OID 228283)
-- Name: operations_value_key; Type: INDEX; Schema: framework; Owner: postgres
--

CREATE UNIQUE INDEX operations_value_key ON operations USING btree (value);


--
-- TOC entry 2941 (class 1259 OID 228284)
-- Name: orgs_id_key; Type: INDEX; Schema: framework; Owner: postgres
--

CREATE UNIQUE INDEX orgs_id_key ON orgs USING btree (id);


--
-- TOC entry 2942 (class 1259 OID 228285)
-- Name: orgtypes_id_key; Type: INDEX; Schema: framework; Owner: postgres
--

CREATE UNIQUE INDEX orgtypes_id_key ON orgtypes USING btree (id);


--
-- TOC entry 2945 (class 1259 OID 228286)
-- Name: select_condition_idx_sc; Type: INDEX; Schema: framework; Owner: postgres
--

CREATE INDEX select_condition_idx_sc ON select_condition USING btree (configid);


--
-- TOC entry 2950 (class 1259 OID 228287)
-- Name: users_id_key; Type: INDEX; Schema: framework; Owner: postgres
--

CREATE UNIQUE INDEX users_id_key ON users USING btree (id);


SET search_path = test, pg_catalog;

--
-- TOC entry 2981 (class 1259 OID 228288)
-- Name: major_table_idx_1; Type: INDEX; Schema: test; Owner: postgres
--

CREATE INDEX major_table_idx_1 ON major_table USING btree (text, color);


SET search_path = framework, pg_catalog;

--
-- TOC entry 3019 (class 2620 OID 228289)
-- Name: act_parametrs_tr; Type: TRIGGER; Schema: framework; Owner: postgres
--

CREATE TRIGGER act_parametrs_tr BEFORE INSERT OR UPDATE ON act_parametrs FOR EACH ROW EXECUTE PROCEDURE tr_act_parametrs_tr();


--
-- TOC entry 3020 (class 2620 OID 228290)
-- Name: actions_tr; Type: TRIGGER; Schema: framework; Owner: postgres
--

CREATE TRIGGER actions_tr BEFORE INSERT OR UPDATE ON actions FOR EACH ROW EXECUTE PROCEDURE tr_actions_tr();


--
-- TOC entry 3021 (class 2620 OID 228291)
-- Name: actions_tr_del; Type: TRIGGER; Schema: framework; Owner: postgres
--

CREATE TRIGGER actions_tr_del BEFORE DELETE ON actions FOR EACH ROW EXECUTE PROCEDURE tr_actions_tr_del();


--
-- TOC entry 3022 (class 2620 OID 228292)
-- Name: config_tr; Type: TRIGGER; Schema: framework; Owner: postgres
--

CREATE TRIGGER config_tr BEFORE UPDATE ON config FOR EACH ROW EXECUTE PROCEDURE tr_config_tr();


--
-- TOC entry 3758 (class 0 OID 0)
-- Dependencies: 3022
-- Name: TRIGGER config_tr ON config; Type: COMMENT; Schema: framework; Owner: postgres
--

COMMENT ON TRIGGER config_tr ON config IS 'config checks';


--
-- TOC entry 3023 (class 2620 OID 228293)
-- Name: config_tr_del; Type: TRIGGER; Schema: framework; Owner: postgres
--

CREATE TRIGGER config_tr_del BEFORE DELETE ON config FOR EACH ROW EXECUTE PROCEDURE tr_config_tr_del();


--
-- TOC entry 3024 (class 2620 OID 228294)
-- Name: config_tr_ins; Type: TRIGGER; Schema: framework; Owner: postgres
--

CREATE TRIGGER config_tr_ins BEFORE INSERT ON config FOR EACH ROW EXECUTE PROCEDURE tr_config_tr_ins();


--
-- TOC entry 3025 (class 2620 OID 228295)
-- Name: dialog_messages_tr_ins; Type: TRIGGER; Schema: framework; Owner: postgres
--

CREATE TRIGGER dialog_messages_tr_ins BEFORE INSERT ON dialog_messages FOR EACH ROW EXECUTE PROCEDURE tr_dialog_messages_tr_ins();


--
-- TOC entry 3026 (class 2620 OID 228296)
-- Name: dialogs_tr_edit; Type: TRIGGER; Schema: framework; Owner: postgres
--

CREATE TRIGGER dialogs_tr_edit BEFORE UPDATE ON dialogs FOR EACH ROW EXECUTE PROCEDURE tr_dialogs_tr_edit();


--
-- TOC entry 3027 (class 2620 OID 228297)
-- Name: dialogs_tr_ins; Type: TRIGGER; Schema: framework; Owner: postgres
--

CREATE TRIGGER dialogs_tr_ins BEFORE INSERT ON dialogs FOR EACH ROW EXECUTE PROCEDURE tr_dialogs_tr_ins();


--
-- TOC entry 3028 (class 2620 OID 228298)
-- Name: dialogs_tr_ins_after; Type: TRIGGER; Schema: framework; Owner: postgres
--

CREATE TRIGGER dialogs_tr_ins_after AFTER INSERT ON dialogs FOR EACH ROW EXECUTE PROCEDURE tr_dialogs_tr_ins_after();


--
-- TOC entry 3029 (class 2620 OID 228299)
-- Name: filters_tr; Type: TRIGGER; Schema: framework; Owner: postgres
--

CREATE TRIGGER filters_tr BEFORE INSERT OR UPDATE ON filters FOR EACH ROW EXECUTE PROCEDURE tr_filters_tr();


--
-- TOC entry 3030 (class 2620 OID 228300)
-- Name: menus_tr; Type: TRIGGER; Schema: framework; Owner: postgres
--

CREATE TRIGGER menus_tr BEFORE INSERT OR UPDATE OF menutype, ismainmenu ON menus FOR EACH ROW EXECUTE PROCEDURE tr_menu_tr();


--
-- TOC entry 3031 (class 2620 OID 228301)
-- Name: menus_tr_del; Type: TRIGGER; Schema: framework; Owner: postgres
--

CREATE TRIGGER menus_tr_del BEFORE DELETE ON menus FOR EACH ROW EXECUTE PROCEDURE tr_menus_tr_del();


--
-- TOC entry 3032 (class 2620 OID 228302)
-- Name: select_condition_tr; Type: TRIGGER; Schema: framework; Owner: postgres
--

CREATE TRIGGER select_condition_tr BEFORE INSERT OR UPDATE ON select_condition FOR EACH ROW EXECUTE PROCEDURE tr_select_condition_tr();

ALTER TABLE select_condition DISABLE TRIGGER select_condition_tr;


--
-- TOC entry 3033 (class 2620 OID 228303)
-- Name: spapi_tr; Type: TRIGGER; Schema: framework; Owner: postgres
--

CREATE TRIGGER spapi_tr BEFORE INSERT OR UPDATE ON spapi FOR EACH ROW EXECUTE PROCEDURE tr_spapi_tr();


--
-- TOC entry 3034 (class 2620 OID 228304)
-- Name: trees_add_org; Type: TRIGGER; Schema: framework; Owner: postgres
--

CREATE TRIGGER trees_add_org AFTER INSERT OR UPDATE OF userid ON trees FOR EACH ROW EXECUTE PROCEDURE tr_trees_add_org();


--
-- TOC entry 3035 (class 2620 OID 228305)
-- Name: trees_tr_del; Type: TRIGGER; Schema: framework; Owner: postgres
--

CREATE TRIGGER trees_tr_del BEFORE DELETE ON trees FOR EACH ROW EXECUTE PROCEDURE tr_trees_tr_del();


--
-- TOC entry 3036 (class 2620 OID 228306)
-- Name: treesbranches_tr; Type: TRIGGER; Schema: framework; Owner: postgres
--

CREATE TRIGGER treesbranches_tr BEFORE INSERT OR UPDATE OF viewid, compoid, ismain ON treesbranches FOR EACH ROW EXECUTE PROCEDURE tr_treesbranch_check();


--
-- TOC entry 3037 (class 2620 OID 228307)
-- Name: users_tr; Type: TRIGGER; Schema: framework; Owner: postgres
--

CREATE TRIGGER users_tr BEFORE INSERT OR UPDATE OF password, roles, orgs, userid ON users FOR EACH ROW EXECUTE PROCEDURE tr_user_check();


--
-- TOC entry 3038 (class 2620 OID 228308)
-- Name: views_tr_check; Type: TRIGGER; Schema: framework; Owner: postgres
--

CREATE TRIGGER views_tr_check BEFORE INSERT OR UPDATE ON views FOR EACH ROW EXECUTE PROCEDURE tr_view_tr_check();


--
-- TOC entry 3039 (class 2620 OID 228309)
-- Name: views_tr_del; Type: TRIGGER; Schema: framework; Owner: postgres
--

CREATE TRIGGER views_tr_del BEFORE DELETE ON views FOR EACH ROW EXECUTE PROCEDURE tr_views_tr_del();


--
-- TOC entry 3040 (class 2620 OID 228310)
-- Name: views_tr_ins_after; Type: TRIGGER; Schema: framework; Owner: postgres
--

CREATE TRIGGER views_tr_ins_after AFTER INSERT ON views FOR EACH ROW EXECUTE PROCEDURE tr_views_tr_ins_after();


--
-- TOC entry 3041 (class 2620 OID 228311)
-- Name: visible_condition_tr; Type: TRIGGER; Schema: framework; Owner: postgres
--

CREATE TRIGGER visible_condition_tr BEFORE INSERT OR UPDATE ON visible_condition FOR EACH ROW EXECUTE PROCEDURE tr_visible_condition_tr();

ALTER TABLE visible_condition DISABLE TRIGGER visible_condition_tr;


SET search_path = reports, pg_catalog;

--
-- TOC entry 3042 (class 2620 OID 228312)
-- Name: reportlist_tr; Type: TRIGGER; Schema: reports; Owner: postgres
--

CREATE TRIGGER reportlist_tr BEFORE UPDATE OF title, path, template, functitle, section ON reportlist FOR EACH ROW EXECUTE PROCEDURE tr_reportlist_tr();


--
-- TOC entry 3043 (class 2620 OID 228313)
-- Name: reportlist_tr_ins; Type: TRIGGER; Schema: reports; Owner: postgres
--

CREATE TRIGGER reportlist_tr_ins BEFORE INSERT ON reportlist FOR EACH ROW EXECUTE PROCEDURE tr_reportlist_tr_ins();


--
-- TOC entry 3044 (class 2620 OID 228314)
-- Name: reportparams_tr; Type: TRIGGER; Schema: reports; Owner: postgres
--

CREATE TRIGGER reportparams_tr BEFORE INSERT OR UPDATE ON reportparams FOR EACH ROW EXECUTE PROCEDURE tr_reportparams_tr();


SET search_path = sqlmanager, pg_catalog;

--
-- TOC entry 3045 (class 2620 OID 228315)
-- Name: foreignkeys_tr_del; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER foreignkeys_tr_del BEFORE DELETE ON foreignkeys FOR EACH ROW EXECUTE PROCEDURE tr_foreignkeys_tr_del();


--
-- TOC entry 3046 (class 2620 OID 228316)
-- Name: foreignkeys_tr_ins; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER foreignkeys_tr_ins BEFORE INSERT ON foreignkeys FOR EACH ROW EXECUTE PROCEDURE tr_foreignkeys_tr_ins();


--
-- TOC entry 3047 (class 2620 OID 228317)
-- Name: foreignkeys_tr_maincol; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER foreignkeys_tr_maincol BEFORE UPDATE OF parentablename, maincol, parentcol ON foreignkeys FOR EACH ROW EXECUTE PROCEDURE tr_foreignkeys_tr_maincol();


--
-- TOC entry 3048 (class 2620 OID 228318)
-- Name: foreignkeys_tr_title; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER foreignkeys_tr_title BEFORE UPDATE OF ftitle ON foreignkeys FOR EACH ROW EXECUTE PROCEDURE tr_foreignkeys_tr_title();


--
-- TOC entry 3049 (class 2620 OID 228319)
-- Name: functionslist_tr_args; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER functionslist_tr_args BEFORE INSERT OR UPDATE OF args ON functionslist FOR EACH ROW EXECUTE PROCEDURE tr_functionslist_tr_args();


--
-- TOC entry 3050 (class 2620 OID 228320)
-- Name: functionslist_tr_del; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER functionslist_tr_del BEFORE DELETE ON functionslist FOR EACH ROW EXECUTE PROCEDURE tr_functionslist_tr_del();


--
-- TOC entry 3053 (class 2620 OID 228521)
-- Name: functionslist_tr_desc; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER functionslist_tr_desc BEFORE UPDATE OF descr ON functionslist FOR EACH ROW EXECUTE PROCEDURE tr_functionslist_tr_desc();


--
-- TOC entry 3051 (class 2620 OID 228322)
-- Name: functionslist_tr_dll; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER functionslist_tr_dll BEFORE UPDATE OF dll ON functionslist FOR EACH ROW EXECUTE PROCEDURE tr_functionslist_tr_dll();

ALTER TABLE functionslist DISABLE TRIGGER functionslist_tr_dll;


--
-- TOC entry 3052 (class 2620 OID 228323)
-- Name: functionslist_tr_ins; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER functionslist_tr_ins BEFORE INSERT ON functionslist FOR EACH ROW EXECUTE PROCEDURE tr_functionslist_tr_ins();


--
-- TOC entry 3054 (class 2620 OID 228524)
-- Name: functionslist_tr_upd; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER functionslist_tr_upd BEFORE UPDATE OF functionschema, functiontitle, fullname, descr, dll, returntype, definition ON functionslist FOR EACH ROW EXECUTE PROCEDURE tr_functionslist_tr_upd();


--
-- TOC entry 3055 (class 2620 OID 228325)
-- Name: schemalist_tr_del; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER schemalist_tr_del BEFORE DELETE ON schemalist FOR EACH ROW EXECUTE PROCEDURE tr_schemalist_tr_del();


--
-- TOC entry 3056 (class 2620 OID 228326)
-- Name: schemalist_tr_descr; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER schemalist_tr_descr BEFORE UPDATE OF schemadescr ON schemalist FOR EACH ROW EXECUTE PROCEDURE tr_schemalist_tr_descr();


--
-- TOC entry 3057 (class 2620 OID 228327)
-- Name: schemalist_tr_ins; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER schemalist_tr_ins BEFORE INSERT ON schemalist FOR EACH ROW EXECUTE PROCEDURE tr_schemalist_tr_ins();


--
-- TOC entry 3058 (class 2620 OID 228328)
-- Name: schemalist_tr_name; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER schemalist_tr_name BEFORE UPDATE OF schemaname ON schemalist FOR EACH ROW EXECUTE PROCEDURE tr_schemalist_tr_name();


--
-- TOC entry 3059 (class 2620 OID 228329)
-- Name: tablecolumns_tr_accur; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER tablecolumns_tr_accur BEFORE UPDATE OF accur ON tablecolumns FOR EACH ROW EXECUTE PROCEDURE tr_tablecolumns_tr_accur();


--
-- TOC entry 3060 (class 2620 OID 228330)
-- Name: tablecolumns_tr_coldesc; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER tablecolumns_tr_coldesc BEFORE UPDATE OF coldesc ON tablecolumns FOR EACH ROW EXECUTE PROCEDURE tr_tablecolumns_tr_coldesc();


--
-- TOC entry 3061 (class 2620 OID 228331)
-- Name: tablecolumns_tr_colname; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER tablecolumns_tr_colname BEFORE UPDATE OF colname ON tablecolumns FOR EACH ROW EXECUTE PROCEDURE tr_tablecolumns_tr_colname();


--
-- TOC entry 3062 (class 2620 OID 228332)
-- Name: tablecolumns_tr_defval; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER tablecolumns_tr_defval BEFORE UPDATE OF defval ON tablecolumns FOR EACH ROW EXECUTE PROCEDURE tr_tablecolumns_tr_defval();


--
-- TOC entry 3063 (class 2620 OID 228333)
-- Name: tablecolumns_tr_del; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER tablecolumns_tr_del BEFORE DELETE ON tablecolumns FOR EACH ROW EXECUTE PROCEDURE tr_tablecolumns_tr_del();


--
-- TOC entry 3064 (class 2620 OID 228334)
-- Name: tablecolumns_tr_ins; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER tablecolumns_tr_ins BEFORE INSERT ON tablecolumns FOR EACH ROW EXECUTE PROCEDURE tr_tablecolumns_tr_ins();


--
-- TOC entry 3065 (class 2620 OID 228335)
-- Name: tablecolumns_tr_notnull; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER tablecolumns_tr_notnull BEFORE UPDATE OF "notnull" ON tablecolumns FOR EACH ROW EXECUTE PROCEDURE tr_tablecolumns_tr_notnull();


--
-- TOC entry 3066 (class 2620 OID 228336)
-- Name: tablecolumns_tr_size; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER tablecolumns_tr_size BEFORE UPDATE OF size ON tablecolumns FOR EACH ROW EXECUTE PROCEDURE tr_tablecolumns_tr_size();


--
-- TOC entry 3067 (class 2620 OID 228337)
-- Name: tablecolumns_tr_type; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER tablecolumns_tr_type BEFORE UPDATE OF coltype ON tablecolumns FOR EACH ROW EXECUTE PROCEDURE tr_tablecolumns_tr_type();


--
-- TOC entry 3068 (class 2620 OID 228338)
-- Name: tablecolumns_tr_uniq; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER tablecolumns_tr_uniq BEFORE UPDATE OF uniq ON tablecolumns FOR EACH ROW EXECUTE PROCEDURE tr_tablecolumns_tr_uniq();


--
-- TOC entry 3069 (class 2620 OID 228339)
-- Name: tablelist_tr_del; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER tablelist_tr_del BEFORE DELETE ON tablelist FOR EACH ROW EXECUTE PROCEDURE tr_tablelist_tr_del();


--
-- TOC entry 3072 (class 2620 OID 228527)
-- Name: tablelist_tr_descr; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER tablelist_tr_descr BEFORE UPDATE OF descr ON tablelist FOR EACH ROW EXECUTE PROCEDURE tr_tablelist_tr_descr();


--
-- TOC entry 3070 (class 2620 OID 228341)
-- Name: tablelist_tr_ins; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER tablelist_tr_ins BEFORE INSERT ON tablelist FOR EACH ROW EXECUTE PROCEDURE tr_tablelist_tr_ins();


--
-- TOC entry 3071 (class 2620 OID 228342)
-- Name: tablelist_tr_name; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER tablelist_tr_name BEFORE UPDATE OF tablename ON tablelist FOR EACH ROW EXECUTE PROCEDURE tr_tablelist_tr_name();


--
-- TOC entry 3073 (class 2620 OID 228343)
-- Name: triggers_tr_beforafter; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER triggers_tr_beforafter BEFORE UPDATE OF onbefore, onafter ON triggers FOR EACH ROW EXECUTE PROCEDURE tr_triggers_tr_beforafter();


--
-- TOC entry 3074 (class 2620 OID 228344)
-- Name: triggers_tr_def; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER triggers_tr_def BEFORE INSERT OR UPDATE OF functiondef ON triggers FOR EACH ROW EXECUTE PROCEDURE tr_triggers_tr_def();


--
-- TOC entry 3075 (class 2620 OID 228345)
-- Name: triggers_tr_def_upd; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER triggers_tr_def_upd BEFORE UPDATE OF functiondef ON triggers FOR EACH ROW EXECUTE PROCEDURE tr_triggers_tr_def_upd();


--
-- TOC entry 3076 (class 2620 OID 228346)
-- Name: triggers_tr_del; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER triggers_tr_del BEFORE DELETE ON triggers FOR EACH ROW EXECUTE PROCEDURE tr_trigger_del();


--
-- TOC entry 3077 (class 2620 OID 228347)
-- Name: triggers_tr_enabled; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER triggers_tr_enabled BEFORE UPDATE OF enables ON triggers FOR EACH ROW EXECUTE PROCEDURE tr_triggers_tr_enabled();


--
-- TOC entry 3078 (class 2620 OID 228348)
-- Name: triggers_tr_ins; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER triggers_tr_ins BEFORE INSERT ON triggers FOR EACH ROW EXECUTE PROCEDURE tr_triggers_tr_ins();


--
-- TOC entry 3080 (class 2620 OID 228594)
-- Name: triggers_tr_iudt; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER triggers_tr_iudt BEFORE UPDATE OF oninsert, onupdate, ondelete, ontruncate, fields ON triggers FOR EACH ROW EXECUTE PROCEDURE tr_triggers_tr_iudt();


--
-- TOC entry 3079 (class 2620 OID 228350)
-- Name: triggers_tr_title; Type: TRIGGER; Schema: sqlmanager; Owner: postgres
--

CREATE TRIGGER triggers_tr_title BEFORE UPDATE OF triggername ON triggers FOR EACH ROW EXECUTE PROCEDURE tr_triggers_tr_title();


SET search_path = test, pg_catalog;

--
-- TOC entry 3082 (class 2620 OID 228618)
-- Name: major_table_tr; Type: TRIGGER; Schema: test; Owner: postgres
--

CREATE TRIGGER major_table_tr BEFORE INSERT OR UPDATE OF text ON major_table FOR EACH ROW EXECUTE PROCEDURE tr_major_table_tr();


--
-- TOC entry 3081 (class 2620 OID 228352)
-- Name: major_table_tr_2; Type: TRIGGER; Schema: test; Owner: postgres
--

CREATE TRIGGER major_table_tr_2 BEFORE UPDATE ON major_table FOR EACH ROW EXECUTE PROCEDURE tr_major_table_tr1();


SET search_path = framework, pg_catalog;

--
-- TOC entry 2988 (class 2606 OID 228353)
-- Name: act_parametrs_fk_action; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY act_parametrs
    ADD CONSTRAINT act_parametrs_fk_action FOREIGN KEY (actionid) REFERENCES actions(id);


--
-- TOC entry 2989 (class 2606 OID 228358)
-- Name: act_parametrs_fk_confg; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY act_parametrs
    ADD CONSTRAINT act_parametrs_fk_confg FOREIGN KEY (val_desc) REFERENCES config(id);


--
-- TOC entry 2990 (class 2606 OID 228363)
-- Name: act_parametrs_fk_qt; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY act_parametrs
    ADD CONSTRAINT act_parametrs_fk_qt FOREIGN KEY (query_type) REFERENCES actparam_querytypes(aqname);


--
-- TOC entry 2991 (class 2606 OID 228368)
-- Name: act_visible_condions_fk; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY act_visible_condions
    ADD CONSTRAINT act_visible_condions_fk FOREIGN KEY (val_desc) REFERENCES config(id);


--
-- TOC entry 2992 (class 2606 OID 228373)
-- Name: act_visible_condions_fk1; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY act_visible_condions
    ADD CONSTRAINT act_visible_condions_fk1 FOREIGN KEY (operation) REFERENCES operations(value);


--
-- TOC entry 2993 (class 2606 OID 228378)
-- Name: act_visible_condions_fk_act; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY act_visible_condions
    ADD CONSTRAINT act_visible_condions_fk_act FOREIGN KEY (actionid) REFERENCES actions(id);


--
-- TOC entry 2994 (class 2606 OID 228383)
-- Name: actions_fk; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY actions
    ADD CONSTRAINT actions_fk FOREIGN KEY (viewid) REFERENCES views(id);


--
-- TOC entry 2995 (class 2606 OID 228388)
-- Name: actions_fk_actype; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY actions
    ADD CONSTRAINT actions_fk_actype FOREIGN KEY (act_type) REFERENCES acttypes(actname);


--
-- TOC entry 2996 (class 2606 OID 228393)
-- Name: actions_fk_apicalinme; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY actions
    ADD CONSTRAINT actions_fk_apicalinme FOREIGN KEY (api_method) REFERENCES apicallingmethods(aname);


--
-- TOC entry 2997 (class 2606 OID 228398)
-- Name: actions_fk_apimeth; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY actions
    ADD CONSTRAINT actions_fk_apimeth FOREIGN KEY (api_type) REFERENCES methodtypes(methotypename);


--
-- TOC entry 2998 (class 2606 OID 228403)
-- Name: config_fk_ct; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY config
    ADD CONSTRAINT config_fk_ct FOREIGN KEY (type) REFERENCES columntypes(typename);


--
-- TOC entry 2999 (class 2606 OID 228408)
-- Name: config_fk_view; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY config
    ADD CONSTRAINT config_fk_view FOREIGN KEY (viewid) REFERENCES views(id);


--
-- TOC entry 3000 (class 2606 OID 228413)
-- Name: defaultval_fk_ao; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY defaultval
    ADD CONSTRAINT defaultval_fk_ao FOREIGN KEY (act) REFERENCES operations(value);


--
-- TOC entry 3001 (class 2606 OID 228418)
-- Name: defaultval_fk_bo; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY defaultval
    ADD CONSTRAINT defaultval_fk_bo FOREIGN KEY (bool) REFERENCES booloper(bname);


--
-- TOC entry 3002 (class 2606 OID 228423)
-- Name: defaultval_fk_config; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY defaultval
    ADD CONSTRAINT defaultval_fk_config FOREIGN KEY (configid) REFERENCES config(id);


--
-- TOC entry 3003 (class 2606 OID 228428)
-- Name: filters_fk_c; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY filters
    ADD CONSTRAINT filters_fk_c FOREIGN KEY (val_desc) REFERENCES config(id);


--
-- TOC entry 3004 (class 2606 OID 228433)
-- Name: filters_fk_ft; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY filters
    ADD CONSTRAINT filters_fk_ft FOREIGN KEY (type) REFERENCES filtertypes(ftname);


--
-- TOC entry 3005 (class 2606 OID 228438)
-- Name: filters_fk_vi; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY filters
    ADD CONSTRAINT filters_fk_vi FOREIGN KEY (viewid) REFERENCES views(id);


--
-- TOC entry 3006 (class 2606 OID 228443)
-- Name: mainmenu_fk_mn; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY mainmenu
    ADD CONSTRAINT mainmenu_fk_mn FOREIGN KEY (menuid) REFERENCES menus(id);


--
-- TOC entry 3007 (class 2606 OID 228448)
-- Name: notifications_fk_userid; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY notifications
    ADD CONSTRAINT notifications_fk_userid FOREIGN KEY (for_userid) REFERENCES users(id);


--
-- TOC entry 3008 (class 2606 OID 228453)
-- Name: orgs_fk_ot; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY orgs
    ADD CONSTRAINT orgs_fk_ot FOREIGN KEY (orgtype) REFERENCES orgtypes(id);


--
-- TOC entry 3009 (class 2606 OID 228458)
-- Name: select_condition_fk; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY select_condition
    ADD CONSTRAINT select_condition_fk FOREIGN KEY (operation) REFERENCES operations(value);


--
-- TOC entry 3010 (class 2606 OID 228463)
-- Name: select_condition_fk_config; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY select_condition
    ADD CONSTRAINT select_condition_fk_config FOREIGN KEY (configid) REFERENCES config(id);


--
-- TOC entry 3011 (class 2606 OID 228468)
-- Name: select_condition_fk_valconf; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY select_condition
    ADD CONSTRAINT select_condition_fk_valconf FOREIGN KEY (val_desc) REFERENCES config(id);


--
-- TOC entry 3012 (class 2606 OID 228473)
-- Name: visible_condition_fk_config; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY visible_condition
    ADD CONSTRAINT visible_condition_fk_config FOREIGN KEY (configid) REFERENCES config(id);


--
-- TOC entry 3013 (class 2606 OID 228478)
-- Name: visible_condition_fk_oper; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY visible_condition
    ADD CONSTRAINT visible_condition_fk_oper FOREIGN KEY (operation) REFERENCES operations(value);


--
-- TOC entry 3014 (class 2606 OID 228483)
-- Name: visible_condition_fk_v; Type: FK CONSTRAINT; Schema: framework; Owner: postgres
--

ALTER TABLE ONLY visible_condition
    ADD CONSTRAINT visible_condition_fk_v FOREIGN KEY (val_desc) REFERENCES config(id);


SET search_path = test, pg_catalog;

--
-- TOC entry 3015 (class 2606 OID 228488)
-- Name: dictionary_for_select_fk_or; Type: FK CONSTRAINT; Schema: test; Owner: postgres
--

ALTER TABLE ONLY dictionary_for_select
    ADD CONSTRAINT dictionary_for_select_fk_or FOREIGN KEY (onemoreraltionid) REFERENCES onemorerelation(id);


--
-- TOC entry 3016 (class 2606 OID 228493)
-- Name: major_table_seldic; Type: FK CONSTRAINT; Schema: test; Owner: postgres
--

ALTER TABLE ONLY major_table
    ADD CONSTRAINT major_table_seldic FOREIGN KEY ("select") REFERENCES dictionary_for_select(id);


--
-- TOC entry 3017 (class 2606 OID 228498)
-- Name: major_table_th; Type: FK CONSTRAINT; Schema: test; Owner: postgres
--

ALTER TABLE ONLY major_table
    ADD CONSTRAINT major_table_th FOREIGN KEY (typehead) REFERENCES dictionary_for_select(id);


--
-- TOC entry 3018 (class 2606 OID 228503)
-- Name: relate_with_major_tab_id; Type: FK CONSTRAINT; Schema: test; Owner: postgres
--

ALTER TABLE ONLY relate_with_major
    ADD CONSTRAINT relate_with_major_tab_id FOREIGN KEY (major_table_id) REFERENCES major_table(id);


--
-- TOC entry 3323 (class 0 OID 0)
-- Dependencies: 12
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


-- Completed on 2020-05-21 16:57:43

--
-- PostgreSQL database dump complete
--

